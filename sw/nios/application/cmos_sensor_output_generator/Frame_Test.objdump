
Frame_Test.elf:     file format elf32-littlenios2
Frame_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00017ce0 memsz 0x00017ce0 flags r-x
    LOAD off    0x00018d00 vaddr 0x10117d00 paddr 0x1011985c align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x0001b3b8 vaddr 0x1011b3b8 paddr 0x1011b3b8 align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017230  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000088c  10117474  10117474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  10117d00  1011985c  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  1011b3b8  1011b3b8  0001b3b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  1011b53c  1011b53c  0001a85c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001a85c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001400  00000000  00000000  0001a880  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034e4d  00000000  00000000  0001bc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cf41  00000000  00000000  00050acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010a5a  00000000  00000000  0005da0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003480  00000000  00000000  0006e468  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000489e  00000000  00000000  000718e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001debc  00000000  00000000  00076186  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00094044  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d30  00000000  00000000  000940a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009a2c2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009a2c5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009a2d1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009a2d2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0009a2d3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009a2de  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0009a2e9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0009a2f4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000029  00000000  00000000  0009a2fe  2**0
                  CONTENTS, READONLY
 26 .jdi          0000512a  00000000  00000000  0009a327  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0029a4ab  00000000  00000000  0009f451  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10117474 l    d  .rodata	00000000 .rodata
10117d00 l    d  .rwdata	00000000 .rwdata
1011b3b8 l    d  .bss	00000000 .bss
1011b53c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Guilhem/Lab4.0_Camera/sw/nios/application/Frame_Test_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
10100290 l     F .text	0000003c max
101002cc l     F .text	000000c8 write_frame_width_reg
101008ac l     F .text	00000034 is_idle
10100394 l     F .text	000000cc write_frame_height_reg
10100460 l     F .text	000000cc write_frame_frame_blank_reg
1010052c l     F .text	000000cc write_frame_line_blank_reg
101005f8 l     F .text	000000cc write_line_line_blank_reg
101006c4 l     F .text	000000cc write_line_frame_blank_reg
10100790 l     F .text	0000002c read_frame_width_reg
101007bc l     F .text	00000030 read_frame_height_reg
101007ec l     F .text	00000030 read_frame_frame_blank_reg
1010081c l     F .text	00000030 read_frame_line_blank_reg
1010084c l     F .text	00000030 read_line_line_blank_reg
1010087c l     F .text	00000030 read_line_frame_blank_reg
00000000 l    df *ABS*	00000000 Camera_function.c
00000000 l    df *ABS*	00000000 LCD_function.c
00000000 l    df *ABS*	00000000 Memory_Access.c
10117898 l     O .rodata	00000010 __func__.3796
101178a8 l     O .rodata	00000016 __func__.3808
00000000 l    df *ABS*	00000000 function_i2c.c
10101f3c l     F .text	00000154 TRDB_D5M_log2
10102090 l     F .text	0000004c TRDB_D5M_shift_amount
101020dc l     F .text	00000060 TRDB_D5M_READ
1010213c l     F .text	0000007c TRDB_D5M_WRITE
00000000 l    df *ABS*	00000000 main.c
101025b0 l     F .text	00000154 TRDB_D5M_log2
10102704 l     F .text	0000004c TRDB_D5M_shift_amount
10102750 l     F .text	00000060 TRDB_D5M_READ
101027b0 l     F .text	0000007c TRDB_D5M_WRITE
00000000 l    df *ABS*	00000000 i2c.c
10102890 l     F .text	00000034 i2c_usleep
101028c4 l     F .text	00000044 wait_end_of_transfer
10102908 l     F .text	00000070 set_data_control
10102978 l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10103678 l     F .text	00000008 __fp_unlock
1010368c l     F .text	0000019c __sinit.part.1
10103828 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
10117d00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
10105490 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
101179fe l     O .rodata	00000010 zeroes.4389
10117a0e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
10117a1e l     O .rodata	00000010 zeroes.4404
10109dc0 l     F .text	000000bc __sbprintf
10117a2e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
1010a09c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
1011854c l     O .rwdata	00000020 lc_ctype_charset
1011852c l     O .rwdata	00000020 lc_message_charset
1011856c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10117a5c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10117b90 l     O .rodata	00000010 blanks.4332
10117b80 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
1010f388 l     F .text	000000fc __sprint_r.part.0
10117bb0 l     O .rodata	00000010 blanks.4348
10117ba0 l     O .rodata	00000010 zeroes.4349
10110914 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10114154 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10114260 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
101142c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
101145c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
101146a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1011480c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
101148f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
10114acc l     F .text	0000003c alt_get_errno
10114b08 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
10114f88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10119804 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
101153a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
101154dc l     F .text	00000034 alt_dev_reg
1011874c l     O .rwdata	00001060 jtag_uart_0
101197ac l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
101157c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
101159cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10119810 l     O .rwdata	00000009 hcinfo.2538
1011981c l     O .rwdata	0000000a hcinfo.2551
10119828 l     O .rwdata	00000009 hcinfo.2560
10119834 l     O .rwdata	0000000a hcinfo.2573
10119840 l     O .rwdata	0000000a hcinfo.2586
1011984c l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10116754 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10116e84 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
1011b400 g     O .bss	00000004 alt_instruction_exception_handler
10105328 g     F .text	00000018 putchar
10100ba8 g     F .text	00000074 Camera_Acquisition_Module_SETUP_Length_Frame
1010d284 g     F .text	00000074 _mprec_log10
1010d370 g     F .text	0000008c __any_on
1010bee8 g     F .text	00000054 _isatty_r
10117a68 g     O .rodata	00000028 __mprec_tinytens
10114a08 g     F .text	0000007c alt_main
10105340 g     F .text	000000c0 _puts_r
1011b43c g     O .bss	00000100 alt_irq
1010c018 g     F .text	00000060 _lseek_r
1011985c g       *ABS*	00000000 __flash_rwdata_start
1010b924 g     F .text	000000ac __sflags
10112c80 g     F .text	00000088 .hidden __eqdf2
1010be8c g     F .text	0000005c _gettimeofday_r
1011b53c g       *ABS*	00000000 __alt_heap_start
1010de40 g     F .text	0000005c _kill_r
101052e4 g     F .text	0000003c printf
10110df4 g     F .text	0000009c _wcrtomb_r
1010dc08 g     F .text	00000084 _signal_r
10105870 g     F .text	0000005c __sseek
101039c8 g     F .text	00000010 __sinit
101109d0 g     F .text	00000140 __swbuf_r
1010bf3c g     F .text	0000007c _setlocale_r
10103830 g     F .text	00000068 __sfmoreglue
10114aa8 g     F .text	00000024 __malloc_unlock
1010155c g     F .text	0000005c LCD_Write_Command
10116004 g     F .text	0000011c alt_hostfs_open
1010c2a4 g     F .text	0000015c memmove
10101064 g     F .text	000001cc Capture_Image_Computer
101015b8 g     F .text	0000005c LCD_Write_Data
101039b0 g     F .text	00000018 _cleanup
1010c400 g     F .text	000000a8 _Balloc
10112d08 g     F .text	000000dc .hidden __gtdf2
10116fc4 g     F .text	00000024 altera_nios2_gen2_irq_init
10102aec g     F .text	0000012c i2c_write
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10101e28 g     F .text	00000114 Quick_Test_Memory_Map
10104480 g     F .text	0000005c _fstat_r
1011b3bc g     O .bss	00000004 errno
101057ec g     F .text	00000008 __seofread
10102344 g     F .text	00000048 init_I2C
1010e14c g     F .text	0000123c ___svfiprintf_internal_r
10101420 g     F .text	0000013c Extract_Colors
1011b3ec g     O .bss	00000004 alt_argv
101217d4 g       *ABS*	00000000 _gp
10115378 g     F .text	00000030 usleep
101143ac g     F .text	00000020 getpid
1011b42c g     O .bss	00000010 cmos_sensor_output_generator
101185cc g     O .rwdata	00000180 alt_fd_list
1011623c g     F .text	00000068 alt_hostfs_seek
10105320 g     F .text	00000008 _putchar_r
101168f4 g     F .text	00000090 alt_find_dev
1010c15c g     F .text	00000148 memcpy
10103680 g     F .text	0000000c _cleanup_r
10113f6c g     F .text	000000dc .hidden __floatsidf
10102d60 g     F .text	00000194 i2c_write_array
10116a8c g     F .text	00000080 alt_fs_reg
10116f48 g     F .text	0000007c alt_io_redirect
10112de4 g     F .text	000000f4 .hidden __ltdf2
10117474 g       *ABS*	00000000 __DTOR_END__
10105400 g     F .text	00000014 puts
10117078 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1010db28 g     F .text	00000074 __fpclassifyd
1010d1e0 g     F .text	000000a4 __ratio
101108f8 g     F .text	0000001c __vfiprintf_internal
10115bc4 g     F .text	0000021c altera_avalon_jtag_uart_read
101052b4 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101009d4 g     F .text	00000108 cmos_sensor_output_generator_configure
10103194 g     F .text	00000064 .hidden __udivsi3
101145fc g     F .text	000000a4 isatty
1010dc8c g     F .text	000000bc _raise_r
10103250 g     F .text	00000068 __assert_func
10117ab8 g     O .rodata	000000c8 __mprec_tens
10100ccc g     F .text	000000d0 Camera_Acquisition_Module_Display_Registers
1010bfb8 g     F .text	0000000c __locale_charset
1011b3d8 g     O .bss	00000008 alt_timezone
1010191c g     F .text	00000430 LCD_Configuration
10116fe8 g     F .text	00000090 alt_icache_flush
1011b3c8 g     O .bss	00000004 __malloc_top_pad
101016ac g     F .text	0000019c Fill_Memory_RGBG
1010de9c g     F .text	00000004 _getpid_r
101197e4 g     O .rwdata	00000004 __mb_cur_max
1010244c g     F .text	00000164 Camera_Configuration
1010bfe8 g     F .text	0000000c _localeconv_r
1010c80c g     F .text	0000003c __i2b
1010b9d0 g     F .text	000004bc __sfvwrite_r
1010dd48 g     F .text	000000a8 __sigtramp_r
10105680 g     F .text	00000054 _sbrk_r
10116164 g     F .text	0000006c alt_hostfs_read
10100e74 g     F .text	00000034 Start_CMOS_Generator
1010d564 g     F .text	00000060 _read_r
101197fc g     O .rwdata	00000004 alt_max_fd
101032cc g     F .text	000000f0 _fclose_r
10103648 g     F .text	00000030 fflush
1011b3c4 g     O .bss	00000004 __malloc_max_sbrked_mem
10101848 g     F .text	000000d4 Fill_Memory_0_1
10111aec g     F .text	000008ac .hidden __adddf3
1010cf88 g     F .text	0000010c __b2d
101115b4 g     F .text	00000538 .hidden __umoddi3
10114934 g     F .text	000000d4 lseek
101197d4 g     O .rwdata	00000004 _global_impure_ptr
1010d5c4 g     F .text	00000564 _realloc_r
1011b53c g       *ABS*	00000000 __bss_end
10116d94 g     F .text	000000f0 alt_iic_isr_register
10115270 g     F .text	00000108 alt_tick
1011103c g     F .text	00000578 .hidden __udivdi3
10110d50 g     F .text	00000024 _fputwc_r
10117a90 g     O .rodata	00000028 __mprec_bigtens
1010c5f0 g     F .text	00000104 __s2b
1010a084 g     F .text	00000018 abort
10114048 g     F .text	000000a8 .hidden __floatunsidf
1010ccc8 g     F .text	00000060 __mcmp
101039e8 g     F .text	00000018 __fp_lock_all
10116d48 g     F .text	0000004c alt_ic_irq_enabled
10100ea8 g     F .text	00000034 Stop_CMOS_Generator
101151d4 g     F .text	0000009c alt_alarm_stop
10100b14 g     F .text	00000038 cmos_sensor_output_generator_stop
1011b3fc g     O .bss	00000004 alt_irq_active
10104020 g     F .text	00000444 _fseeko_r
10116120 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
101185a4 g     O .rwdata	00000028 alt_dev_null
10100b4c g     F .text	0000005c Camera_Acquisition_Module_SETUP_Address_Memory
1011670c g     F .text	00000048 alt_dcache_flush_all
1010c6f4 g     F .text	00000068 __hi0bits
10113eec g     F .text	00000080 .hidden __fixdfsi
10100adc g     F .text	00000038 cmos_sensor_output_generator_start
1011985c g       *ABS*	00000000 __ram_rwdata_end
101197f4 g     O .rwdata	00000008 alt_dev_list
101153e4 g     F .text	000000f8 write
1010d3fc g     F .text	000000a0 _putc_r
10117d00 g       *ABS*	00000000 __ram_rodata_end
101142fc g     F .text	000000b0 fstat
10103ba8 g     F .text	00000024 fprintf
101146dc g     F .text	00000130 kill
101029dc g     F .text	0000002c i2c_inst
10112de4 g     F .text	000000f4 .hidden __ledf2
1010ca40 g     F .text	00000140 __pow5mult
1011b3d4 g     O .bss	00000004 __nlocale_changed
1010f49c g     F .text	0000145c ___vfiprintf_internal_r
101031f8 g     F .text	00000058 .hidden __umodsi3
1011b53c g       *ABS*	00000000 end
10104464 g     F .text	0000001c fseeko
10104004 g     F .text	0000001c fseek
10115700 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10117474 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
101140f0 g     F .text	00000064 .hidden __clzsi2
10115de0 g     F .text	00000224 altera_avalon_jtag_uart_write
101039d8 g     F .text	00000004 __sfp_lock_acquire
1010c078 g     F .text	000000e4 memchr
10107bac g     F .text	000021f8 ___vfprintf_internal_r
101056d4 g     F .text	00000058 _sprintf_r
10103cf0 g     F .text	00000310 _free_r
10114d20 g     F .text	0000022c alt_printf
101008e0 g     F .text	00000078 cmos_sensor_output_generator_inst
1010bfc4 g     F .text	00000010 __locale_mb_cur_max
101172f4 g     F .text	00000180 __call_exitprocs
1011b3d0 g     O .bss	00000004 __mlocale_changed
10101614 g     F .text	00000098 Fill_Memory
101197dc g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
1011b3f4 g     O .bss	00000004 _alt_tick_rate
1010542c g     F .text	00000064 rand
101013ac g     F .text	00000074 Convert_Pixels
1010cb80 g     F .text	00000148 __lshift
1011b3f8 g     O .bss	00000004 _alt_nticks
1010de04 g     F .text	00000018 signal
10114fc4 g     F .text	000000fc read
10100d9c g     F .text	000000d8 Configure_CMOS_Generator
10115548 g     F .text	00000054 alt_sys_init
1010df7c g     F .text	000001d0 __ssprint_r
10105254 g     F .text	00000060 _open_r
10102a6c g     F .text	00000080 i2c_configure
101171dc g     F .text	00000118 __register_exitproc
1010c848 g     F .text	000001f8 __multiply
10115a6c g     F .text	00000068 altera_avalon_jtag_uart_close
10117d00 g       *ABS*	00000000 __ram_rwdata_start
10117474 g       *ABS*	00000000 __ram_rodata_start
1011b404 g     O .bss	00000028 __malloc_current_mallinfo
1010d094 g     F .text	0000014c __d2b
1010238c g     F .text	000000c0 Write_and_Read_I2C
1011559c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10116b0c g     F .text	000000a4 alt_get_fd
101165b4 g     F .text	00000158 alt_busy_sleep
1011b3b8 g     O .bss	00000004 i2c
1010a030 g     F .text	00000054 _close_r
10100c74 g     F .text	00000058 Camera_Acquisition_Module_Stop
10117160 g     F .text	0000007c memcmp
1011565c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1011b53c g       *ABS*	00000000 __alt_stack_base
101156ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10104664 g     F .text	000000cc _fwrite_r
10109edc g     F .text	00000154 __swsetup_r
10112398 g     F .text	000008e8 .hidden __divdf3
10103898 g     F .text	00000118 __sfp
1010d2f8 g     F .text	00000078 __copybits
10118124 g     O .rwdata	00000408 __malloc_av_
101039e4 g     F .text	00000004 __sinit_lock_release
10112ed8 g     F .text	00000718 .hidden __muldf3
10105798 g     F .text	00000054 __sread
10116984 g     F .text	00000108 alt_find_file
10116790 g     F .text	000000a4 alt_dev_llist_insert
101021b8 g     F .text	00000088 trdb_d5m_write
10114a84 g     F .text	00000024 __malloc_lock
10103b80 g     F .text	00000028 _fprintf_r
10115124 g     F .text	000000b0 sbrk
1010596c g     F .text	000021d8 ___svfprintf_internal_r
101035ec g     F .text	0000005c _fflush_r
10110b28 g     F .text	000000c4 _calloc_r
101143cc g     F .text	000001f4 gettimeofday
10100fe4 g     F .text	00000080 Test_Camera_Memory
10103b68 g     F .text	00000018 fopen
1011b3b8 g       *ABS*	00000000 __bss_start
1010512c g     F .text	00000128 memset
1010282c g     F .text	00000064 main
1011b3f0 g     O .bss	00000004 alt_envp
1011b3c0 g     O .bss	00000004 __malloc_max_total_mem
101155fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10102c18 g     F .text	00000148 i2c_read
10110b10 g     F .text	00000018 __swbuf
10105414 g     F .text	00000018 srand
101058cc g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
101033bc g     F .text	00000014 fclose
1010a29c g     F .text	00001688 _dtoa_r
10104920 g     F .text	0000080c _malloc_r
10110f50 g     F .text	00000030 __ascii_wctomb
10107b44 g     F .text	00000050 time
10119800 g     O .rwdata	00000004 alt_errno
10103a18 g     F .text	00000020 _fiprintf_r
1010de1c g     F .text	00000010 _init_signal
101044dc g     F .text	000000c4 _fwalk
1010d49c g     F .text	000000c8 putc
1010309c g     F .text	00000084 .hidden __divsi3
10103bcc g     F .text	00000124 _malloc_trim_r
10117474 g       *ABS*	00000000 __CTOR_END__
1010dea0 g     F .text	000000dc strcmp
10117474 g       *ABS*	00000000 __flash_rodata_start
10117474 g       *ABS*	00000000 __DTOR_LIST__
10101230 g     F .text	00000138 Test_Function_Generator
10101368 g     F .text	00000044 delay
10112c80 g     F .text	00000088 .hidden __nedf2
10101d4c g     F .text	000000dc Test_Memory_Map
10115510 g     F .text	00000038 alt_irq_init
101150c0 g     F .text	00000064 alt_release_fd
1010572c g     F .text	0000006c sprintf
10117bc0 g     O .rodata	00000100 .hidden __clz_tab
1011b3cc g     O .bss	00000004 _PathLocale
10117114 g     F .text	00000014 atexit
10109e7c g     F .text	00000060 _write_r
1010bff4 g     F .text	00000018 setlocale
101197d8 g     O .rwdata	00000004 _impure_ptr
1011b3e8 g     O .bss	00000004 alt_argc
101033d0 g     F .text	0000021c __sflush_r
10116894 g     F .text	00000060 _do_dtors
1010bfe0 g     F .text	00000008 __locale_cjk_lang
10100edc g     F .text	00000108 Display_Configuration_Generator
10104000 g     F .text	00000004 _fseek_r
10102a08 g     F .text	00000064 i2c_init
101054ac g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
1010cf24 g     F .text	00000064 __ulp
10103a00 g     F .text	00000018 __fp_unlock_all
101197ec g     O .rwdata	00000008 alt_fs_list
101161d0 g     F .text	0000006c alt_hostfs_write
1011b3e0 g     O .bss	00000008 alt_resettime
10100020 g       *ABS*	00000000 __ram_exceptions_start
1010c00c g     F .text	0000000c localeconv
10116be4 g     F .text	00000050 alt_ic_isr_register
10104730 g     F .text	00000034 fwrite
1011985c g       *ABS*	00000000 _edata
1011b53c g       *ABS*	00000000 _end
10110bec g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
10100958 g     F .text	0000007c cmos_sensor_output_generator_init
10115ad4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10102240 g     F .text	000000a0 trdb_d5m_read
10116cbc g     F .text	0000008c alt_ic_irq_disable
101057f4 g     F .text	0000007c __swrite
101197e0 g     O .rwdata	00000004 __malloc_trim_threshold
1010bfd4 g     F .text	0000000c __locale_msgcharset
10117128 g     F .text	00000038 exit
10103a38 g     F .text	0000003c fiprintf
10107b94 g     F .text	00000018 _vfiprintf_r
101045a0 g     F .text	000000c4 _fwalk_reent
1010cd28 g     F .text	000001fc __mdiff
10103120 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
101039dc g     F .text	00000004 __sfp_lock_release
10103a74 g     F .text	000000f4 _fopen_r
1011428c g     F .text	00000034 _exit
10116488 g     F .text	0000012c alt_alarm_start
10110fdc g     F .text	00000060 .hidden __muldi3
10104764 g     F .text	000001bc __smakebuf_r
10102ef4 g     F .text	000001a8 i2c_read_array
101058d4 g     F .text	00000098 strlen
1010db9c g     F .text	0000006c _init_signal_r
10114bcc g     F .text	00000154 open
10112d08 g     F .text	000000dc .hidden __gedf2
10114f4c g     F .text	0000003c alt_putchar
101032b8 g     F .text	00000014 __assert
101197e8 g     O .rwdata	00000004 __wctomb
1010f484 g     F .text	00000018 __sprint_r
10116bb0 g     F .text	00000034 alt_icache_flush_all
101022e0 g     F .text	00000064 Test_i2c
10119858 g     O .rwdata	00000004 alt_priority_mask
10116c34 g     F .text	00000088 alt_ic_irq_enable
10109da4 g     F .text	0000001c __vfprintf_internal
10110f80 g     F .text	0000005c _wctomb_r
101135f0 g     F .text	000008fc .hidden __subdf3
1010c75c g     F .text	000000b0 __lo0bits
10119808 g     O .rwdata	00000008 alt_alarm_list
10116834 g     F .text	00000060 _do_ctors
1010de2c g     F .text	00000014 __sigtramp
10110e90 g     F .text	000000c0 wcrtomb
10100c1c g     F .text	00000058 Camera_Acquisition_Module_Start
10114190 g     F .text	000000d0 close
10114874 g     F .text	00000084 alt_load
10110d74 g     F .text	00000080 fputwc
1010ddf0 g     F .text	00000014 raise
101039e0 g     F .text	00000004 __sinit_lock_acquire
1010c4d0 g     F .text	00000120 __multadd
1010c4a8 g     F .text	00000028 _Bfree
101162a4 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <_gp+0xfffde830>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	008404b4 	movhi	r2,4114
10100140:	10ad0f04 	addi	r2,r2,-19396
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	008404b4 	movhi	r2,4114
10100158:	10ad0f04 	addi	r2,r2,-19396
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <_gp+0xfffde958>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <_gp+0xfffde94c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70b17 	ldw	r2,-25556(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70b17 	ldw	r2,-25556(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <_gp+0xfffdea74>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	068404b4 	movhi	gp,4114
    ori gp, gp, %lo(_gp)
10100260:	d685f514 	ori	gp,gp,6100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	10acee14 	ori	r2,r2,46008

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18ed4f14 	ori	r3,r3,46396

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <_gp+0xfffdeaa4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	01148740 	call	10114874 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	0114a080 	call	10114a08 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <_gp+0xfffdeab8>

10100290 <max>:
/*
 * max
 *
 * Computes the max between two 32-bit unsigned numbers.
 */
static uint32_t max(uint32_t a, uint32_t b) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13ffe15 	stw	r4,-8(fp)
101002a0:	e17fff15 	stw	r5,-4(fp)
    if (a > b) {
101002a4:	e0bffe17 	ldw	r2,-8(fp)
101002a8:	e0ffff17 	ldw	r3,-4(fp)
101002ac:	1880022e 	bgeu	r3,r2,101002b8 <max+0x28>
        return a;
101002b0:	e0bffe17 	ldw	r2,-8(fp)
101002b4:	00000106 	br	101002bc <max+0x2c>
    } else {
        return b;
101002b8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
101002bc:	e037883a 	mov	sp,fp
101002c0:	df000017 	ldw	fp,0(sp)
101002c4:	dec00104 	addi	sp,sp,4
101002c8:	f800283a 	ret

101002cc <write_frame_width_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_WIDTH register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_width_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_width) {
101002cc:	defffa04 	addi	sp,sp,-24
101002d0:	dfc00515 	stw	ra,20(sp)
101002d4:	df000415 	stw	fp,16(sp)
101002d8:	df000404 	addi	fp,sp,16
101002dc:	e13ffe15 	stw	r4,-8(fp)
101002e0:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101002e4:	e0bffe17 	ldw	r2,-8(fp)
101002e8:	10c00217 	ldw	r3,8(r2)
101002ec:	e0bffe17 	ldw	r2,-8(fp)
101002f0:	10800317 	ldw	r2,12(r2)
101002f4:	100b883a 	mov	r5,r2
101002f8:	1809883a 	mov	r4,r3
101002fc:	01002900 	call	10100290 <max>
10100300:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN <= frame_width;
10100304:	e0bfff17 	ldw	r2,-4(fp)
10100308:	108000e8 	cmpgeui	r2,r2,3
1010030c:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_width <= max_reg_value;
10100310:	e0bfff17 	ldw	r2,-4(fp)
10100314:	e0fffc17 	ldw	r3,-16(fp)
10100318:	1885403a 	cmpgeu	r2,r3,r2
1010031c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100320:	e0bffd03 	ldbu	r2,-12(fp)
10100324:	10000826 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100328:	e0bffd43 	ldbu	r2,-11(fp)
1010032c:	10000626 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100330:	e13ffe17 	ldw	r4,-8(fp)
10100334:	01008ac0 	call	101008ac <is_idle>
10100338:	10803fcc 	andi	r2,r2,255
1010033c:	10000226 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100340:	00800044 	movi	r2,1
10100344:	00000106 	br	1010034c <write_frame_width_reg+0x80>
10100348:	0005883a 	mov	r2,zero
1010034c:	e0bffd85 	stb	r2,-10(fp)
10100350:	e0bffd83 	ldbu	r2,-10(fp)
10100354:	1080004c 	andi	r2,r2,1
10100358:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010035c:	e0bffd83 	ldbu	r2,-10(fp)
10100360:	10000626 	beq	r2,zero,1010037c <write_frame_width_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_WIDTH(dev->base, frame_width);
10100364:	e0bffe17 	ldw	r2,-8(fp)
10100368:	10800017 	ldw	r2,0(r2)
1010036c:	e0ffff17 	ldw	r3,-4(fp)
10100370:	10c00035 	stwio	r3,0(r2)
        return true;
10100374:	00800044 	movi	r2,1
10100378:	00000106 	br	10100380 <write_frame_width_reg+0xb4>
    } else {
        return false;
1010037c:	0005883a 	mov	r2,zero
    }
}
10100380:	e037883a 	mov	sp,fp
10100384:	dfc00117 	ldw	ra,4(sp)
10100388:	df000017 	ldw	fp,0(sp)
1010038c:	dec00204 	addi	sp,sp,8
10100390:	f800283a 	ret

10100394 <write_frame_height_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_HEIGHT register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_height_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_height) {
10100394:	defffa04 	addi	sp,sp,-24
10100398:	dfc00515 	stw	ra,20(sp)
1010039c:	df000415 	stw	fp,16(sp)
101003a0:	df000404 	addi	fp,sp,16
101003a4:	e13ffe15 	stw	r4,-8(fp)
101003a8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101003ac:	e0bffe17 	ldw	r2,-8(fp)
101003b0:	10c00217 	ldw	r3,8(r2)
101003b4:	e0bffe17 	ldw	r2,-8(fp)
101003b8:	10800317 	ldw	r2,12(r2)
101003bc:	100b883a 	mov	r5,r2
101003c0:	1809883a 	mov	r4,r3
101003c4:	01002900 	call	10100290 <max>
101003c8:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN <= frame_height;
101003cc:	e0bfff17 	ldw	r2,-4(fp)
101003d0:	108000e8 	cmpgeui	r2,r2,3
101003d4:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_height <= max_reg_value;
101003d8:	e0bfff17 	ldw	r2,-4(fp)
101003dc:	e0fffc17 	ldw	r3,-16(fp)
101003e0:	1885403a 	cmpgeu	r2,r3,r2
101003e4:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101003e8:	e0bffd03 	ldbu	r2,-12(fp)
101003ec:	10000826 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f0:	e0bffd43 	ldbu	r2,-11(fp)
101003f4:	10000626 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f8:	e13ffe17 	ldw	r4,-8(fp)
101003fc:	01008ac0 	call	101008ac <is_idle>
10100400:	10803fcc 	andi	r2,r2,255
10100404:	10000226 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
10100408:	00800044 	movi	r2,1
1010040c:	00000106 	br	10100414 <write_frame_height_reg+0x80>
10100410:	0005883a 	mov	r2,zero
10100414:	e0bffd85 	stb	r2,-10(fp)
10100418:	e0bffd83 	ldbu	r2,-10(fp)
1010041c:	1080004c 	andi	r2,r2,1
10100420:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100424:	e0bffd83 	ldbu	r2,-10(fp)
10100428:	10000726 	beq	r2,zero,10100448 <write_frame_height_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_HEIGHT(dev->base, frame_height);
1010042c:	e0bffe17 	ldw	r2,-8(fp)
10100430:	10800017 	ldw	r2,0(r2)
10100434:	10800104 	addi	r2,r2,4
10100438:	e0ffff17 	ldw	r3,-4(fp)
1010043c:	10c00035 	stwio	r3,0(r2)
        return true;
10100440:	00800044 	movi	r2,1
10100444:	00000106 	br	1010044c <write_frame_height_reg+0xb8>
    } else {
        return false;
10100448:	0005883a 	mov	r2,zero
    }
}
1010044c:	e037883a 	mov	sp,fp
10100450:	dfc00117 	ldw	ra,4(sp)
10100454:	df000017 	ldw	fp,0(sp)
10100458:	dec00204 	addi	sp,sp,8
1010045c:	f800283a 	ret

10100460 <write_frame_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_frame_blank) {
10100460:	defffa04 	addi	sp,sp,-24
10100464:	dfc00515 	stw	ra,20(sp)
10100468:	df000415 	stw	fp,16(sp)
1010046c:	df000404 	addi	fp,sp,16
10100470:	e13ffe15 	stw	r4,-8(fp)
10100474:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100478:	e0bffe17 	ldw	r2,-8(fp)
1010047c:	10c00217 	ldw	r3,8(r2)
10100480:	e0bffe17 	ldw	r2,-8(fp)
10100484:	10800317 	ldw	r2,12(r2)
10100488:	100b883a 	mov	r5,r2
1010048c:	1809883a 	mov	r4,r3
10100490:	01002900 	call	10100290 <max>
10100494:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN <= frame_frame_blank;
10100498:	e0bfff17 	ldw	r2,-4(fp)
1010049c:	108000e8 	cmpgeui	r2,r2,3
101004a0:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_frame_blank <= max_reg_value;
101004a4:	e0bfff17 	ldw	r2,-4(fp)
101004a8:	e0fffc17 	ldw	r3,-16(fp)
101004ac:	1885403a 	cmpgeu	r2,r3,r2
101004b0:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101004b4:	e0bffd03 	ldbu	r2,-12(fp)
101004b8:	10000826 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004bc:	e0bffd43 	ldbu	r2,-11(fp)
101004c0:	10000626 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004c4:	e13ffe17 	ldw	r4,-8(fp)
101004c8:	01008ac0 	call	101008ac <is_idle>
101004cc:	10803fcc 	andi	r2,r2,255
101004d0:	10000226 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004d4:	00800044 	movi	r2,1
101004d8:	00000106 	br	101004e0 <write_frame_frame_blank_reg+0x80>
101004dc:	0005883a 	mov	r2,zero
101004e0:	e0bffd85 	stb	r2,-10(fp)
101004e4:	e0bffd83 	ldbu	r2,-10(fp)
101004e8:	1080004c 	andi	r2,r2,1
101004ec:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101004f0:	e0bffd83 	ldbu	r2,-10(fp)
101004f4:	10000726 	beq	r2,zero,10100514 <write_frame_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_FRAME_BLANK(dev->base, frame_frame_blank);
101004f8:	e0bffe17 	ldw	r2,-8(fp)
101004fc:	10800017 	ldw	r2,0(r2)
10100500:	10800204 	addi	r2,r2,8
10100504:	e0ffff17 	ldw	r3,-4(fp)
10100508:	10c00035 	stwio	r3,0(r2)
        return true;
1010050c:	00800044 	movi	r2,1
10100510:	00000106 	br	10100518 <write_frame_frame_blank_reg+0xb8>
    } else {
        return false;
10100514:	0005883a 	mov	r2,zero
    }
}
10100518:	e037883a 	mov	sp,fp
1010051c:	dfc00117 	ldw	ra,4(sp)
10100520:	df000017 	ldw	fp,0(sp)
10100524:	dec00204 	addi	sp,sp,8
10100528:	f800283a 	ret

1010052c <write_frame_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_line_blank) {
1010052c:	defffa04 	addi	sp,sp,-24
10100530:	dfc00515 	stw	ra,20(sp)
10100534:	df000415 	stw	fp,16(sp)
10100538:	df000404 	addi	fp,sp,16
1010053c:	e13ffe15 	stw	r4,-8(fp)
10100540:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100544:	e0bffe17 	ldw	r2,-8(fp)
10100548:	10c00217 	ldw	r3,8(r2)
1010054c:	e0bffe17 	ldw	r2,-8(fp)
10100550:	10800317 	ldw	r2,12(r2)
10100554:	100b883a 	mov	r5,r2
10100558:	1809883a 	mov	r4,r3
1010055c:	01002900 	call	10100290 <max>
10100560:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN <= frame_line_blank;
10100564:	e0bfff17 	ldw	r2,-4(fp)
10100568:	108000e8 	cmpgeui	r2,r2,3
1010056c:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_line_blank <= max_reg_value;
10100570:	e0bfff17 	ldw	r2,-4(fp)
10100574:	e0fffc17 	ldw	r3,-16(fp)
10100578:	1885403a 	cmpgeu	r2,r3,r2
1010057c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100580:	e0bffd03 	ldbu	r2,-12(fp)
10100584:	10000826 	beq	r2,zero,101005a8 <write_frame_line_blank_reg+0x7c>
10100588:	e0bffd43 	ldbu	r2,-11(fp)
1010058c:	10000626 	beq	r2,zero,101005a8 <write_frame_line_blank_reg+0x7c>
10100590:	e13ffe17 	ldw	r4,-8(fp)
10100594:	01008ac0 	call	101008ac <is_idle>
10100598:	10803fcc 	andi	r2,r2,255
1010059c:	10000226 	beq	r2,zero,101005a8 <write_frame_line_blank_reg+0x7c>
101005a0:	00800044 	movi	r2,1
101005a4:	00000106 	br	101005ac <write_frame_line_blank_reg+0x80>
101005a8:	0005883a 	mov	r2,zero
101005ac:	e0bffd85 	stb	r2,-10(fp)
101005b0:	e0bffd83 	ldbu	r2,-10(fp)
101005b4:	1080004c 	andi	r2,r2,1
101005b8:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101005bc:	e0bffd83 	ldbu	r2,-10(fp)
101005c0:	10000726 	beq	r2,zero,101005e0 <write_frame_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_LINE_BLANK(dev->base, frame_line_blank);
101005c4:	e0bffe17 	ldw	r2,-8(fp)
101005c8:	10800017 	ldw	r2,0(r2)
101005cc:	10800304 	addi	r2,r2,12
101005d0:	e0ffff17 	ldw	r3,-4(fp)
101005d4:	10c00035 	stwio	r3,0(r2)
        return true;
101005d8:	00800044 	movi	r2,1
101005dc:	00000106 	br	101005e4 <write_frame_line_blank_reg+0xb8>
    } else {
        return false;
101005e0:	0005883a 	mov	r2,zero
    }
}
101005e4:	e037883a 	mov	sp,fp
101005e8:	dfc00117 	ldw	ra,4(sp)
101005ec:	df000017 	ldw	fp,0(sp)
101005f0:	dec00204 	addi	sp,sp,8
101005f4:	f800283a 	ret

101005f8 <write_line_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_line_blank) {
101005f8:	defffa04 	addi	sp,sp,-24
101005fc:	dfc00515 	stw	ra,20(sp)
10100600:	df000415 	stw	fp,16(sp)
10100604:	df000404 	addi	fp,sp,16
10100608:	e13ffe15 	stw	r4,-8(fp)
1010060c:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100610:	e0bffe17 	ldw	r2,-8(fp)
10100614:	10c00217 	ldw	r3,8(r2)
10100618:	e0bffe17 	ldw	r2,-8(fp)
1010061c:	10800317 	ldw	r2,12(r2)
10100620:	100b883a 	mov	r5,r2
10100624:	1809883a 	mov	r4,r3
10100628:	01002900 	call	10100290 <max>
1010062c:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN <= line_line_blank;
10100630:	e0bfff17 	ldw	r2,-4(fp)
10100634:	108000e8 	cmpgeui	r2,r2,3
10100638:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_line_blank <= max_reg_value;
1010063c:	e0bfff17 	ldw	r2,-4(fp)
10100640:	e0fffc17 	ldw	r3,-16(fp)
10100644:	1885403a 	cmpgeu	r2,r3,r2
10100648:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
1010064c:	e0bffd03 	ldbu	r2,-12(fp)
10100650:	10000826 	beq	r2,zero,10100674 <write_line_line_blank_reg+0x7c>
10100654:	e0bffd43 	ldbu	r2,-11(fp)
10100658:	10000626 	beq	r2,zero,10100674 <write_line_line_blank_reg+0x7c>
1010065c:	e13ffe17 	ldw	r4,-8(fp)
10100660:	01008ac0 	call	101008ac <is_idle>
10100664:	10803fcc 	andi	r2,r2,255
10100668:	10000226 	beq	r2,zero,10100674 <write_line_line_blank_reg+0x7c>
1010066c:	00800044 	movi	r2,1
10100670:	00000106 	br	10100678 <write_line_line_blank_reg+0x80>
10100674:	0005883a 	mov	r2,zero
10100678:	e0bffd85 	stb	r2,-10(fp)
1010067c:	e0bffd83 	ldbu	r2,-10(fp)
10100680:	1080004c 	andi	r2,r2,1
10100684:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100688:	e0bffd83 	ldbu	r2,-10(fp)
1010068c:	10000726 	beq	r2,zero,101006ac <write_line_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_LINE_BLANK(dev->base, line_line_blank);
10100690:	e0bffe17 	ldw	r2,-8(fp)
10100694:	10800017 	ldw	r2,0(r2)
10100698:	10800404 	addi	r2,r2,16
1010069c:	e0ffff17 	ldw	r3,-4(fp)
101006a0:	10c00035 	stwio	r3,0(r2)
        return true;
101006a4:	00800044 	movi	r2,1
101006a8:	00000106 	br	101006b0 <write_line_line_blank_reg+0xb8>
    } else {
        return false;
101006ac:	0005883a 	mov	r2,zero
    }
}
101006b0:	e037883a 	mov	sp,fp
101006b4:	dfc00117 	ldw	ra,4(sp)
101006b8:	df000017 	ldw	fp,0(sp)
101006bc:	dec00204 	addi	sp,sp,8
101006c0:	f800283a 	ret

101006c4 <write_line_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_frame_blank) {
101006c4:	defffa04 	addi	sp,sp,-24
101006c8:	dfc00515 	stw	ra,20(sp)
101006cc:	df000415 	stw	fp,16(sp)
101006d0:	df000404 	addi	fp,sp,16
101006d4:	e13ffe15 	stw	r4,-8(fp)
101006d8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101006dc:	e0bffe17 	ldw	r2,-8(fp)
101006e0:	10c00217 	ldw	r3,8(r2)
101006e4:	e0bffe17 	ldw	r2,-8(fp)
101006e8:	10800317 	ldw	r2,12(r2)
101006ec:	100b883a 	mov	r5,r2
101006f0:	1809883a 	mov	r4,r3
101006f4:	01002900 	call	10100290 <max>
101006f8:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN <= line_frame_blank;
101006fc:	e0bfff17 	ldw	r2,-4(fp)
10100700:	108000e8 	cmpgeui	r2,r2,3
10100704:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_frame_blank <= max_reg_value;
10100708:	e0bfff17 	ldw	r2,-4(fp)
1010070c:	e0fffc17 	ldw	r3,-16(fp)
10100710:	1885403a 	cmpgeu	r2,r3,r2
10100714:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100718:	e0bffd03 	ldbu	r2,-12(fp)
1010071c:	10000826 	beq	r2,zero,10100740 <write_line_frame_blank_reg+0x7c>
10100720:	e0bffd43 	ldbu	r2,-11(fp)
10100724:	10000626 	beq	r2,zero,10100740 <write_line_frame_blank_reg+0x7c>
10100728:	e13ffe17 	ldw	r4,-8(fp)
1010072c:	01008ac0 	call	101008ac <is_idle>
10100730:	10803fcc 	andi	r2,r2,255
10100734:	10000226 	beq	r2,zero,10100740 <write_line_frame_blank_reg+0x7c>
10100738:	00800044 	movi	r2,1
1010073c:	00000106 	br	10100744 <write_line_frame_blank_reg+0x80>
10100740:	0005883a 	mov	r2,zero
10100744:	e0bffd85 	stb	r2,-10(fp)
10100748:	e0bffd83 	ldbu	r2,-10(fp)
1010074c:	1080004c 	andi	r2,r2,1
10100750:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100754:	e0bffd83 	ldbu	r2,-10(fp)
10100758:	10000726 	beq	r2,zero,10100778 <write_line_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_FRAME_BLANK(dev->base, line_frame_blank);
1010075c:	e0bffe17 	ldw	r2,-8(fp)
10100760:	10800017 	ldw	r2,0(r2)
10100764:	10800504 	addi	r2,r2,20
10100768:	e0ffff17 	ldw	r3,-4(fp)
1010076c:	10c00035 	stwio	r3,0(r2)
        return true;
10100770:	00800044 	movi	r2,1
10100774:	00000106 	br	1010077c <write_line_frame_blank_reg+0xb8>
    } else {
        return false;
10100778:	0005883a 	mov	r2,zero
    }
}
1010077c:	e037883a 	mov	sp,fp
10100780:	dfc00117 	ldw	ra,4(sp)
10100784:	df000017 	ldw	fp,0(sp)
10100788:	dec00204 	addi	sp,sp,8
1010078c:	f800283a 	ret

10100790 <read_frame_width_reg>:
/*
 * read_frame_width_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_WIDTH register
 */
static uint32_t read_frame_width_reg(cmos_sensor_output_generator_dev *dev) {
10100790:	defffe04 	addi	sp,sp,-8
10100794:	df000115 	stw	fp,4(sp)
10100798:	df000104 	addi	fp,sp,4
1010079c:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_WIDTH(dev->base);
101007a0:	e0bfff17 	ldw	r2,-4(fp)
101007a4:	10800017 	ldw	r2,0(r2)
101007a8:	10800037 	ldwio	r2,0(r2)
}
101007ac:	e037883a 	mov	sp,fp
101007b0:	df000017 	ldw	fp,0(sp)
101007b4:	dec00104 	addi	sp,sp,4
101007b8:	f800283a 	ret

101007bc <read_frame_height_reg>:
/*
 * read_frame_height_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_HEIGHT register
 */
static uint32_t read_frame_height_reg(cmos_sensor_output_generator_dev *dev) {
101007bc:	defffe04 	addi	sp,sp,-8
101007c0:	df000115 	stw	fp,4(sp)
101007c4:	df000104 	addi	fp,sp,4
101007c8:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_HEIGHT(dev->base);
101007cc:	e0bfff17 	ldw	r2,-4(fp)
101007d0:	10800017 	ldw	r2,0(r2)
101007d4:	10800104 	addi	r2,r2,4
101007d8:	10800037 	ldwio	r2,0(r2)
}
101007dc:	e037883a 	mov	sp,fp
101007e0:	df000017 	ldw	fp,0(sp)
101007e4:	dec00104 	addi	sp,sp,4
101007e8:	f800283a 	ret

101007ec <read_frame_frame_blank_reg>:
/*
 * read_frame_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_FRAME_BLANK register
 */
static uint32_t read_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
101007ec:	defffe04 	addi	sp,sp,-8
101007f0:	df000115 	stw	fp,4(sp)
101007f4:	df000104 	addi	fp,sp,4
101007f8:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_FRAME_BLANK(dev->base);
101007fc:	e0bfff17 	ldw	r2,-4(fp)
10100800:	10800017 	ldw	r2,0(r2)
10100804:	10800204 	addi	r2,r2,8
10100808:	10800037 	ldwio	r2,0(r2)
}
1010080c:	e037883a 	mov	sp,fp
10100810:	df000017 	ldw	fp,0(sp)
10100814:	dec00104 	addi	sp,sp,4
10100818:	f800283a 	ret

1010081c <read_frame_line_blank_reg>:
/*
 * read_frame_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_LINE_BLANK register
 */
static uint32_t read_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
1010081c:	defffe04 	addi	sp,sp,-8
10100820:	df000115 	stw	fp,4(sp)
10100824:	df000104 	addi	fp,sp,4
10100828:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_LINE_BLANK(dev->base);
1010082c:	e0bfff17 	ldw	r2,-4(fp)
10100830:	10800017 	ldw	r2,0(r2)
10100834:	10800304 	addi	r2,r2,12
10100838:	10800037 	ldwio	r2,0(r2)
}
1010083c:	e037883a 	mov	sp,fp
10100840:	df000017 	ldw	fp,0(sp)
10100844:	dec00104 	addi	sp,sp,4
10100848:	f800283a 	ret

1010084c <read_line_line_blank_reg>:
/*
 * read_line_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_LINE_BLANK register
 */
static uint32_t read_line_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
1010084c:	defffe04 	addi	sp,sp,-8
10100850:	df000115 	stw	fp,4(sp)
10100854:	df000104 	addi	fp,sp,4
10100858:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_LINE_BLANK(dev->base);
1010085c:	e0bfff17 	ldw	r2,-4(fp)
10100860:	10800017 	ldw	r2,0(r2)
10100864:	10800404 	addi	r2,r2,16
10100868:	10800037 	ldwio	r2,0(r2)
}
1010086c:	e037883a 	mov	sp,fp
10100870:	df000017 	ldw	fp,0(sp)
10100874:	dec00104 	addi	sp,sp,4
10100878:	f800283a 	ret

1010087c <read_line_frame_blank_reg>:
/*
 * read_line_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_FRAME_BLANK register
 */
static uint32_t read_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
1010087c:	defffe04 	addi	sp,sp,-8
10100880:	df000115 	stw	fp,4(sp)
10100884:	df000104 	addi	fp,sp,4
10100888:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_FRAME_BLANK(dev->base);
1010088c:	e0bfff17 	ldw	r2,-4(fp)
10100890:	10800017 	ldw	r2,0(r2)
10100894:	10800504 	addi	r2,r2,20
10100898:	10800037 	ldwio	r2,0(r2)
}
1010089c:	e037883a 	mov	sp,fp
101008a0:	df000017 	ldw	fp,0(sp)
101008a4:	dec00104 	addi	sp,sp,4
101008a8:	f800283a 	ret

101008ac <is_idle>:
/*
 * is_idle
 *
 * Returns true if the controller is idle, and false otherwise.
 */
static bool is_idle(cmos_sensor_output_generator_dev *dev) {
101008ac:	defffe04 	addi	sp,sp,-8
101008b0:	df000115 	stw	fp,4(sp)
101008b4:	df000104 	addi	fp,sp,4
101008b8:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_STATUS(dev->base) == CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_IDLE;
101008bc:	e0bfff17 	ldw	r2,-4(fp)
101008c0:	10800017 	ldw	r2,0(r2)
101008c4:	10800704 	addi	r2,r2,28
101008c8:	10800037 	ldwio	r2,0(r2)
101008cc:	10800060 	cmpeqi	r2,r2,1
}
101008d0:	e037883a 	mov	sp,fp
101008d4:	df000017 	ldw	fp,0(sp)
101008d8:	dec00104 	addi	sp,sp,4
101008dc:	f800283a 	ret

101008e0 <cmos_sensor_output_generator_inst>:
/*
 * cmos_sensor_output_generator_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_output_generator_dev cmos_sensor_output_generator_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height) {
101008e0:	defff704 	addi	sp,sp,-36
101008e4:	df000815 	stw	fp,32(sp)
101008e8:	df000804 	addi	fp,sp,32
101008ec:	e13ffc15 	stw	r4,-16(fp)
101008f0:	e17ffd15 	stw	r5,-12(fp)
101008f4:	3005883a 	mov	r2,r6
101008f8:	e1ffff15 	stw	r7,-4(fp)
101008fc:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_output_generator_dev dev;

    dev.base = base;
10100900:	e0bffd17 	ldw	r2,-12(fp)
10100904:	e0bff815 	stw	r2,-32(fp)
    dev.pix_depth = pix_depth;
10100908:	e0bffe03 	ldbu	r2,-8(fp)
1010090c:	e0bff905 	stb	r2,-28(fp)
    dev.max_width = max_width;
10100910:	e0bfff17 	ldw	r2,-4(fp)
10100914:	e0bffa15 	stw	r2,-24(fp)
    dev.max_height = max_height;
10100918:	e0800117 	ldw	r2,4(fp)
1010091c:	e0bffb15 	stw	r2,-20(fp)

    return dev;
10100920:	e0bffc17 	ldw	r2,-16(fp)
10100924:	e0fff817 	ldw	r3,-32(fp)
10100928:	10c00015 	stw	r3,0(r2)
1010092c:	e0fff917 	ldw	r3,-28(fp)
10100930:	10c00115 	stw	r3,4(r2)
10100934:	e0fffa17 	ldw	r3,-24(fp)
10100938:	10c00215 	stw	r3,8(r2)
1010093c:	e0fffb17 	ldw	r3,-20(fp)
10100940:	10c00315 	stw	r3,12(r2)
}
10100944:	e0bffc17 	ldw	r2,-16(fp)
10100948:	e037883a 	mov	sp,fp
1010094c:	df000017 	ldw	fp,0(sp)
10100950:	dec00104 	addi	sp,sp,4
10100954:	f800283a 	ret

10100958 <cmos_sensor_output_generator_init>:
 * Initializes the CMOS Sensor Output Generator controller.
 *
 * This routine sets the values of all registers to the minimums defined in
 * cmos_sensor_output_generator_regs.h.
 */
void cmos_sensor_output_generator_init(cmos_sensor_output_generator_dev *dev) {
10100958:	defffd04 	addi	sp,sp,-12
1010095c:	dfc00215 	stw	ra,8(sp)
10100960:	df000115 	stw	fp,4(sp)
10100964:	df000104 	addi	fp,sp,4
10100968:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_output_generator_stop(dev);
1010096c:	e13fff17 	ldw	r4,-4(fp)
10100970:	0100b140 	call	10100b14 <cmos_sensor_output_generator_stop>

    write_frame_width_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN);
10100974:	014000c4 	movi	r5,3
10100978:	e13fff17 	ldw	r4,-4(fp)
1010097c:	01002cc0 	call	101002cc <write_frame_width_reg>
    write_frame_height_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN);
10100980:	014000c4 	movi	r5,3
10100984:	e13fff17 	ldw	r4,-4(fp)
10100988:	01003940 	call	10100394 <write_frame_height_reg>
    write_frame_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN);
1010098c:	014000c4 	movi	r5,3
10100990:	e13fff17 	ldw	r4,-4(fp)
10100994:	01004600 	call	10100460 <write_frame_frame_blank_reg>
    write_frame_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN);
10100998:	014000c4 	movi	r5,3
1010099c:	e13fff17 	ldw	r4,-4(fp)
101009a0:	010052c0 	call	1010052c <write_frame_line_blank_reg>
    write_line_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN);
101009a4:	014000c4 	movi	r5,3
101009a8:	e13fff17 	ldw	r4,-4(fp)
101009ac:	01005f80 	call	101005f8 <write_line_line_blank_reg>
    write_line_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
101009b0:	014000c4 	movi	r5,3
101009b4:	e13fff17 	ldw	r4,-4(fp)
101009b8:	01006c40 	call	101006c4 <write_line_frame_blank_reg>
}
101009bc:	0001883a 	nop
101009c0:	e037883a 	mov	sp,fp
101009c4:	dfc00117 	ldw	ra,4(sp)
101009c8:	df000017 	ldw	fp,0(sp)
101009cc:	dec00204 	addi	sp,sp,8
101009d0:	f800283a 	ret

101009d4 <cmos_sensor_output_generator_configure>:
 *
 * Configure the generator.
 *
 * Returns true if successful (values within bounds), and false otherwise.
 */
bool cmos_sensor_output_generator_configure(cmos_sensor_output_generator_dev *dev, uint32_t frame_width, uint32_t frame_height, uint32_t frame_frame_blank, uint32_t frame_line_blank, uint32_t line_line_blank, uint32_t line_frame_blank) {
101009d4:	defff904 	addi	sp,sp,-28
101009d8:	dfc00615 	stw	ra,24(sp)
101009dc:	df000515 	stw	fp,20(sp)
101009e0:	df000504 	addi	fp,sp,20
101009e4:	e13ffc15 	stw	r4,-16(fp)
101009e8:	e17ffd15 	stw	r5,-12(fp)
101009ec:	e1bffe15 	stw	r6,-8(fp)
101009f0:	e1ffff15 	stw	r7,-4(fp)
    bool success = true;
101009f4:	00800044 	movi	r2,1
101009f8:	e0bffb05 	stb	r2,-20(fp)

    cmos_sensor_output_generator_stop(dev);
101009fc:	e13ffc17 	ldw	r4,-16(fp)
10100a00:	0100b140 	call	10100b14 <cmos_sensor_output_generator_stop>

    success &= write_frame_width_reg(dev, frame_width);
10100a04:	e17ffd17 	ldw	r5,-12(fp)
10100a08:	e13ffc17 	ldw	r4,-16(fp)
10100a0c:	01002cc0 	call	101002cc <write_frame_width_reg>
10100a10:	e0fffb03 	ldbu	r3,-20(fp)
10100a14:	10803fcc 	andi	r2,r2,255
10100a18:	1884703a 	and	r2,r3,r2
10100a1c:	1004c03a 	cmpne	r2,r2,zero
10100a20:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_height_reg(dev, frame_height);
10100a24:	e17ffe17 	ldw	r5,-8(fp)
10100a28:	e13ffc17 	ldw	r4,-16(fp)
10100a2c:	01003940 	call	10100394 <write_frame_height_reg>
10100a30:	e0fffb03 	ldbu	r3,-20(fp)
10100a34:	10803fcc 	andi	r2,r2,255
10100a38:	1884703a 	and	r2,r3,r2
10100a3c:	1004c03a 	cmpne	r2,r2,zero
10100a40:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_frame_blank_reg(dev, frame_frame_blank);
10100a44:	e17fff17 	ldw	r5,-4(fp)
10100a48:	e13ffc17 	ldw	r4,-16(fp)
10100a4c:	01004600 	call	10100460 <write_frame_frame_blank_reg>
10100a50:	e0fffb03 	ldbu	r3,-20(fp)
10100a54:	10803fcc 	andi	r2,r2,255
10100a58:	1884703a 	and	r2,r3,r2
10100a5c:	1004c03a 	cmpne	r2,r2,zero
10100a60:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_line_blank_reg(dev, frame_line_blank);
10100a64:	e1400217 	ldw	r5,8(fp)
10100a68:	e13ffc17 	ldw	r4,-16(fp)
10100a6c:	010052c0 	call	1010052c <write_frame_line_blank_reg>
10100a70:	e0fffb03 	ldbu	r3,-20(fp)
10100a74:	10803fcc 	andi	r2,r2,255
10100a78:	1884703a 	and	r2,r3,r2
10100a7c:	1004c03a 	cmpne	r2,r2,zero
10100a80:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_line_blank_reg(dev, line_line_blank);
10100a84:	e1400317 	ldw	r5,12(fp)
10100a88:	e13ffc17 	ldw	r4,-16(fp)
10100a8c:	01005f80 	call	101005f8 <write_line_line_blank_reg>
10100a90:	e0fffb03 	ldbu	r3,-20(fp)
10100a94:	10803fcc 	andi	r2,r2,255
10100a98:	1884703a 	and	r2,r3,r2
10100a9c:	1004c03a 	cmpne	r2,r2,zero
10100aa0:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_frame_blank_reg(dev, line_frame_blank);
10100aa4:	e1400417 	ldw	r5,16(fp)
10100aa8:	e13ffc17 	ldw	r4,-16(fp)
10100aac:	01006c40 	call	101006c4 <write_line_frame_blank_reg>
10100ab0:	e0fffb03 	ldbu	r3,-20(fp)
10100ab4:	10803fcc 	andi	r2,r2,255
10100ab8:	1884703a 	and	r2,r3,r2
10100abc:	1004c03a 	cmpne	r2,r2,zero
10100ac0:	e0bffb05 	stb	r2,-20(fp)

    return success;
10100ac4:	e0bffb03 	ldbu	r2,-20(fp)
}
10100ac8:	e037883a 	mov	sp,fp
10100acc:	dfc00117 	ldw	ra,4(sp)
10100ad0:	df000017 	ldw	fp,0(sp)
10100ad4:	dec00204 	addi	sp,sp,8
10100ad8:	f800283a 	ret

10100adc <cmos_sensor_output_generator_start>:
 * Starts the generator.
 *
 * You must previously configure the controller by calling
 * cmos_sensor_output_generator_configure() before calling this function.
 */
void cmos_sensor_output_generator_start(cmos_sensor_output_generator_dev *dev) {
10100adc:	defffe04 	addi	sp,sp,-8
10100ae0:	df000115 	stw	fp,4(sp)
10100ae4:	df000104 	addi	fp,sp,4
10100ae8:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_START);
10100aec:	e0bfff17 	ldw	r2,-4(fp)
10100af0:	10800017 	ldw	r2,0(r2)
10100af4:	10800604 	addi	r2,r2,24
10100af8:	00c00044 	movi	r3,1
10100afc:	10c00035 	stwio	r3,0(r2)
}
10100b00:	0001883a 	nop
10100b04:	e037883a 	mov	sp,fp
10100b08:	df000017 	ldw	fp,0(sp)
10100b0c:	dec00104 	addi	sp,sp,4
10100b10:	f800283a 	ret

10100b14 <cmos_sensor_output_generator_stop>:
/*
 * cmos_sensor_output_generator_stop
 *
 * Stops the generator.
 */
void cmos_sensor_output_generator_stop(cmos_sensor_output_generator_dev *dev) {
10100b14:	defffe04 	addi	sp,sp,-8
10100b18:	df000115 	stw	fp,4(sp)
10100b1c:	df000104 	addi	fp,sp,4
10100b20:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_STOP);
10100b24:	e0bfff17 	ldw	r2,-4(fp)
10100b28:	10800017 	ldw	r2,0(r2)
10100b2c:	10800604 	addi	r2,r2,24
10100b30:	0007883a 	mov	r3,zero
10100b34:	10c00035 	stwio	r3,0(r2)
}
10100b38:	0001883a 	nop
10100b3c:	e037883a 	mov	sp,fp
10100b40:	df000017 	ldw	fp,0(sp)
10100b44:	dec00104 	addi	sp,sp,4
10100b48:	f800283a 	ret

10100b4c <Camera_Acquisition_Module_SETUP_Address_Memory>:
#define CAMERA_MODULE_REGISTER_STOP            (3 * 4) /* RW */
#define CAMERA_MODULE_REGISTER_SNAPSHOT             (4 * 4) /* RW */
#define CAMERA_MODULE_REGISTER_FLAG            (5 * 4) /* RW */

int Camera_Acquisition_Module_SETUP_Address_Memory(int Address)
{
10100b4c:	defffd04 	addi	sp,sp,-12
10100b50:	df000215 	stw	fp,8(sp)
10100b54:	df000204 	addi	fp,sp,8
10100b58:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(CAMERA_MODULE_0_BASE, CAMERA_MODULE_REGISTER_ADDRESS, Address);
10100b5c:	00840034 	movhi	r2,4096
10100b60:	10822004 	addi	r2,r2,2176
10100b64:	e0ffff17 	ldw	r3,-4(fp)
10100b68:	10c00035 	stwio	r3,0(r2)
	for (int i=0;i<10;i++);
10100b6c:	e03ffe15 	stw	zero,-8(fp)
10100b70:	00000306 	br	10100b80 <Camera_Acquisition_Module_SETUP_Address_Memory+0x34>
10100b74:	e0bffe17 	ldw	r2,-8(fp)
10100b78:	10800044 	addi	r2,r2,1
10100b7c:	e0bffe15 	stw	r2,-8(fp)
10100b80:	e0bffe17 	ldw	r2,-8(fp)
10100b84:	10800290 	cmplti	r2,r2,10
10100b88:	103ffa1e 	bne	r2,zero,10100b74 <_gp+0xfffdf3a0>
	return IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_ADDRESS);
10100b8c:	00840034 	movhi	r2,4096
10100b90:	10822004 	addi	r2,r2,2176
10100b94:	10800037 	ldwio	r2,0(r2)
}
10100b98:	e037883a 	mov	sp,fp
10100b9c:	df000017 	ldw	fp,0(sp)
10100ba0:	dec00104 	addi	sp,sp,4
10100ba4:	f800283a 	ret

10100ba8 <Camera_Acquisition_Module_SETUP_Length_Frame>:
// Length : Number of pixel to store. reminder : 1 Memory slot =2 pixels and 1 memory slot = 4 bytes
int Camera_Acquisition_Module_SETUP_Length_Frame(int Pixel_Number)
{
10100ba8:	defffd04 	addi	sp,sp,-12
10100bac:	df000215 	stw	fp,8(sp)
10100bb0:	df000204 	addi	fp,sp,8
10100bb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(CAMERA_MODULE_0_BASE, CAMERA_MODULE_REGISTER_LENGTH, Pixel_Number/2*4);//*4 because 32bits;
10100bb8:	e0bfff17 	ldw	r2,-4(fp)
10100bbc:	1006d7fa 	srli	r3,r2,31
10100bc0:	1885883a 	add	r2,r3,r2
10100bc4:	1005d07a 	srai	r2,r2,1
10100bc8:	1085883a 	add	r2,r2,r2
10100bcc:	1085883a 	add	r2,r2,r2
10100bd0:	1007883a 	mov	r3,r2
10100bd4:	00840034 	movhi	r2,4096
10100bd8:	10822104 	addi	r2,r2,2180
10100bdc:	10c00035 	stwio	r3,0(r2)
	for (int i=0;i<10;i++);
10100be0:	e03ffe15 	stw	zero,-8(fp)
10100be4:	00000306 	br	10100bf4 <Camera_Acquisition_Module_SETUP_Length_Frame+0x4c>
10100be8:	e0bffe17 	ldw	r2,-8(fp)
10100bec:	10800044 	addi	r2,r2,1
10100bf0:	e0bffe15 	stw	r2,-8(fp)
10100bf4:	e0bffe17 	ldw	r2,-8(fp)
10100bf8:	10800290 	cmplti	r2,r2,10
10100bfc:	103ffa1e 	bne	r2,zero,10100be8 <_gp+0xfffdf414>
	return IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_LENGTH);
10100c00:	00840034 	movhi	r2,4096
10100c04:	10822104 	addi	r2,r2,2180
10100c08:	10800037 	ldwio	r2,0(r2)
}
10100c0c:	e037883a 	mov	sp,fp
10100c10:	df000017 	ldw	fp,0(sp)
10100c14:	dec00104 	addi	sp,sp,4
10100c18:	f800283a 	ret

10100c1c <Camera_Acquisition_Module_Start>:
int Camera_Acquisition_Module_Start()
{
10100c1c:	defffe04 	addi	sp,sp,-8
10100c20:	df000115 	stw	fp,4(sp)
10100c24:	df000104 	addi	fp,sp,4
	IOWR_32DIRECT(CAMERA_MODULE_0_BASE, CAMERA_MODULE_REGISTER_START, 1);//*4 because 32bits;
10100c28:	00c00044 	movi	r3,1
10100c2c:	00840034 	movhi	r2,4096
10100c30:	10822204 	addi	r2,r2,2184
10100c34:	10c00035 	stwio	r3,0(r2)
	for (int i=0;i<10;i++);
10100c38:	e03fff15 	stw	zero,-4(fp)
10100c3c:	00000306 	br	10100c4c <Camera_Acquisition_Module_Start+0x30>
10100c40:	e0bfff17 	ldw	r2,-4(fp)
10100c44:	10800044 	addi	r2,r2,1
10100c48:	e0bfff15 	stw	r2,-4(fp)
10100c4c:	e0bfff17 	ldw	r2,-4(fp)
10100c50:	10800290 	cmplti	r2,r2,10
10100c54:	103ffa1e 	bne	r2,zero,10100c40 <_gp+0xfffdf46c>
	return IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_START);
10100c58:	00840034 	movhi	r2,4096
10100c5c:	10822204 	addi	r2,r2,2184
10100c60:	10800037 	ldwio	r2,0(r2)
}
10100c64:	e037883a 	mov	sp,fp
10100c68:	df000017 	ldw	fp,0(sp)
10100c6c:	dec00104 	addi	sp,sp,4
10100c70:	f800283a 	ret

10100c74 <Camera_Acquisition_Module_Stop>:
int Camera_Acquisition_Module_Stop()
{
10100c74:	defffe04 	addi	sp,sp,-8
10100c78:	df000115 	stw	fp,4(sp)
10100c7c:	df000104 	addi	fp,sp,4
	IOWR_32DIRECT(CAMERA_MODULE_0_BASE, CAMERA_MODULE_REGISTER_STOP, 1);//*4 because 32bits;
10100c80:	00c00044 	movi	r3,1
10100c84:	00840034 	movhi	r2,4096
10100c88:	10822304 	addi	r2,r2,2188
10100c8c:	10c00035 	stwio	r3,0(r2)
	for (int i=0;i<10;i++);
10100c90:	e03fff15 	stw	zero,-4(fp)
10100c94:	00000306 	br	10100ca4 <Camera_Acquisition_Module_Stop+0x30>
10100c98:	e0bfff17 	ldw	r2,-4(fp)
10100c9c:	10800044 	addi	r2,r2,1
10100ca0:	e0bfff15 	stw	r2,-4(fp)
10100ca4:	e0bfff17 	ldw	r2,-4(fp)
10100ca8:	10800290 	cmplti	r2,r2,10
10100cac:	103ffa1e 	bne	r2,zero,10100c98 <_gp+0xfffdf4c4>
	return IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_STOP);
10100cb0:	00840034 	movhi	r2,4096
10100cb4:	10822304 	addi	r2,r2,2188
10100cb8:	10800037 	ldwio	r2,0(r2)
}
10100cbc:	e037883a 	mov	sp,fp
10100cc0:	df000017 	ldw	fp,0(sp)
10100cc4:	dec00104 	addi	sp,sp,4
10100cc8:	f800283a 	ret

10100ccc <Camera_Acquisition_Module_Display_Registers>:
void Camera_Acquisition_Module_Display_Registers()
{
10100ccc:	defffe04 	addi	sp,sp,-8
10100cd0:	dfc00115 	stw	ra,4(sp)
10100cd4:	df000015 	stw	fp,0(sp)
10100cd8:	d839883a 	mov	fp,sp
	printf("CAMERA_MODULE_REGISTER_ADDRESS=0x%x\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_ADDRESS));
10100cdc:	00840034 	movhi	r2,4096
10100ce0:	10822004 	addi	r2,r2,2176
10100ce4:	10800037 	ldwio	r2,0(r2)
10100ce8:	100b883a 	mov	r5,r2
10100cec:	01040474 	movhi	r4,4113
10100cf0:	211d1d04 	addi	r4,r4,29812
10100cf4:	01052e40 	call	101052e4 <printf>
	printf("CAMERA_MODULE_REGISTER_LENGTH=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_LENGTH));
10100cf8:	00840034 	movhi	r2,4096
10100cfc:	10822104 	addi	r2,r2,2180
10100d00:	10800037 	ldwio	r2,0(r2)
10100d04:	100b883a 	mov	r5,r2
10100d08:	01040474 	movhi	r4,4113
10100d0c:	211d2704 	addi	r4,r4,29852
10100d10:	01052e40 	call	101052e4 <printf>
	printf("CAMERA_MODULE_REGISTER_START=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_START));
10100d14:	00840034 	movhi	r2,4096
10100d18:	10822204 	addi	r2,r2,2184
10100d1c:	10800037 	ldwio	r2,0(r2)
10100d20:	100b883a 	mov	r5,r2
10100d24:	01040474 	movhi	r4,4113
10100d28:	211d3004 	addi	r4,r4,29888
10100d2c:	01052e40 	call	101052e4 <printf>
	printf("CAMERA_MODULE_REGISTER_STOP=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_STOP));
10100d30:	00840034 	movhi	r2,4096
10100d34:	10822304 	addi	r2,r2,2188
10100d38:	10800037 	ldwio	r2,0(r2)
10100d3c:	100b883a 	mov	r5,r2
10100d40:	01040474 	movhi	r4,4113
10100d44:	211d3904 	addi	r4,r4,29924
10100d48:	01052e40 	call	101052e4 <printf>
	printf("CAMERA_MODULE_REGISTER_SNAPSHOT=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_SNAPSHOT));
10100d4c:	00840034 	movhi	r2,4096
10100d50:	10822404 	addi	r2,r2,2192
10100d54:	10800037 	ldwio	r2,0(r2)
10100d58:	100b883a 	mov	r5,r2
10100d5c:	01040474 	movhi	r4,4113
10100d60:	211d4204 	addi	r4,r4,29960
10100d64:	01052e40 	call	101052e4 <printf>
	printf("CAMERA_MODULE_REGISTER_FLAG=%d\r\n",IORD_32DIRECT(CAMERA_MODULE_0_BASE,CAMERA_MODULE_REGISTER_FLAG));
10100d68:	00840034 	movhi	r2,4096
10100d6c:	10822504 	addi	r2,r2,2196
10100d70:	10800037 	ldwio	r2,0(r2)
10100d74:	100b883a 	mov	r5,r2
10100d78:	01040474 	movhi	r4,4113
10100d7c:	211d4c04 	addi	r4,r4,30000
10100d80:	01052e40 	call	101052e4 <printf>
}
10100d84:	0001883a 	nop
10100d88:	e037883a 	mov	sp,fp
10100d8c:	dfc00117 	ldw	ra,4(sp)
10100d90:	df000017 	ldw	fp,0(sp)
10100d94:	dec00204 	addi	sp,sp,8
10100d98:	f800283a 	ret

10100d9c <Configure_CMOS_Generator>:
/* Pixels Generator Part */

 void Configure_CMOS_Generator(int width, int height)
 {
10100d9c:	defff404 	addi	sp,sp,-48
10100da0:	dfc00b15 	stw	ra,44(sp)
10100da4:	df000a15 	stw	fp,40(sp)
10100da8:	dc000915 	stw	r16,36(sp)
10100dac:	df000a04 	addi	fp,sp,40
10100db0:	e13ff915 	stw	r4,-28(fp)
10100db4:	e17ffa15 	stw	r5,-24(fp)
	  cmos_sensor_output_generator = cmos_sensor_output_generator_inst(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,
10100db8:	e13ff917 	ldw	r4,-28(fp)
10100dbc:	e0bffa17 	ldw	r2,-24(fp)
10100dc0:	040404b4 	movhi	r16,4114
10100dc4:	842d0b04 	addi	r16,r16,-19412
10100dc8:	e0fffb04 	addi	r3,fp,-20
10100dcc:	d8800015 	stw	r2,0(sp)
10100dd0:	200f883a 	mov	r7,r4
10100dd4:	01800304 	movi	r6,12
10100dd8:	01440034 	movhi	r5,4096
10100ddc:	29421004 	addi	r5,r5,2112
10100de0:	1809883a 	mov	r4,r3
10100de4:	01008e00 	call	101008e0 <cmos_sensor_output_generator_inst>
10100de8:	e0bffb17 	ldw	r2,-20(fp)
10100dec:	80800015 	stw	r2,0(r16)
10100df0:	e0bffc17 	ldw	r2,-16(fp)
10100df4:	80800115 	stw	r2,4(r16)
10100df8:	e0bffd17 	ldw	r2,-12(fp)
10100dfc:	80800215 	stw	r2,8(r16)
10100e00:	e0bffe17 	ldw	r2,-8(fp)
10100e04:	80800315 	stw	r2,12(r16)
	 	    																					CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH_REDEFINED,
																								width,
																								height);
	    cmos_sensor_output_generator_init(&cmos_sensor_output_generator);
10100e08:	010404b4 	movhi	r4,4114
10100e0c:	212d0b04 	addi	r4,r4,-19412
10100e10:	01009580 	call	10100958 <cmos_sensor_output_generator_init>
	    cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100e14:	010404b4 	movhi	r4,4114
10100e18:	212d0b04 	addi	r4,r4,-19412
10100e1c:	0100b140 	call	10100b14 <cmos_sensor_output_generator_stop>
	    cmos_sensor_output_generator_configure(&cmos_sensor_output_generator,
10100e20:	e0fff917 	ldw	r3,-28(fp)
10100e24:	e13ffa17 	ldw	r4,-24(fp)
10100e28:	008000c4 	movi	r2,3
10100e2c:	d8800215 	stw	r2,8(sp)
10100e30:	008000c4 	movi	r2,3
10100e34:	d8800115 	stw	r2,4(sp)
10100e38:	008000c4 	movi	r2,3
10100e3c:	d8800015 	stw	r2,0(sp)
10100e40:	01c000c4 	movi	r7,3
10100e44:	200d883a 	mov	r6,r4
10100e48:	180b883a 	mov	r5,r3
10100e4c:	010404b4 	movhi	r4,4114
10100e50:	212d0b04 	addi	r4,r4,-19412
10100e54:	01009d40 	call	101009d4 <cmos_sensor_output_generator_configure>
																		height,
	                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN,
	                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN,
	                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN,
	                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
 }
10100e58:	0001883a 	nop
10100e5c:	e6ffff04 	addi	sp,fp,-4
10100e60:	dfc00217 	ldw	ra,8(sp)
10100e64:	df000117 	ldw	fp,4(sp)
10100e68:	dc000017 	ldw	r16,0(sp)
10100e6c:	dec00304 	addi	sp,sp,12
10100e70:	f800283a 	ret

10100e74 <Start_CMOS_Generator>:
 void Start_CMOS_Generator()
 {
10100e74:	defffe04 	addi	sp,sp,-8
10100e78:	dfc00115 	stw	ra,4(sp)
10100e7c:	df000015 	stw	fp,0(sp)
10100e80:	d839883a 	mov	fp,sp
	    cmos_sensor_output_generator_start(&cmos_sensor_output_generator);
10100e84:	010404b4 	movhi	r4,4114
10100e88:	212d0b04 	addi	r4,r4,-19412
10100e8c:	0100adc0 	call	10100adc <cmos_sensor_output_generator_start>
 }
10100e90:	0001883a 	nop
10100e94:	e037883a 	mov	sp,fp
10100e98:	dfc00117 	ldw	ra,4(sp)
10100e9c:	df000017 	ldw	fp,0(sp)
10100ea0:	dec00204 	addi	sp,sp,8
10100ea4:	f800283a 	ret

10100ea8 <Stop_CMOS_Generator>:
 void Stop_CMOS_Generator()
 {
10100ea8:	defffe04 	addi	sp,sp,-8
10100eac:	dfc00115 	stw	ra,4(sp)
10100eb0:	df000015 	stw	fp,0(sp)
10100eb4:	d839883a 	mov	fp,sp
	    cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100eb8:	010404b4 	movhi	r4,4114
10100ebc:	212d0b04 	addi	r4,r4,-19412
10100ec0:	0100b140 	call	10100b14 <cmos_sensor_output_generator_stop>
 }
10100ec4:	0001883a 	nop
10100ec8:	e037883a 	mov	sp,fp
10100ecc:	dfc00117 	ldw	ra,4(sp)
10100ed0:	df000017 	ldw	fp,0(sp)
10100ed4:	dec00204 	addi	sp,sp,8
10100ed8:	f800283a 	ret

10100edc <Display_Configuration_Generator>:
 void Display_Configuration_Generator()
 {
10100edc:	defffe04 	addi	sp,sp,-8
10100ee0:	dfc00115 	stw	ra,4(sp)
10100ee4:	df000015 	stw	fp,0(sp)
10100ee8:	d839883a 	mov	fp,sp
	 	printf("CMOS_SENSOR_OUTPUT_GENERATOR_0_WIDTH=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_OFST));
10100eec:	00840034 	movhi	r2,4096
10100ef0:	10821004 	addi	r2,r2,2112
10100ef4:	10800037 	ldwio	r2,0(r2)
10100ef8:	100b883a 	mov	r5,r2
10100efc:	01040474 	movhi	r4,4113
10100f00:	211d5504 	addi	r4,r4,30036
10100f04:	01052e40 	call	101052e4 <printf>
	    printf("CMOS_SENSOR_OUTPUT_GENERATOR_0_HEIGHT=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_OFST));
10100f08:	00840034 	movhi	r2,4096
10100f0c:	10821104 	addi	r2,r2,2116
10100f10:	10800037 	ldwio	r2,0(r2)
10100f14:	100b883a 	mov	r5,r2
10100f18:	01040474 	movhi	r4,4113
10100f1c:	211d6004 	addi	r4,r4,30080
10100f20:	01052e40 	call	101052e4 <printf>
	    printf("CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_OFST));
10100f24:	00840034 	movhi	r2,4096
10100f28:	10821204 	addi	r2,r2,2120
10100f2c:	10800037 	ldwio	r2,0(r2)
10100f30:	100b883a 	mov	r5,r2
10100f34:	01040474 	movhi	r4,4113
10100f38:	211d6b04 	addi	r4,r4,30124
10100f3c:	01052e40 	call	101052e4 <printf>
	    printf("CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_OFST));
10100f40:	00840034 	movhi	r2,4096
10100f44:	10821304 	addi	r2,r2,2124
10100f48:	10800037 	ldwio	r2,0(r2)
10100f4c:	100b883a 	mov	r5,r2
10100f50:	01040474 	movhi	r4,4113
10100f54:	211d7b04 	addi	r4,r4,30188
10100f58:	01052e40 	call	101052e4 <printf>
	    printf("CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_OFST));
10100f5c:	00840034 	movhi	r2,4096
10100f60:	10821404 	addi	r2,r2,2128
10100f64:	10800037 	ldwio	r2,0(r2)
10100f68:	100b883a 	mov	r5,r2
10100f6c:	01040474 	movhi	r4,4113
10100f70:	211d8b04 	addi	r4,r4,30252
10100f74:	01052e40 	call	101052e4 <printf>
	    printf("CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_OFST));
10100f78:	00840034 	movhi	r2,4096
10100f7c:	10821504 	addi	r2,r2,2132
10100f80:	10800037 	ldwio	r2,0(r2)
10100f84:	100b883a 	mov	r5,r2
10100f88:	01040474 	movhi	r4,4113
10100f8c:	211d9b04 	addi	r4,r4,30316
10100f90:	01052e40 	call	101052e4 <printf>
	    printf("CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_OFST));
10100f94:	00840034 	movhi	r2,4096
10100f98:	10821604 	addi	r2,r2,2136
10100f9c:	10800037 	ldwio	r2,0(r2)
10100fa0:	100b883a 	mov	r5,r2
10100fa4:	01040474 	movhi	r4,4113
10100fa8:	211dab04 	addi	r4,r4,30380
10100fac:	01052e40 	call	101052e4 <printf>
	    printf("CMOS_SENSOR_OUTPUT_GENERATOR_STATUS=%d\r\n",IORD_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_OFST));
10100fb0:	00840034 	movhi	r2,4096
10100fb4:	10821704 	addi	r2,r2,2140
10100fb8:	10800037 	ldwio	r2,0(r2)
10100fbc:	100b883a 	mov	r5,r2
10100fc0:	01040474 	movhi	r4,4113
10100fc4:	211db604 	addi	r4,r4,30424
10100fc8:	01052e40 	call	101052e4 <printf>
 }
10100fcc:	0001883a 	nop
10100fd0:	e037883a 	mov	sp,fp
10100fd4:	dfc00117 	ldw	ra,4(sp)
10100fd8:	df000017 	ldw	fp,0(sp)
10100fdc:	dec00204 	addi	sp,sp,8
10100fe0:	f800283a 	ret

10100fe4 <Test_Camera_Memory>:

 void Test_Camera_Memory()
 {
10100fe4:	defffd04 	addi	sp,sp,-12
10100fe8:	dfc00215 	stw	ra,8(sp)
10100fec:	df000115 	stw	fp,4(sp)
10100ff0:	df000104 	addi	fp,sp,4
 	Camera_Acquisition_Module_Stop();
10100ff4:	0100c740 	call	10100c74 <Camera_Acquisition_Module_Stop>
 	delay(5000);
10100ff8:	0104e204 	movi	r4,5000
10100ffc:	01013680 	call	10101368 <delay>
 	Camera_Acquisition_Module_SETUP_Address_Memory(HPS_0_BRIDGES_BASE);//Address of the HPC, 256 MB Available from it
10101000:	0009883a 	mov	r4,zero
10101004:	0100b4c0 	call	10100b4c <Camera_Acquisition_Module_SETUP_Address_Memory>
 	Camera_Acquisition_Module_SETUP_Length_Frame(76800);//320*240
10101008:	01000074 	movhi	r4,1
1010100c:	210b0004 	addi	r4,r4,11264
10101010:	0100ba80 	call	10100ba8 <Camera_Acquisition_Module_SETUP_Length_Frame>
 	Camera_Acquisition_Module_Start();//Set a one in the start register
10101014:	0100c1c0 	call	10100c1c <Camera_Acquisition_Module_Start>

 		#if CAPTURE_IMAGE
 			Capture_Image_Computer(HPS_0_BRIDGES_BASE,2);
10101018:	01400084 	movi	r5,2
1010101c:	0009883a 	mov	r4,zero
10101020:	01010640 	call	10101064 <Capture_Image_Computer>
 			Capture_Image_Computer(HPS_0_BRIDGES_BASE,1);
10101024:	01400044 	movi	r5,1
10101028:	0009883a 	mov	r4,zero
1010102c:	01010640 	call	10101064 <Capture_Image_Computer>
 			Capture_Image_Computer(HPS_0_BRIDGES_BASE,0);
10101030:	000b883a 	mov	r5,zero
10101034:	0009883a 	mov	r4,zero
10101038:	01010640 	call	10101064 <Capture_Image_Computer>
 		#endif
 	while (1)
 	{
 		for (int i=0;i<4000000;i++);
1010103c:	e03fff15 	stw	zero,-4(fp)
10101040:	00000306 	br	10101050 <Test_Camera_Memory+0x6c>
10101044:	e0bfff17 	ldw	r2,-4(fp)
10101048:	10800044 	addi	r2,r2,1
1010104c:	e0bfff15 	stw	r2,-4(fp)
10101050:	e0ffff17 	ldw	r3,-4(fp)
10101054:	00800f74 	movhi	r2,61
10101058:	10823fc4 	addi	r2,r2,2303
1010105c:	10fff90e 	bge	r2,r3,10101044 <_gp+0xfffdf870>

 	}
10101060:	003ff606 	br	1010103c <_gp+0xfffdf868>

10101064 <Capture_Image_Computer>:

 }
 void Capture_Image_Computer(int Address, int Frame)
 {
10101064:	deffda04 	addi	sp,sp,-152
10101068:	dfc02515 	stw	ra,148(sp)
1010106c:	df002415 	stw	fp,144(sp)
10101070:	df002404 	addi	fp,sp,144
10101074:	e13ffe15 	stw	r4,-8(fp)
10101078:	e17fff15 	stw	r5,-4(fp)
 	char filename[80];
 	sprintf(filename, "/mnt/host/image%d.ppm",Frame);
1010107c:	e0bfe404 	addi	r2,fp,-112
10101080:	e1bfff17 	ldw	r6,-4(fp)
10101084:	01440474 	movhi	r5,4113
10101088:	295dc104 	addi	r5,r5,30468
1010108c:	1009883a 	mov	r4,r2
10101090:	010572c0 	call	1010572c <sprintf>
 		FILE *foutput = fopen(filename, "w");
10101094:	e0bfe404 	addi	r2,fp,-112
10101098:	01440474 	movhi	r5,4113
1010109c:	295dc704 	addi	r5,r5,30492
101010a0:	1009883a 	mov	r4,r2
101010a4:	0103b680 	call	10103b68 <fopen>
101010a8:	e0bfe215 	stw	r2,-120(fp)
 		if (foutput) {
101010ac:	e0bfe217 	ldw	r2,-120(fp)
101010b0:	10005426 	beq	r2,zero,10101204 <Capture_Image_Computer+0x1a0>
 			/* Use fprintf function to write to file through file pointer */
 			fprintf(foutput, "P3\n320 240\n255\n");
101010b4:	e1ffe217 	ldw	r7,-120(fp)
101010b8:	018003c4 	movi	r6,15
101010bc:	01400044 	movi	r5,1
101010c0:	01040474 	movhi	r4,4113
101010c4:	211dc804 	addi	r4,r4,30496
101010c8:	01047300 	call	10104730 <fwrite>
 			printf("Good: open \"%s\" for writing\n", filename);
101010cc:	e0bfe404 	addi	r2,fp,-112
101010d0:	100b883a 	mov	r5,r2
101010d4:	01040474 	movhi	r4,4113
101010d8:	211dcc04 	addi	r4,r4,30512
101010dc:	01052e40 	call	101052e4 <printf>
 			//
 			delay(5000000);
101010e0:	01001334 	movhi	r4,76
101010e4:	2112d004 	addi	r4,r4,19264
101010e8:	01013680 	call	10101368 <delay>
 			int Pixels[6];

 			for (int i=0;i<240;i++)
101010ec:	e03fe015 	stw	zero,-128(fp)
101010f0:	00003e06 	br	101011ec <Capture_Image_Computer+0x188>
 			{
 				for(int j=0;j<160;j++)
101010f4:	e03fe115 	stw	zero,-124(fp)
101010f8:	00002406 	br	1010118c <Capture_Image_Computer+0x128>
 				{
 					int32_t Data_Memory_Case=IORD_32DIRECT(Address, i*160*4+j*4+160*240*4*Frame);
101010fc:	e0bfe017 	ldw	r2,-128(fp)
10101100:	10c02824 	muli	r3,r2,160
10101104:	e0bfe117 	ldw	r2,-124(fp)
10101108:	1887883a 	add	r3,r3,r2
1010110c:	e13fff17 	ldw	r4,-4(fp)
10101110:	00a58014 	movui	r2,38400
10101114:	2085383a 	mul	r2,r4,r2
10101118:	1885883a 	add	r2,r3,r2
1010111c:	1085883a 	add	r2,r2,r2
10101120:	1085883a 	add	r2,r2,r2
10101124:	1007883a 	mov	r3,r2
10101128:	e0bffe17 	ldw	r2,-8(fp)
1010112c:	1885883a 	add	r2,r3,r2
10101130:	10800037 	ldwio	r2,0(r2)
10101134:	e0bfe315 	stw	r2,-116(fp)
 					Convert_Pixels(Data_Memory_Case,Pixels);
10101138:	e0bff804 	addi	r2,fp,-32
1010113c:	100b883a 	mov	r5,r2
10101140:	e13fe317 	ldw	r4,-116(fp)
10101144:	01013ac0 	call	101013ac <Convert_Pixels>
 					//printf( "%3d %3d %3d %3d %3d %3d ",Pixels[0,Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);

 					fprintf(foutput, "%3d %3d %3d %3d %3d %3d ",Pixels[0],Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);
10101148:	e1bff817 	ldw	r6,-32(fp)
1010114c:	e1fff917 	ldw	r7,-28(fp)
10101150:	e0bffa17 	ldw	r2,-24(fp)
10101154:	e0fffb17 	ldw	r3,-20(fp)
10101158:	e13ffc17 	ldw	r4,-16(fp)
1010115c:	e17ffd17 	ldw	r5,-12(fp)
10101160:	d9400315 	stw	r5,12(sp)
10101164:	d9000215 	stw	r4,8(sp)
10101168:	d8c00115 	stw	r3,4(sp)
1010116c:	d8800015 	stw	r2,0(sp)
10101170:	01440474 	movhi	r5,4113
10101174:	295dd404 	addi	r5,r5,30544
10101178:	e13fe217 	ldw	r4,-120(fp)
1010117c:	0103ba80 	call	10103ba8 <fprintf>
 			delay(5000000);
 			int Pixels[6];

 			for (int i=0;i<240;i++)
 			{
 				for(int j=0;j<160;j++)
10101180:	e0bfe117 	ldw	r2,-124(fp)
10101184:	10800044 	addi	r2,r2,1
10101188:	e0bfe115 	stw	r2,-124(fp)
1010118c:	e0bfe117 	ldw	r2,-124(fp)
10101190:	10802810 	cmplti	r2,r2,160
10101194:	103fd91e 	bne	r2,zero,101010fc <_gp+0xfffdf928>

 					fprintf(foutput, "%3d %3d %3d %3d %3d %3d ",Pixels[0],Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);

 				}
 				//printf( "\n");
 				printf( "%3d %3d %3d %3d %3d %3d ",Pixels[0],Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);
10101198:	e17ff817 	ldw	r5,-32(fp)
1010119c:	e1bff917 	ldw	r6,-28(fp)
101011a0:	e1fffa17 	ldw	r7,-24(fp)
101011a4:	e0bffb17 	ldw	r2,-20(fp)
101011a8:	e0fffc17 	ldw	r3,-16(fp)
101011ac:	e13ffd17 	ldw	r4,-12(fp)
101011b0:	d9000215 	stw	r4,8(sp)
101011b4:	d8c00115 	stw	r3,4(sp)
101011b8:	d8800015 	stw	r2,0(sp)
101011bc:	01040474 	movhi	r4,4113
101011c0:	211dd404 	addi	r4,r4,30544
101011c4:	01052e40 	call	101052e4 <printf>

 				fprintf(foutput, "\r\n");
101011c8:	e1ffe217 	ldw	r7,-120(fp)
101011cc:	01800084 	movi	r6,2
101011d0:	01400044 	movi	r5,1
101011d4:	01040474 	movhi	r4,4113
101011d8:	211ddb04 	addi	r4,r4,30572
101011dc:	01047300 	call	10104730 <fwrite>
 			printf("Good: open \"%s\" for writing\n", filename);
 			//
 			delay(5000000);
 			int Pixels[6];

 			for (int i=0;i<240;i++)
101011e0:	e0bfe017 	ldw	r2,-128(fp)
101011e4:	10800044 	addi	r2,r2,1
101011e8:	e0bfe015 	stw	r2,-128(fp)
101011ec:	e0bfe017 	ldw	r2,-128(fp)
101011f0:	10803c10 	cmplti	r2,r2,240
101011f4:	103fbf1e 	bne	r2,zero,101010f4 <_gp+0xfffdf920>
 				printf( "%3d %3d %3d %3d %3d %3d ",Pixels[0],Pixels[1],Pixels[2],Pixels[3],Pixels[4],Pixels[5]);

 				fprintf(foutput, "\r\n");

 			}
 			fclose(foutput);
101011f8:	e13fe217 	ldw	r4,-120(fp)
101011fc:	01033bc0 	call	101033bc <fclose>
 		else
 		{
 			printf("Error: could not open \"%s\" for writing\n", filename);

 		}
 }
10101200:	00000506 	br	10101218 <Capture_Image_Computer+0x1b4>
 			}
 			fclose(foutput);
 		}
 		else
 		{
 			printf("Error: could not open \"%s\" for writing\n", filename);
10101204:	e0bfe404 	addi	r2,fp,-112
10101208:	100b883a 	mov	r5,r2
1010120c:	01040474 	movhi	r4,4113
10101210:	211ddc04 	addi	r4,r4,30576
10101214:	01052e40 	call	101052e4 <printf>

 		}
 }
10101218:	0001883a 	nop
1010121c:	e037883a 	mov	sp,fp
10101220:	dfc00117 	ldw	ra,4(sp)
10101224:	df000017 	ldw	fp,0(sp)
10101228:	dec00204 	addi	sp,sp,8
1010122c:	f800283a 	ret

10101230 <Test_Function_Generator>:
 void Test_Function_Generator()
 {
10101230:	defffa04 	addi	sp,sp,-24
10101234:	dfc00515 	stw	ra,20(sp)
10101238:	df000415 	stw	fp,16(sp)
1010123c:	df000404 	addi	fp,sp,16

 	int32_t Address=HPS_0_BRIDGES_BASE;
10101240:	e03fff15 	stw	zero,-4(fp)
 	//Camera_Acquisition_Module_Stop();
 	for (int i=0;i<64;i++)
10101244:	e03ffc15 	stw	zero,-16(fp)
10101248:	00000c06 	br	1010127c <Test_Function_Generator+0x4c>
 	{
 		IOWR_32DIRECT(Address, i*4, i);
1010124c:	e0bffc17 	ldw	r2,-16(fp)
10101250:	1085883a 	add	r2,r2,r2
10101254:	1085883a 	add	r2,r2,r2
10101258:	1007883a 	mov	r3,r2
1010125c:	e0bfff17 	ldw	r2,-4(fp)
10101260:	1885883a 	add	r2,r3,r2
10101264:	1007883a 	mov	r3,r2
10101268:	e0bffc17 	ldw	r2,-16(fp)
1010126c:	18800035 	stwio	r2,0(r3)
 void Test_Function_Generator()
 {

 	int32_t Address=HPS_0_BRIDGES_BASE;
 	//Camera_Acquisition_Module_Stop();
 	for (int i=0;i<64;i++)
10101270:	e0bffc17 	ldw	r2,-16(fp)
10101274:	10800044 	addi	r2,r2,1
10101278:	e0bffc15 	stw	r2,-16(fp)
1010127c:	e0bffc17 	ldw	r2,-16(fp)
10101280:	10801010 	cmplti	r2,r2,64
10101284:	103ff11e 	bne	r2,zero,1010124c <_gp+0xfffdfa78>
 	{
 		IOWR_32DIRECT(Address, i*4, i);

 	}
 	Camera_Acquisition_Module_Stop();
10101288:	0100c740 	call	10100c74 <Camera_Acquisition_Module_Stop>
 	//Stop_CMOS_Generator();
 	delay(5000);
1010128c:	0104e204 	movi	r4,5000
10101290:	01013680 	call	10101368 <delay>
 	Configure_CMOS_Generator(16,16);
10101294:	01400404 	movi	r5,16
10101298:	01000404 	movi	r4,16
1010129c:	0100d9c0 	call	10100d9c <Configure_CMOS_Generator>
 	Display_Configuration_Generator();
101012a0:	0100edc0 	call	10100edc <Display_Configuration_Generator>
 	Camera_Acquisition_Module_SETUP_Address_Memory(Address);
101012a4:	e13fff17 	ldw	r4,-4(fp)
101012a8:	0100b4c0 	call	10100b4c <Camera_Acquisition_Module_SETUP_Address_Memory>
 	Camera_Acquisition_Module_SETUP_Length_Frame(64);
101012ac:	01001004 	movi	r4,64
101012b0:	0100ba80 	call	10100ba8 <Camera_Acquisition_Module_SETUP_Length_Frame>
 	Camera_Acquisition_Module_Start();
101012b4:	0100c1c0 	call	10100c1c <Camera_Acquisition_Module_Start>
 	Start_CMOS_Generator();
101012b8:	0100e740 	call	10100e74 <Start_CMOS_Generator>
 	int j=0;
101012bc:	e03ffd15 	stw	zero,-12(fp)
 	while (1)
 	{
 		delay(10000000);
101012c0:	01002674 	movhi	r4,153
101012c4:	2125a004 	addi	r4,r4,-27008
101012c8:	01013680 	call	10101368 <delay>
 		for (int i=0;i<8;i++)
101012cc:	e03ffe15 	stw	zero,-8(fp)
101012d0:	00001b06 	br	10101340 <Test_Function_Generator+0x110>
 		{
 			for( j=0;j<8;j++)
101012d4:	e03ffd15 	stw	zero,-12(fp)
101012d8:	00001106 	br	10101320 <Test_Function_Generator+0xf0>
 			{
 				printf("%d ",IORD_32DIRECT(Address, i*32+j*4));
101012dc:	e0bffe17 	ldw	r2,-8(fp)
101012e0:	100690fa 	slli	r3,r2,3
101012e4:	e0bffd17 	ldw	r2,-12(fp)
101012e8:	1885883a 	add	r2,r3,r2
101012ec:	1085883a 	add	r2,r2,r2
101012f0:	1085883a 	add	r2,r2,r2
101012f4:	1007883a 	mov	r3,r2
101012f8:	e0bfff17 	ldw	r2,-4(fp)
101012fc:	1885883a 	add	r2,r3,r2
10101300:	10800037 	ldwio	r2,0(r2)
10101304:	100b883a 	mov	r5,r2
10101308:	01040474 	movhi	r4,4113
1010130c:	211de604 	addi	r4,r4,30616
10101310:	01052e40 	call	101052e4 <printf>
 	while (1)
 	{
 		delay(10000000);
 		for (int i=0;i<8;i++)
 		{
 			for( j=0;j<8;j++)
10101314:	e0bffd17 	ldw	r2,-12(fp)
10101318:	10800044 	addi	r2,r2,1
1010131c:	e0bffd15 	stw	r2,-12(fp)
10101320:	e0bffd17 	ldw	r2,-12(fp)
10101324:	10800210 	cmplti	r2,r2,8
10101328:	103fec1e 	bne	r2,zero,101012dc <_gp+0xfffdfb08>
 			{
 				printf("%d ",IORD_32DIRECT(Address, i*32+j*4));
 			}
 			printf("\n");
1010132c:	01000284 	movi	r4,10
10101330:	01053280 	call	10105328 <putchar>
 	Start_CMOS_Generator();
 	int j=0;
 	while (1)
 	{
 		delay(10000000);
 		for (int i=0;i<8;i++)
10101334:	e0bffe17 	ldw	r2,-8(fp)
10101338:	10800044 	addi	r2,r2,1
1010133c:	e0bffe15 	stw	r2,-8(fp)
10101340:	e0bffe17 	ldw	r2,-8(fp)
10101344:	10800210 	cmplti	r2,r2,8
10101348:	103fe21e 	bne	r2,zero,101012d4 <_gp+0xfffdfb00>
 				printf("%d ",IORD_32DIRECT(Address, i*32+j*4));
 			}
 			printf("\n");

 		}
 		printf("\r\n");
1010134c:	01040474 	movhi	r4,4113
10101350:	211de704 	addi	r4,r4,30620
10101354:	01054000 	call	10105400 <puts>
 		printf("\r\n");
10101358:	01040474 	movhi	r4,4113
1010135c:	211de704 	addi	r4,r4,30620
10101360:	01054000 	call	10105400 <puts>
 	}
10101364:	003fd606 	br	101012c0 <_gp+0xfffdfaec>

10101368 <delay>:

 }
 void delay(int duration )
 {
10101368:	defffd04 	addi	sp,sp,-12
1010136c:	df000215 	stw	fp,8(sp)
10101370:	df000204 	addi	fp,sp,8
10101374:	e13fff15 	stw	r4,-4(fp)
 	int i;
 	for (i=0;i<duration;i++);
10101378:	e03ffe15 	stw	zero,-8(fp)
1010137c:	00000306 	br	1010138c <delay+0x24>
10101380:	e0bffe17 	ldw	r2,-8(fp)
10101384:	10800044 	addi	r2,r2,1
10101388:	e0bffe15 	stw	r2,-8(fp)
1010138c:	e0fffe17 	ldw	r3,-8(fp)
10101390:	e0bfff17 	ldw	r2,-4(fp)
10101394:	18bffa16 	blt	r3,r2,10101380 <_gp+0xfffdfbac>
 }
10101398:	0001883a 	nop
1010139c:	e037883a 	mov	sp,fp
101013a0:	df000017 	ldw	fp,0(sp)
101013a4:	dec00104 	addi	sp,sp,4
101013a8:	f800283a 	ret

101013ac <Convert_Pixels>:
 void Convert_Pixels(int32_t Data,int* Storage)
 {
101013ac:	defffc04 	addi	sp,sp,-16
101013b0:	dfc00315 	stw	ra,12(sp)
101013b4:	df000215 	stw	fp,8(sp)
101013b8:	df000204 	addi	fp,sp,8
101013bc:	e13ffe15 	stw	r4,-8(fp)
101013c0:	e17fff15 	stw	r5,-4(fp)
 	Extract_Colors(Data&0xFFFF,Storage);
101013c4:	e0bffe17 	ldw	r2,-8(fp)
101013c8:	10bfffcc 	andi	r2,r2,65535
101013cc:	10a0001c 	xori	r2,r2,32768
101013d0:	10a00004 	addi	r2,r2,-32768
101013d4:	e17fff17 	ldw	r5,-4(fp)
101013d8:	1009883a 	mov	r4,r2
101013dc:	01014200 	call	10101420 <Extract_Colors>
 	Extract_Colors((Data&0xFFFF0000)>>16,Storage+3);
101013e0:	e0bffe17 	ldw	r2,-8(fp)
101013e4:	1004d43a 	srli	r2,r2,16
101013e8:	10ffffcc 	andi	r3,r2,65535
101013ec:	18e0001c 	xori	r3,r3,32768
101013f0:	18e00004 	addi	r3,r3,-32768
101013f4:	e0bfff17 	ldw	r2,-4(fp)
101013f8:	10800304 	addi	r2,r2,12
101013fc:	100b883a 	mov	r5,r2
10101400:	1809883a 	mov	r4,r3
10101404:	01014200 	call	10101420 <Extract_Colors>

 }
10101408:	0001883a 	nop
1010140c:	e037883a 	mov	sp,fp
10101410:	dfc00117 	ldw	ra,4(sp)
10101414:	df000017 	ldw	fp,0(sp)
10101418:	dec00204 	addi	sp,sp,8
1010141c:	f800283a 	ret

10101420 <Extract_Colors>:
 void Extract_Colors(int16_t Data,int* Storage)
 {
10101420:	defff904 	addi	sp,sp,-28
10101424:	df000615 	stw	fp,24(sp)
10101428:	df000604 	addi	fp,sp,24
1010142c:	2005883a 	mov	r2,r4
10101430:	e17fff15 	stw	r5,-4(fp)
10101434:	e0bffe0d 	sth	r2,-8(fp)
 	int Red=0, Blue=0, Green=0;
10101438:	e03ffa15 	stw	zero,-24(fp)
1010143c:	e03ffb15 	stw	zero,-20(fp)
10101440:	e03ffc15 	stw	zero,-16(fp)
 	Red=(Data & 0xF800)>>11;
10101444:	e0bffe0f 	ldh	r2,-8(fp)
10101448:	10be000c 	andi	r2,r2,63488
1010144c:	1005d2fa 	srai	r2,r2,11
10101450:	e0bffa15 	stw	r2,-24(fp)
 	Blue=(Data & 0x001F);
10101454:	e0bffe0b 	ldhu	r2,-8(fp)
10101458:	10bfffcc 	andi	r2,r2,65535
1010145c:	108007cc 	andi	r2,r2,31
10101460:	e0bffb15 	stw	r2,-20(fp)
 	Green=(Data & 0x07E0)>>5;
10101464:	e0bffe0b 	ldhu	r2,-8(fp)
10101468:	10bfffcc 	andi	r2,r2,65535
1010146c:	1081f80c 	andi	r2,r2,2016
10101470:	1005d17a 	srai	r2,r2,5
10101474:	e0bffc15 	stw	r2,-16(fp)
 	int Color=Red*255/32;
10101478:	e0bffa17 	ldw	r2,-24(fp)
1010147c:	10803fe4 	muli	r2,r2,255
10101480:	1000010e 	bge	r2,zero,10101488 <Extract_Colors+0x68>
10101484:	108007c4 	addi	r2,r2,31
10101488:	1005d17a 	srai	r2,r2,5
1010148c:	e0bffd15 	stw	r2,-12(fp)
 	if(Color>255)
10101490:	e0bffd17 	ldw	r2,-12(fp)
10101494:	10804010 	cmplti	r2,r2,256
10101498:	1000041e 	bne	r2,zero,101014ac <Extract_Colors+0x8c>
 		Storage[0]=255;
1010149c:	e0bfff17 	ldw	r2,-4(fp)
101014a0:	00c03fc4 	movi	r3,255
101014a4:	10c00015 	stw	r3,0(r2)
101014a8:	00000306 	br	101014b8 <Extract_Colors+0x98>
 	else
 		Storage[0]=Color;
101014ac:	e0bfff17 	ldw	r2,-4(fp)
101014b0:	e0fffd17 	ldw	r3,-12(fp)
101014b4:	10c00015 	stw	r3,0(r2)
 	Color=Green*255/64;
101014b8:	e0bffc17 	ldw	r2,-16(fp)
101014bc:	10803fe4 	muli	r2,r2,255
101014c0:	1000010e 	bge	r2,zero,101014c8 <Extract_Colors+0xa8>
101014c4:	10800fc4 	addi	r2,r2,63
101014c8:	1005d1ba 	srai	r2,r2,6
101014cc:	e0bffd15 	stw	r2,-12(fp)
 	if(Color>255)
101014d0:	e0bffd17 	ldw	r2,-12(fp)
101014d4:	10804010 	cmplti	r2,r2,256
101014d8:	1000051e 	bne	r2,zero,101014f0 <Extract_Colors+0xd0>
 		Storage[1]=255;
101014dc:	e0bfff17 	ldw	r2,-4(fp)
101014e0:	10800104 	addi	r2,r2,4
101014e4:	00c03fc4 	movi	r3,255
101014e8:	10c00015 	stw	r3,0(r2)
101014ec:	00000406 	br	10101500 <Extract_Colors+0xe0>
 	else
 		Storage[1]=Color;
101014f0:	e0bfff17 	ldw	r2,-4(fp)
101014f4:	10800104 	addi	r2,r2,4
101014f8:	e0fffd17 	ldw	r3,-12(fp)
101014fc:	10c00015 	stw	r3,0(r2)
 	Color=Blue*255/32;
10101500:	e0bffb17 	ldw	r2,-20(fp)
10101504:	10803fe4 	muli	r2,r2,255
10101508:	1000010e 	bge	r2,zero,10101510 <Extract_Colors+0xf0>
1010150c:	108007c4 	addi	r2,r2,31
10101510:	1005d17a 	srai	r2,r2,5
10101514:	e0bffd15 	stw	r2,-12(fp)
 	if(Color>255)
10101518:	e0bffd17 	ldw	r2,-12(fp)
1010151c:	10804010 	cmplti	r2,r2,256
10101520:	1000051e 	bne	r2,zero,10101538 <Extract_Colors+0x118>
 		Storage[2]=255;
10101524:	e0bfff17 	ldw	r2,-4(fp)
10101528:	10800204 	addi	r2,r2,8
1010152c:	00c03fc4 	movi	r3,255
10101530:	10c00015 	stw	r3,0(r2)
 	else
 		Storage[2]=Color;
 	return ;
10101534:	00000506 	br	1010154c <Extract_Colors+0x12c>
 		Storage[1]=Color;
 	Color=Blue*255/32;
 	if(Color>255)
 		Storage[2]=255;
 	else
 		Storage[2]=Color;
10101538:	e0bfff17 	ldw	r2,-4(fp)
1010153c:	10800204 	addi	r2,r2,8
10101540:	e0fffd17 	ldw	r3,-12(fp)
10101544:	10c00015 	stw	r3,0(r2)
 	return ;
10101548:	0001883a 	nop
 }
1010154c:	e037883a 	mov	sp,fp
10101550:	df000017 	ldw	fp,0(sp)
10101554:	dec00104 	addi	sp,sp,4
10101558:	f800283a 	ret

1010155c <LCD_Write_Command>:
#include "LCD_function.h"
#define LCD_0_BASE LCD_0_0_BASE
void LCD_Write_Command(int Command_Data)
{
1010155c:	defffd04 	addi	sp,sp,-12
10101560:	df000215 	stw	fp,8(sp)
10101564:	df000204 	addi	fp,sp,8
10101568:	e13fff15 	stw	r4,-4(fp)
	volatile int Check;

	Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
1010156c:	00840034 	movhi	r2,4096
10101570:	10820904 	addi	r2,r2,2084
10101574:	10800037 	ldwio	r2,0(r2)
10101578:	e0bffe15 	stw	r2,-8(fp)

	if (Check == 0)
1010157c:	e0bffe17 	ldw	r2,-8(fp)
10101580:	1000081e 	bne	r2,zero,101015a4 <LCD_Write_Command+0x48>
	{
		IOWR_32DIRECT(LCD_0_BASE,REGCOMMANDDATA,Command_Data);
10101584:	00840034 	movhi	r2,4096
10101588:	10820804 	addi	r2,r2,2080
1010158c:	e0ffff17 	ldw	r3,-4(fp)
10101590:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA,0x00000001);
10101594:	00c00044 	movi	r3,1
10101598:	00840034 	movhi	r2,4096
1010159c:	10820904 	addi	r2,r2,2084
101015a0:	10c00035 	stwio	r3,0(r2)
	}

}
101015a4:	0001883a 	nop
101015a8:	e037883a 	mov	sp,fp
101015ac:	df000017 	ldw	fp,0(sp)
101015b0:	dec00104 	addi	sp,sp,4
101015b4:	f800283a 	ret

101015b8 <LCD_Write_Data>:

void LCD_Write_Data(int Command_Data)
{
101015b8:	defffd04 	addi	sp,sp,-12
101015bc:	df000215 	stw	fp,8(sp)
101015c0:	df000204 	addi	fp,sp,8
101015c4:	e13fff15 	stw	r4,-4(fp)
	volatile int Check;

	Check = IORD_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA);
101015c8:	00840034 	movhi	r2,4096
101015cc:	10820904 	addi	r2,r2,2084
101015d0:	10800037 	ldwio	r2,0(r2)
101015d4:	e0bffe15 	stw	r2,-8(fp)

	if (Check == 0)
101015d8:	e0bffe17 	ldw	r2,-8(fp)
101015dc:	1000081e 	bne	r2,zero,10101600 <LCD_Write_Data+0x48>
	{
		IOWR_32DIRECT(LCD_0_BASE,REGCOMMANDDATA,Command_Data);
101015e0:	00840034 	movhi	r2,4096
101015e4:	10820804 	addi	r2,r2,2080
101015e8:	e0ffff17 	ldw	r3,-4(fp)
101015ec:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA,0x00000002);
101015f0:	00c00084 	movi	r3,2
101015f4:	00840034 	movhi	r2,4096
101015f8:	10820904 	addi	r2,r2,2084
101015fc:	10c00035 	stwio	r3,0(r2)
	}

}
10101600:	0001883a 	nop
10101604:	e037883a 	mov	sp,fp
10101608:	df000017 	ldw	fp,0(sp)
1010160c:	dec00104 	addi	sp,sp,4
10101610:	f800283a 	ret

10101614 <Fill_Memory>:

void Fill_Memory(int Start, int End, int Color)
{
10101614:	defff904 	addi	sp,sp,-28
10101618:	dfc00615 	stw	ra,24(sp)
1010161c:	df000515 	stw	fp,20(sp)
10101620:	df000504 	addi	fp,sp,20
10101624:	e13ffd15 	stw	r4,-12(fp)
10101628:	e17ffe15 	stw	r5,-8(fp)
1010162c:	e1bfff15 	stw	r6,-4(fp)
	volatile int i;

	for (i = Start; i < End; i += 4)
10101630:	e0bffd17 	ldw	r2,-12(fp)
10101634:	e0bffb15 	stw	r2,-20(fp)
10101638:	00001006 	br	1010167c <Fill_Memory+0x68>
	{
		volatile int Verif;

		IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,Color);
1010163c:	e0bffb17 	ldw	r2,-20(fp)
10101640:	1007883a 	mov	r3,r2
10101644:	e0bfff17 	ldw	r2,-4(fp)
10101648:	18800035 	stwio	r2,0(r3)
		Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
1010164c:	e0bffb17 	ldw	r2,-20(fp)
10101650:	10800037 	ldwio	r2,0(r2)
10101654:	e0bffc15 	stw	r2,-16(fp)
		if (Verif != Color)
10101658:	e0fffc17 	ldw	r3,-16(fp)
1010165c:	e0bfff17 	ldw	r2,-4(fp)
10101660:	18800326 	beq	r3,r2,10101670 <Fill_Memory+0x5c>
		{
			printf("Error !\n");
10101664:	01040474 	movhi	r4,4113
10101668:	211de804 	addi	r4,r4,30624
1010166c:	01054000 	call	10105400 <puts>

void Fill_Memory(int Start, int End, int Color)
{
	volatile int i;

	for (i = Start; i < End; i += 4)
10101670:	e0bffb17 	ldw	r2,-20(fp)
10101674:	10800104 	addi	r2,r2,4
10101678:	e0bffb15 	stw	r2,-20(fp)
1010167c:	e0fffb17 	ldw	r3,-20(fp)
10101680:	e0bffe17 	ldw	r2,-8(fp)
10101684:	18bfed16 	blt	r3,r2,1010163c <_gp+0xfffdfe68>
		{
			printf("Error !\n");
		}
	}

	printf("Memory filled !\n");
10101688:	01040474 	movhi	r4,4113
1010168c:	211dea04 	addi	r4,r4,30632
10101690:	01054000 	call	10105400 <puts>
}
10101694:	0001883a 	nop
10101698:	e037883a 	mov	sp,fp
1010169c:	dfc00117 	ldw	ra,4(sp)
101016a0:	df000017 	ldw	fp,0(sp)
101016a4:	dec00204 	addi	sp,sp,8
101016a8:	f800283a 	ret

101016ac <Fill_Memory_RGBG>:

void Fill_Memory_RGBG(void)
{
101016ac:	defffc04 	addi	sp,sp,-16
101016b0:	dfc00315 	stw	ra,12(sp)
101016b4:	df000215 	stw	fp,8(sp)
101016b8:	df000204 	addi	fp,sp,8
	volatile int i;

	volatile int Verif;

		for (i = 0; i < LENGTHBUFFER; i += 4)
101016bc:	e03ffe15 	stw	zero,-8(fp)
101016c0:	00005406 	br	10101814 <Fill_Memory_RGBG+0x168>
		{
			if ( i< LENGTHBUFFER/4)
101016c4:	e0bffe17 	ldw	r2,-8(fp)
101016c8:	00e57fd4 	movui	r3,38399
101016cc:	18800e16 	blt	r3,r2,10101708 <Fill_Memory_RGBG+0x5c>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,RED);
101016d0:	e0bffe17 	ldw	r2,-8(fp)
101016d4:	1007883a 	mov	r3,r2
101016d8:	00be0014 	movui	r2,63488
101016dc:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
101016e0:	e0bffe17 	ldw	r2,-8(fp)
101016e4:	10800037 	ldwio	r2,0(r2)
101016e8:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != RED)
101016ec:	e0ffff17 	ldw	r3,-4(fp)
101016f0:	00be0014 	movui	r2,63488
101016f4:	18804426 	beq	r3,r2,10101808 <Fill_Memory_RGBG+0x15c>
				{
					printf("Error !\n");
101016f8:	01040474 	movhi	r4,4113
101016fc:	211de804 	addi	r4,r4,30624
10101700:	01054000 	call	10105400 <puts>
10101704:	00004006 	br	10101808 <Fill_Memory_RGBG+0x15c>
				}
			}
			else if ( i> LENGTHBUFFER/4 & i<LENGTHBUFFER/2)
10101708:	e0bffe17 	ldw	r2,-8(fp)
1010170c:	00e58014 	movui	r3,38400
10101710:	1884803a 	cmplt	r2,r3,r2
10101714:	1009883a 	mov	r4,r2
10101718:	e0fffe17 	ldw	r3,-8(fp)
1010171c:	00800074 	movhi	r2,1
10101720:	108affc4 	addi	r2,r2,11263
10101724:	10c4403a 	cmpge	r2,r2,r3
10101728:	2084703a 	and	r2,r4,r2
1010172c:	10803fcc 	andi	r2,r2,255
10101730:	10000e26 	beq	r2,zero,1010176c <Fill_Memory_RGBG+0xc0>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,GREEN);
10101734:	e0bffe17 	ldw	r2,-8(fp)
10101738:	1007883a 	mov	r3,r2
1010173c:	0081f804 	movi	r2,2016
10101740:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
10101744:	e0bffe17 	ldw	r2,-8(fp)
10101748:	10800037 	ldwio	r2,0(r2)
1010174c:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != GREEN)
10101750:	e0bfff17 	ldw	r2,-4(fp)
10101754:	1081f820 	cmpeqi	r2,r2,2016
10101758:	10002b1e 	bne	r2,zero,10101808 <Fill_Memory_RGBG+0x15c>
				{
					printf("Error !\n");
1010175c:	01040474 	movhi	r4,4113
10101760:	211de804 	addi	r4,r4,30624
10101764:	01054000 	call	10105400 <puts>
10101768:	00002706 	br	10101808 <Fill_Memory_RGBG+0x15c>
				}
			}
			else if ( i> LENGTHBUFFER/2 & i<3*LENGTHBUFFER/4)
1010176c:	e0fffe17 	ldw	r3,-8(fp)
10101770:	00800074 	movhi	r2,1
10101774:	108b0004 	addi	r2,r2,11264
10101778:	10c4803a 	cmplt	r2,r2,r3
1010177c:	1009883a 	mov	r4,r2
10101780:	e0fffe17 	ldw	r3,-8(fp)
10101784:	008000b4 	movhi	r2,2
10101788:	10b07fc4 	addi	r2,r2,-15873
1010178c:	10c4403a 	cmpge	r2,r2,r3
10101790:	2084703a 	and	r2,r4,r2
10101794:	10803fcc 	andi	r2,r2,255
10101798:	10000e26 	beq	r2,zero,101017d4 <Fill_Memory_RGBG+0x128>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,BLUE);
1010179c:	e0bffe17 	ldw	r2,-8(fp)
101017a0:	1007883a 	mov	r3,r2
101017a4:	008007c4 	movi	r2,31
101017a8:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
101017ac:	e0bffe17 	ldw	r2,-8(fp)
101017b0:	10800037 	ldwio	r2,0(r2)
101017b4:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != BLUE)
101017b8:	e0bfff17 	ldw	r2,-4(fp)
101017bc:	108007e0 	cmpeqi	r2,r2,31
101017c0:	1000111e 	bne	r2,zero,10101808 <Fill_Memory_RGBG+0x15c>
				{
					printf("Error !\n");
101017c4:	01040474 	movhi	r4,4113
101017c8:	211de804 	addi	r4,r4,30624
101017cc:	01054000 	call	10105400 <puts>
101017d0:	00000d06 	br	10101808 <Fill_Memory_RGBG+0x15c>
				}
			}
			else
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,GREEN);
101017d4:	e0bffe17 	ldw	r2,-8(fp)
101017d8:	1007883a 	mov	r3,r2
101017dc:	0081f804 	movi	r2,2016
101017e0:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
101017e4:	e0bffe17 	ldw	r2,-8(fp)
101017e8:	10800037 	ldwio	r2,0(r2)
101017ec:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != GREEN)
101017f0:	e0bfff17 	ldw	r2,-4(fp)
101017f4:	1081f820 	cmpeqi	r2,r2,2016
101017f8:	1000031e 	bne	r2,zero,10101808 <Fill_Memory_RGBG+0x15c>
				{
					printf("Error !\n");
101017fc:	01040474 	movhi	r4,4113
10101800:	211de804 	addi	r4,r4,30624
10101804:	01054000 	call	10105400 <puts>
{
	volatile int i;

	volatile int Verif;

		for (i = 0; i < LENGTHBUFFER; i += 4)
10101808:	e0bffe17 	ldw	r2,-8(fp)
1010180c:	10800104 	addi	r2,r2,4
10101810:	e0bffe15 	stw	r2,-8(fp)
10101814:	e0fffe17 	ldw	r3,-8(fp)
10101818:	008000b4 	movhi	r2,2
1010181c:	1095ffc4 	addi	r2,r2,22527
10101820:	10ffa80e 	bge	r2,r3,101016c4 <_gp+0xfffdfef0>
				}
			}

		}

		printf("Memory filled !\n");
10101824:	01040474 	movhi	r4,4113
10101828:	211dea04 	addi	r4,r4,30632
1010182c:	01054000 	call	10105400 <puts>
}
10101830:	0001883a 	nop
10101834:	e037883a 	mov	sp,fp
10101838:	dfc00117 	ldw	ra,4(sp)
1010183c:	df000017 	ldw	fp,0(sp)
10101840:	dec00204 	addi	sp,sp,8
10101844:	f800283a 	ret

10101848 <Fill_Memory_0_1>:

void Fill_Memory_0_1(void)
{
10101848:	defffb04 	addi	sp,sp,-20
1010184c:	dfc00415 	stw	ra,16(sp)
10101850:	df000315 	stw	fp,12(sp)
10101854:	df000304 	addi	fp,sp,12
	volatile int i;
	volatile int j;

	volatile int Verif;

	j = 0;
10101858:	e03ffe15 	stw	zero,-8(fp)

	for (i = 0; i < LENGTHBUFFER; i += 4)
1010185c:	e03ffd15 	stw	zero,-12(fp)
10101860:	00002106 	br	101018e8 <Fill_Memory_0_1+0xa0>
		{
			if (j == 0)
10101864:	e0bffe17 	ldw	r2,-8(fp)
10101868:	10000e1e 	bne	r2,zero,101018a4 <Fill_Memory_0_1+0x5c>
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,0);
1010186c:	e0bffd17 	ldw	r2,-12(fp)
10101870:	0007883a 	mov	r3,zero
10101874:	10c00035 	stwio	r3,0(r2)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
10101878:	e0bffd17 	ldw	r2,-12(fp)
1010187c:	10800037 	ldwio	r2,0(r2)
10101880:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != 0)
10101884:	e0bfff17 	ldw	r2,-4(fp)
10101888:	10000326 	beq	r2,zero,10101898 <Fill_Memory_0_1+0x50>
				{
					printf("Error !\n");
1010188c:	01040474 	movhi	r4,4113
10101890:	211de804 	addi	r4,r4,30624
10101894:	01054000 	call	10105400 <puts>
				}
				j = 1;
10101898:	00800044 	movi	r2,1
1010189c:	e0bffe15 	stw	r2,-8(fp)
101018a0:	00000e06 	br	101018dc <Fill_Memory_0_1+0x94>
			}
			else
			{
				IOWR_32DIRECT(HPS_0_BRIDGES_BASE,i,0xFFFFFFFF);
101018a4:	e0bffd17 	ldw	r2,-12(fp)
101018a8:	1007883a 	mov	r3,r2
101018ac:	00bfffc4 	movi	r2,-1
101018b0:	18800035 	stwio	r2,0(r3)
				Verif = IORD_32DIRECT(HPS_0_BRIDGES_BASE,i);
101018b4:	e0bffd17 	ldw	r2,-12(fp)
101018b8:	10800037 	ldwio	r2,0(r2)
101018bc:	e0bfff15 	stw	r2,-4(fp)
				if (Verif != 0xFFFFFFFF)
101018c0:	e0bfff17 	ldw	r2,-4(fp)
101018c4:	10bfffe0 	cmpeqi	r2,r2,-1
101018c8:	1000031e 	bne	r2,zero,101018d8 <Fill_Memory_0_1+0x90>
				{
					printf("Error !\n");
101018cc:	01040474 	movhi	r4,4113
101018d0:	211de804 	addi	r4,r4,30624
101018d4:	01054000 	call	10105400 <puts>
				}
				j = 0;
101018d8:	e03ffe15 	stw	zero,-8(fp)

	volatile int Verif;

	j = 0;

	for (i = 0; i < LENGTHBUFFER; i += 4)
101018dc:	e0bffd17 	ldw	r2,-12(fp)
101018e0:	10800104 	addi	r2,r2,4
101018e4:	e0bffd15 	stw	r2,-12(fp)
101018e8:	e0fffd17 	ldw	r3,-12(fp)
101018ec:	008000b4 	movhi	r2,2
101018f0:	1095ffc4 	addi	r2,r2,22527
101018f4:	10ffdb0e 	bge	r2,r3,10101864 <_gp+0xfffe0090>
				}
				j = 0;
			}
		}

		printf("Memory filled !\n");
101018f8:	01040474 	movhi	r4,4113
101018fc:	211dea04 	addi	r4,r4,30632
10101900:	01054000 	call	10105400 <puts>
}
10101904:	0001883a 	nop
10101908:	e037883a 	mov	sp,fp
1010190c:	dfc00117 	ldw	ra,4(sp)
10101910:	df000017 	ldw	fp,0(sp)
10101914:	dec00204 	addi	sp,sp,8
10101918:	f800283a 	ret

1010191c <LCD_Configuration>:
void LCD_Configuration()
{
1010191c:	defffd04 	addi	sp,sp,-12
10101920:	dfc00215 	stw	ra,8(sp)
10101924:	df000115 	stw	fp,4(sp)
10101928:	df000104 	addi	fp,sp,4
	volatile int j;

	for (j = 0; j < 10000; j += 1);
1010192c:	e03fff15 	stw	zero,-4(fp)
10101930:	00000306 	br	10101940 <LCD_Configuration+0x24>
10101934:	e0bfff17 	ldw	r2,-4(fp)
10101938:	10800044 	addi	r2,r2,1
1010193c:	e0bfff15 	stw	r2,-4(fp)
10101940:	e0bfff17 	ldw	r2,-4(fp)
10101944:	1089c410 	cmplti	r2,r2,10000
10101948:	103ffa1e 	bne	r2,zero,10101934 <_gp+0xfffe0160>

	printf("LCD COnfiguration Start!\n");
1010194c:	01040474 	movhi	r4,4113
10101950:	211dee04 	addi	r4,r4,30648
10101954:	01054000 	call	10105400 <puts>

	IOWR_32DIRECT(LCD_0_BASE,REGSTARTADD,HPS_0_BRIDGES_BASE);
10101958:	0007883a 	mov	r3,zero
1010195c:	00840034 	movhi	r2,4096
10101960:	10820a04 	addi	r2,r2,2088
10101964:	10c00035 	stwio	r3,0(r2)
	alt_printf("RegStartAdd=%x\n", IORD_32DIRECT(LCD_0_BASE,REGSTARTADD));
10101968:	00840034 	movhi	r2,4096
1010196c:	10820a04 	addi	r2,r2,2088
10101970:	10800037 	ldwio	r2,0(r2)
10101974:	100b883a 	mov	r5,r2
10101978:	01040474 	movhi	r4,4113
1010197c:	211df504 	addi	r4,r4,30676
10101980:	0114d200 	call	10114d20 <alt_printf>
	IOWR_32DIRECT(LCD_0_BASE,REGLENGTHBUFFER,LENGTHBUFFER);
10101984:	00c000b4 	movhi	r3,2
10101988:	18d60004 	addi	r3,r3,22528
1010198c:	00840034 	movhi	r2,4096
10101990:	10820b04 	addi	r2,r2,2092
10101994:	10c00035 	stwio	r3,0(r2)
	alt_printf("RegLengthBuffer=%x\n", IORD_32DIRECT(LCD_0_BASE,REGLENGTHBUFFER));
10101998:	00840034 	movhi	r2,4096
1010199c:	10820b04 	addi	r2,r2,2092
101019a0:	10800037 	ldwio	r2,0(r2)
101019a4:	100b883a 	mov	r5,r2
101019a8:	01040474 	movhi	r4,4113
101019ac:	211df904 	addi	r4,r4,30692
101019b0:	0114d200 	call	10114d20 <alt_printf>

	IOWR_32DIRECT(LCD_0_BASE,REGCOMMANDDATA,0);
101019b4:	0007883a 	mov	r3,zero
101019b8:	00840034 	movhi	r2,4096
101019bc:	10820804 	addi	r2,r2,2080
101019c0:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_0_BASE,REGSTATECOMMANDDATA,0);
101019c4:	0007883a 	mov	r3,zero
101019c8:	00840034 	movhi	r2,4096
101019cc:	10820904 	addi	r2,r2,2084
101019d0:	10c00035 	stwio	r3,0(r2)

	//Fill_Memory(STARTADD,LENGTHBUFFER,RED);
	Fill_Memory_0_1();
101019d4:	01018480 	call	10101848 <Fill_Memory_0_1>
	//Fill_Memory_RGBG();

	LCD_Write_Command(0x00000001);
101019d8:	01000044 	movi	r4,1
101019dc:	010155c0 	call	1010155c <LCD_Write_Command>
	for (j = 0; j < 10000; j += 1);
101019e0:	e03fff15 	stw	zero,-4(fp)
101019e4:	00000306 	br	101019f4 <LCD_Configuration+0xd8>
101019e8:	e0bfff17 	ldw	r2,-4(fp)
101019ec:	10800044 	addi	r2,r2,1
101019f0:	e0bfff15 	stw	r2,-4(fp)
101019f4:	e0bfff17 	ldw	r2,-4(fp)
101019f8:	1089c410 	cmplti	r2,r2,10000
101019fc:	103ffa1e 	bne	r2,zero,101019e8 <_gp+0xfffe0214>
	LCD_Write_Command(0x00000000);
10101a00:	0009883a 	mov	r4,zero
10101a04:	010155c0 	call	1010155c <LCD_Write_Command>
	for (j = 0; j < 100000; j += 1);
10101a08:	e03fff15 	stw	zero,-4(fp)
10101a0c:	00000306 	br	10101a1c <LCD_Configuration+0x100>
10101a10:	e0bfff17 	ldw	r2,-4(fp)
10101a14:	10800044 	addi	r2,r2,1
10101a18:	e0bfff15 	stw	r2,-4(fp)
10101a1c:	e0ffff17 	ldw	r3,-4(fp)
10101a20:	008000b4 	movhi	r2,2
10101a24:	10a1a7c4 	addi	r2,r2,-31073
10101a28:	10fff90e 	bge	r2,r3,10101a10 <_gp+0xfffe023c>
	LCD_Write_Command(0x00000001);
10101a2c:	01000044 	movi	r4,1
10101a30:	010155c0 	call	1010155c <LCD_Write_Command>
	for (j = 0; j < 500000; j += 1);
10101a34:	e03fff15 	stw	zero,-4(fp)
10101a38:	00000306 	br	10101a48 <LCD_Configuration+0x12c>
10101a3c:	e0bfff17 	ldw	r2,-4(fp)
10101a40:	10800044 	addi	r2,r2,1
10101a44:	e0bfff15 	stw	r2,-4(fp)
10101a48:	e0ffff17 	ldw	r3,-4(fp)
10101a4c:	00800234 	movhi	r2,8
10101a50:	10a847c4 	addi	r2,r2,-24289
10101a54:	10fff90e 	bge	r2,r3,10101a3c <_gp+0xfffe0268>

	LCD_Write_Command(0x00000011);
10101a58:	01000444 	movi	r4,17
10101a5c:	010155c0 	call	1010155c <LCD_Write_Command>

	LCD_Write_Command(0x000000CF);
10101a60:	010033c4 	movi	r4,207
10101a64:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000000);
10101a68:	0009883a 	mov	r4,zero
10101a6c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000081);
10101a70:	01002044 	movi	r4,129
10101a74:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000E8);
10101a78:	01003a04 	movi	r4,232
10101a7c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000085);
10101a80:	01002144 	movi	r4,133
10101a84:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000001);
10101a88:	01000044 	movi	r4,1
10101a8c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000798);
10101a90:	0101e604 	movi	r4,1944
10101a94:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000CB);
10101a98:	010032c4 	movi	r4,203
10101a9c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000039);
10101aa0:	01000e44 	movi	r4,57
10101aa4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000002C);
10101aa8:	01000b04 	movi	r4,44
10101aac:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000000);
10101ab0:	0009883a 	mov	r4,zero
10101ab4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000034);
10101ab8:	01000d04 	movi	r4,52
10101abc:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000002);
10101ac0:	01000084 	movi	r4,2
10101ac4:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000F7);
10101ac8:	01003dc4 	movi	r4,247
10101acc:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000020);
10101ad0:	01000804 	movi	r4,32
10101ad4:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000EA);
10101ad8:	01003a84 	movi	r4,234
10101adc:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000000);
10101ae0:	0009883a 	mov	r4,zero
10101ae4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000000);
10101ae8:	0009883a 	mov	r4,zero
10101aec:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000B1);
10101af0:	01002c44 	movi	r4,177
10101af4:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000000);
10101af8:	0009883a 	mov	r4,zero
10101afc:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000001B);
10101b00:	010006c4 	movi	r4,27
10101b04:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000B6);
10101b08:	01002d84 	movi	r4,182
10101b0c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x0000000A);
10101b10:	01000284 	movi	r4,10
10101b14:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x000000A2);
10101b18:	01002884 	movi	r4,162
10101b1c:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000C0);
10101b20:	01003004 	movi	r4,192
10101b24:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000005);
10101b28:	01000144 	movi	r4,5
10101b2c:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000C1);
10101b30:	01003044 	movi	r4,193
10101b34:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000011);
10101b38:	01000444 	movi	r4,17
10101b3c:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000C5);
10101b40:	01003144 	movi	r4,197
10101b44:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000045);
10101b48:	01001144 	movi	r4,69
10101b4c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000045);
10101b50:	01001144 	movi	r4,69
10101b54:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000C7);
10101b58:	010031c4 	movi	r4,199
10101b5c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x000000A2);
10101b60:	01002884 	movi	r4,162
10101b64:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x00000036);
10101b68:	01000d84 	movi	r4,54
10101b6c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x0000002C);
10101b70:	01000b04 	movi	r4,44
10101b74:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000F2);
10101b78:	01003c84 	movi	r4,242
10101b7c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000000);
10101b80:	0009883a 	mov	r4,zero
10101b84:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x00000026);
10101b88:	01000984 	movi	r4,38
10101b8c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000001);
10101b90:	01000044 	movi	r4,1
10101b94:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000E0);
10101b98:	01003804 	movi	r4,224
10101b9c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x0000000F);
10101ba0:	010003c4 	movi	r4,15
10101ba4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000026);
10101ba8:	01000984 	movi	r4,38
10101bac:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000024);
10101bb0:	01000904 	movi	r4,36
10101bb4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000000B);
10101bb8:	010002c4 	movi	r4,11
10101bbc:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000000E);
10101bc0:	01000384 	movi	r4,14
10101bc4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000008);
10101bc8:	01000204 	movi	r4,8
10101bcc:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000004B);
10101bd0:	010012c4 	movi	r4,75
10101bd4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x000000A8);
10101bd8:	01002a04 	movi	r4,168
10101bdc:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000003B);
10101be0:	01000ec4 	movi	r4,59
10101be4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000000A);
10101be8:	01000284 	movi	r4,10
10101bec:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000014);
10101bf0:	01000504 	movi	r4,20
10101bf4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000006);
10101bf8:	01000184 	movi	r4,6
10101bfc:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000010);
10101c00:	01000404 	movi	r4,16
10101c04:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000009);
10101c08:	01000244 	movi	r4,9
10101c0c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000000);
10101c10:	0009883a 	mov	r4,zero
10101c14:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000E1);
10101c18:	01003844 	movi	r4,225
10101c1c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000000);
10101c20:	0009883a 	mov	r4,zero
10101c24:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000001C);
10101c28:	01000704 	movi	r4,28
10101c2c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000020);
10101c30:	01000804 	movi	r4,32
10101c34:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000004);
10101c38:	01000104 	movi	r4,4
10101c3c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000010);
10101c40:	01000404 	movi	r4,16
10101c44:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000008);
10101c48:	01000204 	movi	r4,8
10101c4c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000034);
10101c50:	01000d04 	movi	r4,52
10101c54:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000047);
10101c58:	010011c4 	movi	r4,71
10101c5c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000044);
10101c60:	01001104 	movi	r4,68
10101c64:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000005);
10101c68:	01000144 	movi	r4,5
10101c6c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000000B);
10101c70:	010002c4 	movi	r4,11
10101c74:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000009);
10101c78:	01000244 	movi	r4,9
10101c7c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000002F);
10101c80:	01000bc4 	movi	r4,47
10101c84:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000036);
10101c88:	01000d84 	movi	r4,54
10101c8c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000000F);
10101c90:	010003c4 	movi	r4,15
10101c94:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x0000002A);
10101c98:	01000a84 	movi	r4,42
10101c9c:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000000);
10101ca0:	0009883a 	mov	r4,zero
10101ca4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000000);
10101ca8:	0009883a 	mov	r4,zero
10101cac:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000001);
10101cb0:	01000044 	movi	r4,1
10101cb4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000003F);
10101cb8:	01000fc4 	movi	r4,63
10101cbc:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x0000002B);
10101cc0:	01000ac4 	movi	r4,43
10101cc4:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000000);
10101cc8:	0009883a 	mov	r4,zero
10101ccc:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000000);
10101cd0:	0009883a 	mov	r4,zero
10101cd4:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000000);
10101cd8:	0009883a 	mov	r4,zero
10101cdc:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x000000EF);
10101ce0:	01003bc4 	movi	r4,239
10101ce4:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x0000003A);
10101ce8:	01000e84 	movi	r4,58
10101cec:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000055);
10101cf0:	01001544 	movi	r4,85
10101cf4:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x000000F6);
10101cf8:	01003d84 	movi	r4,246
10101cfc:	010155c0 	call	1010155c <LCD_Write_Command>
	LCD_Write_Data(0x00000001);
10101d00:	01000044 	movi	r4,1
10101d04:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000030);
10101d08:	01000c04 	movi	r4,48
10101d0c:	01015b80 	call	101015b8 <LCD_Write_Data>
	LCD_Write_Data(0x00000000);
10101d10:	0009883a 	mov	r4,zero
10101d14:	01015b80 	call	101015b8 <LCD_Write_Data>

	LCD_Write_Command(0x00000029);
10101d18:	01000a44 	movi	r4,41
10101d1c:	010155c0 	call	1010155c <LCD_Write_Command>

	LCD_Write_Command(0x0000002C);
10101d20:	01000b04 	movi	r4,44
10101d24:	010155c0 	call	1010155c <LCD_Write_Command>

	printf("LCD Configuration Over !\n");
10101d28:	01040474 	movhi	r4,4113
10101d2c:	211dfe04 	addi	r4,r4,30712
10101d30:	01054000 	call	10105400 <puts>

}
10101d34:	0001883a 	nop
10101d38:	e037883a 	mov	sp,fp
10101d3c:	dfc00117 	ldw	ra,4(sp)
10101d40:	df000017 	ldw	fp,0(sp)
10101d44:	dec00204 	addi	sp,sp,8
10101d48:	f800283a 	ret

10101d4c <Test_Memory_Map>:
#define HPS_0_BRIDGES_SPAN 268435456 /* address_span_expander span from system.h (ADAPT TO YOUR DESIGN) */
#define HPS_0_BRIDGES_BASE 0x0
#define ONE_MB (1024 * 1024) //

int Test_Memory_Map()
{
10101d4c:	defff904 	addi	sp,sp,-28
10101d50:	dfc00615 	stw	ra,24(sp)
10101d54:	df000515 	stw	fp,20(sp)
10101d58:	df000504 	addi	fp,sp,20
		uint32_t megabyte_count = 0;
10101d5c:	e03ffb15 	stw	zero,-20(fp)

	    for (uint32_t i = 0; i < HPS_0_BRIDGES_SPAN; i += sizeof(uint32_t)) {
10101d60:	e03ffc15 	stw	zero,-16(fp)
10101d64:	00002406 	br	10101df8 <Test_Memory_Map+0xac>

	        // Print progress through 256 MB memory available through address span expander
	        if ((i % ONE_MB) == 0) {
10101d68:	e0fffc17 	ldw	r3,-16(fp)
10101d6c:	00800434 	movhi	r2,16
10101d70:	10bfffc4 	addi	r2,r2,-1
10101d74:	1884703a 	and	r2,r3,r2
10101d78:	1000071e 	bne	r2,zero,10101d98 <Test_Memory_Map+0x4c>
	            printf("megabyte_count = %" PRIu32 "\n", megabyte_count);
10101d7c:	e17ffb17 	ldw	r5,-20(fp)
10101d80:	01040474 	movhi	r4,4113
10101d84:	211e0504 	addi	r4,r4,30740
10101d88:	01052e40 	call	101052e4 <printf>
	            megabyte_count++;
10101d8c:	e0bffb17 	ldw	r2,-20(fp)
10101d90:	10800044 	addi	r2,r2,1
10101d94:	e0bffb15 	stw	r2,-20(fp)
	        }

	        uint32_t addr = HPS_0_BRIDGES_BASE + i;
10101d98:	e0bffc17 	ldw	r2,-16(fp)
10101d9c:	e0bffd15 	stw	r2,-12(fp)

	        // Write through address span expander
	        uint32_t writedata = i;
10101da0:	e0bffc17 	ldw	r2,-16(fp)
10101da4:	e0bffe15 	stw	r2,-8(fp)
	        IOWR_32DIRECT(addr, 0, writedata);
10101da8:	e0bffd17 	ldw	r2,-12(fp)
10101dac:	e0fffe17 	ldw	r3,-8(fp)
10101db0:	10c00035 	stwio	r3,0(r2)

	        // Read through address span expander
	        uint32_t readdata = IORD_32DIRECT(addr, 0);
10101db4:	e0bffd17 	ldw	r2,-12(fp)
10101db8:	10800037 	ldwio	r2,0(r2)
10101dbc:	e0bfff15 	stw	r2,-4(fp)

	        // Check if read data is equal to written data
	        assert(writedata == readdata);
10101dc0:	e0fffe17 	ldw	r3,-8(fp)
10101dc4:	e0bfff17 	ldw	r2,-4(fp)
10101dc8:	18800826 	beq	r3,r2,10101dec <Test_Memory_Map+0xa0>
10101dcc:	01c40474 	movhi	r7,4113
10101dd0:	39de0b04 	addi	r7,r7,30764
10101dd4:	01840474 	movhi	r6,4113
10101dd8:	319e2604 	addi	r6,r6,30872
10101ddc:	01400784 	movi	r5,30
10101de0:	01040474 	movhi	r4,4113
10101de4:	211e1104 	addi	r4,r4,30788
10101de8:	01032500 	call	10103250 <__assert_func>

int Test_Memory_Map()
{
		uint32_t megabyte_count = 0;

	    for (uint32_t i = 0; i < HPS_0_BRIDGES_SPAN; i += sizeof(uint32_t)) {
10101dec:	e0bffc17 	ldw	r2,-16(fp)
10101df0:	10800104 	addi	r2,r2,4
10101df4:	e0bffc15 	stw	r2,-16(fp)
10101df8:	e0fffc17 	ldw	r3,-16(fp)
10101dfc:	00840034 	movhi	r2,4096
10101e00:	18bfd936 	bltu	r3,r2,10101d68 <_gp+0xfffe0594>
	        uint32_t readdata = IORD_32DIRECT(addr, 0);

	        // Check if read data is equal to written data
	        assert(writedata == readdata);
	    }
	    printf("Memory PASS\n");
10101e04:	01040474 	movhi	r4,4113
10101e08:	211e1a04 	addi	r4,r4,30824
10101e0c:	01054000 	call	10105400 <puts>
	    return EXIT_SUCCESS;
10101e10:	0005883a 	mov	r2,zero
}
10101e14:	e037883a 	mov	sp,fp
10101e18:	dfc00117 	ldw	ra,4(sp)
10101e1c:	df000017 	ldw	fp,0(sp)
10101e20:	dec00204 	addi	sp,sp,8
10101e24:	f800283a 	ret

10101e28 <Quick_Test_Memory_Map>:
int Quick_Test_Memory_Map()
{
10101e28:	defff804 	addi	sp,sp,-32
10101e2c:	dfc00715 	stw	ra,28(sp)
10101e30:	df000615 	stw	fp,24(sp)
10101e34:	df000604 	addi	fp,sp,24
		uint32_t megabyte_count = 0;
10101e38:	e03ffa15 	stw	zero,-24(fp)
		srand(time(NULL));
10101e3c:	0009883a 	mov	r4,zero
10101e40:	0107b440 	call	10107b44 <time>
10101e44:	1009883a 	mov	r4,r2
10101e48:	01054140 	call	10105414 <srand>
		int r = rand()%255;//0 to 255
10101e4c:	010542c0 	call	1010542c <rand>
10101e50:	01403fc4 	movi	r5,255
10101e54:	1009883a 	mov	r4,r2
10101e58:	01031200 	call	10103120 <__modsi3>
10101e5c:	e0bffc15 	stw	r2,-16(fp)
	    for (uint32_t i = r*ONE_MB; i < (r+1)*ONE_MB; i += sizeof(uint32_t)) {
10101e60:	e0bffc17 	ldw	r2,-16(fp)
10101e64:	1004953a 	slli	r2,r2,20
10101e68:	e0bffb15 	stw	r2,-20(fp)
10101e6c:	00002406 	br	10101f00 <Quick_Test_Memory_Map+0xd8>

	        // Print progress through 256 MB memory available through address span expander
	        if ((i % ONE_MB) == 0) {
10101e70:	e0fffb17 	ldw	r3,-20(fp)
10101e74:	00800434 	movhi	r2,16
10101e78:	10bfffc4 	addi	r2,r2,-1
10101e7c:	1884703a 	and	r2,r3,r2
10101e80:	1000071e 	bne	r2,zero,10101ea0 <Quick_Test_Memory_Map+0x78>
	            printf("MB tested = %d\n", r);
10101e84:	e17ffc17 	ldw	r5,-16(fp)
10101e88:	01040474 	movhi	r4,4113
10101e8c:	211e1d04 	addi	r4,r4,30836
10101e90:	01052e40 	call	101052e4 <printf>
	            megabyte_count++;
10101e94:	e0bffa17 	ldw	r2,-24(fp)
10101e98:	10800044 	addi	r2,r2,1
10101e9c:	e0bffa15 	stw	r2,-24(fp)
	        }
	        uint32_t addr = HPS_0_BRIDGES_BASE + i;
10101ea0:	e0bffb17 	ldw	r2,-20(fp)
10101ea4:	e0bffd15 	stw	r2,-12(fp)

	        // Write through address span expander
	        uint32_t writedata = i;
10101ea8:	e0bffb17 	ldw	r2,-20(fp)
10101eac:	e0bffe15 	stw	r2,-8(fp)
	        IOWR_32DIRECT(addr, 0, writedata);
10101eb0:	e0bffd17 	ldw	r2,-12(fp)
10101eb4:	e0fffe17 	ldw	r3,-8(fp)
10101eb8:	10c00035 	stwio	r3,0(r2)

	        // Read through address span expander
	        uint32_t readdata = IORD_32DIRECT(addr, 0);
10101ebc:	e0bffd17 	ldw	r2,-12(fp)
10101ec0:	10800037 	ldwio	r2,0(r2)
10101ec4:	e0bfff15 	stw	r2,-4(fp)

	        // Check if read data is equal to written data
	        assert(writedata == readdata);
10101ec8:	e0fffe17 	ldw	r3,-8(fp)
10101ecc:	e0bfff17 	ldw	r2,-4(fp)
10101ed0:	18800826 	beq	r3,r2,10101ef4 <Quick_Test_Memory_Map+0xcc>
10101ed4:	01c40474 	movhi	r7,4113
10101ed8:	39de0b04 	addi	r7,r7,30764
10101edc:	01840474 	movhi	r6,4113
10101ee0:	319e2a04 	addi	r6,r6,30888
10101ee4:	01400e44 	movi	r5,57
10101ee8:	01040474 	movhi	r4,4113
10101eec:	211e1104 	addi	r4,r4,30788
10101ef0:	01032500 	call	10103250 <__assert_func>
int Quick_Test_Memory_Map()
{
		uint32_t megabyte_count = 0;
		srand(time(NULL));
		int r = rand()%255;//0 to 255
	    for (uint32_t i = r*ONE_MB; i < (r+1)*ONE_MB; i += sizeof(uint32_t)) {
10101ef4:	e0bffb17 	ldw	r2,-20(fp)
10101ef8:	10800104 	addi	r2,r2,4
10101efc:	e0bffb15 	stw	r2,-20(fp)
10101f00:	e0bffc17 	ldw	r2,-16(fp)
10101f04:	10800044 	addi	r2,r2,1
10101f08:	1004953a 	slli	r2,r2,20
10101f0c:	1007883a 	mov	r3,r2
10101f10:	e0bffb17 	ldw	r2,-20(fp)
10101f14:	10ffd636 	bltu	r2,r3,10101e70 <_gp+0xfffe069c>
	        uint32_t readdata = IORD_32DIRECT(addr, 0);

	        // Check if read data is equal to written data
	        assert(writedata == readdata);
	    }
	    printf("Memory Quick PASS\r\n");
10101f18:	01040474 	movhi	r4,4113
10101f1c:	211e2104 	addi	r4,r4,30852
10101f20:	01054000 	call	10105400 <puts>
	    return EXIT_SUCCESS;
10101f24:	0005883a 	mov	r2,zero
}
10101f28:	e037883a 	mov	sp,fp
10101f2c:	dfc00117 	ldw	ra,4(sp)
10101f30:	df000017 	ldw	fp,0(sp)
10101f34:	dec00204 	addi	sp,sp,8
10101f38:	f800283a 	ret

10101f3c <TRDB_D5M_log2>:
///////////////////////
// GENERAL FUNCTIONS //
///////////////////////

// Calculates log2 of a number. Attention: the number must be a power of 2
static uint16_t TRDB_D5M_log2(uint16_t power_of_2) {
10101f3c:	defffe04 	addi	sp,sp,-8
10101f40:	df000115 	stw	fp,4(sp)
10101f44:	df000104 	addi	fp,sp,4
10101f48:	2005883a 	mov	r2,r4
10101f4c:	e0bfff0d 	sth	r2,-4(fp)
    if      (power_of_2 == 0x0001) return 0;
10101f50:	e0bfff0b 	ldhu	r2,-4(fp)
10101f54:	10800058 	cmpnei	r2,r2,1
10101f58:	1000021e 	bne	r2,zero,10101f64 <TRDB_D5M_log2+0x28>
10101f5c:	0005883a 	mov	r2,zero
10101f60:	00004706 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0002) return 1;
10101f64:	e0bfff0b 	ldhu	r2,-4(fp)
10101f68:	10800098 	cmpnei	r2,r2,2
10101f6c:	1000021e 	bne	r2,zero,10101f78 <TRDB_D5M_log2+0x3c>
10101f70:	00800044 	movi	r2,1
10101f74:	00004206 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0004) return 2;
10101f78:	e0bfff0b 	ldhu	r2,-4(fp)
10101f7c:	10800118 	cmpnei	r2,r2,4
10101f80:	1000021e 	bne	r2,zero,10101f8c <TRDB_D5M_log2+0x50>
10101f84:	00800084 	movi	r2,2
10101f88:	00003d06 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0008) return 3;
10101f8c:	e0bfff0b 	ldhu	r2,-4(fp)
10101f90:	10800218 	cmpnei	r2,r2,8
10101f94:	1000021e 	bne	r2,zero,10101fa0 <TRDB_D5M_log2+0x64>
10101f98:	008000c4 	movi	r2,3
10101f9c:	00003806 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0010) return 4;
10101fa0:	e0bfff0b 	ldhu	r2,-4(fp)
10101fa4:	10800418 	cmpnei	r2,r2,16
10101fa8:	1000021e 	bne	r2,zero,10101fb4 <TRDB_D5M_log2+0x78>
10101fac:	00800104 	movi	r2,4
10101fb0:	00003306 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0020) return 5;
10101fb4:	e0bfff0b 	ldhu	r2,-4(fp)
10101fb8:	10800818 	cmpnei	r2,r2,32
10101fbc:	1000021e 	bne	r2,zero,10101fc8 <TRDB_D5M_log2+0x8c>
10101fc0:	00800144 	movi	r2,5
10101fc4:	00002e06 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0040) return 6;
10101fc8:	e0bfff0b 	ldhu	r2,-4(fp)
10101fcc:	10801018 	cmpnei	r2,r2,64
10101fd0:	1000021e 	bne	r2,zero,10101fdc <TRDB_D5M_log2+0xa0>
10101fd4:	00800184 	movi	r2,6
10101fd8:	00002906 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0080) return 7;
10101fdc:	e0bfff0b 	ldhu	r2,-4(fp)
10101fe0:	10802018 	cmpnei	r2,r2,128
10101fe4:	1000021e 	bne	r2,zero,10101ff0 <TRDB_D5M_log2+0xb4>
10101fe8:	008001c4 	movi	r2,7
10101fec:	00002406 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0100) return 8;
10101ff0:	e0bfff0b 	ldhu	r2,-4(fp)
10101ff4:	10804018 	cmpnei	r2,r2,256
10101ff8:	1000021e 	bne	r2,zero,10102004 <TRDB_D5M_log2+0xc8>
10101ffc:	00800204 	movi	r2,8
10102000:	00001f06 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0200) return 9;
10102004:	e0bfff0b 	ldhu	r2,-4(fp)
10102008:	10808018 	cmpnei	r2,r2,512
1010200c:	1000021e 	bne	r2,zero,10102018 <TRDB_D5M_log2+0xdc>
10102010:	00800244 	movi	r2,9
10102014:	00001a06 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0400) return 10;
10102018:	e0bfff0b 	ldhu	r2,-4(fp)
1010201c:	10810018 	cmpnei	r2,r2,1024
10102020:	1000021e 	bne	r2,zero,1010202c <TRDB_D5M_log2+0xf0>
10102024:	00800284 	movi	r2,10
10102028:	00001506 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0800) return 11;
1010202c:	e0bfff0b 	ldhu	r2,-4(fp)
10102030:	10820018 	cmpnei	r2,r2,2048
10102034:	1000021e 	bne	r2,zero,10102040 <TRDB_D5M_log2+0x104>
10102038:	008002c4 	movi	r2,11
1010203c:	00001006 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x1000) return 12;
10102040:	e0bfff0b 	ldhu	r2,-4(fp)
10102044:	10840018 	cmpnei	r2,r2,4096
10102048:	1000021e 	bne	r2,zero,10102054 <TRDB_D5M_log2+0x118>
1010204c:	00800304 	movi	r2,12
10102050:	00000b06 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x2000) return 13;
10102054:	e0bfff0b 	ldhu	r2,-4(fp)
10102058:	10880018 	cmpnei	r2,r2,8192
1010205c:	1000021e 	bne	r2,zero,10102068 <TRDB_D5M_log2+0x12c>
10102060:	00800344 	movi	r2,13
10102064:	00000606 	br	10102080 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x4000) return 14;
10102068:	e0bfff0b 	ldhu	r2,-4(fp)
1010206c:	10900018 	cmpnei	r2,r2,16384
10102070:	1000021e 	bne	r2,zero,1010207c <TRDB_D5M_log2+0x140>
10102074:	00800384 	movi	r2,14
10102078:	00000106 	br	10102080 <TRDB_D5M_log2+0x144>
    else                           return 15;
1010207c:	008003c4 	movi	r2,15
}
10102080:	e037883a 	mov	sp,fp
10102084:	df000017 	ldw	fp,0(sp)
10102088:	dec00104 	addi	sp,sp,4
1010208c:	f800283a 	ret

10102090 <TRDB_D5M_shift_amount>:

static uint16_t TRDB_D5M_shift_amount(uint16_t mask) {
10102090:	defffd04 	addi	sp,sp,-12
10102094:	dfc00215 	stw	ra,8(sp)
10102098:	df000115 	stw	fp,4(sp)
1010209c:	df000104 	addi	fp,sp,4
101020a0:	2005883a 	mov	r2,r4
101020a4:	e0bfff0d 	sth	r2,-4(fp)
    // (mask & -mask) clears all but the lowest bit of x
    return TRDB_D5M_log2(mask & (~mask + 1));
101020a8:	e0bfff0b 	ldhu	r2,-4(fp)
101020ac:	0085c83a 	sub	r2,zero,r2
101020b0:	1007883a 	mov	r3,r2
101020b4:	e0bfff0b 	ldhu	r2,-4(fp)
101020b8:	1884703a 	and	r2,r3,r2
101020bc:	10bfffcc 	andi	r2,r2,65535
101020c0:	1009883a 	mov	r4,r2
101020c4:	0101f3c0 	call	10101f3c <TRDB_D5M_log2>
}
101020c8:	e037883a 	mov	sp,fp
101020cc:	dfc00117 	ldw	ra,4(sp)
101020d0:	df000017 	ldw	fp,0(sp)
101020d4:	dec00204 	addi	sp,sp,8
101020d8:	f800283a 	ret

101020dc <TRDB_D5M_READ>:

static uint16_t TRDB_D5M_READ(uint16_t full_reg_value, uint16_t mask) {
101020dc:	defffb04 	addi	sp,sp,-20
101020e0:	dfc00415 	stw	ra,16(sp)
101020e4:	df000315 	stw	fp,12(sp)
101020e8:	dc000215 	stw	r16,8(sp)
101020ec:	df000304 	addi	fp,sp,12
101020f0:	2007883a 	mov	r3,r4
101020f4:	2805883a 	mov	r2,r5
101020f8:	e0fffd0d 	sth	r3,-12(fp)
101020fc:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & mask) >> TRDB_D5M_shift_amount(mask);
10102100:	e0fffd0b 	ldhu	r3,-12(fp)
10102104:	e0bffe0b 	ldhu	r2,-8(fp)
10102108:	1884703a 	and	r2,r3,r2
1010210c:	143fffcc 	andi	r16,r2,65535
10102110:	e0bffe0b 	ldhu	r2,-8(fp)
10102114:	1009883a 	mov	r4,r2
10102118:	01020900 	call	10102090 <TRDB_D5M_shift_amount>
1010211c:	10bfffcc 	andi	r2,r2,65535
10102120:	8085d83a 	sra	r2,r16,r2
}
10102124:	e6ffff04 	addi	sp,fp,-4
10102128:	dfc00217 	ldw	ra,8(sp)
1010212c:	df000117 	ldw	fp,4(sp)
10102130:	dc000017 	ldw	r16,0(sp)
10102134:	dec00304 	addi	sp,sp,12
10102138:	f800283a 	ret

1010213c <TRDB_D5M_WRITE>:

static uint16_t TRDB_D5M_WRITE(uint16_t full_reg_value, uint16_t mask, uint16_t write_value) {
1010213c:	defffa04 	addi	sp,sp,-24
10102140:	dfc00515 	stw	ra,20(sp)
10102144:	df000415 	stw	fp,16(sp)
10102148:	dc000315 	stw	r16,12(sp)
1010214c:	df000404 	addi	fp,sp,16
10102150:	2807883a 	mov	r3,r5
10102154:	3005883a 	mov	r2,r6
10102158:	e13ffc0d 	sth	r4,-16(fp)
1010215c:	e0fffd0d 	sth	r3,-12(fp)
10102160:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & (~mask)) | ((write_value << TRDB_D5M_shift_amount(mask)) & mask);
10102164:	e43ffe0b 	ldhu	r16,-8(fp)
10102168:	e0bffd0b 	ldhu	r2,-12(fp)
1010216c:	1009883a 	mov	r4,r2
10102170:	01020900 	call	10102090 <TRDB_D5M_shift_amount>
10102174:	10bfffcc 	andi	r2,r2,65535
10102178:	8084983a 	sll	r2,r16,r2
1010217c:	1007883a 	mov	r3,r2
10102180:	e0bffc0b 	ldhu	r2,-16(fp)
10102184:	1884f03a 	xor	r2,r3,r2
10102188:	1007883a 	mov	r3,r2
1010218c:	e0bffd0b 	ldhu	r2,-12(fp)
10102190:	1884703a 	and	r2,r3,r2
10102194:	1007883a 	mov	r3,r2
10102198:	e0bffc0b 	ldhu	r2,-16(fp)
1010219c:	1884f03a 	xor	r2,r3,r2
}
101021a0:	e6ffff04 	addi	sp,fp,-4
101021a4:	dfc00217 	ldw	ra,8(sp)
101021a8:	df000117 	ldw	fp,4(sp)
101021ac:	dc000017 	ldw	r16,0(sp)
101021b0:	dec00304 	addi	sp,sp,12
101021b4:	f800283a 	ret

101021b8 <trdb_d5m_write>:
#define I2C_FREQ              (50000000) /* Clock frequency driving the i2c core: 50 MHz in this example (ADAPT TO YOUR DESIGN) */
#define TRDB_D5M_I2C_ADDRESS  (0xba)

#define TRDB_D5M_0_I2C_0_BASE I2C_0_BASE   /* i2c base address from system.h (ADAPT TO YOUR DESIGN) */
i2c_dev i2c;
bool trdb_d5m_write(i2c_dev *i2c, uint8_t register_offset, uint16_t data) {
101021b8:	defff804 	addi	sp,sp,-32
101021bc:	dfc00715 	stw	ra,28(sp)
101021c0:	df000615 	stw	fp,24(sp)
101021c4:	df000604 	addi	fp,sp,24
101021c8:	e13ffd15 	stw	r4,-12(fp)
101021cc:	2807883a 	mov	r3,r5
101021d0:	3005883a 	mov	r2,r6
101021d4:	e0fffe05 	stb	r3,-8(fp)
101021d8:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
101021dc:	e0bfff0b 	ldhu	r2,-4(fp)
101021e0:	1004d23a 	srli	r2,r2,8
101021e4:	e0bffc05 	stb	r2,-16(fp)
101021e8:	e0bfff0b 	ldhu	r2,-4(fp)
101021ec:	e0bffc45 	stb	r2,-15(fp)

    int success = i2c_write_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
101021f0:	e0fffe03 	ldbu	r3,-8(fp)
101021f4:	e13ffc04 	addi	r4,fp,-16
101021f8:	00800084 	movi	r2,2
101021fc:	d8800015 	stw	r2,0(sp)
10102200:	200f883a 	mov	r7,r4
10102204:	180d883a 	mov	r6,r3
10102208:	01402e84 	movi	r5,186
1010220c:	e13ffd17 	ldw	r4,-12(fp)
10102210:	0102d600 	call	10102d60 <i2c_write_array>
10102214:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
10102218:	e0bffb17 	ldw	r2,-20(fp)
1010221c:	10000226 	beq	r2,zero,10102228 <trdb_d5m_write+0x70>
        return false;
10102220:	0005883a 	mov	r2,zero
10102224:	00000106 	br	1010222c <trdb_d5m_write+0x74>
    } else {
        return true;
10102228:	00800044 	movi	r2,1
    }
}
1010222c:	e037883a 	mov	sp,fp
10102230:	dfc00117 	ldw	ra,4(sp)
10102234:	df000017 	ldw	fp,0(sp)
10102238:	dec00204 	addi	sp,sp,8
1010223c:	f800283a 	ret

10102240 <trdb_d5m_read>:

bool trdb_d5m_read(i2c_dev *i2c, uint8_t register_offset, uint16_t *data) {
10102240:	defff804 	addi	sp,sp,-32
10102244:	dfc00715 	stw	ra,28(sp)
10102248:	df000615 	stw	fp,24(sp)
1010224c:	df000604 	addi	fp,sp,24
10102250:	e13ffd15 	stw	r4,-12(fp)
10102254:	2805883a 	mov	r2,r5
10102258:	e1bfff15 	stw	r6,-4(fp)
1010225c:	e0bffe05 	stb	r2,-8(fp)
    uint8_t byte_data[2] = {0, 0};
10102260:	e03ffc05 	stb	zero,-16(fp)
10102264:	e03ffc45 	stb	zero,-15(fp)

    int success = i2c_read_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
10102268:	e0fffe03 	ldbu	r3,-8(fp)
1010226c:	e13ffc04 	addi	r4,fp,-16
10102270:	00800084 	movi	r2,2
10102274:	d8800015 	stw	r2,0(sp)
10102278:	200f883a 	mov	r7,r4
1010227c:	180d883a 	mov	r6,r3
10102280:	01402e84 	movi	r5,186
10102284:	e13ffd17 	ldw	r4,-12(fp)
10102288:	0102ef40 	call	10102ef4 <i2c_read_array>
1010228c:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
10102290:	e0bffb17 	ldw	r2,-20(fp)
10102294:	10000226 	beq	r2,zero,101022a0 <trdb_d5m_read+0x60>
        return false;
10102298:	0005883a 	mov	r2,zero
1010229c:	00000b06 	br	101022cc <trdb_d5m_read+0x8c>
    } else {
        *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
101022a0:	e0bffc03 	ldbu	r2,-16(fp)
101022a4:	10803fcc 	andi	r2,r2,255
101022a8:	1004923a 	slli	r2,r2,8
101022ac:	1007883a 	mov	r3,r2
101022b0:	e0bffc43 	ldbu	r2,-15(fp)
101022b4:	10803fcc 	andi	r2,r2,255
101022b8:	1885883a 	add	r2,r3,r2
101022bc:	1007883a 	mov	r3,r2
101022c0:	e0bfff17 	ldw	r2,-4(fp)
101022c4:	10c0000d 	sth	r3,0(r2)
        return true;
101022c8:	00800044 	movi	r2,1
    }
}
101022cc:	e037883a 	mov	sp,fp
101022d0:	dfc00117 	ldw	ra,4(sp)
101022d4:	df000017 	ldw	fp,0(sp)
101022d8:	dec00204 	addi	sp,sp,8
101022dc:	f800283a 	ret

101022e0 <Test_i2c>:
bool Test_i2c()
{
101022e0:	defffe04 	addi	sp,sp,-8
101022e4:	dfc00115 	stw	ra,4(sp)
101022e8:	df000015 	stw	fp,0(sp)
101022ec:	d839883a 	mov	fp,sp
	init_I2C();
101022f0:	01023440 	call	10102344 <init_I2C>
    if (Write_and_Read_I2C(&i2c,10,23)) {
101022f4:	018005c4 	movi	r6,23
101022f8:	01400284 	movi	r5,10
101022fc:	d126f904 	addi	r4,gp,-25628
10102300:	010238c0 	call	1010238c <Write_and_Read_I2C>
10102304:	10803fcc 	andi	r2,r2,255
10102308:	10000526 	beq	r2,zero,10102320 <Test_i2c+0x40>
    	printf("I2C PASS\r\n");
1010230c:	01040474 	movhi	r4,4113
10102310:	211e3004 	addi	r4,r4,30912
10102314:	01054000 	call	10105400 <puts>
        return EXIT_SUCCESS;
10102318:	0005883a 	mov	r2,zero
1010231c:	00000406 	br	10102330 <Test_i2c+0x50>
    } else {
    	printf("I2C FAIL\r\n");
10102320:	01040474 	movhi	r4,4113
10102324:	211e3304 	addi	r4,r4,30924
10102328:	01054000 	call	10105400 <puts>
        return EXIT_FAILURE;
1010232c:	00800044 	movi	r2,1
    }
}
10102330:	e037883a 	mov	sp,fp
10102334:	dfc00117 	ldw	ra,4(sp)
10102338:	df000017 	ldw	fp,0(sp)
1010233c:	dec00204 	addi	sp,sp,8
10102340:	f800283a 	ret

10102344 <init_I2C>:
void init_I2C()
{
10102344:	defffe04 	addi	sp,sp,-8
10102348:	dfc00115 	stw	ra,4(sp)
1010234c:	df000015 	stw	fp,0(sp)
10102350:	d839883a 	mov	fp,sp
	i2c = i2c_inst((void *) TRDB_D5M_0_I2C_0_BASE);
10102354:	01040034 	movhi	r4,4096
10102358:	21020204 	addi	r4,r4,2056
1010235c:	01029dc0 	call	101029dc <i2c_inst>
10102360:	d0a6f915 	stw	r2,-25628(gp)
	i2c_init(&i2c, I2C_FREQ);
10102364:	0140bef4 	movhi	r5,763
10102368:	297c2004 	addi	r5,r5,-3968
1010236c:	d126f904 	addi	r4,gp,-25628
10102370:	0102a080 	call	10102a08 <i2c_init>
}
10102374:	0001883a 	nop
10102378:	e037883a 	mov	sp,fp
1010237c:	dfc00117 	ldw	ra,4(sp)
10102380:	df000017 	ldw	fp,0(sp)
10102384:	dec00204 	addi	sp,sp,8
10102388:	f800283a 	ret

1010238c <Write_and_Read_I2C>:
bool Write_and_Read_I2C(i2c_dev *i2c,uint8_t register_offset, uint16_t data)
{
1010238c:	defffa04 	addi	sp,sp,-24
10102390:	dfc00515 	stw	ra,20(sp)
10102394:	df000415 	stw	fp,16(sp)
10102398:	df000404 	addi	fp,sp,16
1010239c:	e13ffd15 	stw	r4,-12(fp)
101023a0:	2807883a 	mov	r3,r5
101023a4:	3005883a 	mov	r2,r6
101023a8:	e0fffe05 	stb	r3,-8(fp)
101023ac:	e0bfff0d 	sth	r2,-4(fp)
	 	bool success = true;
101023b0:	00800044 	movi	r2,1
101023b4:	e0bffc05 	stb	r2,-16(fp)
	 	 /* write the 16-bit value 23 to register 10 */
	    success &= trdb_d5m_write(i2c, register_offset, data);
101023b8:	e0bffe03 	ldbu	r2,-8(fp)
101023bc:	e0ffff0b 	ldhu	r3,-4(fp)
101023c0:	180d883a 	mov	r6,r3
101023c4:	100b883a 	mov	r5,r2
101023c8:	e13ffd17 	ldw	r4,-12(fp)
101023cc:	01021b80 	call	101021b8 <trdb_d5m_write>
101023d0:	e0fffc03 	ldbu	r3,-16(fp)
101023d4:	10803fcc 	andi	r2,r2,255
101023d8:	1884703a 	and	r2,r3,r2
101023dc:	1004c03a 	cmpne	r2,r2,zero
101023e0:	e0bffc05 	stb	r2,-16(fp)

	    /* read from register 10, put data in readdata */
	    uint16_t readdata = 0;
101023e4:	e03ffc8d 	sth	zero,-14(fp)
	    success &= trdb_d5m_read(i2c, register_offset, &readdata);
101023e8:	e0bffe03 	ldbu	r2,-8(fp)
101023ec:	e0fffc84 	addi	r3,fp,-14
101023f0:	180d883a 	mov	r6,r3
101023f4:	100b883a 	mov	r5,r2
101023f8:	e13ffd17 	ldw	r4,-12(fp)
101023fc:	01022400 	call	10102240 <trdb_d5m_read>
10102400:	e0fffc03 	ldbu	r3,-16(fp)
10102404:	10803fcc 	andi	r2,r2,255
10102408:	1884703a 	and	r2,r3,r2
1010240c:	1004c03a 	cmpne	r2,r2,zero
10102410:	e0bffc05 	stb	r2,-16(fp)

	    if (success && readdata==data ) {
10102414:	e0bffc03 	ldbu	r2,-16(fp)
10102418:	10000626 	beq	r2,zero,10102434 <Write_and_Read_I2C+0xa8>
1010241c:	e0bffc8b 	ldhu	r2,-14(fp)
10102420:	10ffffcc 	andi	r3,r2,65535
10102424:	e0bfff0b 	ldhu	r2,-4(fp)
10102428:	1880021e 	bne	r3,r2,10102434 <Write_and_Read_I2C+0xa8>
	        return true;
1010242c:	00800044 	movi	r2,1
10102430:	00000106 	br	10102438 <Write_and_Read_I2C+0xac>
	    } else {
	        return false;
10102434:	0005883a 	mov	r2,zero
	    }
}
10102438:	e037883a 	mov	sp,fp
1010243c:	dfc00117 	ldw	ra,4(sp)
10102440:	df000017 	ldw	fp,0(sp)
10102444:	dec00204 	addi	sp,sp,8
10102448:	f800283a 	ret

1010244c <Camera_Configuration>:
bool Camera_Configuration()
{
1010244c:	defffd04 	addi	sp,sp,-12
10102450:	dfc00215 	stw	ra,8(sp)
10102454:	df000115 	stw	fp,4(sp)
10102458:	df000104 	addi	fp,sp,4
	init_I2C();
1010245c:	01023440 	call	10102344 <init_I2C>

    bool success = true;
10102460:	00800044 	movi	r2,1
10102464:	e0bfff05 	stb	r2,-4(fp)
    uint16_t data=0;
10102468:	e03fff8d 	sth	zero,-2(fp)
    trdb_d5m_read(&i2c, 0, &data);
1010246c:	e0bfff84 	addi	r2,fp,-2
10102470:	100d883a 	mov	r6,r2
10102474:	000b883a 	mov	r5,zero
10102478:	d126f904 	addi	r4,gp,-25628
1010247c:	01022400 	call	10102240 <trdb_d5m_read>
    printf("Camera version :  %d\r\n",data);
10102480:	e0bfff8b 	ldhu	r2,-2(fp)
10102484:	10bfffcc 	andi	r2,r2,65535
10102488:	100b883a 	mov	r5,r2
1010248c:	01040474 	movhi	r4,4113
10102490:	211e3604 	addi	r4,r4,30936
10102494:	01052e40 	call	101052e4 <printf>
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_COLUMN_SIZE_REG,2559);//Resolution for lt24 with binning
10102498:	01827fc4 	movi	r6,2559
1010249c:	01400104 	movi	r5,4
101024a0:	d126f904 	addi	r4,gp,-25628
101024a4:	010238c0 	call	1010238c <Write_and_Read_I2C>
101024a8:	e0ffff03 	ldbu	r3,-4(fp)
101024ac:	10803fcc 	andi	r2,r2,255
101024b0:	1884703a 	and	r2,r3,r2
101024b4:	1004c03a 	cmpne	r2,r2,zero
101024b8:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_ROW_SIZE_REG,1919);// Resolution for lt24 with binning
101024bc:	0181dfc4 	movi	r6,1919
101024c0:	014000c4 	movi	r5,3
101024c4:	d126f904 	addi	r4,gp,-25628
101024c8:	010238c0 	call	1010238c <Write_and_Read_I2C>
101024cc:	e0ffff03 	ldbu	r3,-4(fp)
101024d0:	10803fcc 	andi	r2,r2,255
101024d4:	1884703a 	and	r2,r3,r2
101024d8:	1004c03a 	cmpne	r2,r2,zero
101024dc:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_SHUTTER_WIDTH_UPPER_REG,0000);//Control light
101024e0:	000d883a 	mov	r6,zero
101024e4:	01400204 	movi	r5,8
101024e8:	d126f904 	addi	r4,gp,-25628
101024ec:	010238c0 	call	1010238c <Write_and_Read_I2C>
101024f0:	e0ffff03 	ldbu	r3,-4(fp)
101024f4:	10803fcc 	andi	r2,r2,255
101024f8:	1884703a 	and	r2,r3,r2
101024fc:	1004c03a 	cmpne	r2,r2,zero
10102500:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_SHUTTER_WIDTH_LOWER_REG,10000);//Control light
10102504:	0189c404 	movi	r6,10000
10102508:	01400244 	movi	r5,9
1010250c:	d126f904 	addi	r4,gp,-25628
10102510:	010238c0 	call	1010238c <Write_and_Read_I2C>
10102514:	e0ffff03 	ldbu	r3,-4(fp)
10102518:	10803fcc 	andi	r2,r2,255
1010251c:	1884703a 	and	r2,r3,r2
10102520:	1004c03a 	cmpne	r2,r2,zero
10102524:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_ROW_ADDRESS_MODE_REG,0x0033);//Binning x4
10102528:	01800cc4 	movi	r6,51
1010252c:	01400884 	movi	r5,34
10102530:	d126f904 	addi	r4,gp,-25628
10102534:	010238c0 	call	1010238c <Write_and_Read_I2C>
10102538:	e0ffff03 	ldbu	r3,-4(fp)
1010253c:	10803fcc 	andi	r2,r2,255
10102540:	1884703a 	and	r2,r3,r2
10102544:	1004c03a 	cmpne	r2,r2,zero
10102548:	e0bfff05 	stb	r2,-4(fp)
    success &= Write_and_Read_I2C(&i2c,TRDB_D5M_COLUMN_ADDRESS_MODE_REG,0x0033);//Binning x4
1010254c:	01800cc4 	movi	r6,51
10102550:	014008c4 	movi	r5,35
10102554:	d126f904 	addi	r4,gp,-25628
10102558:	010238c0 	call	1010238c <Write_and_Read_I2C>
1010255c:	e0ffff03 	ldbu	r3,-4(fp)
10102560:	10803fcc 	andi	r2,r2,255
10102564:	1884703a 	and	r2,r3,r2
10102568:	1004c03a 	cmpne	r2,r2,zero
1010256c:	e0bfff05 	stb	r2,-4(fp)
     *success &= Write_and_Read_I2C(&i2c,TRDB_D5M_PLL_CONFIG_1_REG,0x4C14);//N=10, 0x14, M=76, 0x4C
     *success &= Write_and_Read_I2C(&i2c,TRDB_D5M_PLL_CONFIG_2_REG,0x0002);//P1=2 , 0x02
     */


    if (success  ) {
10102570:	e0bfff03 	ldbu	r2,-4(fp)
10102574:	10000526 	beq	r2,zero,1010258c <Camera_Configuration+0x140>
    	printf("I2C Configuration PASS\r\n");
10102578:	01040474 	movhi	r4,4113
1010257c:	211e3c04 	addi	r4,r4,30960
10102580:	01054000 	call	10105400 <puts>
        return true;
10102584:	00800044 	movi	r2,1
10102588:	00000406 	br	1010259c <Camera_Configuration+0x150>
    } else {
    	printf("I2C Configuration FAIL\r\n");
1010258c:	01040474 	movhi	r4,4113
10102590:	211e4204 	addi	r4,r4,30984
10102594:	01054000 	call	10105400 <puts>
        return false;
10102598:	0005883a 	mov	r2,zero
    }
}
1010259c:	e037883a 	mov	sp,fp
101025a0:	dfc00117 	ldw	ra,4(sp)
101025a4:	df000017 	ldw	fp,0(sp)
101025a8:	dec00204 	addi	sp,sp,8
101025ac:	f800283a 	ret

101025b0 <TRDB_D5M_log2>:
///////////////////////
// GENERAL FUNCTIONS //
///////////////////////

// Calculates log2 of a number. Attention: the number must be a power of 2
static uint16_t TRDB_D5M_log2(uint16_t power_of_2) {
101025b0:	defffe04 	addi	sp,sp,-8
101025b4:	df000115 	stw	fp,4(sp)
101025b8:	df000104 	addi	fp,sp,4
101025bc:	2005883a 	mov	r2,r4
101025c0:	e0bfff0d 	sth	r2,-4(fp)
    if      (power_of_2 == 0x0001) return 0;
101025c4:	e0bfff0b 	ldhu	r2,-4(fp)
101025c8:	10800058 	cmpnei	r2,r2,1
101025cc:	1000021e 	bne	r2,zero,101025d8 <TRDB_D5M_log2+0x28>
101025d0:	0005883a 	mov	r2,zero
101025d4:	00004706 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0002) return 1;
101025d8:	e0bfff0b 	ldhu	r2,-4(fp)
101025dc:	10800098 	cmpnei	r2,r2,2
101025e0:	1000021e 	bne	r2,zero,101025ec <TRDB_D5M_log2+0x3c>
101025e4:	00800044 	movi	r2,1
101025e8:	00004206 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0004) return 2;
101025ec:	e0bfff0b 	ldhu	r2,-4(fp)
101025f0:	10800118 	cmpnei	r2,r2,4
101025f4:	1000021e 	bne	r2,zero,10102600 <TRDB_D5M_log2+0x50>
101025f8:	00800084 	movi	r2,2
101025fc:	00003d06 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0008) return 3;
10102600:	e0bfff0b 	ldhu	r2,-4(fp)
10102604:	10800218 	cmpnei	r2,r2,8
10102608:	1000021e 	bne	r2,zero,10102614 <TRDB_D5M_log2+0x64>
1010260c:	008000c4 	movi	r2,3
10102610:	00003806 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0010) return 4;
10102614:	e0bfff0b 	ldhu	r2,-4(fp)
10102618:	10800418 	cmpnei	r2,r2,16
1010261c:	1000021e 	bne	r2,zero,10102628 <TRDB_D5M_log2+0x78>
10102620:	00800104 	movi	r2,4
10102624:	00003306 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0020) return 5;
10102628:	e0bfff0b 	ldhu	r2,-4(fp)
1010262c:	10800818 	cmpnei	r2,r2,32
10102630:	1000021e 	bne	r2,zero,1010263c <TRDB_D5M_log2+0x8c>
10102634:	00800144 	movi	r2,5
10102638:	00002e06 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0040) return 6;
1010263c:	e0bfff0b 	ldhu	r2,-4(fp)
10102640:	10801018 	cmpnei	r2,r2,64
10102644:	1000021e 	bne	r2,zero,10102650 <TRDB_D5M_log2+0xa0>
10102648:	00800184 	movi	r2,6
1010264c:	00002906 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0080) return 7;
10102650:	e0bfff0b 	ldhu	r2,-4(fp)
10102654:	10802018 	cmpnei	r2,r2,128
10102658:	1000021e 	bne	r2,zero,10102664 <TRDB_D5M_log2+0xb4>
1010265c:	008001c4 	movi	r2,7
10102660:	00002406 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0100) return 8;
10102664:	e0bfff0b 	ldhu	r2,-4(fp)
10102668:	10804018 	cmpnei	r2,r2,256
1010266c:	1000021e 	bne	r2,zero,10102678 <TRDB_D5M_log2+0xc8>
10102670:	00800204 	movi	r2,8
10102674:	00001f06 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0200) return 9;
10102678:	e0bfff0b 	ldhu	r2,-4(fp)
1010267c:	10808018 	cmpnei	r2,r2,512
10102680:	1000021e 	bne	r2,zero,1010268c <TRDB_D5M_log2+0xdc>
10102684:	00800244 	movi	r2,9
10102688:	00001a06 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0400) return 10;
1010268c:	e0bfff0b 	ldhu	r2,-4(fp)
10102690:	10810018 	cmpnei	r2,r2,1024
10102694:	1000021e 	bne	r2,zero,101026a0 <TRDB_D5M_log2+0xf0>
10102698:	00800284 	movi	r2,10
1010269c:	00001506 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x0800) return 11;
101026a0:	e0bfff0b 	ldhu	r2,-4(fp)
101026a4:	10820018 	cmpnei	r2,r2,2048
101026a8:	1000021e 	bne	r2,zero,101026b4 <TRDB_D5M_log2+0x104>
101026ac:	008002c4 	movi	r2,11
101026b0:	00001006 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x1000) return 12;
101026b4:	e0bfff0b 	ldhu	r2,-4(fp)
101026b8:	10840018 	cmpnei	r2,r2,4096
101026bc:	1000021e 	bne	r2,zero,101026c8 <TRDB_D5M_log2+0x118>
101026c0:	00800304 	movi	r2,12
101026c4:	00000b06 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x2000) return 13;
101026c8:	e0bfff0b 	ldhu	r2,-4(fp)
101026cc:	10880018 	cmpnei	r2,r2,8192
101026d0:	1000021e 	bne	r2,zero,101026dc <TRDB_D5M_log2+0x12c>
101026d4:	00800344 	movi	r2,13
101026d8:	00000606 	br	101026f4 <TRDB_D5M_log2+0x144>
    else if (power_of_2 == 0x4000) return 14;
101026dc:	e0bfff0b 	ldhu	r2,-4(fp)
101026e0:	10900018 	cmpnei	r2,r2,16384
101026e4:	1000021e 	bne	r2,zero,101026f0 <TRDB_D5M_log2+0x140>
101026e8:	00800384 	movi	r2,14
101026ec:	00000106 	br	101026f4 <TRDB_D5M_log2+0x144>
    else                           return 15;
101026f0:	008003c4 	movi	r2,15
}
101026f4:	e037883a 	mov	sp,fp
101026f8:	df000017 	ldw	fp,0(sp)
101026fc:	dec00104 	addi	sp,sp,4
10102700:	f800283a 	ret

10102704 <TRDB_D5M_shift_amount>:

static uint16_t TRDB_D5M_shift_amount(uint16_t mask) {
10102704:	defffd04 	addi	sp,sp,-12
10102708:	dfc00215 	stw	ra,8(sp)
1010270c:	df000115 	stw	fp,4(sp)
10102710:	df000104 	addi	fp,sp,4
10102714:	2005883a 	mov	r2,r4
10102718:	e0bfff0d 	sth	r2,-4(fp)
    // (mask & -mask) clears all but the lowest bit of x
    return TRDB_D5M_log2(mask & (~mask + 1));
1010271c:	e0bfff0b 	ldhu	r2,-4(fp)
10102720:	0085c83a 	sub	r2,zero,r2
10102724:	1007883a 	mov	r3,r2
10102728:	e0bfff0b 	ldhu	r2,-4(fp)
1010272c:	1884703a 	and	r2,r3,r2
10102730:	10bfffcc 	andi	r2,r2,65535
10102734:	1009883a 	mov	r4,r2
10102738:	01025b00 	call	101025b0 <TRDB_D5M_log2>
}
1010273c:	e037883a 	mov	sp,fp
10102740:	dfc00117 	ldw	ra,4(sp)
10102744:	df000017 	ldw	fp,0(sp)
10102748:	dec00204 	addi	sp,sp,8
1010274c:	f800283a 	ret

10102750 <TRDB_D5M_READ>:

static uint16_t TRDB_D5M_READ(uint16_t full_reg_value, uint16_t mask) {
10102750:	defffb04 	addi	sp,sp,-20
10102754:	dfc00415 	stw	ra,16(sp)
10102758:	df000315 	stw	fp,12(sp)
1010275c:	dc000215 	stw	r16,8(sp)
10102760:	df000304 	addi	fp,sp,12
10102764:	2007883a 	mov	r3,r4
10102768:	2805883a 	mov	r2,r5
1010276c:	e0fffd0d 	sth	r3,-12(fp)
10102770:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & mask) >> TRDB_D5M_shift_amount(mask);
10102774:	e0fffd0b 	ldhu	r3,-12(fp)
10102778:	e0bffe0b 	ldhu	r2,-8(fp)
1010277c:	1884703a 	and	r2,r3,r2
10102780:	143fffcc 	andi	r16,r2,65535
10102784:	e0bffe0b 	ldhu	r2,-8(fp)
10102788:	1009883a 	mov	r4,r2
1010278c:	01027040 	call	10102704 <TRDB_D5M_shift_amount>
10102790:	10bfffcc 	andi	r2,r2,65535
10102794:	8085d83a 	sra	r2,r16,r2
}
10102798:	e6ffff04 	addi	sp,fp,-4
1010279c:	dfc00217 	ldw	ra,8(sp)
101027a0:	df000117 	ldw	fp,4(sp)
101027a4:	dc000017 	ldw	r16,0(sp)
101027a8:	dec00304 	addi	sp,sp,12
101027ac:	f800283a 	ret

101027b0 <TRDB_D5M_WRITE>:

static uint16_t TRDB_D5M_WRITE(uint16_t full_reg_value, uint16_t mask, uint16_t write_value) {
101027b0:	defffa04 	addi	sp,sp,-24
101027b4:	dfc00515 	stw	ra,20(sp)
101027b8:	df000415 	stw	fp,16(sp)
101027bc:	dc000315 	stw	r16,12(sp)
101027c0:	df000404 	addi	fp,sp,16
101027c4:	2807883a 	mov	r3,r5
101027c8:	3005883a 	mov	r2,r6
101027cc:	e13ffc0d 	sth	r4,-16(fp)
101027d0:	e0fffd0d 	sth	r3,-12(fp)
101027d4:	e0bffe0d 	sth	r2,-8(fp)
    return (full_reg_value & (~mask)) | ((write_value << TRDB_D5M_shift_amount(mask)) & mask);
101027d8:	e43ffe0b 	ldhu	r16,-8(fp)
101027dc:	e0bffd0b 	ldhu	r2,-12(fp)
101027e0:	1009883a 	mov	r4,r2
101027e4:	01027040 	call	10102704 <TRDB_D5M_shift_amount>
101027e8:	10bfffcc 	andi	r2,r2,65535
101027ec:	8084983a 	sll	r2,r16,r2
101027f0:	1007883a 	mov	r3,r2
101027f4:	e0bffc0b 	ldhu	r2,-16(fp)
101027f8:	1884f03a 	xor	r2,r3,r2
101027fc:	1007883a 	mov	r3,r2
10102800:	e0bffd0b 	ldhu	r2,-12(fp)
10102804:	1884703a 	and	r2,r3,r2
10102808:	1007883a 	mov	r3,r2
1010280c:	e0bffc0b 	ldhu	r2,-16(fp)
10102810:	1884f03a 	xor	r2,r3,r2
}
10102814:	e6ffff04 	addi	sp,fp,-4
10102818:	dfc00217 	ldw	ra,8(sp)
1010281c:	df000117 	ldw	fp,4(sp)
10102820:	dc000017 	ldw	r16,0(sp)
10102824:	dec00304 	addi	sp,sp,12
10102828:	f800283a 	ret

1010282c <main>:
#include "custom_functions/function_i2c.h"




int main(void) {
1010282c:	defffe04 	addi	sp,sp,-8
10102830:	dfc00115 	stw	ra,4(sp)
10102834:	df000015 	stw	fp,0(sp)
10102838:	d839883a 	mov	fp,sp
	printf("Hello from Nios II and Camera Generator!\n");
1010283c:	01040474 	movhi	r4,4113
10102840:	211e4804 	addi	r4,r4,31008
10102844:	01054000 	call	10105400 <puts>
	printf("Compiled %s %s\n", __DATE__, __TIME__);
10102848:	01840474 	movhi	r6,4113
1010284c:	319e5304 	addi	r6,r6,31052
10102850:	01440474 	movhi	r5,4113
10102854:	295e5604 	addi	r5,r5,31064
10102858:	01040474 	movhi	r4,4113
1010285c:	211e5904 	addi	r4,r4,31076
10102860:	01052e40 	call	101052e4 <printf>
	delay(1000);
10102864:	0100fa04 	movi	r4,1000
10102868:	01013680 	call	10101368 <delay>
#endif
#if Frame_Generator && !Camera_Connected
	Test_Function_Generator();
#endif
#if LCD_Connected
	LCD_Configuration();
1010286c:	010191c0 	call	1010191c <LCD_Configuration>
#endif
#if Camera_Connected
	Camera_Configuration();
10102870:	010244c0 	call	1010244c <Camera_Configuration>
	Test_Camera_Memory();
10102874:	0100fe40 	call	10100fe4 <Test_Camera_Memory>
10102878:	0005883a 	mov	r2,zero
#endif


}
1010287c:	e037883a 	mov	sp,fp
10102880:	dfc00117 	ldw	ra,4(sp)
10102884:	df000017 	ldw	fp,0(sp)
10102888:	dec00204 	addi	sp,sp,8
1010288c:	f800283a 	ret

10102890 <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
10102890:	defffd04 	addi	sp,sp,-12
10102894:	dfc00215 	stw	ra,8(sp)
10102898:	df000115 	stw	fp,4(sp)
1010289c:	df000104 	addi	fp,sp,4
101028a0:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
101028a4:	e13fff17 	ldw	r4,-4(fp)
101028a8:	01153780 	call	10115378 <usleep>
#endif
}
101028ac:	0001883a 	nop
101028b0:	e037883a 	mov	sp,fp
101028b4:	dfc00117 	ldw	ra,4(sp)
101028b8:	df000017 	ldw	fp,0(sp)
101028bc:	dec00204 	addi	sp,sp,8
101028c0:	f800283a 	ret

101028c4 <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
101028c4:	defffe04 	addi	sp,sp,-8
101028c8:	df000115 	stw	fp,4(sp)
101028cc:	df000104 	addi	fp,sp,4
101028d0:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
101028d4:	0001883a 	nop
101028d8:	e0bfff17 	ldw	r2,-4(fp)
101028dc:	10800017 	ldw	r2,0(r2)
101028e0:	10800084 	addi	r2,r2,2
101028e4:	10800023 	ldbuio	r2,0(r2)
101028e8:	10803fcc 	andi	r2,r2,255
101028ec:	1080020c 	andi	r2,r2,8
101028f0:	103ff91e 	bne	r2,zero,101028d8 <_gp+0xfffe1104>
}
101028f4:	0001883a 	nop
101028f8:	e037883a 	mov	sp,fp
101028fc:	df000017 	ldw	fp,0(sp)
10102900:	dec00104 	addi	sp,sp,4
10102904:	f800283a 	ret

10102908 <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
10102908:	defffb04 	addi	sp,sp,-20
1010290c:	dfc00415 	stw	ra,16(sp)
10102910:	df000315 	stw	fp,12(sp)
10102914:	df000304 	addi	fp,sp,12
10102918:	e13ffd15 	stw	r4,-12(fp)
1010291c:	2807883a 	mov	r3,r5
10102920:	3005883a 	mov	r2,r6
10102924:	e0fffe05 	stb	r3,-8(fp)
10102928:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
1010292c:	e13ffd17 	ldw	r4,-12(fp)
10102930:	01028c40 	call	101028c4 <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
10102934:	e0bffd17 	ldw	r2,-12(fp)
10102938:	10800017 	ldw	r2,0(r2)
1010293c:	e0fffe03 	ldbu	r3,-8(fp)
10102940:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
10102944:	e0bffd17 	ldw	r2,-12(fp)
10102948:	10800017 	ldw	r2,0(r2)
1010294c:	10800044 	addi	r2,r2,1
10102950:	e0ffff03 	ldbu	r3,-4(fp)
10102954:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10102958:	e13ffd17 	ldw	r4,-12(fp)
1010295c:	01028c40 	call	101028c4 <wait_end_of_transfer>
}
10102960:	0001883a 	nop
10102964:	e037883a 	mov	sp,fp
10102968:	dfc00117 	ldw	ra,4(sp)
1010296c:	df000017 	ldw	fp,0(sp)
10102970:	dec00204 	addi	sp,sp,8
10102974:	f800283a 	ret

10102978 <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
10102978:	defffc04 	addi	sp,sp,-16
1010297c:	dfc00315 	stw	ra,12(sp)
10102980:	df000215 	stw	fp,8(sp)
10102984:	df000204 	addi	fp,sp,8
10102988:	e13ffe15 	stw	r4,-8(fp)
1010298c:	2805883a 	mov	r2,r5
10102990:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10102994:	e13ffe17 	ldw	r4,-8(fp)
10102998:	01028c40 	call	101028c4 <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
1010299c:	e0bffe17 	ldw	r2,-8(fp)
101029a0:	10800017 	ldw	r2,0(r2)
101029a4:	10800044 	addi	r2,r2,1
101029a8:	e0ffff03 	ldbu	r3,-4(fp)
101029ac:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
101029b0:	e13ffe17 	ldw	r4,-8(fp)
101029b4:	01028c40 	call	101028c4 <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
101029b8:	e0bffe17 	ldw	r2,-8(fp)
101029bc:	10800017 	ldw	r2,0(r2)
101029c0:	10800023 	ldbuio	r2,0(r2)
101029c4:	10803fcc 	andi	r2,r2,255
}
101029c8:	e037883a 	mov	sp,fp
101029cc:	dfc00117 	ldw	ra,4(sp)
101029d0:	df000017 	ldw	fp,0(sp)
101029d4:	dec00204 	addi	sp,sp,8
101029d8:	f800283a 	ret

101029dc <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
101029dc:	defffd04 	addi	sp,sp,-12
101029e0:	df000215 	stw	fp,8(sp)
101029e4:	df000204 	addi	fp,sp,8
101029e8:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
101029ec:	e0bfff17 	ldw	r2,-4(fp)
101029f0:	e0bffe15 	stw	r2,-8(fp)

    return dev;
101029f4:	e0bffe17 	ldw	r2,-8(fp)
}
101029f8:	e037883a 	mov	sp,fp
101029fc:	df000017 	ldw	fp,0(sp)
10102a00:	dec00104 	addi	sp,sp,4
10102a04:	f800283a 	ret

10102a08 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
10102a08:	defffb04 	addi	sp,sp,-20
10102a0c:	dfc00415 	stw	ra,16(sp)
10102a10:	df000315 	stw	fp,12(sp)
10102a14:	dc000215 	stw	r16,8(sp)
10102a18:	df000304 	addi	fp,sp,12
10102a1c:	e13ffd15 	stw	r4,-12(fp)
10102a20:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
10102a24:	e0bffd17 	ldw	r2,-12(fp)
10102a28:	10800017 	ldw	r2,0(r2)
10102a2c:	140000c4 	addi	r16,r2,3
10102a30:	e0bffe17 	ldw	r2,-8(fp)
10102a34:	014001b4 	movhi	r5,6
10102a38:	2946a004 	addi	r5,r5,6784
10102a3c:	1009883a 	mov	r4,r2
10102a40:	01031940 	call	10103194 <__udivsi3>
10102a44:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
10102a48:	0104e204 	movi	r4,5000
10102a4c:	01028900 	call	10102890 <i2c_usleep>
}
10102a50:	0001883a 	nop
10102a54:	e6ffff04 	addi	sp,fp,-4
10102a58:	dfc00217 	ldw	ra,8(sp)
10102a5c:	df000117 	ldw	fp,4(sp)
10102a60:	dc000017 	ldw	r16,0(sp)
10102a64:	dec00304 	addi	sp,sp,12
10102a68:	f800283a 	ret

10102a6c <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
10102a6c:	defffc04 	addi	sp,sp,-16
10102a70:	df000315 	stw	fp,12(sp)
10102a74:	df000304 	addi	fp,sp,12
10102a78:	e13ffe15 	stw	r4,-8(fp)
10102a7c:	2805883a 	mov	r2,r5
10102a80:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
10102a84:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
10102a88:	e0bfff03 	ldbu	r2,-4(fp)
10102a8c:	10000426 	beq	r2,zero,10102aa0 <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10102a90:	e0bffd17 	ldw	r2,-12(fp)
10102a94:	10800814 	ori	r2,r2,32
10102a98:	e0bffd15 	stw	r2,-12(fp)
10102a9c:	00000406 	br	10102ab0 <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10102aa0:	e0fffd17 	ldw	r3,-12(fp)
10102aa4:	00bff7c4 	movi	r2,-33
10102aa8:	1884703a 	and	r2,r3,r2
10102aac:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102ab0:	e0bffe17 	ldw	r2,-8(fp)
10102ab4:	10800017 	ldw	r2,0(r2)
10102ab8:	10800044 	addi	r2,r2,1
10102abc:	00c00084 	movi	r3,2
10102ac0:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
10102ac4:	e0bffe17 	ldw	r2,-8(fp)
10102ac8:	10800017 	ldw	r2,0(r2)
10102acc:	10800044 	addi	r2,r2,1
10102ad0:	e0fffd17 	ldw	r3,-12(fp)
10102ad4:	10c00025 	stbio	r3,0(r2)
}
10102ad8:	0001883a 	nop
10102adc:	e037883a 	mov	sp,fp
10102ae0:	df000017 	ldw	fp,0(sp)
10102ae4:	dec00104 	addi	sp,sp,4
10102ae8:	f800283a 	ret

10102aec <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
10102aec:	defffa04 	addi	sp,sp,-24
10102af0:	dfc00515 	stw	ra,20(sp)
10102af4:	df000415 	stw	fp,16(sp)
10102af8:	df000404 	addi	fp,sp,16
10102afc:	e13ffc15 	stw	r4,-16(fp)
10102b00:	2809883a 	mov	r4,r5
10102b04:	3007883a 	mov	r3,r6
10102b08:	3805883a 	mov	r2,r7
10102b0c:	e13ffd05 	stb	r4,-12(fp)
10102b10:	e0fffe05 	stb	r3,-8(fp)
10102b14:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102b18:	e0bffd03 	ldbu	r2,-12(fp)
10102b1c:	10803f8c 	andi	r2,r2,254
10102b20:	01800504 	movi	r6,20
10102b24:	100b883a 	mov	r5,r2
10102b28:	e13ffc17 	ldw	r4,-16(fp)
10102b2c:	01029080 	call	10102908 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102b30:	e0bffc17 	ldw	r2,-16(fp)
10102b34:	10800017 	ldw	r2,0(r2)
10102b38:	10800084 	addi	r2,r2,2
10102b3c:	10800023 	ldbuio	r2,0(r2)
10102b40:	10803fcc 	andi	r2,r2,255
10102b44:	1080004c 	andi	r2,r2,1
10102b48:	10000726 	beq	r2,zero,10102b68 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102b4c:	e0bffc17 	ldw	r2,-16(fp)
10102b50:	10800017 	ldw	r2,0(r2)
10102b54:	10800044 	addi	r2,r2,1
10102b58:	00c00084 	movi	r3,2
10102b5c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102b60:	00800044 	movi	r2,1
10102b64:	00002706 	br	10102c04 <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10102b68:	e0bffe03 	ldbu	r2,-8(fp)
10102b6c:	01800404 	movi	r6,16
10102b70:	100b883a 	mov	r5,r2
10102b74:	e13ffc17 	ldw	r4,-16(fp)
10102b78:	01029080 	call	10102908 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102b7c:	e0bffc17 	ldw	r2,-16(fp)
10102b80:	10800017 	ldw	r2,0(r2)
10102b84:	10800084 	addi	r2,r2,2
10102b88:	10800023 	ldbuio	r2,0(r2)
10102b8c:	10803fcc 	andi	r2,r2,255
10102b90:	1080004c 	andi	r2,r2,1
10102b94:	10000726 	beq	r2,zero,10102bb4 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102b98:	e0bffc17 	ldw	r2,-16(fp)
10102b9c:	10800017 	ldw	r2,0(r2)
10102ba0:	10800044 	addi	r2,r2,1
10102ba4:	00c00084 	movi	r3,2
10102ba8:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102bac:	00800084 	movi	r2,2
10102bb0:	00001406 	br	10102c04 <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102bb4:	e0bfff03 	ldbu	r2,-4(fp)
10102bb8:	01800484 	movi	r6,18
10102bbc:	100b883a 	mov	r5,r2
10102bc0:	e13ffc17 	ldw	r4,-16(fp)
10102bc4:	01029080 	call	10102908 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102bc8:	e0bffc17 	ldw	r2,-16(fp)
10102bcc:	10800017 	ldw	r2,0(r2)
10102bd0:	10800084 	addi	r2,r2,2
10102bd4:	10800023 	ldbuio	r2,0(r2)
10102bd8:	10803fcc 	andi	r2,r2,255
10102bdc:	1080004c 	andi	r2,r2,1
10102be0:	10000726 	beq	r2,zero,10102c00 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102be4:	e0bffc17 	ldw	r2,-16(fp)
10102be8:	10800017 	ldw	r2,0(r2)
10102bec:	10800044 	addi	r2,r2,1
10102bf0:	00c00084 	movi	r3,2
10102bf4:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102bf8:	00800084 	movi	r2,2
10102bfc:	00000106 	br	10102c04 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
10102c00:	0005883a 	mov	r2,zero
}
10102c04:	e037883a 	mov	sp,fp
10102c08:	dfc00117 	ldw	ra,4(sp)
10102c0c:	df000017 	ldw	fp,0(sp)
10102c10:	dec00204 	addi	sp,sp,8
10102c14:	f800283a 	ret

10102c18 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
10102c18:	defffa04 	addi	sp,sp,-24
10102c1c:	dfc00515 	stw	ra,20(sp)
10102c20:	df000415 	stw	fp,16(sp)
10102c24:	df000404 	addi	fp,sp,16
10102c28:	e13ffc15 	stw	r4,-16(fp)
10102c2c:	2807883a 	mov	r3,r5
10102c30:	3005883a 	mov	r2,r6
10102c34:	e1ffff15 	stw	r7,-4(fp)
10102c38:	e0fffd05 	stb	r3,-12(fp)
10102c3c:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102c40:	e0bffd03 	ldbu	r2,-12(fp)
10102c44:	10803f8c 	andi	r2,r2,254
10102c48:	01800504 	movi	r6,20
10102c4c:	100b883a 	mov	r5,r2
10102c50:	e13ffc17 	ldw	r4,-16(fp)
10102c54:	01029080 	call	10102908 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102c58:	e0bffc17 	ldw	r2,-16(fp)
10102c5c:	10800017 	ldw	r2,0(r2)
10102c60:	10800084 	addi	r2,r2,2
10102c64:	10800023 	ldbuio	r2,0(r2)
10102c68:	10803fcc 	andi	r2,r2,255
10102c6c:	1080004c 	andi	r2,r2,1
10102c70:	10000726 	beq	r2,zero,10102c90 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102c74:	e0bffc17 	ldw	r2,-16(fp)
10102c78:	10800017 	ldw	r2,0(r2)
10102c7c:	10800044 	addi	r2,r2,1
10102c80:	00c00084 	movi	r3,2
10102c84:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102c88:	00800044 	movi	r2,1
10102c8c:	00002f06 	br	10102d4c <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10102c90:	e0bffe03 	ldbu	r2,-8(fp)
10102c94:	01800404 	movi	r6,16
10102c98:	100b883a 	mov	r5,r2
10102c9c:	e13ffc17 	ldw	r4,-16(fp)
10102ca0:	01029080 	call	10102908 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102ca4:	e0bffc17 	ldw	r2,-16(fp)
10102ca8:	10800017 	ldw	r2,0(r2)
10102cac:	10800084 	addi	r2,r2,2
10102cb0:	10800023 	ldbuio	r2,0(r2)
10102cb4:	10803fcc 	andi	r2,r2,255
10102cb8:	1080004c 	andi	r2,r2,1
10102cbc:	10000726 	beq	r2,zero,10102cdc <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102cc0:	e0bffc17 	ldw	r2,-16(fp)
10102cc4:	10800017 	ldw	r2,0(r2)
10102cc8:	10800044 	addi	r2,r2,1
10102ccc:	00c00084 	movi	r3,2
10102cd0:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102cd4:	00800084 	movi	r2,2
10102cd8:	00001c06 	br	10102d4c <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102cdc:	e0bffd03 	ldbu	r2,-12(fp)
10102ce0:	10800054 	ori	r2,r2,1
10102ce4:	10803fcc 	andi	r2,r2,255
10102ce8:	01800504 	movi	r6,20
10102cec:	100b883a 	mov	r5,r2
10102cf0:	e13ffc17 	ldw	r4,-16(fp)
10102cf4:	01029080 	call	10102908 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102cf8:	e0bffc17 	ldw	r2,-16(fp)
10102cfc:	10800017 	ldw	r2,0(r2)
10102d00:	10800084 	addi	r2,r2,2
10102d04:	10800023 	ldbuio	r2,0(r2)
10102d08:	10803fcc 	andi	r2,r2,255
10102d0c:	1080004c 	andi	r2,r2,1
10102d10:	10000726 	beq	r2,zero,10102d30 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102d14:	e0bffc17 	ldw	r2,-16(fp)
10102d18:	10800017 	ldw	r2,0(r2)
10102d1c:	10800044 	addi	r2,r2,1
10102d20:	00c00084 	movi	r3,2
10102d24:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102d28:	00800044 	movi	r2,1
10102d2c:	00000706 	br	10102d4c <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10102d30:	014002c4 	movi	r5,11
10102d34:	e13ffc17 	ldw	r4,-16(fp)
10102d38:	01029780 	call	10102978 <get_data_set_control>
10102d3c:	1007883a 	mov	r3,r2
10102d40:	e0bfff17 	ldw	r2,-4(fp)
10102d44:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
10102d48:	0005883a 	mov	r2,zero
}
10102d4c:	e037883a 	mov	sp,fp
10102d50:	dfc00117 	ldw	ra,4(sp)
10102d54:	df000017 	ldw	fp,0(sp)
10102d58:	dec00204 	addi	sp,sp,8
10102d5c:	f800283a 	ret

10102d60 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10102d60:	defff904 	addi	sp,sp,-28
10102d64:	dfc00615 	stw	ra,24(sp)
10102d68:	df000515 	stw	fp,20(sp)
10102d6c:	df000504 	addi	fp,sp,20
10102d70:	e13ffc15 	stw	r4,-16(fp)
10102d74:	2807883a 	mov	r3,r5
10102d78:	3005883a 	mov	r2,r6
10102d7c:	e1ffff15 	stw	r7,-4(fp)
10102d80:	e0fffd05 	stb	r3,-12(fp)
10102d84:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102d88:	e0bffd03 	ldbu	r2,-12(fp)
10102d8c:	10803f8c 	andi	r2,r2,254
10102d90:	01800504 	movi	r6,20
10102d94:	100b883a 	mov	r5,r2
10102d98:	e13ffc17 	ldw	r4,-16(fp)
10102d9c:	01029080 	call	10102908 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102da0:	e0bffc17 	ldw	r2,-16(fp)
10102da4:	10800017 	ldw	r2,0(r2)
10102da8:	10800084 	addi	r2,r2,2
10102dac:	10800023 	ldbuio	r2,0(r2)
10102db0:	10803fcc 	andi	r2,r2,255
10102db4:	1080004c 	andi	r2,r2,1
10102db8:	10000726 	beq	r2,zero,10102dd8 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102dbc:	e0bffc17 	ldw	r2,-16(fp)
10102dc0:	10800017 	ldw	r2,0(r2)
10102dc4:	10800044 	addi	r2,r2,1
10102dc8:	00c00084 	movi	r3,2
10102dcc:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102dd0:	00800044 	movi	r2,1
10102dd4:	00004206 	br	10102ee0 <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10102dd8:	e0bffe03 	ldbu	r2,-8(fp)
10102ddc:	01800404 	movi	r6,16
10102de0:	100b883a 	mov	r5,r2
10102de4:	e13ffc17 	ldw	r4,-16(fp)
10102de8:	01029080 	call	10102908 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102dec:	e0bffc17 	ldw	r2,-16(fp)
10102df0:	10800017 	ldw	r2,0(r2)
10102df4:	10800084 	addi	r2,r2,2
10102df8:	10800023 	ldbuio	r2,0(r2)
10102dfc:	10803fcc 	andi	r2,r2,255
10102e00:	1080004c 	andi	r2,r2,1
10102e04:	10000726 	beq	r2,zero,10102e24 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102e08:	e0bffc17 	ldw	r2,-16(fp)
10102e0c:	10800017 	ldw	r2,0(r2)
10102e10:	10800044 	addi	r2,r2,1
10102e14:	00c00084 	movi	r3,2
10102e18:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102e1c:	00800084 	movi	r2,2
10102e20:	00002f06 	br	10102ee0 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
10102e24:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
10102e28:	e03ffb15 	stw	zero,-20(fp)
10102e2c:	00002806 	br	10102ed0 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
10102e30:	e0800217 	ldw	r2,8(fp)
10102e34:	10bfffc4 	addi	r2,r2,-1
10102e38:	e0fffb17 	ldw	r3,-20(fp)
10102e3c:	18800a2e 	bgeu	r3,r2,10102e68 <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
10102e40:	e0ffff17 	ldw	r3,-4(fp)
10102e44:	e0bffb17 	ldw	r2,-20(fp)
10102e48:	1885883a 	add	r2,r3,r2
10102e4c:	10800003 	ldbu	r2,0(r2)
10102e50:	10803fcc 	andi	r2,r2,255
10102e54:	01800404 	movi	r6,16
10102e58:	100b883a 	mov	r5,r2
10102e5c:	e13ffc17 	ldw	r4,-16(fp)
10102e60:	01029080 	call	10102908 <set_data_control>
10102e64:	00000906 	br	10102e8c <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102e68:	e0ffff17 	ldw	r3,-4(fp)
10102e6c:	e0bffb17 	ldw	r2,-20(fp)
10102e70:	1885883a 	add	r2,r3,r2
10102e74:	10800003 	ldbu	r2,0(r2)
10102e78:	10803fcc 	andi	r2,r2,255
10102e7c:	01800484 	movi	r6,18
10102e80:	100b883a 	mov	r5,r2
10102e84:	e13ffc17 	ldw	r4,-16(fp)
10102e88:	01029080 	call	10102908 <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102e8c:	e0bffc17 	ldw	r2,-16(fp)
10102e90:	10800017 	ldw	r2,0(r2)
10102e94:	10800084 	addi	r2,r2,2
10102e98:	10800023 	ldbuio	r2,0(r2)
10102e9c:	10803fcc 	andi	r2,r2,255
10102ea0:	1080004c 	andi	r2,r2,1
10102ea4:	10000726 	beq	r2,zero,10102ec4 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102ea8:	e0bffc17 	ldw	r2,-16(fp)
10102eac:	10800017 	ldw	r2,0(r2)
10102eb0:	10800044 	addi	r2,r2,1
10102eb4:	00c00084 	movi	r3,2
10102eb8:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
10102ebc:	00800084 	movi	r2,2
10102ec0:	00000706 	br	10102ee0 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10102ec4:	e0bffb17 	ldw	r2,-20(fp)
10102ec8:	10800044 	addi	r2,r2,1
10102ecc:	e0bffb15 	stw	r2,-20(fp)
10102ed0:	e0fffb17 	ldw	r3,-20(fp)
10102ed4:	e0800217 	ldw	r2,8(fp)
10102ed8:	18bfd536 	bltu	r3,r2,10102e30 <_gp+0xfffe165c>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
10102edc:	0005883a 	mov	r2,zero
}
10102ee0:	e037883a 	mov	sp,fp
10102ee4:	dfc00117 	ldw	ra,4(sp)
10102ee8:	df000017 	ldw	fp,0(sp)
10102eec:	dec00204 	addi	sp,sp,8
10102ef0:	f800283a 	ret

10102ef4 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10102ef4:	defff804 	addi	sp,sp,-32
10102ef8:	dfc00715 	stw	ra,28(sp)
10102efc:	df000615 	stw	fp,24(sp)
10102f00:	dc000515 	stw	r16,20(sp)
10102f04:	df000604 	addi	fp,sp,24
10102f08:	e13ffb15 	stw	r4,-20(fp)
10102f0c:	2807883a 	mov	r3,r5
10102f10:	3005883a 	mov	r2,r6
10102f14:	e1fffe15 	stw	r7,-8(fp)
10102f18:	e0fffc05 	stb	r3,-16(fp)
10102f1c:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102f20:	e0bffc03 	ldbu	r2,-16(fp)
10102f24:	10803f8c 	andi	r2,r2,254
10102f28:	01800504 	movi	r6,20
10102f2c:	100b883a 	mov	r5,r2
10102f30:	e13ffb17 	ldw	r4,-20(fp)
10102f34:	01029080 	call	10102908 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102f38:	e0bffb17 	ldw	r2,-20(fp)
10102f3c:	10800017 	ldw	r2,0(r2)
10102f40:	10800084 	addi	r2,r2,2
10102f44:	10800023 	ldbuio	r2,0(r2)
10102f48:	10803fcc 	andi	r2,r2,255
10102f4c:	1080004c 	andi	r2,r2,1
10102f50:	10000726 	beq	r2,zero,10102f70 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102f54:	e0bffb17 	ldw	r2,-20(fp)
10102f58:	10800017 	ldw	r2,0(r2)
10102f5c:	10800044 	addi	r2,r2,1
10102f60:	00c00084 	movi	r3,2
10102f64:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10102f68:	00800044 	movi	r2,1
10102f6c:	00004506 	br	10103084 <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10102f70:	e0bffd03 	ldbu	r2,-12(fp)
10102f74:	01800404 	movi	r6,16
10102f78:	100b883a 	mov	r5,r2
10102f7c:	e13ffb17 	ldw	r4,-20(fp)
10102f80:	01029080 	call	10102908 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102f84:	e0bffb17 	ldw	r2,-20(fp)
10102f88:	10800017 	ldw	r2,0(r2)
10102f8c:	10800084 	addi	r2,r2,2
10102f90:	10800023 	ldbuio	r2,0(r2)
10102f94:	10803fcc 	andi	r2,r2,255
10102f98:	1080004c 	andi	r2,r2,1
10102f9c:	10000726 	beq	r2,zero,10102fbc <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102fa0:	e0bffb17 	ldw	r2,-20(fp)
10102fa4:	10800017 	ldw	r2,0(r2)
10102fa8:	10800044 	addi	r2,r2,1
10102fac:	00c00084 	movi	r3,2
10102fb0:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10102fb4:	00800084 	movi	r2,2
10102fb8:	00003206 	br	10103084 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10102fbc:	e0bffc03 	ldbu	r2,-16(fp)
10102fc0:	10800054 	ori	r2,r2,1
10102fc4:	10803fcc 	andi	r2,r2,255
10102fc8:	01800504 	movi	r6,20
10102fcc:	100b883a 	mov	r5,r2
10102fd0:	e13ffb17 	ldw	r4,-20(fp)
10102fd4:	01029080 	call	10102908 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10102fd8:	e0bffb17 	ldw	r2,-20(fp)
10102fdc:	10800017 	ldw	r2,0(r2)
10102fe0:	10800084 	addi	r2,r2,2
10102fe4:	10800023 	ldbuio	r2,0(r2)
10102fe8:	10803fcc 	andi	r2,r2,255
10102fec:	1080004c 	andi	r2,r2,1
10102ff0:	10000726 	beq	r2,zero,10103010 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10102ff4:	e0bffb17 	ldw	r2,-20(fp)
10102ff8:	10800017 	ldw	r2,0(r2)
10102ffc:	10800044 	addi	r2,r2,1
10103000:	00c00084 	movi	r3,2
10103004:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10103008:	00800044 	movi	r2,1
1010300c:	00001d06 	br	10103084 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
10103010:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
10103014:	e03ffa15 	stw	zero,-24(fp)
10103018:	00001606 	br	10103074 <i2c_read_array+0x180>
        if (i < size - 1) {
1010301c:	e0800217 	ldw	r2,8(fp)
10103020:	10bfffc4 	addi	r2,r2,-1
10103024:	e0fffa17 	ldw	r3,-24(fp)
10103028:	1880082e 	bgeu	r3,r2,1010304c <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
1010302c:	e0fffe17 	ldw	r3,-8(fp)
10103030:	e0bffa17 	ldw	r2,-24(fp)
10103034:	18a1883a 	add	r16,r3,r2
10103038:	01400204 	movi	r5,8
1010303c:	e13ffb17 	ldw	r4,-20(fp)
10103040:	01029780 	call	10102978 <get_data_set_control>
10103044:	80800005 	stb	r2,0(r16)
10103048:	00000706 	br	10103068 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
1010304c:	e0fffe17 	ldw	r3,-8(fp)
10103050:	e0bffa17 	ldw	r2,-24(fp)
10103054:	18a1883a 	add	r16,r3,r2
10103058:	014002c4 	movi	r5,11
1010305c:	e13ffb17 	ldw	r4,-20(fp)
10103060:	01029780 	call	10102978 <get_data_set_control>
10103064:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10103068:	e0bffa17 	ldw	r2,-24(fp)
1010306c:	10800044 	addi	r2,r2,1
10103070:	e0bffa15 	stw	r2,-24(fp)
10103074:	e0fffa17 	ldw	r3,-24(fp)
10103078:	e0800217 	ldw	r2,8(fp)
1010307c:	18bfe736 	bltu	r3,r2,1010301c <_gp+0xfffe1848>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
10103080:	0005883a 	mov	r2,zero
}
10103084:	e6ffff04 	addi	sp,fp,-4
10103088:	dfc00217 	ldw	ra,8(sp)
1010308c:	df000117 	ldw	fp,4(sp)
10103090:	dc000017 	ldw	r16,0(sp)
10103094:	dec00304 	addi	sp,sp,12
10103098:	f800283a 	ret

1010309c <__divsi3>:
1010309c:	20001b16 	blt	r4,zero,1010310c <__divsi3+0x70>
101030a0:	000f883a 	mov	r7,zero
101030a4:	28001616 	blt	r5,zero,10103100 <__divsi3+0x64>
101030a8:	200d883a 	mov	r6,r4
101030ac:	29001a2e 	bgeu	r5,r4,10103118 <__divsi3+0x7c>
101030b0:	00800804 	movi	r2,32
101030b4:	00c00044 	movi	r3,1
101030b8:	00000106 	br	101030c0 <__divsi3+0x24>
101030bc:	10000d26 	beq	r2,zero,101030f4 <__divsi3+0x58>
101030c0:	294b883a 	add	r5,r5,r5
101030c4:	10bfffc4 	addi	r2,r2,-1
101030c8:	18c7883a 	add	r3,r3,r3
101030cc:	293ffb36 	bltu	r5,r4,101030bc <_gp+0xfffe18e8>
101030d0:	0005883a 	mov	r2,zero
101030d4:	18000726 	beq	r3,zero,101030f4 <__divsi3+0x58>
101030d8:	0005883a 	mov	r2,zero
101030dc:	31400236 	bltu	r6,r5,101030e8 <__divsi3+0x4c>
101030e0:	314dc83a 	sub	r6,r6,r5
101030e4:	10c4b03a 	or	r2,r2,r3
101030e8:	1806d07a 	srli	r3,r3,1
101030ec:	280ad07a 	srli	r5,r5,1
101030f0:	183ffa1e 	bne	r3,zero,101030dc <_gp+0xfffe1908>
101030f4:	38000126 	beq	r7,zero,101030fc <__divsi3+0x60>
101030f8:	0085c83a 	sub	r2,zero,r2
101030fc:	f800283a 	ret
10103100:	014bc83a 	sub	r5,zero,r5
10103104:	39c0005c 	xori	r7,r7,1
10103108:	003fe706 	br	101030a8 <_gp+0xfffe18d4>
1010310c:	0109c83a 	sub	r4,zero,r4
10103110:	01c00044 	movi	r7,1
10103114:	003fe306 	br	101030a4 <_gp+0xfffe18d0>
10103118:	00c00044 	movi	r3,1
1010311c:	003fee06 	br	101030d8 <_gp+0xfffe1904>

10103120 <__modsi3>:
10103120:	20001716 	blt	r4,zero,10103180 <__modsi3+0x60>
10103124:	000f883a 	mov	r7,zero
10103128:	2005883a 	mov	r2,r4
1010312c:	28001216 	blt	r5,zero,10103178 <__modsi3+0x58>
10103130:	2900162e 	bgeu	r5,r4,1010318c <__modsi3+0x6c>
10103134:	01800804 	movi	r6,32
10103138:	00c00044 	movi	r3,1
1010313c:	00000106 	br	10103144 <__modsi3+0x24>
10103140:	30000a26 	beq	r6,zero,1010316c <__modsi3+0x4c>
10103144:	294b883a 	add	r5,r5,r5
10103148:	31bfffc4 	addi	r6,r6,-1
1010314c:	18c7883a 	add	r3,r3,r3
10103150:	293ffb36 	bltu	r5,r4,10103140 <_gp+0xfffe196c>
10103154:	18000526 	beq	r3,zero,1010316c <__modsi3+0x4c>
10103158:	1806d07a 	srli	r3,r3,1
1010315c:	11400136 	bltu	r2,r5,10103164 <__modsi3+0x44>
10103160:	1145c83a 	sub	r2,r2,r5
10103164:	280ad07a 	srli	r5,r5,1
10103168:	183ffb1e 	bne	r3,zero,10103158 <_gp+0xfffe1984>
1010316c:	38000126 	beq	r7,zero,10103174 <__modsi3+0x54>
10103170:	0085c83a 	sub	r2,zero,r2
10103174:	f800283a 	ret
10103178:	014bc83a 	sub	r5,zero,r5
1010317c:	003fec06 	br	10103130 <_gp+0xfffe195c>
10103180:	0109c83a 	sub	r4,zero,r4
10103184:	01c00044 	movi	r7,1
10103188:	003fe706 	br	10103128 <_gp+0xfffe1954>
1010318c:	00c00044 	movi	r3,1
10103190:	003ff106 	br	10103158 <_gp+0xfffe1984>

10103194 <__udivsi3>:
10103194:	200d883a 	mov	r6,r4
10103198:	2900152e 	bgeu	r5,r4,101031f0 <__udivsi3+0x5c>
1010319c:	28001416 	blt	r5,zero,101031f0 <__udivsi3+0x5c>
101031a0:	00800804 	movi	r2,32
101031a4:	00c00044 	movi	r3,1
101031a8:	00000206 	br	101031b4 <__udivsi3+0x20>
101031ac:	10000e26 	beq	r2,zero,101031e8 <__udivsi3+0x54>
101031b0:	28000516 	blt	r5,zero,101031c8 <__udivsi3+0x34>
101031b4:	294b883a 	add	r5,r5,r5
101031b8:	10bfffc4 	addi	r2,r2,-1
101031bc:	18c7883a 	add	r3,r3,r3
101031c0:	293ffa36 	bltu	r5,r4,101031ac <_gp+0xfffe19d8>
101031c4:	18000826 	beq	r3,zero,101031e8 <__udivsi3+0x54>
101031c8:	0005883a 	mov	r2,zero
101031cc:	31400236 	bltu	r6,r5,101031d8 <__udivsi3+0x44>
101031d0:	314dc83a 	sub	r6,r6,r5
101031d4:	10c4b03a 	or	r2,r2,r3
101031d8:	1806d07a 	srli	r3,r3,1
101031dc:	280ad07a 	srli	r5,r5,1
101031e0:	183ffa1e 	bne	r3,zero,101031cc <_gp+0xfffe19f8>
101031e4:	f800283a 	ret
101031e8:	0005883a 	mov	r2,zero
101031ec:	f800283a 	ret
101031f0:	00c00044 	movi	r3,1
101031f4:	003ff406 	br	101031c8 <_gp+0xfffe19f4>

101031f8 <__umodsi3>:
101031f8:	2005883a 	mov	r2,r4
101031fc:	2900122e 	bgeu	r5,r4,10103248 <__umodsi3+0x50>
10103200:	28001116 	blt	r5,zero,10103248 <__umodsi3+0x50>
10103204:	01800804 	movi	r6,32
10103208:	00c00044 	movi	r3,1
1010320c:	00000206 	br	10103218 <__umodsi3+0x20>
10103210:	30000c26 	beq	r6,zero,10103244 <__umodsi3+0x4c>
10103214:	28000516 	blt	r5,zero,1010322c <__umodsi3+0x34>
10103218:	294b883a 	add	r5,r5,r5
1010321c:	31bfffc4 	addi	r6,r6,-1
10103220:	18c7883a 	add	r3,r3,r3
10103224:	293ffa36 	bltu	r5,r4,10103210 <_gp+0xfffe1a3c>
10103228:	18000626 	beq	r3,zero,10103244 <__umodsi3+0x4c>
1010322c:	1806d07a 	srli	r3,r3,1
10103230:	11400136 	bltu	r2,r5,10103238 <__umodsi3+0x40>
10103234:	1145c83a 	sub	r2,r2,r5
10103238:	280ad07a 	srli	r5,r5,1
1010323c:	183ffb1e 	bne	r3,zero,1010322c <_gp+0xfffe1a58>
10103240:	f800283a 	ret
10103244:	f800283a 	ret
10103248:	00c00044 	movi	r3,1
1010324c:	003ff706 	br	1010322c <_gp+0xfffe1a58>

10103250 <__assert_func>:
10103250:	008404b4 	movhi	r2,4114
10103254:	10a5f604 	addi	r2,r2,-26664
10103258:	10800017 	ldw	r2,0(r2)
1010325c:	defffc04 	addi	sp,sp,-16
10103260:	dfc00315 	stw	ra,12(sp)
10103264:	2015883a 	mov	r10,r4
10103268:	2811883a 	mov	r8,r5
1010326c:	3813883a 	mov	r9,r7
10103270:	11000317 	ldw	r4,12(r2)
10103274:	30000c26 	beq	r6,zero,101032a8 <__assert_func+0x58>
10103278:	00c40474 	movhi	r3,4113
1010327c:	18de5d04 	addi	r3,r3,31092
10103280:	3005883a 	mov	r2,r6
10103284:	01440474 	movhi	r5,4113
10103288:	295e6104 	addi	r5,r5,31108
1010328c:	500f883a 	mov	r7,r10
10103290:	480d883a 	mov	r6,r9
10103294:	d8c00115 	stw	r3,4(sp)
10103298:	da000015 	stw	r8,0(sp)
1010329c:	d8800215 	stw	r2,8(sp)
101032a0:	0103a380 	call	10103a38 <fiprintf>
101032a4:	010a0840 	call	1010a084 <abort>
101032a8:	00c40474 	movhi	r3,4113
101032ac:	18de6004 	addi	r3,r3,31104
101032b0:	1805883a 	mov	r2,r3
101032b4:	003ff306 	br	10103284 <_gp+0xfffe1ab0>

101032b8 <__assert>:
101032b8:	deffff04 	addi	sp,sp,-4
101032bc:	300f883a 	mov	r7,r6
101032c0:	000d883a 	mov	r6,zero
101032c4:	dfc00015 	stw	ra,0(sp)
101032c8:	01032500 	call	10103250 <__assert_func>

101032cc <_fclose_r>:
101032cc:	28003926 	beq	r5,zero,101033b4 <_fclose_r+0xe8>
101032d0:	defffc04 	addi	sp,sp,-16
101032d4:	dc400115 	stw	r17,4(sp)
101032d8:	dc000015 	stw	r16,0(sp)
101032dc:	dfc00315 	stw	ra,12(sp)
101032e0:	dc800215 	stw	r18,8(sp)
101032e4:	2023883a 	mov	r17,r4
101032e8:	2821883a 	mov	r16,r5
101032ec:	20000226 	beq	r4,zero,101032f8 <_fclose_r+0x2c>
101032f0:	20800e17 	ldw	r2,56(r4)
101032f4:	10002726 	beq	r2,zero,10103394 <_fclose_r+0xc8>
101032f8:	8080030f 	ldh	r2,12(r16)
101032fc:	1000071e 	bne	r2,zero,1010331c <_fclose_r+0x50>
10103300:	0005883a 	mov	r2,zero
10103304:	dfc00317 	ldw	ra,12(sp)
10103308:	dc800217 	ldw	r18,8(sp)
1010330c:	dc400117 	ldw	r17,4(sp)
10103310:	dc000017 	ldw	r16,0(sp)
10103314:	dec00404 	addi	sp,sp,16
10103318:	f800283a 	ret
1010331c:	800b883a 	mov	r5,r16
10103320:	8809883a 	mov	r4,r17
10103324:	01033d00 	call	101033d0 <__sflush_r>
10103328:	1025883a 	mov	r18,r2
1010332c:	80800b17 	ldw	r2,44(r16)
10103330:	10000426 	beq	r2,zero,10103344 <_fclose_r+0x78>
10103334:	81400717 	ldw	r5,28(r16)
10103338:	8809883a 	mov	r4,r17
1010333c:	103ee83a 	callr	r2
10103340:	10001616 	blt	r2,zero,1010339c <_fclose_r+0xd0>
10103344:	8080030b 	ldhu	r2,12(r16)
10103348:	1080200c 	andi	r2,r2,128
1010334c:	1000151e 	bne	r2,zero,101033a4 <_fclose_r+0xd8>
10103350:	81400c17 	ldw	r5,48(r16)
10103354:	28000526 	beq	r5,zero,1010336c <_fclose_r+0xa0>
10103358:	80801004 	addi	r2,r16,64
1010335c:	28800226 	beq	r5,r2,10103368 <_fclose_r+0x9c>
10103360:	8809883a 	mov	r4,r17
10103364:	0103cf00 	call	10103cf0 <_free_r>
10103368:	80000c15 	stw	zero,48(r16)
1010336c:	81401117 	ldw	r5,68(r16)
10103370:	28000326 	beq	r5,zero,10103380 <_fclose_r+0xb4>
10103374:	8809883a 	mov	r4,r17
10103378:	0103cf00 	call	10103cf0 <_free_r>
1010337c:	80001115 	stw	zero,68(r16)
10103380:	01039d80 	call	101039d8 <__sfp_lock_acquire>
10103384:	8000030d 	sth	zero,12(r16)
10103388:	01039dc0 	call	101039dc <__sfp_lock_release>
1010338c:	9005883a 	mov	r2,r18
10103390:	003fdc06 	br	10103304 <_gp+0xfffe1b30>
10103394:	01039c80 	call	101039c8 <__sinit>
10103398:	003fd706 	br	101032f8 <_gp+0xfffe1b24>
1010339c:	04bfffc4 	movi	r18,-1
101033a0:	003fe806 	br	10103344 <_gp+0xfffe1b70>
101033a4:	81400417 	ldw	r5,16(r16)
101033a8:	8809883a 	mov	r4,r17
101033ac:	0103cf00 	call	10103cf0 <_free_r>
101033b0:	003fe706 	br	10103350 <_gp+0xfffe1b7c>
101033b4:	0005883a 	mov	r2,zero
101033b8:	f800283a 	ret

101033bc <fclose>:
101033bc:	008404b4 	movhi	r2,4114
101033c0:	10a5f604 	addi	r2,r2,-26664
101033c4:	200b883a 	mov	r5,r4
101033c8:	11000017 	ldw	r4,0(r2)
101033cc:	01032cc1 	jmpi	101032cc <_fclose_r>

101033d0 <__sflush_r>:
101033d0:	2880030b 	ldhu	r2,12(r5)
101033d4:	defffb04 	addi	sp,sp,-20
101033d8:	dcc00315 	stw	r19,12(sp)
101033dc:	dc400115 	stw	r17,4(sp)
101033e0:	dfc00415 	stw	ra,16(sp)
101033e4:	dc800215 	stw	r18,8(sp)
101033e8:	dc000015 	stw	r16,0(sp)
101033ec:	10c0020c 	andi	r3,r2,8
101033f0:	2823883a 	mov	r17,r5
101033f4:	2027883a 	mov	r19,r4
101033f8:	1800311e 	bne	r3,zero,101034c0 <__sflush_r+0xf0>
101033fc:	28c00117 	ldw	r3,4(r5)
10103400:	10820014 	ori	r2,r2,2048
10103404:	2880030d 	sth	r2,12(r5)
10103408:	00c04b0e 	bge	zero,r3,10103538 <__sflush_r+0x168>
1010340c:	8a000a17 	ldw	r8,40(r17)
10103410:	40002326 	beq	r8,zero,101034a0 <__sflush_r+0xd0>
10103414:	9c000017 	ldw	r16,0(r19)
10103418:	10c4000c 	andi	r3,r2,4096
1010341c:	98000015 	stw	zero,0(r19)
10103420:	18004826 	beq	r3,zero,10103544 <__sflush_r+0x174>
10103424:	89801417 	ldw	r6,80(r17)
10103428:	10c0010c 	andi	r3,r2,4
1010342c:	18000626 	beq	r3,zero,10103448 <__sflush_r+0x78>
10103430:	88c00117 	ldw	r3,4(r17)
10103434:	88800c17 	ldw	r2,48(r17)
10103438:	30cdc83a 	sub	r6,r6,r3
1010343c:	10000226 	beq	r2,zero,10103448 <__sflush_r+0x78>
10103440:	88800f17 	ldw	r2,60(r17)
10103444:	308dc83a 	sub	r6,r6,r2
10103448:	89400717 	ldw	r5,28(r17)
1010344c:	000f883a 	mov	r7,zero
10103450:	9809883a 	mov	r4,r19
10103454:	403ee83a 	callr	r8
10103458:	00ffffc4 	movi	r3,-1
1010345c:	10c04426 	beq	r2,r3,10103570 <__sflush_r+0x1a0>
10103460:	88c0030b 	ldhu	r3,12(r17)
10103464:	89000417 	ldw	r4,16(r17)
10103468:	88000115 	stw	zero,4(r17)
1010346c:	197dffcc 	andi	r5,r3,63487
10103470:	8940030d 	sth	r5,12(r17)
10103474:	89000015 	stw	r4,0(r17)
10103478:	18c4000c 	andi	r3,r3,4096
1010347c:	18002c1e 	bne	r3,zero,10103530 <__sflush_r+0x160>
10103480:	89400c17 	ldw	r5,48(r17)
10103484:	9c000015 	stw	r16,0(r19)
10103488:	28000526 	beq	r5,zero,101034a0 <__sflush_r+0xd0>
1010348c:	88801004 	addi	r2,r17,64
10103490:	28800226 	beq	r5,r2,1010349c <__sflush_r+0xcc>
10103494:	9809883a 	mov	r4,r19
10103498:	0103cf00 	call	10103cf0 <_free_r>
1010349c:	88000c15 	stw	zero,48(r17)
101034a0:	0005883a 	mov	r2,zero
101034a4:	dfc00417 	ldw	ra,16(sp)
101034a8:	dcc00317 	ldw	r19,12(sp)
101034ac:	dc800217 	ldw	r18,8(sp)
101034b0:	dc400117 	ldw	r17,4(sp)
101034b4:	dc000017 	ldw	r16,0(sp)
101034b8:	dec00504 	addi	sp,sp,20
101034bc:	f800283a 	ret
101034c0:	2c800417 	ldw	r18,16(r5)
101034c4:	903ff626 	beq	r18,zero,101034a0 <_gp+0xfffe1ccc>
101034c8:	2c000017 	ldw	r16,0(r5)
101034cc:	108000cc 	andi	r2,r2,3
101034d0:	2c800015 	stw	r18,0(r5)
101034d4:	84a1c83a 	sub	r16,r16,r18
101034d8:	1000131e 	bne	r2,zero,10103528 <__sflush_r+0x158>
101034dc:	28800517 	ldw	r2,20(r5)
101034e0:	88800215 	stw	r2,8(r17)
101034e4:	04000316 	blt	zero,r16,101034f4 <__sflush_r+0x124>
101034e8:	003fed06 	br	101034a0 <_gp+0xfffe1ccc>
101034ec:	90a5883a 	add	r18,r18,r2
101034f0:	043feb0e 	bge	zero,r16,101034a0 <_gp+0xfffe1ccc>
101034f4:	88800917 	ldw	r2,36(r17)
101034f8:	89400717 	ldw	r5,28(r17)
101034fc:	800f883a 	mov	r7,r16
10103500:	900d883a 	mov	r6,r18
10103504:	9809883a 	mov	r4,r19
10103508:	103ee83a 	callr	r2
1010350c:	80a1c83a 	sub	r16,r16,r2
10103510:	00bff616 	blt	zero,r2,101034ec <_gp+0xfffe1d18>
10103514:	88c0030b 	ldhu	r3,12(r17)
10103518:	00bfffc4 	movi	r2,-1
1010351c:	18c01014 	ori	r3,r3,64
10103520:	88c0030d 	sth	r3,12(r17)
10103524:	003fdf06 	br	101034a4 <_gp+0xfffe1cd0>
10103528:	0005883a 	mov	r2,zero
1010352c:	003fec06 	br	101034e0 <_gp+0xfffe1d0c>
10103530:	88801415 	stw	r2,80(r17)
10103534:	003fd206 	br	10103480 <_gp+0xfffe1cac>
10103538:	28c00f17 	ldw	r3,60(r5)
1010353c:	00ffb316 	blt	zero,r3,1010340c <_gp+0xfffe1c38>
10103540:	003fd706 	br	101034a0 <_gp+0xfffe1ccc>
10103544:	89400717 	ldw	r5,28(r17)
10103548:	000d883a 	mov	r6,zero
1010354c:	01c00044 	movi	r7,1
10103550:	9809883a 	mov	r4,r19
10103554:	403ee83a 	callr	r8
10103558:	100d883a 	mov	r6,r2
1010355c:	00bfffc4 	movi	r2,-1
10103560:	30801426 	beq	r6,r2,101035b4 <__sflush_r+0x1e4>
10103564:	8880030b 	ldhu	r2,12(r17)
10103568:	8a000a17 	ldw	r8,40(r17)
1010356c:	003fae06 	br	10103428 <_gp+0xfffe1c54>
10103570:	98c00017 	ldw	r3,0(r19)
10103574:	183fba26 	beq	r3,zero,10103460 <_gp+0xfffe1c8c>
10103578:	01000744 	movi	r4,29
1010357c:	19000626 	beq	r3,r4,10103598 <__sflush_r+0x1c8>
10103580:	01000584 	movi	r4,22
10103584:	19000426 	beq	r3,r4,10103598 <__sflush_r+0x1c8>
10103588:	88c0030b 	ldhu	r3,12(r17)
1010358c:	18c01014 	ori	r3,r3,64
10103590:	88c0030d 	sth	r3,12(r17)
10103594:	003fc306 	br	101034a4 <_gp+0xfffe1cd0>
10103598:	8880030b 	ldhu	r2,12(r17)
1010359c:	88c00417 	ldw	r3,16(r17)
101035a0:	88000115 	stw	zero,4(r17)
101035a4:	10bdffcc 	andi	r2,r2,63487
101035a8:	8880030d 	sth	r2,12(r17)
101035ac:	88c00015 	stw	r3,0(r17)
101035b0:	003fb306 	br	10103480 <_gp+0xfffe1cac>
101035b4:	98800017 	ldw	r2,0(r19)
101035b8:	103fea26 	beq	r2,zero,10103564 <_gp+0xfffe1d90>
101035bc:	00c00744 	movi	r3,29
101035c0:	10c00226 	beq	r2,r3,101035cc <__sflush_r+0x1fc>
101035c4:	00c00584 	movi	r3,22
101035c8:	10c0031e 	bne	r2,r3,101035d8 <__sflush_r+0x208>
101035cc:	9c000015 	stw	r16,0(r19)
101035d0:	0005883a 	mov	r2,zero
101035d4:	003fb306 	br	101034a4 <_gp+0xfffe1cd0>
101035d8:	88c0030b 	ldhu	r3,12(r17)
101035dc:	3005883a 	mov	r2,r6
101035e0:	18c01014 	ori	r3,r3,64
101035e4:	88c0030d 	sth	r3,12(r17)
101035e8:	003fae06 	br	101034a4 <_gp+0xfffe1cd0>

101035ec <_fflush_r>:
101035ec:	defffd04 	addi	sp,sp,-12
101035f0:	dc000115 	stw	r16,4(sp)
101035f4:	dfc00215 	stw	ra,8(sp)
101035f8:	2021883a 	mov	r16,r4
101035fc:	20000226 	beq	r4,zero,10103608 <_fflush_r+0x1c>
10103600:	20800e17 	ldw	r2,56(r4)
10103604:	10000c26 	beq	r2,zero,10103638 <_fflush_r+0x4c>
10103608:	2880030f 	ldh	r2,12(r5)
1010360c:	1000051e 	bne	r2,zero,10103624 <_fflush_r+0x38>
10103610:	0005883a 	mov	r2,zero
10103614:	dfc00217 	ldw	ra,8(sp)
10103618:	dc000117 	ldw	r16,4(sp)
1010361c:	dec00304 	addi	sp,sp,12
10103620:	f800283a 	ret
10103624:	8009883a 	mov	r4,r16
10103628:	dfc00217 	ldw	ra,8(sp)
1010362c:	dc000117 	ldw	r16,4(sp)
10103630:	dec00304 	addi	sp,sp,12
10103634:	01033d01 	jmpi	101033d0 <__sflush_r>
10103638:	d9400015 	stw	r5,0(sp)
1010363c:	01039c80 	call	101039c8 <__sinit>
10103640:	d9400017 	ldw	r5,0(sp)
10103644:	003ff006 	br	10103608 <_gp+0xfffe1e34>

10103648 <fflush>:
10103648:	20000526 	beq	r4,zero,10103660 <fflush+0x18>
1010364c:	008404b4 	movhi	r2,4114
10103650:	10a5f604 	addi	r2,r2,-26664
10103654:	200b883a 	mov	r5,r4
10103658:	11000017 	ldw	r4,0(r2)
1010365c:	01035ec1 	jmpi	101035ec <_fflush_r>
10103660:	008404b4 	movhi	r2,4114
10103664:	10a5f504 	addi	r2,r2,-26668
10103668:	11000017 	ldw	r4,0(r2)
1010366c:	01440434 	movhi	r5,4112
10103670:	294d7b04 	addi	r5,r5,13804
10103674:	01045a01 	jmpi	101045a0 <_fwalk_reent>

10103678 <__fp_unlock>:
10103678:	0005883a 	mov	r2,zero
1010367c:	f800283a 	ret

10103680 <_cleanup_r>:
10103680:	01440434 	movhi	r5,4112
10103684:	294cb304 	addi	r5,r5,13004
10103688:	01045a01 	jmpi	101045a0 <_fwalk_reent>

1010368c <__sinit.part.1>:
1010368c:	defff704 	addi	sp,sp,-36
10103690:	00c40434 	movhi	r3,4112
10103694:	dfc00815 	stw	ra,32(sp)
10103698:	ddc00715 	stw	r23,28(sp)
1010369c:	dd800615 	stw	r22,24(sp)
101036a0:	dd400515 	stw	r21,20(sp)
101036a4:	dd000415 	stw	r20,16(sp)
101036a8:	dcc00315 	stw	r19,12(sp)
101036ac:	dc800215 	stw	r18,8(sp)
101036b0:	dc400115 	stw	r17,4(sp)
101036b4:	dc000015 	stw	r16,0(sp)
101036b8:	18cda004 	addi	r3,r3,13952
101036bc:	24000117 	ldw	r16,4(r4)
101036c0:	20c00f15 	stw	r3,60(r4)
101036c4:	2080bb04 	addi	r2,r4,748
101036c8:	00c000c4 	movi	r3,3
101036cc:	20c0b915 	stw	r3,740(r4)
101036d0:	2080ba15 	stw	r2,744(r4)
101036d4:	2000b815 	stw	zero,736(r4)
101036d8:	05c00204 	movi	r23,8
101036dc:	00800104 	movi	r2,4
101036e0:	2025883a 	mov	r18,r4
101036e4:	b80d883a 	mov	r6,r23
101036e8:	81001704 	addi	r4,r16,92
101036ec:	000b883a 	mov	r5,zero
101036f0:	80000015 	stw	zero,0(r16)
101036f4:	80000115 	stw	zero,4(r16)
101036f8:	80000215 	stw	zero,8(r16)
101036fc:	8080030d 	sth	r2,12(r16)
10103700:	80001915 	stw	zero,100(r16)
10103704:	8000038d 	sth	zero,14(r16)
10103708:	80000415 	stw	zero,16(r16)
1010370c:	80000515 	stw	zero,20(r16)
10103710:	80000615 	stw	zero,24(r16)
10103714:	010512c0 	call	1010512c <memset>
10103718:	05840434 	movhi	r22,4112
1010371c:	94400217 	ldw	r17,8(r18)
10103720:	05440434 	movhi	r21,4112
10103724:	05040434 	movhi	r20,4112
10103728:	04c40434 	movhi	r19,4112
1010372c:	b595e604 	addi	r22,r22,22424
10103730:	ad55fd04 	addi	r21,r21,22516
10103734:	a5161c04 	addi	r20,r20,22640
10103738:	9cd63304 	addi	r19,r19,22732
1010373c:	85800815 	stw	r22,32(r16)
10103740:	85400915 	stw	r21,36(r16)
10103744:	85000a15 	stw	r20,40(r16)
10103748:	84c00b15 	stw	r19,44(r16)
1010374c:	84000715 	stw	r16,28(r16)
10103750:	00800284 	movi	r2,10
10103754:	8880030d 	sth	r2,12(r17)
10103758:	00800044 	movi	r2,1
1010375c:	b80d883a 	mov	r6,r23
10103760:	89001704 	addi	r4,r17,92
10103764:	000b883a 	mov	r5,zero
10103768:	88000015 	stw	zero,0(r17)
1010376c:	88000115 	stw	zero,4(r17)
10103770:	88000215 	stw	zero,8(r17)
10103774:	88001915 	stw	zero,100(r17)
10103778:	8880038d 	sth	r2,14(r17)
1010377c:	88000415 	stw	zero,16(r17)
10103780:	88000515 	stw	zero,20(r17)
10103784:	88000615 	stw	zero,24(r17)
10103788:	010512c0 	call	1010512c <memset>
1010378c:	94000317 	ldw	r16,12(r18)
10103790:	00800484 	movi	r2,18
10103794:	8c400715 	stw	r17,28(r17)
10103798:	8d800815 	stw	r22,32(r17)
1010379c:	8d400915 	stw	r21,36(r17)
101037a0:	8d000a15 	stw	r20,40(r17)
101037a4:	8cc00b15 	stw	r19,44(r17)
101037a8:	8080030d 	sth	r2,12(r16)
101037ac:	00800084 	movi	r2,2
101037b0:	80000015 	stw	zero,0(r16)
101037b4:	80000115 	stw	zero,4(r16)
101037b8:	80000215 	stw	zero,8(r16)
101037bc:	80001915 	stw	zero,100(r16)
101037c0:	8080038d 	sth	r2,14(r16)
101037c4:	80000415 	stw	zero,16(r16)
101037c8:	80000515 	stw	zero,20(r16)
101037cc:	80000615 	stw	zero,24(r16)
101037d0:	b80d883a 	mov	r6,r23
101037d4:	000b883a 	mov	r5,zero
101037d8:	81001704 	addi	r4,r16,92
101037dc:	010512c0 	call	1010512c <memset>
101037e0:	00800044 	movi	r2,1
101037e4:	84000715 	stw	r16,28(r16)
101037e8:	85800815 	stw	r22,32(r16)
101037ec:	85400915 	stw	r21,36(r16)
101037f0:	85000a15 	stw	r20,40(r16)
101037f4:	84c00b15 	stw	r19,44(r16)
101037f8:	90800e15 	stw	r2,56(r18)
101037fc:	dfc00817 	ldw	ra,32(sp)
10103800:	ddc00717 	ldw	r23,28(sp)
10103804:	dd800617 	ldw	r22,24(sp)
10103808:	dd400517 	ldw	r21,20(sp)
1010380c:	dd000417 	ldw	r20,16(sp)
10103810:	dcc00317 	ldw	r19,12(sp)
10103814:	dc800217 	ldw	r18,8(sp)
10103818:	dc400117 	ldw	r17,4(sp)
1010381c:	dc000017 	ldw	r16,0(sp)
10103820:	dec00904 	addi	sp,sp,36
10103824:	f800283a 	ret

10103828 <__fp_lock>:
10103828:	0005883a 	mov	r2,zero
1010382c:	f800283a 	ret

10103830 <__sfmoreglue>:
10103830:	defffc04 	addi	sp,sp,-16
10103834:	dc400115 	stw	r17,4(sp)
10103838:	2c7fffc4 	addi	r17,r5,-1
1010383c:	8c401a24 	muli	r17,r17,104
10103840:	dc800215 	stw	r18,8(sp)
10103844:	2825883a 	mov	r18,r5
10103848:	89401d04 	addi	r5,r17,116
1010384c:	dc000015 	stw	r16,0(sp)
10103850:	dfc00315 	stw	ra,12(sp)
10103854:	01049200 	call	10104920 <_malloc_r>
10103858:	1021883a 	mov	r16,r2
1010385c:	10000726 	beq	r2,zero,1010387c <__sfmoreglue+0x4c>
10103860:	11000304 	addi	r4,r2,12
10103864:	10000015 	stw	zero,0(r2)
10103868:	14800115 	stw	r18,4(r2)
1010386c:	11000215 	stw	r4,8(r2)
10103870:	89801a04 	addi	r6,r17,104
10103874:	000b883a 	mov	r5,zero
10103878:	010512c0 	call	1010512c <memset>
1010387c:	8005883a 	mov	r2,r16
10103880:	dfc00317 	ldw	ra,12(sp)
10103884:	dc800217 	ldw	r18,8(sp)
10103888:	dc400117 	ldw	r17,4(sp)
1010388c:	dc000017 	ldw	r16,0(sp)
10103890:	dec00404 	addi	sp,sp,16
10103894:	f800283a 	ret

10103898 <__sfp>:
10103898:	defffb04 	addi	sp,sp,-20
1010389c:	dc000015 	stw	r16,0(sp)
101038a0:	040404b4 	movhi	r16,4114
101038a4:	8425f504 	addi	r16,r16,-26668
101038a8:	dcc00315 	stw	r19,12(sp)
101038ac:	2027883a 	mov	r19,r4
101038b0:	81000017 	ldw	r4,0(r16)
101038b4:	dfc00415 	stw	ra,16(sp)
101038b8:	dc800215 	stw	r18,8(sp)
101038bc:	20800e17 	ldw	r2,56(r4)
101038c0:	dc400115 	stw	r17,4(sp)
101038c4:	1000021e 	bne	r2,zero,101038d0 <__sfp+0x38>
101038c8:	010368c0 	call	1010368c <__sinit.part.1>
101038cc:	81000017 	ldw	r4,0(r16)
101038d0:	2480b804 	addi	r18,r4,736
101038d4:	047fffc4 	movi	r17,-1
101038d8:	91000117 	ldw	r4,4(r18)
101038dc:	94000217 	ldw	r16,8(r18)
101038e0:	213fffc4 	addi	r4,r4,-1
101038e4:	20000a16 	blt	r4,zero,10103910 <__sfp+0x78>
101038e8:	8080030f 	ldh	r2,12(r16)
101038ec:	10000c26 	beq	r2,zero,10103920 <__sfp+0x88>
101038f0:	80c01d04 	addi	r3,r16,116
101038f4:	00000206 	br	10103900 <__sfp+0x68>
101038f8:	18bfe60f 	ldh	r2,-104(r3)
101038fc:	10000826 	beq	r2,zero,10103920 <__sfp+0x88>
10103900:	213fffc4 	addi	r4,r4,-1
10103904:	1c3ffd04 	addi	r16,r3,-12
10103908:	18c01a04 	addi	r3,r3,104
1010390c:	247ffa1e 	bne	r4,r17,101038f8 <_gp+0xfffe2124>
10103910:	90800017 	ldw	r2,0(r18)
10103914:	10001d26 	beq	r2,zero,1010398c <__sfp+0xf4>
10103918:	1025883a 	mov	r18,r2
1010391c:	003fee06 	br	101038d8 <_gp+0xfffe2104>
10103920:	00bfffc4 	movi	r2,-1
10103924:	8080038d 	sth	r2,14(r16)
10103928:	00800044 	movi	r2,1
1010392c:	8080030d 	sth	r2,12(r16)
10103930:	80001915 	stw	zero,100(r16)
10103934:	80000015 	stw	zero,0(r16)
10103938:	80000215 	stw	zero,8(r16)
1010393c:	80000115 	stw	zero,4(r16)
10103940:	80000415 	stw	zero,16(r16)
10103944:	80000515 	stw	zero,20(r16)
10103948:	80000615 	stw	zero,24(r16)
1010394c:	01800204 	movi	r6,8
10103950:	000b883a 	mov	r5,zero
10103954:	81001704 	addi	r4,r16,92
10103958:	010512c0 	call	1010512c <memset>
1010395c:	8005883a 	mov	r2,r16
10103960:	80000c15 	stw	zero,48(r16)
10103964:	80000d15 	stw	zero,52(r16)
10103968:	80001115 	stw	zero,68(r16)
1010396c:	80001215 	stw	zero,72(r16)
10103970:	dfc00417 	ldw	ra,16(sp)
10103974:	dcc00317 	ldw	r19,12(sp)
10103978:	dc800217 	ldw	r18,8(sp)
1010397c:	dc400117 	ldw	r17,4(sp)
10103980:	dc000017 	ldw	r16,0(sp)
10103984:	dec00504 	addi	sp,sp,20
10103988:	f800283a 	ret
1010398c:	01400104 	movi	r5,4
10103990:	9809883a 	mov	r4,r19
10103994:	01038300 	call	10103830 <__sfmoreglue>
10103998:	90800015 	stw	r2,0(r18)
1010399c:	103fde1e 	bne	r2,zero,10103918 <_gp+0xfffe2144>
101039a0:	00800304 	movi	r2,12
101039a4:	98800015 	stw	r2,0(r19)
101039a8:	0005883a 	mov	r2,zero
101039ac:	003ff006 	br	10103970 <_gp+0xfffe219c>

101039b0 <_cleanup>:
101039b0:	008404b4 	movhi	r2,4114
101039b4:	10a5f504 	addi	r2,r2,-26668
101039b8:	11000017 	ldw	r4,0(r2)
101039bc:	01440434 	movhi	r5,4112
101039c0:	294cb304 	addi	r5,r5,13004
101039c4:	01045a01 	jmpi	101045a0 <_fwalk_reent>

101039c8 <__sinit>:
101039c8:	20800e17 	ldw	r2,56(r4)
101039cc:	10000126 	beq	r2,zero,101039d4 <__sinit+0xc>
101039d0:	f800283a 	ret
101039d4:	010368c1 	jmpi	1010368c <__sinit.part.1>

101039d8 <__sfp_lock_acquire>:
101039d8:	f800283a 	ret

101039dc <__sfp_lock_release>:
101039dc:	f800283a 	ret

101039e0 <__sinit_lock_acquire>:
101039e0:	f800283a 	ret

101039e4 <__sinit_lock_release>:
101039e4:	f800283a 	ret

101039e8 <__fp_lock_all>:
101039e8:	008404b4 	movhi	r2,4114
101039ec:	10a5f604 	addi	r2,r2,-26664
101039f0:	11000017 	ldw	r4,0(r2)
101039f4:	01440434 	movhi	r5,4112
101039f8:	294e0a04 	addi	r5,r5,14376
101039fc:	01044dc1 	jmpi	101044dc <_fwalk>

10103a00 <__fp_unlock_all>:
10103a00:	008404b4 	movhi	r2,4114
10103a04:	10a5f604 	addi	r2,r2,-26664
10103a08:	11000017 	ldw	r4,0(r2)
10103a0c:	01440434 	movhi	r5,4112
10103a10:	294d9e04 	addi	r5,r5,13944
10103a14:	01044dc1 	jmpi	101044dc <_fwalk>

10103a18 <_fiprintf_r>:
10103a18:	defffe04 	addi	sp,sp,-8
10103a1c:	dfc00015 	stw	ra,0(sp)
10103a20:	d9c00115 	stw	r7,4(sp)
10103a24:	d9c00104 	addi	r7,sp,4
10103a28:	0107b940 	call	10107b94 <_vfiprintf_r>
10103a2c:	dfc00017 	ldw	ra,0(sp)
10103a30:	dec00204 	addi	sp,sp,8
10103a34:	f800283a 	ret

10103a38 <fiprintf>:
10103a38:	defffd04 	addi	sp,sp,-12
10103a3c:	2005883a 	mov	r2,r4
10103a40:	dfc00015 	stw	ra,0(sp)
10103a44:	d9800115 	stw	r6,4(sp)
10103a48:	d9c00215 	stw	r7,8(sp)
10103a4c:	00c404b4 	movhi	r3,4114
10103a50:	18e5f604 	addi	r3,r3,-26664
10103a54:	19000017 	ldw	r4,0(r3)
10103a58:	280d883a 	mov	r6,r5
10103a5c:	d9c00104 	addi	r7,sp,4
10103a60:	100b883a 	mov	r5,r2
10103a64:	0107b940 	call	10107b94 <_vfiprintf_r>
10103a68:	dfc00017 	ldw	ra,0(sp)
10103a6c:	dec00304 	addi	sp,sp,12
10103a70:	f800283a 	ret

10103a74 <_fopen_r>:
10103a74:	defffa04 	addi	sp,sp,-24
10103a78:	3005883a 	mov	r2,r6
10103a7c:	dcc00415 	stw	r19,16(sp)
10103a80:	d80d883a 	mov	r6,sp
10103a84:	2827883a 	mov	r19,r5
10103a88:	100b883a 	mov	r5,r2
10103a8c:	dc800315 	stw	r18,12(sp)
10103a90:	dfc00515 	stw	ra,20(sp)
10103a94:	dc400215 	stw	r17,8(sp)
10103a98:	dc000115 	stw	r16,4(sp)
10103a9c:	2025883a 	mov	r18,r4
10103aa0:	010b9240 	call	1010b924 <__sflags>
10103aa4:	10002726 	beq	r2,zero,10103b44 <_fopen_r+0xd0>
10103aa8:	9009883a 	mov	r4,r18
10103aac:	1023883a 	mov	r17,r2
10103ab0:	01038980 	call	10103898 <__sfp>
10103ab4:	1021883a 	mov	r16,r2
10103ab8:	10002226 	beq	r2,zero,10103b44 <_fopen_r+0xd0>
10103abc:	d9800017 	ldw	r6,0(sp)
10103ac0:	01c06d84 	movi	r7,438
10103ac4:	980b883a 	mov	r5,r19
10103ac8:	9009883a 	mov	r4,r18
10103acc:	01052540 	call	10105254 <_open_r>
10103ad0:	10001916 	blt	r2,zero,10103b38 <_fopen_r+0xc4>
10103ad4:	8080038d 	sth	r2,14(r16)
10103ad8:	00840434 	movhi	r2,4112
10103adc:	1095e604 	addi	r2,r2,22424
10103ae0:	80800815 	stw	r2,32(r16)
10103ae4:	00840434 	movhi	r2,4112
10103ae8:	1095fd04 	addi	r2,r2,22516
10103aec:	80800915 	stw	r2,36(r16)
10103af0:	00840434 	movhi	r2,4112
10103af4:	10961c04 	addi	r2,r2,22640
10103af8:	80800a15 	stw	r2,40(r16)
10103afc:	00840434 	movhi	r2,4112
10103b00:	10963304 	addi	r2,r2,22732
10103b04:	8440030d 	sth	r17,12(r16)
10103b08:	84000715 	stw	r16,28(r16)
10103b0c:	80800b15 	stw	r2,44(r16)
10103b10:	8c40400c 	andi	r17,r17,256
10103b14:	88000d1e 	bne	r17,zero,10103b4c <_fopen_r+0xd8>
10103b18:	8005883a 	mov	r2,r16
10103b1c:	dfc00517 	ldw	ra,20(sp)
10103b20:	dcc00417 	ldw	r19,16(sp)
10103b24:	dc800317 	ldw	r18,12(sp)
10103b28:	dc400217 	ldw	r17,8(sp)
10103b2c:	dc000117 	ldw	r16,4(sp)
10103b30:	dec00604 	addi	sp,sp,24
10103b34:	f800283a 	ret
10103b38:	01039d80 	call	101039d8 <__sfp_lock_acquire>
10103b3c:	8000030d 	sth	zero,12(r16)
10103b40:	01039dc0 	call	101039dc <__sfp_lock_release>
10103b44:	0005883a 	mov	r2,zero
10103b48:	003ff406 	br	10103b1c <_gp+0xfffe2348>
10103b4c:	01c00084 	movi	r7,2
10103b50:	000d883a 	mov	r6,zero
10103b54:	800b883a 	mov	r5,r16
10103b58:	9009883a 	mov	r4,r18
10103b5c:	01040000 	call	10104000 <_fseek_r>
10103b60:	8005883a 	mov	r2,r16
10103b64:	003fed06 	br	10103b1c <_gp+0xfffe2348>

10103b68 <fopen>:
10103b68:	008404b4 	movhi	r2,4114
10103b6c:	10a5f604 	addi	r2,r2,-26664
10103b70:	280d883a 	mov	r6,r5
10103b74:	200b883a 	mov	r5,r4
10103b78:	11000017 	ldw	r4,0(r2)
10103b7c:	0103a741 	jmpi	10103a74 <_fopen_r>

10103b80 <_fprintf_r>:
10103b80:	defffe04 	addi	sp,sp,-8
10103b84:	2809883a 	mov	r4,r5
10103b88:	300b883a 	mov	r5,r6
10103b8c:	dfc00015 	stw	ra,0(sp)
10103b90:	d9c00115 	stw	r7,4(sp)
10103b94:	d9800104 	addi	r6,sp,4
10103b98:	0109da40 	call	10109da4 <__vfprintf_internal>
10103b9c:	dfc00017 	ldw	ra,0(sp)
10103ba0:	dec00204 	addi	sp,sp,8
10103ba4:	f800283a 	ret

10103ba8 <fprintf>:
10103ba8:	defffd04 	addi	sp,sp,-12
10103bac:	dfc00015 	stw	ra,0(sp)
10103bb0:	d9800115 	stw	r6,4(sp)
10103bb4:	d9c00215 	stw	r7,8(sp)
10103bb8:	d9800104 	addi	r6,sp,4
10103bbc:	0109da40 	call	10109da4 <__vfprintf_internal>
10103bc0:	dfc00017 	ldw	ra,0(sp)
10103bc4:	dec00304 	addi	sp,sp,12
10103bc8:	f800283a 	ret

10103bcc <_malloc_trim_r>:
10103bcc:	defffb04 	addi	sp,sp,-20
10103bd0:	dcc00315 	stw	r19,12(sp)
10103bd4:	04c404b4 	movhi	r19,4114
10103bd8:	dc800215 	stw	r18,8(sp)
10103bdc:	dc400115 	stw	r17,4(sp)
10103be0:	dc000015 	stw	r16,0(sp)
10103be4:	dfc00415 	stw	ra,16(sp)
10103be8:	2821883a 	mov	r16,r5
10103bec:	9ce04904 	addi	r19,r19,-32476
10103bf0:	2025883a 	mov	r18,r4
10103bf4:	0114a840 	call	10114a84 <__malloc_lock>
10103bf8:	98800217 	ldw	r2,8(r19)
10103bfc:	14400117 	ldw	r17,4(r2)
10103c00:	00bfff04 	movi	r2,-4
10103c04:	88a2703a 	and	r17,r17,r2
10103c08:	8c21c83a 	sub	r16,r17,r16
10103c0c:	8403fbc4 	addi	r16,r16,4079
10103c10:	8020d33a 	srli	r16,r16,12
10103c14:	0083ffc4 	movi	r2,4095
10103c18:	843fffc4 	addi	r16,r16,-1
10103c1c:	8020933a 	slli	r16,r16,12
10103c20:	1400060e 	bge	r2,r16,10103c3c <_malloc_trim_r+0x70>
10103c24:	000b883a 	mov	r5,zero
10103c28:	9009883a 	mov	r4,r18
10103c2c:	01056800 	call	10105680 <_sbrk_r>
10103c30:	98c00217 	ldw	r3,8(r19)
10103c34:	1c47883a 	add	r3,r3,r17
10103c38:	10c00a26 	beq	r2,r3,10103c64 <_malloc_trim_r+0x98>
10103c3c:	9009883a 	mov	r4,r18
10103c40:	0114aa80 	call	10114aa8 <__malloc_unlock>
10103c44:	0005883a 	mov	r2,zero
10103c48:	dfc00417 	ldw	ra,16(sp)
10103c4c:	dcc00317 	ldw	r19,12(sp)
10103c50:	dc800217 	ldw	r18,8(sp)
10103c54:	dc400117 	ldw	r17,4(sp)
10103c58:	dc000017 	ldw	r16,0(sp)
10103c5c:	dec00504 	addi	sp,sp,20
10103c60:	f800283a 	ret
10103c64:	040bc83a 	sub	r5,zero,r16
10103c68:	9009883a 	mov	r4,r18
10103c6c:	01056800 	call	10105680 <_sbrk_r>
10103c70:	00ffffc4 	movi	r3,-1
10103c74:	10c00d26 	beq	r2,r3,10103cac <_malloc_trim_r+0xe0>
10103c78:	00c404b4 	movhi	r3,4114
10103c7c:	18ed0104 	addi	r3,r3,-19452
10103c80:	18800017 	ldw	r2,0(r3)
10103c84:	99000217 	ldw	r4,8(r19)
10103c88:	8c23c83a 	sub	r17,r17,r16
10103c8c:	8c400054 	ori	r17,r17,1
10103c90:	1421c83a 	sub	r16,r2,r16
10103c94:	24400115 	stw	r17,4(r4)
10103c98:	9009883a 	mov	r4,r18
10103c9c:	1c000015 	stw	r16,0(r3)
10103ca0:	0114aa80 	call	10114aa8 <__malloc_unlock>
10103ca4:	00800044 	movi	r2,1
10103ca8:	003fe706 	br	10103c48 <_gp+0xfffe2474>
10103cac:	000b883a 	mov	r5,zero
10103cb0:	9009883a 	mov	r4,r18
10103cb4:	01056800 	call	10105680 <_sbrk_r>
10103cb8:	99000217 	ldw	r4,8(r19)
10103cbc:	014003c4 	movi	r5,15
10103cc0:	1107c83a 	sub	r3,r2,r4
10103cc4:	28ffdd0e 	bge	r5,r3,10103c3c <_gp+0xfffe2468>
10103cc8:	014404b4 	movhi	r5,4114
10103ccc:	2965f704 	addi	r5,r5,-26660
10103cd0:	29400017 	ldw	r5,0(r5)
10103cd4:	18c00054 	ori	r3,r3,1
10103cd8:	20c00115 	stw	r3,4(r4)
10103cdc:	00c404b4 	movhi	r3,4114
10103ce0:	1145c83a 	sub	r2,r2,r5
10103ce4:	18ed0104 	addi	r3,r3,-19452
10103ce8:	18800015 	stw	r2,0(r3)
10103cec:	003fd306 	br	10103c3c <_gp+0xfffe2468>

10103cf0 <_free_r>:
10103cf0:	28004126 	beq	r5,zero,10103df8 <_free_r+0x108>
10103cf4:	defffd04 	addi	sp,sp,-12
10103cf8:	dc400115 	stw	r17,4(sp)
10103cfc:	dc000015 	stw	r16,0(sp)
10103d00:	2023883a 	mov	r17,r4
10103d04:	2821883a 	mov	r16,r5
10103d08:	dfc00215 	stw	ra,8(sp)
10103d0c:	0114a840 	call	10114a84 <__malloc_lock>
10103d10:	81ffff17 	ldw	r7,-4(r16)
10103d14:	00bfff84 	movi	r2,-2
10103d18:	010404b4 	movhi	r4,4114
10103d1c:	81bffe04 	addi	r6,r16,-8
10103d20:	3884703a 	and	r2,r7,r2
10103d24:	21204904 	addi	r4,r4,-32476
10103d28:	308b883a 	add	r5,r6,r2
10103d2c:	2a400117 	ldw	r9,4(r5)
10103d30:	22000217 	ldw	r8,8(r4)
10103d34:	00ffff04 	movi	r3,-4
10103d38:	48c6703a 	and	r3,r9,r3
10103d3c:	2a005726 	beq	r5,r8,10103e9c <_free_r+0x1ac>
10103d40:	28c00115 	stw	r3,4(r5)
10103d44:	39c0004c 	andi	r7,r7,1
10103d48:	3800091e 	bne	r7,zero,10103d70 <_free_r+0x80>
10103d4c:	823ffe17 	ldw	r8,-8(r16)
10103d50:	22400204 	addi	r9,r4,8
10103d54:	320dc83a 	sub	r6,r6,r8
10103d58:	31c00217 	ldw	r7,8(r6)
10103d5c:	1205883a 	add	r2,r2,r8
10103d60:	3a406526 	beq	r7,r9,10103ef8 <_free_r+0x208>
10103d64:	32000317 	ldw	r8,12(r6)
10103d68:	3a000315 	stw	r8,12(r7)
10103d6c:	41c00215 	stw	r7,8(r8)
10103d70:	28cf883a 	add	r7,r5,r3
10103d74:	39c00117 	ldw	r7,4(r7)
10103d78:	39c0004c 	andi	r7,r7,1
10103d7c:	38003a26 	beq	r7,zero,10103e68 <_free_r+0x178>
10103d80:	10c00054 	ori	r3,r2,1
10103d84:	30c00115 	stw	r3,4(r6)
10103d88:	3087883a 	add	r3,r6,r2
10103d8c:	18800015 	stw	r2,0(r3)
10103d90:	00c07fc4 	movi	r3,511
10103d94:	18801936 	bltu	r3,r2,10103dfc <_free_r+0x10c>
10103d98:	1004d0fa 	srli	r2,r2,3
10103d9c:	01c00044 	movi	r7,1
10103da0:	21400117 	ldw	r5,4(r4)
10103da4:	10c00044 	addi	r3,r2,1
10103da8:	18c7883a 	add	r3,r3,r3
10103dac:	1005d0ba 	srai	r2,r2,2
10103db0:	18c7883a 	add	r3,r3,r3
10103db4:	18c7883a 	add	r3,r3,r3
10103db8:	1907883a 	add	r3,r3,r4
10103dbc:	3884983a 	sll	r2,r7,r2
10103dc0:	19c00017 	ldw	r7,0(r3)
10103dc4:	1a3ffe04 	addi	r8,r3,-8
10103dc8:	1144b03a 	or	r2,r2,r5
10103dcc:	32000315 	stw	r8,12(r6)
10103dd0:	31c00215 	stw	r7,8(r6)
10103dd4:	20800115 	stw	r2,4(r4)
10103dd8:	19800015 	stw	r6,0(r3)
10103ddc:	39800315 	stw	r6,12(r7)
10103de0:	8809883a 	mov	r4,r17
10103de4:	dfc00217 	ldw	ra,8(sp)
10103de8:	dc400117 	ldw	r17,4(sp)
10103dec:	dc000017 	ldw	r16,0(sp)
10103df0:	dec00304 	addi	sp,sp,12
10103df4:	0114aa81 	jmpi	10114aa8 <__malloc_unlock>
10103df8:	f800283a 	ret
10103dfc:	100ad27a 	srli	r5,r2,9
10103e00:	00c00104 	movi	r3,4
10103e04:	19404a36 	bltu	r3,r5,10103f30 <_free_r+0x240>
10103e08:	100ad1ba 	srli	r5,r2,6
10103e0c:	28c00e44 	addi	r3,r5,57
10103e10:	18c7883a 	add	r3,r3,r3
10103e14:	29400e04 	addi	r5,r5,56
10103e18:	18c7883a 	add	r3,r3,r3
10103e1c:	18c7883a 	add	r3,r3,r3
10103e20:	1909883a 	add	r4,r3,r4
10103e24:	20c00017 	ldw	r3,0(r4)
10103e28:	01c404b4 	movhi	r7,4114
10103e2c:	213ffe04 	addi	r4,r4,-8
10103e30:	39e04904 	addi	r7,r7,-32476
10103e34:	20c04426 	beq	r4,r3,10103f48 <_free_r+0x258>
10103e38:	01ffff04 	movi	r7,-4
10103e3c:	19400117 	ldw	r5,4(r3)
10103e40:	29ca703a 	and	r5,r5,r7
10103e44:	1140022e 	bgeu	r2,r5,10103e50 <_free_r+0x160>
10103e48:	18c00217 	ldw	r3,8(r3)
10103e4c:	20fffb1e 	bne	r4,r3,10103e3c <_gp+0xfffe2668>
10103e50:	19000317 	ldw	r4,12(r3)
10103e54:	31000315 	stw	r4,12(r6)
10103e58:	30c00215 	stw	r3,8(r6)
10103e5c:	21800215 	stw	r6,8(r4)
10103e60:	19800315 	stw	r6,12(r3)
10103e64:	003fde06 	br	10103de0 <_gp+0xfffe260c>
10103e68:	29c00217 	ldw	r7,8(r5)
10103e6c:	10c5883a 	add	r2,r2,r3
10103e70:	00c404b4 	movhi	r3,4114
10103e74:	18e04b04 	addi	r3,r3,-32468
10103e78:	38c03b26 	beq	r7,r3,10103f68 <_free_r+0x278>
10103e7c:	2a000317 	ldw	r8,12(r5)
10103e80:	11400054 	ori	r5,r2,1
10103e84:	3087883a 	add	r3,r6,r2
10103e88:	3a000315 	stw	r8,12(r7)
10103e8c:	41c00215 	stw	r7,8(r8)
10103e90:	31400115 	stw	r5,4(r6)
10103e94:	18800015 	stw	r2,0(r3)
10103e98:	003fbd06 	br	10103d90 <_gp+0xfffe25bc>
10103e9c:	39c0004c 	andi	r7,r7,1
10103ea0:	10c5883a 	add	r2,r2,r3
10103ea4:	3800071e 	bne	r7,zero,10103ec4 <_free_r+0x1d4>
10103ea8:	81fffe17 	ldw	r7,-8(r16)
10103eac:	31cdc83a 	sub	r6,r6,r7
10103eb0:	30c00317 	ldw	r3,12(r6)
10103eb4:	31400217 	ldw	r5,8(r6)
10103eb8:	11c5883a 	add	r2,r2,r7
10103ebc:	28c00315 	stw	r3,12(r5)
10103ec0:	19400215 	stw	r5,8(r3)
10103ec4:	10c00054 	ori	r3,r2,1
10103ec8:	30c00115 	stw	r3,4(r6)
10103ecc:	00c404b4 	movhi	r3,4114
10103ed0:	18e5f804 	addi	r3,r3,-26656
10103ed4:	18c00017 	ldw	r3,0(r3)
10103ed8:	21800215 	stw	r6,8(r4)
10103edc:	10ffc036 	bltu	r2,r3,10103de0 <_gp+0xfffe260c>
10103ee0:	008404b4 	movhi	r2,4114
10103ee4:	10acf204 	addi	r2,r2,-19512
10103ee8:	11400017 	ldw	r5,0(r2)
10103eec:	8809883a 	mov	r4,r17
10103ef0:	0103bcc0 	call	10103bcc <_malloc_trim_r>
10103ef4:	003fba06 	br	10103de0 <_gp+0xfffe260c>
10103ef8:	28c9883a 	add	r4,r5,r3
10103efc:	21000117 	ldw	r4,4(r4)
10103f00:	2100004c 	andi	r4,r4,1
10103f04:	2000391e 	bne	r4,zero,10103fec <_free_r+0x2fc>
10103f08:	29c00217 	ldw	r7,8(r5)
10103f0c:	29000317 	ldw	r4,12(r5)
10103f10:	1885883a 	add	r2,r3,r2
10103f14:	10c00054 	ori	r3,r2,1
10103f18:	39000315 	stw	r4,12(r7)
10103f1c:	21c00215 	stw	r7,8(r4)
10103f20:	30c00115 	stw	r3,4(r6)
10103f24:	308d883a 	add	r6,r6,r2
10103f28:	30800015 	stw	r2,0(r6)
10103f2c:	003fac06 	br	10103de0 <_gp+0xfffe260c>
10103f30:	00c00504 	movi	r3,20
10103f34:	19401536 	bltu	r3,r5,10103f8c <_free_r+0x29c>
10103f38:	28c01704 	addi	r3,r5,92
10103f3c:	18c7883a 	add	r3,r3,r3
10103f40:	294016c4 	addi	r5,r5,91
10103f44:	003fb406 	br	10103e18 <_gp+0xfffe2644>
10103f48:	280bd0ba 	srai	r5,r5,2
10103f4c:	00c00044 	movi	r3,1
10103f50:	38800117 	ldw	r2,4(r7)
10103f54:	194a983a 	sll	r5,r3,r5
10103f58:	2007883a 	mov	r3,r4
10103f5c:	2884b03a 	or	r2,r5,r2
10103f60:	38800115 	stw	r2,4(r7)
10103f64:	003fbb06 	br	10103e54 <_gp+0xfffe2680>
10103f68:	21800515 	stw	r6,20(r4)
10103f6c:	21800415 	stw	r6,16(r4)
10103f70:	10c00054 	ori	r3,r2,1
10103f74:	31c00315 	stw	r7,12(r6)
10103f78:	31c00215 	stw	r7,8(r6)
10103f7c:	30c00115 	stw	r3,4(r6)
10103f80:	308d883a 	add	r6,r6,r2
10103f84:	30800015 	stw	r2,0(r6)
10103f88:	003f9506 	br	10103de0 <_gp+0xfffe260c>
10103f8c:	00c01504 	movi	r3,84
10103f90:	19400536 	bltu	r3,r5,10103fa8 <_free_r+0x2b8>
10103f94:	100ad33a 	srli	r5,r2,12
10103f98:	28c01bc4 	addi	r3,r5,111
10103f9c:	18c7883a 	add	r3,r3,r3
10103fa0:	29401b84 	addi	r5,r5,110
10103fa4:	003f9c06 	br	10103e18 <_gp+0xfffe2644>
10103fa8:	00c05504 	movi	r3,340
10103fac:	19400536 	bltu	r3,r5,10103fc4 <_free_r+0x2d4>
10103fb0:	100ad3fa 	srli	r5,r2,15
10103fb4:	28c01e04 	addi	r3,r5,120
10103fb8:	18c7883a 	add	r3,r3,r3
10103fbc:	29401dc4 	addi	r5,r5,119
10103fc0:	003f9506 	br	10103e18 <_gp+0xfffe2644>
10103fc4:	00c15504 	movi	r3,1364
10103fc8:	19400536 	bltu	r3,r5,10103fe0 <_free_r+0x2f0>
10103fcc:	100ad4ba 	srli	r5,r2,18
10103fd0:	28c01f44 	addi	r3,r5,125
10103fd4:	18c7883a 	add	r3,r3,r3
10103fd8:	29401f04 	addi	r5,r5,124
10103fdc:	003f8e06 	br	10103e18 <_gp+0xfffe2644>
10103fe0:	00c03f84 	movi	r3,254
10103fe4:	01401f84 	movi	r5,126
10103fe8:	003f8b06 	br	10103e18 <_gp+0xfffe2644>
10103fec:	10c00054 	ori	r3,r2,1
10103ff0:	30c00115 	stw	r3,4(r6)
10103ff4:	308d883a 	add	r6,r6,r2
10103ff8:	30800015 	stw	r2,0(r6)
10103ffc:	003f7806 	br	10103de0 <_gp+0xfffe260c>

10104000 <_fseek_r>:
10104000:	01040201 	jmpi	10104020 <_fseeko_r>

10104004 <fseek>:
10104004:	008404b4 	movhi	r2,4114
10104008:	10a5f604 	addi	r2,r2,-26664
1010400c:	300f883a 	mov	r7,r6
10104010:	280d883a 	mov	r6,r5
10104014:	200b883a 	mov	r5,r4
10104018:	11000017 	ldw	r4,0(r2)
1010401c:	01040201 	jmpi	10104020 <_fseeko_r>

10104020 <_fseeko_r>:
10104020:	deffe804 	addi	sp,sp,-96
10104024:	dd401415 	stw	r21,80(sp)
10104028:	dc801115 	stw	r18,68(sp)
1010402c:	dc401015 	stw	r17,64(sp)
10104030:	dc000f15 	stw	r16,60(sp)
10104034:	dfc01715 	stw	ra,92(sp)
10104038:	ddc01615 	stw	r23,88(sp)
1010403c:	dd801515 	stw	r22,84(sp)
10104040:	dd001315 	stw	r20,76(sp)
10104044:	dcc01215 	stw	r19,72(sp)
10104048:	2023883a 	mov	r17,r4
1010404c:	2821883a 	mov	r16,r5
10104050:	302b883a 	mov	r21,r6
10104054:	3825883a 	mov	r18,r7
10104058:	20000226 	beq	r4,zero,10104064 <_fseeko_r+0x44>
1010405c:	20800e17 	ldw	r2,56(r4)
10104060:	10005a26 	beq	r2,zero,101041cc <_fseeko_r+0x1ac>
10104064:	8080030b 	ldhu	r2,12(r16)
10104068:	00c04204 	movi	r3,264
1010406c:	1080420c 	andi	r2,r2,264
10104070:	10c05b26 	beq	r2,r3,101041e0 <_fseeko_r+0x1c0>
10104074:	85000a17 	ldw	r20,40(r16)
10104078:	a000f626 	beq	r20,zero,10104454 <_fseeko_r+0x434>
1010407c:	00800044 	movi	r2,1
10104080:	90803e26 	beq	r18,r2,1010417c <_fseeko_r+0x15c>
10104084:	00800084 	movi	r2,2
10104088:	90801026 	beq	r18,r2,101040cc <_fseeko_r+0xac>
1010408c:	90000f26 	beq	r18,zero,101040cc <_fseeko_r+0xac>
10104090:	00800584 	movi	r2,22
10104094:	88800015 	stw	r2,0(r17)
10104098:	04ffffc4 	movi	r19,-1
1010409c:	9805883a 	mov	r2,r19
101040a0:	dfc01717 	ldw	ra,92(sp)
101040a4:	ddc01617 	ldw	r23,88(sp)
101040a8:	dd801517 	ldw	r22,84(sp)
101040ac:	dd401417 	ldw	r21,80(sp)
101040b0:	dd001317 	ldw	r20,76(sp)
101040b4:	dcc01217 	ldw	r19,72(sp)
101040b8:	dc801117 	ldw	r18,68(sp)
101040bc:	dc401017 	ldw	r17,64(sp)
101040c0:	dc000f17 	ldw	r16,60(sp)
101040c4:	dec01804 	addi	sp,sp,96
101040c8:	f800283a 	ret
101040cc:	80800417 	ldw	r2,16(r16)
101040d0:	002f883a 	mov	r23,zero
101040d4:	0027883a 	mov	r19,zero
101040d8:	1000cb26 	beq	r2,zero,10104408 <_fseeko_r+0x3e8>
101040dc:	8080030b 	ldhu	r2,12(r16)
101040e0:	10c2068c 	andi	r3,r2,2074
101040e4:	1800071e 	bne	r3,zero,10104104 <_fseeko_r+0xe4>
101040e8:	10c1000c 	andi	r3,r2,1024
101040ec:	1800451e 	bne	r3,zero,10104204 <_fseeko_r+0x1e4>
101040f0:	00c40434 	movhi	r3,4112
101040f4:	18d61c04 	addi	r3,r3,22640
101040f8:	a0c0b726 	beq	r20,r3,101043d8 <_fseeko_r+0x3b8>
101040fc:	10820014 	ori	r2,r2,2048
10104100:	8080030d 	sth	r2,12(r16)
10104104:	800b883a 	mov	r5,r16
10104108:	8809883a 	mov	r4,r17
1010410c:	01035ec0 	call	101035ec <_fflush_r>
10104110:	1027883a 	mov	r19,r2
10104114:	103fe01e 	bne	r2,zero,10104098 <_gp+0xfffe28c4>
10104118:	81400717 	ldw	r5,28(r16)
1010411c:	900f883a 	mov	r7,r18
10104120:	a80d883a 	mov	r6,r21
10104124:	8809883a 	mov	r4,r17
10104128:	a03ee83a 	callr	r20
1010412c:	00ffffc4 	movi	r3,-1
10104130:	10ffd926 	beq	r2,r3,10104098 <_gp+0xfffe28c4>
10104134:	81400c17 	ldw	r5,48(r16)
10104138:	28000526 	beq	r5,zero,10104150 <_fseeko_r+0x130>
1010413c:	80801004 	addi	r2,r16,64
10104140:	28800226 	beq	r5,r2,1010414c <_fseeko_r+0x12c>
10104144:	8809883a 	mov	r4,r17
10104148:	0103cf00 	call	10103cf0 <_free_r>
1010414c:	80000c15 	stw	zero,48(r16)
10104150:	8080030b 	ldhu	r2,12(r16)
10104154:	80c00417 	ldw	r3,16(r16)
10104158:	80000115 	stw	zero,4(r16)
1010415c:	10bdf7cc 	andi	r2,r2,63455
10104160:	80c00015 	stw	r3,0(r16)
10104164:	8080030d 	sth	r2,12(r16)
10104168:	01800204 	movi	r6,8
1010416c:	000b883a 	mov	r5,zero
10104170:	81001704 	addi	r4,r16,92
10104174:	010512c0 	call	1010512c <memset>
10104178:	003fc806 	br	1010409c <_gp+0xfffe28c8>
1010417c:	800b883a 	mov	r5,r16
10104180:	8809883a 	mov	r4,r17
10104184:	01035ec0 	call	101035ec <_fflush_r>
10104188:	8080030b 	ldhu	r2,12(r16)
1010418c:	10c4000c 	andi	r3,r2,4096
10104190:	18008726 	beq	r3,zero,101043b0 <_fseeko_r+0x390>
10104194:	84c01417 	ldw	r19,80(r16)
10104198:	10c0010c 	andi	r3,r2,4
1010419c:	1800431e 	bne	r3,zero,101042ac <_fseeko_r+0x28c>
101041a0:	1080020c 	andi	r2,r2,8
101041a4:	10008026 	beq	r2,zero,101043a8 <_fseeko_r+0x388>
101041a8:	80c00017 	ldw	r3,0(r16)
101041ac:	80800417 	ldw	r2,16(r16)
101041b0:	18000226 	beq	r3,zero,101041bc <_fseeko_r+0x19c>
101041b4:	1887c83a 	sub	r3,r3,r2
101041b8:	98e7883a 	add	r19,r19,r3
101041bc:	aceb883a 	add	r21,r21,r19
101041c0:	05c00044 	movi	r23,1
101041c4:	0025883a 	mov	r18,zero
101041c8:	003fc306 	br	101040d8 <_gp+0xfffe2904>
101041cc:	01039c80 	call	101039c8 <__sinit>
101041d0:	8080030b 	ldhu	r2,12(r16)
101041d4:	00c04204 	movi	r3,264
101041d8:	1080420c 	andi	r2,r2,264
101041dc:	10ffa51e 	bne	r2,r3,10104074 <_gp+0xfffe28a0>
101041e0:	800b883a 	mov	r5,r16
101041e4:	8809883a 	mov	r4,r17
101041e8:	01035ec0 	call	101035ec <_fflush_r>
101041ec:	003fa106 	br	10104074 <_gp+0xfffe28a0>
101041f0:	8080030b 	ldhu	r2,12(r16)
101041f4:	00c10004 	movi	r3,1024
101041f8:	80c01315 	stw	r3,76(r16)
101041fc:	10c4b03a 	or	r2,r2,r3
10104200:	8080030d 	sth	r2,12(r16)
10104204:	9000311e 	bne	r18,zero,101042cc <_fseeko_r+0x2ac>
10104208:	a82d883a 	mov	r22,r21
1010420c:	b800371e 	bne	r23,zero,101042ec <_fseeko_r+0x2cc>
10104210:	8080030b 	ldhu	r2,12(r16)
10104214:	1084000c 	andi	r2,r2,4096
10104218:	10007f26 	beq	r2,zero,10104418 <_fseeko_r+0x3f8>
1010421c:	80801417 	ldw	r2,80(r16)
10104220:	81800117 	ldw	r6,4(r16)
10104224:	81400c17 	ldw	r5,48(r16)
10104228:	11a7c83a 	sub	r19,r2,r6
1010422c:	28008226 	beq	r5,zero,10104438 <_fseeko_r+0x418>
10104230:	81c00f17 	ldw	r7,60(r16)
10104234:	99e7c83a 	sub	r19,r19,r7
10104238:	81000e17 	ldw	r4,56(r16)
1010423c:	80800417 	ldw	r2,16(r16)
10104240:	99a7883a 	add	r19,r19,r6
10104244:	2087c83a 	sub	r3,r4,r2
10104248:	98e7c83a 	sub	r19,r19,r3
1010424c:	38c7883a 	add	r3,r7,r3
10104250:	b4c02b16 	blt	r22,r19,10104300 <_fseeko_r+0x2e0>
10104254:	98c9883a 	add	r4,r19,r3
10104258:	b100292e 	bgeu	r22,r4,10104300 <_fseeko_r+0x2e0>
1010425c:	b4e7c83a 	sub	r19,r22,r19
10104260:	14c5883a 	add	r2,r2,r19
10104264:	1ce7c83a 	sub	r19,r3,r19
10104268:	80800015 	stw	r2,0(r16)
1010426c:	84c00115 	stw	r19,4(r16)
10104270:	28000526 	beq	r5,zero,10104288 <_fseeko_r+0x268>
10104274:	80801004 	addi	r2,r16,64
10104278:	28800226 	beq	r5,r2,10104284 <_fseeko_r+0x264>
1010427c:	8809883a 	mov	r4,r17
10104280:	0103cf00 	call	10103cf0 <_free_r>
10104284:	80000c15 	stw	zero,48(r16)
10104288:	8080030b 	ldhu	r2,12(r16)
1010428c:	01800204 	movi	r6,8
10104290:	000b883a 	mov	r5,zero
10104294:	10bff7cc 	andi	r2,r2,65503
10104298:	8080030d 	sth	r2,12(r16)
1010429c:	81001704 	addi	r4,r16,92
101042a0:	010512c0 	call	1010512c <memset>
101042a4:	0027883a 	mov	r19,zero
101042a8:	003f7c06 	br	1010409c <_gp+0xfffe28c8>
101042ac:	80c00117 	ldw	r3,4(r16)
101042b0:	80800c17 	ldw	r2,48(r16)
101042b4:	98e7c83a 	sub	r19,r19,r3
101042b8:	10003b26 	beq	r2,zero,101043a8 <_fseeko_r+0x388>
101042bc:	80c00f17 	ldw	r3,60(r16)
101042c0:	80800417 	ldw	r2,16(r16)
101042c4:	98e7c83a 	sub	r19,r19,r3
101042c8:	003fbc06 	br	101041bc <_gp+0xfffe29e8>
101042cc:	8140038f 	ldh	r5,14(r16)
101042d0:	d80d883a 	mov	r6,sp
101042d4:	8809883a 	mov	r4,r17
101042d8:	01044800 	call	10104480 <_fstat_r>
101042dc:	103f891e 	bne	r2,zero,10104104 <_gp+0xfffe2930>
101042e0:	dd800417 	ldw	r22,16(sp)
101042e4:	adad883a 	add	r22,r21,r22
101042e8:	b83fc926 	beq	r23,zero,10104210 <_gp+0xfffe2a3c>
101042ec:	81400c17 	ldw	r5,48(r16)
101042f0:	81800117 	ldw	r6,4(r16)
101042f4:	28005026 	beq	r5,zero,10104438 <_fseeko_r+0x418>
101042f8:	81c00f17 	ldw	r7,60(r16)
101042fc:	003fce06 	br	10104238 <_gp+0xfffe2a64>
10104300:	84c01317 	ldw	r19,76(r16)
10104304:	81400717 	ldw	r5,28(r16)
10104308:	000f883a 	mov	r7,zero
1010430c:	04e7c83a 	sub	r19,zero,r19
10104310:	9da6703a 	and	r19,r19,r22
10104314:	980d883a 	mov	r6,r19
10104318:	8809883a 	mov	r4,r17
1010431c:	a03ee83a 	callr	r20
10104320:	00ffffc4 	movi	r3,-1
10104324:	10ff7726 	beq	r2,r3,10104104 <_gp+0xfffe2930>
10104328:	80800417 	ldw	r2,16(r16)
1010432c:	81400c17 	ldw	r5,48(r16)
10104330:	80000115 	stw	zero,4(r16)
10104334:	80800015 	stw	r2,0(r16)
10104338:	28000526 	beq	r5,zero,10104350 <_fseeko_r+0x330>
1010433c:	80801004 	addi	r2,r16,64
10104340:	28800226 	beq	r5,r2,1010434c <_fseeko_r+0x32c>
10104344:	8809883a 	mov	r4,r17
10104348:	0103cf00 	call	10103cf0 <_free_r>
1010434c:	80000c15 	stw	zero,48(r16)
10104350:	8080030b 	ldhu	r2,12(r16)
10104354:	b4e7c83a 	sub	r19,r22,r19
10104358:	10bff7cc 	andi	r2,r2,65503
1010435c:	8080030d 	sth	r2,12(r16)
10104360:	98000b26 	beq	r19,zero,10104390 <_fseeko_r+0x370>
10104364:	800b883a 	mov	r5,r16
10104368:	8809883a 	mov	r4,r17
1010436c:	01054ac0 	call	101054ac <__srefill_r>
10104370:	103f641e 	bne	r2,zero,10104104 <_gp+0xfffe2930>
10104374:	80800117 	ldw	r2,4(r16)
10104378:	14ff6236 	bltu	r2,r19,10104104 <_gp+0xfffe2930>
1010437c:	80c00017 	ldw	r3,0(r16)
10104380:	14c5c83a 	sub	r2,r2,r19
10104384:	80800115 	stw	r2,4(r16)
10104388:	1ce7883a 	add	r19,r3,r19
1010438c:	84c00015 	stw	r19,0(r16)
10104390:	01800204 	movi	r6,8
10104394:	000b883a 	mov	r5,zero
10104398:	81001704 	addi	r4,r16,92
1010439c:	010512c0 	call	1010512c <memset>
101043a0:	0027883a 	mov	r19,zero
101043a4:	003f3d06 	br	1010409c <_gp+0xfffe28c8>
101043a8:	80800417 	ldw	r2,16(r16)
101043ac:	003f8306 	br	101041bc <_gp+0xfffe29e8>
101043b0:	81400717 	ldw	r5,28(r16)
101043b4:	900f883a 	mov	r7,r18
101043b8:	000d883a 	mov	r6,zero
101043bc:	8809883a 	mov	r4,r17
101043c0:	a03ee83a 	callr	r20
101043c4:	1027883a 	mov	r19,r2
101043c8:	00bfffc4 	movi	r2,-1
101043cc:	98bf3226 	beq	r19,r2,10104098 <_gp+0xfffe28c4>
101043d0:	8080030b 	ldhu	r2,12(r16)
101043d4:	003f7006 	br	10104198 <_gp+0xfffe29c4>
101043d8:	8140038f 	ldh	r5,14(r16)
101043dc:	283f4716 	blt	r5,zero,101040fc <_gp+0xfffe2928>
101043e0:	d80d883a 	mov	r6,sp
101043e4:	8809883a 	mov	r4,r17
101043e8:	01044800 	call	10104480 <_fstat_r>
101043ec:	1000041e 	bne	r2,zero,10104400 <_fseeko_r+0x3e0>
101043f0:	d8800117 	ldw	r2,4(sp)
101043f4:	00e00014 	movui	r3,32768
101043f8:	10bc000c 	andi	r2,r2,61440
101043fc:	10ff7c26 	beq	r2,r3,101041f0 <_gp+0xfffe2a1c>
10104400:	8080030b 	ldhu	r2,12(r16)
10104404:	003f3d06 	br	101040fc <_gp+0xfffe2928>
10104408:	800b883a 	mov	r5,r16
1010440c:	8809883a 	mov	r4,r17
10104410:	01047640 	call	10104764 <__smakebuf_r>
10104414:	003f3106 	br	101040dc <_gp+0xfffe2908>
10104418:	81400717 	ldw	r5,28(r16)
1010441c:	01c00044 	movi	r7,1
10104420:	000d883a 	mov	r6,zero
10104424:	8809883a 	mov	r4,r17
10104428:	a03ee83a 	callr	r20
1010442c:	00ffffc4 	movi	r3,-1
10104430:	10ff7b1e 	bne	r2,r3,10104220 <_gp+0xfffe2a4c>
10104434:	003f3306 	br	10104104 <_gp+0xfffe2930>
10104438:	80c00017 	ldw	r3,0(r16)
1010443c:	80800417 	ldw	r2,16(r16)
10104440:	000b883a 	mov	r5,zero
10104444:	1887c83a 	sub	r3,r3,r2
10104448:	98e7c83a 	sub	r19,r19,r3
1010444c:	30c7883a 	add	r3,r6,r3
10104450:	003f7f06 	br	10104250 <_gp+0xfffe2a7c>
10104454:	00800744 	movi	r2,29
10104458:	88800015 	stw	r2,0(r17)
1010445c:	04ffffc4 	movi	r19,-1
10104460:	003f0e06 	br	1010409c <_gp+0xfffe28c8>

10104464 <fseeko>:
10104464:	008404b4 	movhi	r2,4114
10104468:	10a5f604 	addi	r2,r2,-26664
1010446c:	300f883a 	mov	r7,r6
10104470:	280d883a 	mov	r6,r5
10104474:	200b883a 	mov	r5,r4
10104478:	11000017 	ldw	r4,0(r2)
1010447c:	01040201 	jmpi	10104020 <_fseeko_r>

10104480 <_fstat_r>:
10104480:	defffd04 	addi	sp,sp,-12
10104484:	2805883a 	mov	r2,r5
10104488:	dc000015 	stw	r16,0(sp)
1010448c:	040404b4 	movhi	r16,4114
10104490:	dc400115 	stw	r17,4(sp)
10104494:	842cef04 	addi	r16,r16,-19524
10104498:	2023883a 	mov	r17,r4
1010449c:	300b883a 	mov	r5,r6
101044a0:	1009883a 	mov	r4,r2
101044a4:	dfc00215 	stw	ra,8(sp)
101044a8:	80000015 	stw	zero,0(r16)
101044ac:	01142fc0 	call	101142fc <fstat>
101044b0:	00ffffc4 	movi	r3,-1
101044b4:	10c00526 	beq	r2,r3,101044cc <_fstat_r+0x4c>
101044b8:	dfc00217 	ldw	ra,8(sp)
101044bc:	dc400117 	ldw	r17,4(sp)
101044c0:	dc000017 	ldw	r16,0(sp)
101044c4:	dec00304 	addi	sp,sp,12
101044c8:	f800283a 	ret
101044cc:	80c00017 	ldw	r3,0(r16)
101044d0:	183ff926 	beq	r3,zero,101044b8 <_gp+0xfffe2ce4>
101044d4:	88c00015 	stw	r3,0(r17)
101044d8:	003ff706 	br	101044b8 <_gp+0xfffe2ce4>

101044dc <_fwalk>:
101044dc:	defff704 	addi	sp,sp,-36
101044e0:	dd000415 	stw	r20,16(sp)
101044e4:	dfc00815 	stw	ra,32(sp)
101044e8:	ddc00715 	stw	r23,28(sp)
101044ec:	dd800615 	stw	r22,24(sp)
101044f0:	dd400515 	stw	r21,20(sp)
101044f4:	dcc00315 	stw	r19,12(sp)
101044f8:	dc800215 	stw	r18,8(sp)
101044fc:	dc400115 	stw	r17,4(sp)
10104500:	dc000015 	stw	r16,0(sp)
10104504:	2500b804 	addi	r20,r4,736
10104508:	a0002326 	beq	r20,zero,10104598 <_fwalk+0xbc>
1010450c:	282b883a 	mov	r21,r5
10104510:	002f883a 	mov	r23,zero
10104514:	05800044 	movi	r22,1
10104518:	04ffffc4 	movi	r19,-1
1010451c:	a4400117 	ldw	r17,4(r20)
10104520:	a4800217 	ldw	r18,8(r20)
10104524:	8c7fffc4 	addi	r17,r17,-1
10104528:	88000d16 	blt	r17,zero,10104560 <_fwalk+0x84>
1010452c:	94000304 	addi	r16,r18,12
10104530:	94800384 	addi	r18,r18,14
10104534:	8080000b 	ldhu	r2,0(r16)
10104538:	8c7fffc4 	addi	r17,r17,-1
1010453c:	813ffd04 	addi	r4,r16,-12
10104540:	b080042e 	bgeu	r22,r2,10104554 <_fwalk+0x78>
10104544:	9080000f 	ldh	r2,0(r18)
10104548:	14c00226 	beq	r2,r19,10104554 <_fwalk+0x78>
1010454c:	a83ee83a 	callr	r21
10104550:	b8aeb03a 	or	r23,r23,r2
10104554:	84001a04 	addi	r16,r16,104
10104558:	94801a04 	addi	r18,r18,104
1010455c:	8cfff51e 	bne	r17,r19,10104534 <_gp+0xfffe2d60>
10104560:	a5000017 	ldw	r20,0(r20)
10104564:	a03fed1e 	bne	r20,zero,1010451c <_gp+0xfffe2d48>
10104568:	b805883a 	mov	r2,r23
1010456c:	dfc00817 	ldw	ra,32(sp)
10104570:	ddc00717 	ldw	r23,28(sp)
10104574:	dd800617 	ldw	r22,24(sp)
10104578:	dd400517 	ldw	r21,20(sp)
1010457c:	dd000417 	ldw	r20,16(sp)
10104580:	dcc00317 	ldw	r19,12(sp)
10104584:	dc800217 	ldw	r18,8(sp)
10104588:	dc400117 	ldw	r17,4(sp)
1010458c:	dc000017 	ldw	r16,0(sp)
10104590:	dec00904 	addi	sp,sp,36
10104594:	f800283a 	ret
10104598:	002f883a 	mov	r23,zero
1010459c:	003ff206 	br	10104568 <_gp+0xfffe2d94>

101045a0 <_fwalk_reent>:
101045a0:	defff704 	addi	sp,sp,-36
101045a4:	dd000415 	stw	r20,16(sp)
101045a8:	dfc00815 	stw	ra,32(sp)
101045ac:	ddc00715 	stw	r23,28(sp)
101045b0:	dd800615 	stw	r22,24(sp)
101045b4:	dd400515 	stw	r21,20(sp)
101045b8:	dcc00315 	stw	r19,12(sp)
101045bc:	dc800215 	stw	r18,8(sp)
101045c0:	dc400115 	stw	r17,4(sp)
101045c4:	dc000015 	stw	r16,0(sp)
101045c8:	2500b804 	addi	r20,r4,736
101045cc:	a0002326 	beq	r20,zero,1010465c <_fwalk_reent+0xbc>
101045d0:	282b883a 	mov	r21,r5
101045d4:	2027883a 	mov	r19,r4
101045d8:	002f883a 	mov	r23,zero
101045dc:	05800044 	movi	r22,1
101045e0:	04bfffc4 	movi	r18,-1
101045e4:	a4400117 	ldw	r17,4(r20)
101045e8:	a4000217 	ldw	r16,8(r20)
101045ec:	8c7fffc4 	addi	r17,r17,-1
101045f0:	88000c16 	blt	r17,zero,10104624 <_fwalk_reent+0x84>
101045f4:	84000304 	addi	r16,r16,12
101045f8:	8080000b 	ldhu	r2,0(r16)
101045fc:	8c7fffc4 	addi	r17,r17,-1
10104600:	817ffd04 	addi	r5,r16,-12
10104604:	b080052e 	bgeu	r22,r2,1010461c <_fwalk_reent+0x7c>
10104608:	8080008f 	ldh	r2,2(r16)
1010460c:	9809883a 	mov	r4,r19
10104610:	14800226 	beq	r2,r18,1010461c <_fwalk_reent+0x7c>
10104614:	a83ee83a 	callr	r21
10104618:	b8aeb03a 	or	r23,r23,r2
1010461c:	84001a04 	addi	r16,r16,104
10104620:	8cbff51e 	bne	r17,r18,101045f8 <_gp+0xfffe2e24>
10104624:	a5000017 	ldw	r20,0(r20)
10104628:	a03fee1e 	bne	r20,zero,101045e4 <_gp+0xfffe2e10>
1010462c:	b805883a 	mov	r2,r23
10104630:	dfc00817 	ldw	ra,32(sp)
10104634:	ddc00717 	ldw	r23,28(sp)
10104638:	dd800617 	ldw	r22,24(sp)
1010463c:	dd400517 	ldw	r21,20(sp)
10104640:	dd000417 	ldw	r20,16(sp)
10104644:	dcc00317 	ldw	r19,12(sp)
10104648:	dc800217 	ldw	r18,8(sp)
1010464c:	dc400117 	ldw	r17,4(sp)
10104650:	dc000017 	ldw	r16,0(sp)
10104654:	dec00904 	addi	sp,sp,36
10104658:	f800283a 	ret
1010465c:	002f883a 	mov	r23,zero
10104660:	003ff206 	br	1010462c <_gp+0xfffe2e58>

10104664 <_fwrite_r>:
10104664:	defff504 	addi	sp,sp,-44
10104668:	dc800815 	stw	r18,32(sp)
1010466c:	39a5383a 	mul	r18,r7,r6
10104670:	d8800304 	addi	r2,sp,12
10104674:	d8800015 	stw	r2,0(sp)
10104678:	00800044 	movi	r2,1
1010467c:	dcc00915 	stw	r19,36(sp)
10104680:	dc400715 	stw	r17,28(sp)
10104684:	dc000615 	stw	r16,24(sp)
10104688:	d9400315 	stw	r5,12(sp)
1010468c:	dfc00a15 	stw	ra,40(sp)
10104690:	dc800415 	stw	r18,16(sp)
10104694:	dc800215 	stw	r18,8(sp)
10104698:	d8800115 	stw	r2,4(sp)
1010469c:	3027883a 	mov	r19,r6
101046a0:	3821883a 	mov	r16,r7
101046a4:	2023883a 	mov	r17,r4
101046a8:	d9400b17 	ldw	r5,44(sp)
101046ac:	20000226 	beq	r4,zero,101046b8 <_fwrite_r+0x54>
101046b0:	20800e17 	ldw	r2,56(r4)
101046b4:	10001a26 	beq	r2,zero,10104720 <_fwrite_r+0xbc>
101046b8:	2880030b 	ldhu	r2,12(r5)
101046bc:	10c8000c 	andi	r3,r2,8192
101046c0:	1800061e 	bne	r3,zero,101046dc <_fwrite_r+0x78>
101046c4:	29001917 	ldw	r4,100(r5)
101046c8:	00f7ffc4 	movi	r3,-8193
101046cc:	10880014 	ori	r2,r2,8192
101046d0:	20c6703a 	and	r3,r4,r3
101046d4:	2880030d 	sth	r2,12(r5)
101046d8:	28c01915 	stw	r3,100(r5)
101046dc:	d80d883a 	mov	r6,sp
101046e0:	8809883a 	mov	r4,r17
101046e4:	010b9d00 	call	1010b9d0 <__sfvwrite_r>
101046e8:	10000b26 	beq	r2,zero,10104718 <_fwrite_r+0xb4>
101046ec:	d9000217 	ldw	r4,8(sp)
101046f0:	980b883a 	mov	r5,r19
101046f4:	9109c83a 	sub	r4,r18,r4
101046f8:	01031940 	call	10103194 <__udivsi3>
101046fc:	dfc00a17 	ldw	ra,40(sp)
10104700:	dcc00917 	ldw	r19,36(sp)
10104704:	dc800817 	ldw	r18,32(sp)
10104708:	dc400717 	ldw	r17,28(sp)
1010470c:	dc000617 	ldw	r16,24(sp)
10104710:	dec00b04 	addi	sp,sp,44
10104714:	f800283a 	ret
10104718:	8005883a 	mov	r2,r16
1010471c:	003ff706 	br	101046fc <_gp+0xfffe2f28>
10104720:	d9400515 	stw	r5,20(sp)
10104724:	01039c80 	call	101039c8 <__sinit>
10104728:	d9400517 	ldw	r5,20(sp)
1010472c:	003fe206 	br	101046b8 <_gp+0xfffe2ee4>

10104730 <fwrite>:
10104730:	defffe04 	addi	sp,sp,-8
10104734:	008404b4 	movhi	r2,4114
10104738:	d9c00015 	stw	r7,0(sp)
1010473c:	10a5f604 	addi	r2,r2,-26664
10104740:	300f883a 	mov	r7,r6
10104744:	280d883a 	mov	r6,r5
10104748:	200b883a 	mov	r5,r4
1010474c:	11000017 	ldw	r4,0(r2)
10104750:	dfc00115 	stw	ra,4(sp)
10104754:	01046640 	call	10104664 <_fwrite_r>
10104758:	dfc00117 	ldw	ra,4(sp)
1010475c:	dec00204 	addi	sp,sp,8
10104760:	f800283a 	ret

10104764 <__smakebuf_r>:
10104764:	2880030b 	ldhu	r2,12(r5)
10104768:	10c0008c 	andi	r3,r2,2
1010476c:	1800411e 	bne	r3,zero,10104874 <__smakebuf_r+0x110>
10104770:	deffec04 	addi	sp,sp,-80
10104774:	dc000f15 	stw	r16,60(sp)
10104778:	2821883a 	mov	r16,r5
1010477c:	2940038f 	ldh	r5,14(r5)
10104780:	dc401015 	stw	r17,64(sp)
10104784:	dfc01315 	stw	ra,76(sp)
10104788:	dcc01215 	stw	r19,72(sp)
1010478c:	dc801115 	stw	r18,68(sp)
10104790:	2023883a 	mov	r17,r4
10104794:	28001c16 	blt	r5,zero,10104808 <__smakebuf_r+0xa4>
10104798:	d80d883a 	mov	r6,sp
1010479c:	01044800 	call	10104480 <_fstat_r>
101047a0:	10001816 	blt	r2,zero,10104804 <__smakebuf_r+0xa0>
101047a4:	d8800117 	ldw	r2,4(sp)
101047a8:	00e00014 	movui	r3,32768
101047ac:	10bc000c 	andi	r2,r2,61440
101047b0:	14c80020 	cmpeqi	r19,r2,8192
101047b4:	10c03726 	beq	r2,r3,10104894 <__smakebuf_r+0x130>
101047b8:	80c0030b 	ldhu	r3,12(r16)
101047bc:	18c20014 	ori	r3,r3,2048
101047c0:	80c0030d 	sth	r3,12(r16)
101047c4:	00c80004 	movi	r3,8192
101047c8:	10c0521e 	bne	r2,r3,10104914 <__smakebuf_r+0x1b0>
101047cc:	8140038f 	ldh	r5,14(r16)
101047d0:	8809883a 	mov	r4,r17
101047d4:	010bee80 	call	1010bee8 <_isatty_r>
101047d8:	10004c26 	beq	r2,zero,1010490c <__smakebuf_r+0x1a8>
101047dc:	8080030b 	ldhu	r2,12(r16)
101047e0:	80c010c4 	addi	r3,r16,67
101047e4:	80c00015 	stw	r3,0(r16)
101047e8:	10800054 	ori	r2,r2,1
101047ec:	8080030d 	sth	r2,12(r16)
101047f0:	00800044 	movi	r2,1
101047f4:	80c00415 	stw	r3,16(r16)
101047f8:	80800515 	stw	r2,20(r16)
101047fc:	04810004 	movi	r18,1024
10104800:	00000706 	br	10104820 <__smakebuf_r+0xbc>
10104804:	8080030b 	ldhu	r2,12(r16)
10104808:	10c0200c 	andi	r3,r2,128
1010480c:	18001f1e 	bne	r3,zero,1010488c <__smakebuf_r+0x128>
10104810:	04810004 	movi	r18,1024
10104814:	10820014 	ori	r2,r2,2048
10104818:	8080030d 	sth	r2,12(r16)
1010481c:	0027883a 	mov	r19,zero
10104820:	900b883a 	mov	r5,r18
10104824:	8809883a 	mov	r4,r17
10104828:	01049200 	call	10104920 <_malloc_r>
1010482c:	10002c26 	beq	r2,zero,101048e0 <__smakebuf_r+0x17c>
10104830:	80c0030b 	ldhu	r3,12(r16)
10104834:	01040434 	movhi	r4,4112
10104838:	210da004 	addi	r4,r4,13952
1010483c:	89000f15 	stw	r4,60(r17)
10104840:	18c02014 	ori	r3,r3,128
10104844:	80c0030d 	sth	r3,12(r16)
10104848:	80800015 	stw	r2,0(r16)
1010484c:	80800415 	stw	r2,16(r16)
10104850:	84800515 	stw	r18,20(r16)
10104854:	98001a1e 	bne	r19,zero,101048c0 <__smakebuf_r+0x15c>
10104858:	dfc01317 	ldw	ra,76(sp)
1010485c:	dcc01217 	ldw	r19,72(sp)
10104860:	dc801117 	ldw	r18,68(sp)
10104864:	dc401017 	ldw	r17,64(sp)
10104868:	dc000f17 	ldw	r16,60(sp)
1010486c:	dec01404 	addi	sp,sp,80
10104870:	f800283a 	ret
10104874:	288010c4 	addi	r2,r5,67
10104878:	28800015 	stw	r2,0(r5)
1010487c:	28800415 	stw	r2,16(r5)
10104880:	00800044 	movi	r2,1
10104884:	28800515 	stw	r2,20(r5)
10104888:	f800283a 	ret
1010488c:	04801004 	movi	r18,64
10104890:	003fe006 	br	10104814 <_gp+0xfffe3040>
10104894:	81000a17 	ldw	r4,40(r16)
10104898:	00c40434 	movhi	r3,4112
1010489c:	18d61c04 	addi	r3,r3,22640
101048a0:	20ffc51e 	bne	r4,r3,101047b8 <_gp+0xfffe2fe4>
101048a4:	8080030b 	ldhu	r2,12(r16)
101048a8:	04810004 	movi	r18,1024
101048ac:	84801315 	stw	r18,76(r16)
101048b0:	1484b03a 	or	r2,r2,r18
101048b4:	8080030d 	sth	r2,12(r16)
101048b8:	0027883a 	mov	r19,zero
101048bc:	003fd806 	br	10104820 <_gp+0xfffe304c>
101048c0:	8140038f 	ldh	r5,14(r16)
101048c4:	8809883a 	mov	r4,r17
101048c8:	010bee80 	call	1010bee8 <_isatty_r>
101048cc:	103fe226 	beq	r2,zero,10104858 <_gp+0xfffe3084>
101048d0:	8080030b 	ldhu	r2,12(r16)
101048d4:	10800054 	ori	r2,r2,1
101048d8:	8080030d 	sth	r2,12(r16)
101048dc:	003fde06 	br	10104858 <_gp+0xfffe3084>
101048e0:	8080030b 	ldhu	r2,12(r16)
101048e4:	10c0800c 	andi	r3,r2,512
101048e8:	183fdb1e 	bne	r3,zero,10104858 <_gp+0xfffe3084>
101048ec:	10800094 	ori	r2,r2,2
101048f0:	80c010c4 	addi	r3,r16,67
101048f4:	8080030d 	sth	r2,12(r16)
101048f8:	00800044 	movi	r2,1
101048fc:	80c00015 	stw	r3,0(r16)
10104900:	80c00415 	stw	r3,16(r16)
10104904:	80800515 	stw	r2,20(r16)
10104908:	003fd306 	br	10104858 <_gp+0xfffe3084>
1010490c:	04810004 	movi	r18,1024
10104910:	003fc306 	br	10104820 <_gp+0xfffe304c>
10104914:	0027883a 	mov	r19,zero
10104918:	04810004 	movi	r18,1024
1010491c:	003fc006 	br	10104820 <_gp+0xfffe304c>

10104920 <_malloc_r>:
10104920:	defff504 	addi	sp,sp,-44
10104924:	dc800315 	stw	r18,12(sp)
10104928:	dfc00a15 	stw	ra,40(sp)
1010492c:	df000915 	stw	fp,36(sp)
10104930:	ddc00815 	stw	r23,32(sp)
10104934:	dd800715 	stw	r22,28(sp)
10104938:	dd400615 	stw	r21,24(sp)
1010493c:	dd000515 	stw	r20,20(sp)
10104940:	dcc00415 	stw	r19,16(sp)
10104944:	dc400215 	stw	r17,8(sp)
10104948:	dc000115 	stw	r16,4(sp)
1010494c:	288002c4 	addi	r2,r5,11
10104950:	00c00584 	movi	r3,22
10104954:	2025883a 	mov	r18,r4
10104958:	18807f2e 	bgeu	r3,r2,10104b58 <_malloc_r+0x238>
1010495c:	047ffe04 	movi	r17,-8
10104960:	1462703a 	and	r17,r2,r17
10104964:	8800a316 	blt	r17,zero,10104bf4 <_malloc_r+0x2d4>
10104968:	8940a236 	bltu	r17,r5,10104bf4 <_malloc_r+0x2d4>
1010496c:	0114a840 	call	10114a84 <__malloc_lock>
10104970:	00807dc4 	movi	r2,503
10104974:	1441e92e 	bgeu	r2,r17,1010511c <_malloc_r+0x7fc>
10104978:	8804d27a 	srli	r2,r17,9
1010497c:	1000a126 	beq	r2,zero,10104c04 <_malloc_r+0x2e4>
10104980:	00c00104 	movi	r3,4
10104984:	18811e36 	bltu	r3,r2,10104e00 <_malloc_r+0x4e0>
10104988:	8804d1ba 	srli	r2,r17,6
1010498c:	12000e44 	addi	r8,r2,57
10104990:	11c00e04 	addi	r7,r2,56
10104994:	4209883a 	add	r4,r8,r8
10104998:	04c404b4 	movhi	r19,4114
1010499c:	2109883a 	add	r4,r4,r4
101049a0:	9ce04904 	addi	r19,r19,-32476
101049a4:	2109883a 	add	r4,r4,r4
101049a8:	9909883a 	add	r4,r19,r4
101049ac:	24000117 	ldw	r16,4(r4)
101049b0:	213ffe04 	addi	r4,r4,-8
101049b4:	24009726 	beq	r4,r16,10104c14 <_malloc_r+0x2f4>
101049b8:	80800117 	ldw	r2,4(r16)
101049bc:	01bfff04 	movi	r6,-4
101049c0:	014003c4 	movi	r5,15
101049c4:	1184703a 	and	r2,r2,r6
101049c8:	1447c83a 	sub	r3,r2,r17
101049cc:	28c00716 	blt	r5,r3,101049ec <_malloc_r+0xcc>
101049d0:	1800920e 	bge	r3,zero,10104c1c <_malloc_r+0x2fc>
101049d4:	84000317 	ldw	r16,12(r16)
101049d8:	24008e26 	beq	r4,r16,10104c14 <_malloc_r+0x2f4>
101049dc:	80800117 	ldw	r2,4(r16)
101049e0:	1184703a 	and	r2,r2,r6
101049e4:	1447c83a 	sub	r3,r2,r17
101049e8:	28fff90e 	bge	r5,r3,101049d0 <_gp+0xfffe31fc>
101049ec:	3809883a 	mov	r4,r7
101049f0:	018404b4 	movhi	r6,4114
101049f4:	9c000417 	ldw	r16,16(r19)
101049f8:	31a04904 	addi	r6,r6,-32476
101049fc:	32000204 	addi	r8,r6,8
10104a00:	82013426 	beq	r16,r8,10104ed4 <_malloc_r+0x5b4>
10104a04:	80c00117 	ldw	r3,4(r16)
10104a08:	00bfff04 	movi	r2,-4
10104a0c:	188e703a 	and	r7,r3,r2
10104a10:	3c45c83a 	sub	r2,r7,r17
10104a14:	00c003c4 	movi	r3,15
10104a18:	18811f16 	blt	r3,r2,10104e98 <_malloc_r+0x578>
10104a1c:	32000515 	stw	r8,20(r6)
10104a20:	32000415 	stw	r8,16(r6)
10104a24:	10007f0e 	bge	r2,zero,10104c24 <_malloc_r+0x304>
10104a28:	00807fc4 	movi	r2,511
10104a2c:	11c0fd36 	bltu	r2,r7,10104e24 <_malloc_r+0x504>
10104a30:	3806d0fa 	srli	r3,r7,3
10104a34:	01c00044 	movi	r7,1
10104a38:	30800117 	ldw	r2,4(r6)
10104a3c:	19400044 	addi	r5,r3,1
10104a40:	294b883a 	add	r5,r5,r5
10104a44:	1807d0ba 	srai	r3,r3,2
10104a48:	294b883a 	add	r5,r5,r5
10104a4c:	294b883a 	add	r5,r5,r5
10104a50:	298b883a 	add	r5,r5,r6
10104a54:	38c6983a 	sll	r3,r7,r3
10104a58:	29c00017 	ldw	r7,0(r5)
10104a5c:	2a7ffe04 	addi	r9,r5,-8
10104a60:	1886b03a 	or	r3,r3,r2
10104a64:	82400315 	stw	r9,12(r16)
10104a68:	81c00215 	stw	r7,8(r16)
10104a6c:	30c00115 	stw	r3,4(r6)
10104a70:	2c000015 	stw	r16,0(r5)
10104a74:	3c000315 	stw	r16,12(r7)
10104a78:	2005d0ba 	srai	r2,r4,2
10104a7c:	01400044 	movi	r5,1
10104a80:	288a983a 	sll	r5,r5,r2
10104a84:	19406f36 	bltu	r3,r5,10104c44 <_malloc_r+0x324>
10104a88:	28c4703a 	and	r2,r5,r3
10104a8c:	10000a1e 	bne	r2,zero,10104ab8 <_malloc_r+0x198>
10104a90:	00bfff04 	movi	r2,-4
10104a94:	294b883a 	add	r5,r5,r5
10104a98:	2088703a 	and	r4,r4,r2
10104a9c:	28c4703a 	and	r2,r5,r3
10104aa0:	21000104 	addi	r4,r4,4
10104aa4:	1000041e 	bne	r2,zero,10104ab8 <_malloc_r+0x198>
10104aa8:	294b883a 	add	r5,r5,r5
10104aac:	28c4703a 	and	r2,r5,r3
10104ab0:	21000104 	addi	r4,r4,4
10104ab4:	103ffc26 	beq	r2,zero,10104aa8 <_gp+0xfffe32d4>
10104ab8:	02bfff04 	movi	r10,-4
10104abc:	024003c4 	movi	r9,15
10104ac0:	21800044 	addi	r6,r4,1
10104ac4:	318d883a 	add	r6,r6,r6
10104ac8:	318d883a 	add	r6,r6,r6
10104acc:	318d883a 	add	r6,r6,r6
10104ad0:	998d883a 	add	r6,r19,r6
10104ad4:	333ffe04 	addi	r12,r6,-8
10104ad8:	2017883a 	mov	r11,r4
10104adc:	31800104 	addi	r6,r6,4
10104ae0:	34000017 	ldw	r16,0(r6)
10104ae4:	31fffd04 	addi	r7,r6,-12
10104ae8:	81c0041e 	bne	r16,r7,10104afc <_malloc_r+0x1dc>
10104aec:	0000fb06 	br	10104edc <_malloc_r+0x5bc>
10104af0:	1801030e 	bge	r3,zero,10104f00 <_malloc_r+0x5e0>
10104af4:	84000317 	ldw	r16,12(r16)
10104af8:	81c0f826 	beq	r16,r7,10104edc <_malloc_r+0x5bc>
10104afc:	80800117 	ldw	r2,4(r16)
10104b00:	1284703a 	and	r2,r2,r10
10104b04:	1447c83a 	sub	r3,r2,r17
10104b08:	48fff90e 	bge	r9,r3,10104af0 <_gp+0xfffe331c>
10104b0c:	80800317 	ldw	r2,12(r16)
10104b10:	81000217 	ldw	r4,8(r16)
10104b14:	89400054 	ori	r5,r17,1
10104b18:	81400115 	stw	r5,4(r16)
10104b1c:	20800315 	stw	r2,12(r4)
10104b20:	11000215 	stw	r4,8(r2)
10104b24:	8463883a 	add	r17,r16,r17
10104b28:	9c400515 	stw	r17,20(r19)
10104b2c:	9c400415 	stw	r17,16(r19)
10104b30:	18800054 	ori	r2,r3,1
10104b34:	88800115 	stw	r2,4(r17)
10104b38:	8a000315 	stw	r8,12(r17)
10104b3c:	8a000215 	stw	r8,8(r17)
10104b40:	88e3883a 	add	r17,r17,r3
10104b44:	88c00015 	stw	r3,0(r17)
10104b48:	9009883a 	mov	r4,r18
10104b4c:	0114aa80 	call	10114aa8 <__malloc_unlock>
10104b50:	80800204 	addi	r2,r16,8
10104b54:	00001b06 	br	10104bc4 <_malloc_r+0x2a4>
10104b58:	04400404 	movi	r17,16
10104b5c:	89402536 	bltu	r17,r5,10104bf4 <_malloc_r+0x2d4>
10104b60:	0114a840 	call	10114a84 <__malloc_lock>
10104b64:	00800184 	movi	r2,6
10104b68:	01000084 	movi	r4,2
10104b6c:	04c404b4 	movhi	r19,4114
10104b70:	1085883a 	add	r2,r2,r2
10104b74:	9ce04904 	addi	r19,r19,-32476
10104b78:	1085883a 	add	r2,r2,r2
10104b7c:	9885883a 	add	r2,r19,r2
10104b80:	14000117 	ldw	r16,4(r2)
10104b84:	10fffe04 	addi	r3,r2,-8
10104b88:	80c0d926 	beq	r16,r3,10104ef0 <_malloc_r+0x5d0>
10104b8c:	80c00117 	ldw	r3,4(r16)
10104b90:	81000317 	ldw	r4,12(r16)
10104b94:	00bfff04 	movi	r2,-4
10104b98:	1884703a 	and	r2,r3,r2
10104b9c:	81400217 	ldw	r5,8(r16)
10104ba0:	8085883a 	add	r2,r16,r2
10104ba4:	10c00117 	ldw	r3,4(r2)
10104ba8:	29000315 	stw	r4,12(r5)
10104bac:	21400215 	stw	r5,8(r4)
10104bb0:	18c00054 	ori	r3,r3,1
10104bb4:	10c00115 	stw	r3,4(r2)
10104bb8:	9009883a 	mov	r4,r18
10104bbc:	0114aa80 	call	10114aa8 <__malloc_unlock>
10104bc0:	80800204 	addi	r2,r16,8
10104bc4:	dfc00a17 	ldw	ra,40(sp)
10104bc8:	df000917 	ldw	fp,36(sp)
10104bcc:	ddc00817 	ldw	r23,32(sp)
10104bd0:	dd800717 	ldw	r22,28(sp)
10104bd4:	dd400617 	ldw	r21,24(sp)
10104bd8:	dd000517 	ldw	r20,20(sp)
10104bdc:	dcc00417 	ldw	r19,16(sp)
10104be0:	dc800317 	ldw	r18,12(sp)
10104be4:	dc400217 	ldw	r17,8(sp)
10104be8:	dc000117 	ldw	r16,4(sp)
10104bec:	dec00b04 	addi	sp,sp,44
10104bf0:	f800283a 	ret
10104bf4:	00800304 	movi	r2,12
10104bf8:	90800015 	stw	r2,0(r18)
10104bfc:	0005883a 	mov	r2,zero
10104c00:	003ff006 	br	10104bc4 <_gp+0xfffe33f0>
10104c04:	01002004 	movi	r4,128
10104c08:	02001004 	movi	r8,64
10104c0c:	01c00fc4 	movi	r7,63
10104c10:	003f6106 	br	10104998 <_gp+0xfffe31c4>
10104c14:	4009883a 	mov	r4,r8
10104c18:	003f7506 	br	101049f0 <_gp+0xfffe321c>
10104c1c:	81000317 	ldw	r4,12(r16)
10104c20:	003fde06 	br	10104b9c <_gp+0xfffe33c8>
10104c24:	81c5883a 	add	r2,r16,r7
10104c28:	11400117 	ldw	r5,4(r2)
10104c2c:	9009883a 	mov	r4,r18
10104c30:	29400054 	ori	r5,r5,1
10104c34:	11400115 	stw	r5,4(r2)
10104c38:	0114aa80 	call	10114aa8 <__malloc_unlock>
10104c3c:	80800204 	addi	r2,r16,8
10104c40:	003fe006 	br	10104bc4 <_gp+0xfffe33f0>
10104c44:	9c000217 	ldw	r16,8(r19)
10104c48:	00bfff04 	movi	r2,-4
10104c4c:	85800117 	ldw	r22,4(r16)
10104c50:	b0ac703a 	and	r22,r22,r2
10104c54:	b4400336 	bltu	r22,r17,10104c64 <_malloc_r+0x344>
10104c58:	b445c83a 	sub	r2,r22,r17
10104c5c:	00c003c4 	movi	r3,15
10104c60:	18805d16 	blt	r3,r2,10104dd8 <_malloc_r+0x4b8>
10104c64:	05c404b4 	movhi	r23,4114
10104c68:	008404b4 	movhi	r2,4114
10104c6c:	10acf204 	addi	r2,r2,-19512
10104c70:	bde5f704 	addi	r23,r23,-26660
10104c74:	15400017 	ldw	r21,0(r2)
10104c78:	b8c00017 	ldw	r3,0(r23)
10104c7c:	00bfffc4 	movi	r2,-1
10104c80:	858d883a 	add	r6,r16,r22
10104c84:	8d6b883a 	add	r21,r17,r21
10104c88:	1880ea26 	beq	r3,r2,10105034 <_malloc_r+0x714>
10104c8c:	ad4403c4 	addi	r21,r21,4111
10104c90:	00bc0004 	movi	r2,-4096
10104c94:	a8aa703a 	and	r21,r21,r2
10104c98:	a80b883a 	mov	r5,r21
10104c9c:	9009883a 	mov	r4,r18
10104ca0:	d9800015 	stw	r6,0(sp)
10104ca4:	01056800 	call	10105680 <_sbrk_r>
10104ca8:	1029883a 	mov	r20,r2
10104cac:	00bfffc4 	movi	r2,-1
10104cb0:	d9800017 	ldw	r6,0(sp)
10104cb4:	a080e826 	beq	r20,r2,10105058 <_malloc_r+0x738>
10104cb8:	a180a636 	bltu	r20,r6,10104f54 <_malloc_r+0x634>
10104cbc:	070404b4 	movhi	fp,4114
10104cc0:	e72d0104 	addi	fp,fp,-19452
10104cc4:	e0800017 	ldw	r2,0(fp)
10104cc8:	a887883a 	add	r3,r21,r2
10104ccc:	e0c00015 	stw	r3,0(fp)
10104cd0:	3500e626 	beq	r6,r20,1010506c <_malloc_r+0x74c>
10104cd4:	b9000017 	ldw	r4,0(r23)
10104cd8:	00bfffc4 	movi	r2,-1
10104cdc:	2080ee26 	beq	r4,r2,10105098 <_malloc_r+0x778>
10104ce0:	a185c83a 	sub	r2,r20,r6
10104ce4:	10c5883a 	add	r2,r2,r3
10104ce8:	e0800015 	stw	r2,0(fp)
10104cec:	a0c001cc 	andi	r3,r20,7
10104cf0:	1800bc26 	beq	r3,zero,10104fe4 <_malloc_r+0x6c4>
10104cf4:	a0e9c83a 	sub	r20,r20,r3
10104cf8:	00840204 	movi	r2,4104
10104cfc:	a5000204 	addi	r20,r20,8
10104d00:	10c7c83a 	sub	r3,r2,r3
10104d04:	a545883a 	add	r2,r20,r21
10104d08:	1083ffcc 	andi	r2,r2,4095
10104d0c:	18abc83a 	sub	r21,r3,r2
10104d10:	a80b883a 	mov	r5,r21
10104d14:	9009883a 	mov	r4,r18
10104d18:	01056800 	call	10105680 <_sbrk_r>
10104d1c:	00ffffc4 	movi	r3,-1
10104d20:	10c0e126 	beq	r2,r3,101050a8 <_malloc_r+0x788>
10104d24:	1505c83a 	sub	r2,r2,r20
10104d28:	1545883a 	add	r2,r2,r21
10104d2c:	10800054 	ori	r2,r2,1
10104d30:	e0c00017 	ldw	r3,0(fp)
10104d34:	9d000215 	stw	r20,8(r19)
10104d38:	a0800115 	stw	r2,4(r20)
10104d3c:	a8c7883a 	add	r3,r21,r3
10104d40:	e0c00015 	stw	r3,0(fp)
10104d44:	84c00e26 	beq	r16,r19,10104d80 <_malloc_r+0x460>
10104d48:	018003c4 	movi	r6,15
10104d4c:	3580a72e 	bgeu	r6,r22,10104fec <_malloc_r+0x6cc>
10104d50:	81400117 	ldw	r5,4(r16)
10104d54:	013ffe04 	movi	r4,-8
10104d58:	b0bffd04 	addi	r2,r22,-12
10104d5c:	1104703a 	and	r2,r2,r4
10104d60:	2900004c 	andi	r4,r5,1
10104d64:	2088b03a 	or	r4,r4,r2
10104d68:	81000115 	stw	r4,4(r16)
10104d6c:	01400144 	movi	r5,5
10104d70:	8089883a 	add	r4,r16,r2
10104d74:	21400115 	stw	r5,4(r4)
10104d78:	21400215 	stw	r5,8(r4)
10104d7c:	3080cd36 	bltu	r6,r2,101050b4 <_malloc_r+0x794>
10104d80:	008404b4 	movhi	r2,4114
10104d84:	10acf104 	addi	r2,r2,-19516
10104d88:	11000017 	ldw	r4,0(r2)
10104d8c:	20c0012e 	bgeu	r4,r3,10104d94 <_malloc_r+0x474>
10104d90:	10c00015 	stw	r3,0(r2)
10104d94:	008404b4 	movhi	r2,4114
10104d98:	10acf004 	addi	r2,r2,-19520
10104d9c:	11000017 	ldw	r4,0(r2)
10104da0:	9c000217 	ldw	r16,8(r19)
10104da4:	20c0012e 	bgeu	r4,r3,10104dac <_malloc_r+0x48c>
10104da8:	10c00015 	stw	r3,0(r2)
10104dac:	80c00117 	ldw	r3,4(r16)
10104db0:	00bfff04 	movi	r2,-4
10104db4:	1886703a 	and	r3,r3,r2
10104db8:	1c45c83a 	sub	r2,r3,r17
10104dbc:	1c400236 	bltu	r3,r17,10104dc8 <_malloc_r+0x4a8>
10104dc0:	00c003c4 	movi	r3,15
10104dc4:	18800416 	blt	r3,r2,10104dd8 <_malloc_r+0x4b8>
10104dc8:	9009883a 	mov	r4,r18
10104dcc:	0114aa80 	call	10114aa8 <__malloc_unlock>
10104dd0:	0005883a 	mov	r2,zero
10104dd4:	003f7b06 	br	10104bc4 <_gp+0xfffe33f0>
10104dd8:	88c00054 	ori	r3,r17,1
10104ddc:	80c00115 	stw	r3,4(r16)
10104de0:	8463883a 	add	r17,r16,r17
10104de4:	10800054 	ori	r2,r2,1
10104de8:	9c400215 	stw	r17,8(r19)
10104dec:	88800115 	stw	r2,4(r17)
10104df0:	9009883a 	mov	r4,r18
10104df4:	0114aa80 	call	10114aa8 <__malloc_unlock>
10104df8:	80800204 	addi	r2,r16,8
10104dfc:	003f7106 	br	10104bc4 <_gp+0xfffe33f0>
10104e00:	00c00504 	movi	r3,20
10104e04:	18804a2e 	bgeu	r3,r2,10104f30 <_malloc_r+0x610>
10104e08:	00c01504 	movi	r3,84
10104e0c:	18806e36 	bltu	r3,r2,10104fc8 <_malloc_r+0x6a8>
10104e10:	8804d33a 	srli	r2,r17,12
10104e14:	12001bc4 	addi	r8,r2,111
10104e18:	11c01b84 	addi	r7,r2,110
10104e1c:	4209883a 	add	r4,r8,r8
10104e20:	003edd06 	br	10104998 <_gp+0xfffe31c4>
10104e24:	3804d27a 	srli	r2,r7,9
10104e28:	00c00104 	movi	r3,4
10104e2c:	1880442e 	bgeu	r3,r2,10104f40 <_malloc_r+0x620>
10104e30:	00c00504 	movi	r3,20
10104e34:	18808136 	bltu	r3,r2,1010503c <_malloc_r+0x71c>
10104e38:	11401704 	addi	r5,r2,92
10104e3c:	10c016c4 	addi	r3,r2,91
10104e40:	294b883a 	add	r5,r5,r5
10104e44:	294b883a 	add	r5,r5,r5
10104e48:	294b883a 	add	r5,r5,r5
10104e4c:	994b883a 	add	r5,r19,r5
10104e50:	28800017 	ldw	r2,0(r5)
10104e54:	018404b4 	movhi	r6,4114
10104e58:	297ffe04 	addi	r5,r5,-8
10104e5c:	31a04904 	addi	r6,r6,-32476
10104e60:	28806526 	beq	r5,r2,10104ff8 <_malloc_r+0x6d8>
10104e64:	01bfff04 	movi	r6,-4
10104e68:	10c00117 	ldw	r3,4(r2)
10104e6c:	1986703a 	and	r3,r3,r6
10104e70:	38c0022e 	bgeu	r7,r3,10104e7c <_malloc_r+0x55c>
10104e74:	10800217 	ldw	r2,8(r2)
10104e78:	28bffb1e 	bne	r5,r2,10104e68 <_gp+0xfffe3694>
10104e7c:	11400317 	ldw	r5,12(r2)
10104e80:	98c00117 	ldw	r3,4(r19)
10104e84:	81400315 	stw	r5,12(r16)
10104e88:	80800215 	stw	r2,8(r16)
10104e8c:	2c000215 	stw	r16,8(r5)
10104e90:	14000315 	stw	r16,12(r2)
10104e94:	003ef806 	br	10104a78 <_gp+0xfffe32a4>
10104e98:	88c00054 	ori	r3,r17,1
10104e9c:	80c00115 	stw	r3,4(r16)
10104ea0:	8463883a 	add	r17,r16,r17
10104ea4:	34400515 	stw	r17,20(r6)
10104ea8:	34400415 	stw	r17,16(r6)
10104eac:	10c00054 	ori	r3,r2,1
10104eb0:	8a000315 	stw	r8,12(r17)
10104eb4:	8a000215 	stw	r8,8(r17)
10104eb8:	88c00115 	stw	r3,4(r17)
10104ebc:	88a3883a 	add	r17,r17,r2
10104ec0:	88800015 	stw	r2,0(r17)
10104ec4:	9009883a 	mov	r4,r18
10104ec8:	0114aa80 	call	10114aa8 <__malloc_unlock>
10104ecc:	80800204 	addi	r2,r16,8
10104ed0:	003f3c06 	br	10104bc4 <_gp+0xfffe33f0>
10104ed4:	30c00117 	ldw	r3,4(r6)
10104ed8:	003ee706 	br	10104a78 <_gp+0xfffe32a4>
10104edc:	5ac00044 	addi	r11,r11,1
10104ee0:	588000cc 	andi	r2,r11,3
10104ee4:	31800204 	addi	r6,r6,8
10104ee8:	103efd1e 	bne	r2,zero,10104ae0 <_gp+0xfffe330c>
10104eec:	00002406 	br	10104f80 <_malloc_r+0x660>
10104ef0:	14000317 	ldw	r16,12(r2)
10104ef4:	143f251e 	bne	r2,r16,10104b8c <_gp+0xfffe33b8>
10104ef8:	21000084 	addi	r4,r4,2
10104efc:	003ebc06 	br	101049f0 <_gp+0xfffe321c>
10104f00:	8085883a 	add	r2,r16,r2
10104f04:	10c00117 	ldw	r3,4(r2)
10104f08:	81000317 	ldw	r4,12(r16)
10104f0c:	81400217 	ldw	r5,8(r16)
10104f10:	18c00054 	ori	r3,r3,1
10104f14:	10c00115 	stw	r3,4(r2)
10104f18:	29000315 	stw	r4,12(r5)
10104f1c:	21400215 	stw	r5,8(r4)
10104f20:	9009883a 	mov	r4,r18
10104f24:	0114aa80 	call	10114aa8 <__malloc_unlock>
10104f28:	80800204 	addi	r2,r16,8
10104f2c:	003f2506 	br	10104bc4 <_gp+0xfffe33f0>
10104f30:	12001704 	addi	r8,r2,92
10104f34:	11c016c4 	addi	r7,r2,91
10104f38:	4209883a 	add	r4,r8,r8
10104f3c:	003e9606 	br	10104998 <_gp+0xfffe31c4>
10104f40:	3804d1ba 	srli	r2,r7,6
10104f44:	11400e44 	addi	r5,r2,57
10104f48:	10c00e04 	addi	r3,r2,56
10104f4c:	294b883a 	add	r5,r5,r5
10104f50:	003fbc06 	br	10104e44 <_gp+0xfffe3670>
10104f54:	84ff5926 	beq	r16,r19,10104cbc <_gp+0xfffe34e8>
10104f58:	008404b4 	movhi	r2,4114
10104f5c:	10a04904 	addi	r2,r2,-32476
10104f60:	14000217 	ldw	r16,8(r2)
10104f64:	00bfff04 	movi	r2,-4
10104f68:	80c00117 	ldw	r3,4(r16)
10104f6c:	1886703a 	and	r3,r3,r2
10104f70:	003f9106 	br	10104db8 <_gp+0xfffe35e4>
10104f74:	60800217 	ldw	r2,8(r12)
10104f78:	213fffc4 	addi	r4,r4,-1
10104f7c:	1300651e 	bne	r2,r12,10105114 <_malloc_r+0x7f4>
10104f80:	208000cc 	andi	r2,r4,3
10104f84:	633ffe04 	addi	r12,r12,-8
10104f88:	103ffa1e 	bne	r2,zero,10104f74 <_gp+0xfffe37a0>
10104f8c:	98800117 	ldw	r2,4(r19)
10104f90:	0146303a 	nor	r3,zero,r5
10104f94:	1884703a 	and	r2,r3,r2
10104f98:	98800115 	stw	r2,4(r19)
10104f9c:	294b883a 	add	r5,r5,r5
10104fa0:	117f2836 	bltu	r2,r5,10104c44 <_gp+0xfffe3470>
10104fa4:	283f2726 	beq	r5,zero,10104c44 <_gp+0xfffe3470>
10104fa8:	2886703a 	and	r3,r5,r2
10104fac:	5809883a 	mov	r4,r11
10104fb0:	183ec31e 	bne	r3,zero,10104ac0 <_gp+0xfffe32ec>
10104fb4:	294b883a 	add	r5,r5,r5
10104fb8:	2886703a 	and	r3,r5,r2
10104fbc:	21000104 	addi	r4,r4,4
10104fc0:	183ffc26 	beq	r3,zero,10104fb4 <_gp+0xfffe37e0>
10104fc4:	003ebe06 	br	10104ac0 <_gp+0xfffe32ec>
10104fc8:	00c05504 	movi	r3,340
10104fcc:	18801236 	bltu	r3,r2,10105018 <_malloc_r+0x6f8>
10104fd0:	8804d3fa 	srli	r2,r17,15
10104fd4:	12001e04 	addi	r8,r2,120
10104fd8:	11c01dc4 	addi	r7,r2,119
10104fdc:	4209883a 	add	r4,r8,r8
10104fe0:	003e6d06 	br	10104998 <_gp+0xfffe31c4>
10104fe4:	00c40004 	movi	r3,4096
10104fe8:	003f4606 	br	10104d04 <_gp+0xfffe3530>
10104fec:	00800044 	movi	r2,1
10104ff0:	a0800115 	stw	r2,4(r20)
10104ff4:	003f7406 	br	10104dc8 <_gp+0xfffe35f4>
10104ff8:	1805d0ba 	srai	r2,r3,2
10104ffc:	01c00044 	movi	r7,1
10105000:	30c00117 	ldw	r3,4(r6)
10105004:	388e983a 	sll	r7,r7,r2
10105008:	2805883a 	mov	r2,r5
1010500c:	38c6b03a 	or	r3,r7,r3
10105010:	30c00115 	stw	r3,4(r6)
10105014:	003f9b06 	br	10104e84 <_gp+0xfffe36b0>
10105018:	00c15504 	movi	r3,1364
1010501c:	18801a36 	bltu	r3,r2,10105088 <_malloc_r+0x768>
10105020:	8804d4ba 	srli	r2,r17,18
10105024:	12001f44 	addi	r8,r2,125
10105028:	11c01f04 	addi	r7,r2,124
1010502c:	4209883a 	add	r4,r8,r8
10105030:	003e5906 	br	10104998 <_gp+0xfffe31c4>
10105034:	ad400404 	addi	r21,r21,16
10105038:	003f1706 	br	10104c98 <_gp+0xfffe34c4>
1010503c:	00c01504 	movi	r3,84
10105040:	18802336 	bltu	r3,r2,101050d0 <_malloc_r+0x7b0>
10105044:	3804d33a 	srli	r2,r7,12
10105048:	11401bc4 	addi	r5,r2,111
1010504c:	10c01b84 	addi	r3,r2,110
10105050:	294b883a 	add	r5,r5,r5
10105054:	003f7b06 	br	10104e44 <_gp+0xfffe3670>
10105058:	9c000217 	ldw	r16,8(r19)
1010505c:	00bfff04 	movi	r2,-4
10105060:	80c00117 	ldw	r3,4(r16)
10105064:	1886703a 	and	r3,r3,r2
10105068:	003f5306 	br	10104db8 <_gp+0xfffe35e4>
1010506c:	3083ffcc 	andi	r2,r6,4095
10105070:	103f181e 	bne	r2,zero,10104cd4 <_gp+0xfffe3500>
10105074:	99000217 	ldw	r4,8(r19)
10105078:	b545883a 	add	r2,r22,r21
1010507c:	10800054 	ori	r2,r2,1
10105080:	20800115 	stw	r2,4(r4)
10105084:	003f3e06 	br	10104d80 <_gp+0xfffe35ac>
10105088:	01003f84 	movi	r4,254
1010508c:	02001fc4 	movi	r8,127
10105090:	01c01f84 	movi	r7,126
10105094:	003e4006 	br	10104998 <_gp+0xfffe31c4>
10105098:	008404b4 	movhi	r2,4114
1010509c:	10a5f704 	addi	r2,r2,-26660
101050a0:	15000015 	stw	r20,0(r2)
101050a4:	003f1106 	br	10104cec <_gp+0xfffe3518>
101050a8:	00800044 	movi	r2,1
101050ac:	002b883a 	mov	r21,zero
101050b0:	003f1f06 	br	10104d30 <_gp+0xfffe355c>
101050b4:	81400204 	addi	r5,r16,8
101050b8:	9009883a 	mov	r4,r18
101050bc:	0103cf00 	call	10103cf0 <_free_r>
101050c0:	008404b4 	movhi	r2,4114
101050c4:	10ad0104 	addi	r2,r2,-19452
101050c8:	10c00017 	ldw	r3,0(r2)
101050cc:	003f2c06 	br	10104d80 <_gp+0xfffe35ac>
101050d0:	00c05504 	movi	r3,340
101050d4:	18800536 	bltu	r3,r2,101050ec <_malloc_r+0x7cc>
101050d8:	3804d3fa 	srli	r2,r7,15
101050dc:	11401e04 	addi	r5,r2,120
101050e0:	10c01dc4 	addi	r3,r2,119
101050e4:	294b883a 	add	r5,r5,r5
101050e8:	003f5606 	br	10104e44 <_gp+0xfffe3670>
101050ec:	00c15504 	movi	r3,1364
101050f0:	18800536 	bltu	r3,r2,10105108 <_malloc_r+0x7e8>
101050f4:	3804d4ba 	srli	r2,r7,18
101050f8:	11401f44 	addi	r5,r2,125
101050fc:	10c01f04 	addi	r3,r2,124
10105100:	294b883a 	add	r5,r5,r5
10105104:	003f4f06 	br	10104e44 <_gp+0xfffe3670>
10105108:	01403f84 	movi	r5,254
1010510c:	00c01f84 	movi	r3,126
10105110:	003f4c06 	br	10104e44 <_gp+0xfffe3670>
10105114:	98800117 	ldw	r2,4(r19)
10105118:	003fa006 	br	10104f9c <_gp+0xfffe37c8>
1010511c:	8808d0fa 	srli	r4,r17,3
10105120:	20800044 	addi	r2,r4,1
10105124:	1085883a 	add	r2,r2,r2
10105128:	003e9006 	br	10104b6c <_gp+0xfffe3398>

1010512c <memset>:
1010512c:	20c000cc 	andi	r3,r4,3
10105130:	2005883a 	mov	r2,r4
10105134:	18004426 	beq	r3,zero,10105248 <memset+0x11c>
10105138:	31ffffc4 	addi	r7,r6,-1
1010513c:	30004026 	beq	r6,zero,10105240 <memset+0x114>
10105140:	2813883a 	mov	r9,r5
10105144:	200d883a 	mov	r6,r4
10105148:	2007883a 	mov	r3,r4
1010514c:	00000406 	br	10105160 <memset+0x34>
10105150:	3a3fffc4 	addi	r8,r7,-1
10105154:	31800044 	addi	r6,r6,1
10105158:	38003926 	beq	r7,zero,10105240 <memset+0x114>
1010515c:	400f883a 	mov	r7,r8
10105160:	18c00044 	addi	r3,r3,1
10105164:	32400005 	stb	r9,0(r6)
10105168:	1a0000cc 	andi	r8,r3,3
1010516c:	403ff81e 	bne	r8,zero,10105150 <_gp+0xfffe397c>
10105170:	010000c4 	movi	r4,3
10105174:	21c02d2e 	bgeu	r4,r7,1010522c <memset+0x100>
10105178:	29003fcc 	andi	r4,r5,255
1010517c:	200c923a 	slli	r6,r4,8
10105180:	3108b03a 	or	r4,r6,r4
10105184:	200c943a 	slli	r6,r4,16
10105188:	218cb03a 	or	r6,r4,r6
1010518c:	010003c4 	movi	r4,15
10105190:	21c0182e 	bgeu	r4,r7,101051f4 <memset+0xc8>
10105194:	3b3ffc04 	addi	r12,r7,-16
10105198:	6018d13a 	srli	r12,r12,4
1010519c:	1a000104 	addi	r8,r3,4
101051a0:	1ac00204 	addi	r11,r3,8
101051a4:	6008913a 	slli	r4,r12,4
101051a8:	1a800304 	addi	r10,r3,12
101051ac:	1813883a 	mov	r9,r3
101051b0:	21000504 	addi	r4,r4,20
101051b4:	1909883a 	add	r4,r3,r4
101051b8:	49800015 	stw	r6,0(r9)
101051bc:	41800015 	stw	r6,0(r8)
101051c0:	59800015 	stw	r6,0(r11)
101051c4:	51800015 	stw	r6,0(r10)
101051c8:	42000404 	addi	r8,r8,16
101051cc:	4a400404 	addi	r9,r9,16
101051d0:	5ac00404 	addi	r11,r11,16
101051d4:	52800404 	addi	r10,r10,16
101051d8:	413ff71e 	bne	r8,r4,101051b8 <_gp+0xfffe39e4>
101051dc:	63000044 	addi	r12,r12,1
101051e0:	6018913a 	slli	r12,r12,4
101051e4:	39c003cc 	andi	r7,r7,15
101051e8:	010000c4 	movi	r4,3
101051ec:	1b07883a 	add	r3,r3,r12
101051f0:	21c00e2e 	bgeu	r4,r7,1010522c <memset+0x100>
101051f4:	1813883a 	mov	r9,r3
101051f8:	3811883a 	mov	r8,r7
101051fc:	010000c4 	movi	r4,3
10105200:	49800015 	stw	r6,0(r9)
10105204:	423fff04 	addi	r8,r8,-4
10105208:	4a400104 	addi	r9,r9,4
1010520c:	223ffc36 	bltu	r4,r8,10105200 <_gp+0xfffe3a2c>
10105210:	393fff04 	addi	r4,r7,-4
10105214:	2008d0ba 	srli	r4,r4,2
10105218:	39c000cc 	andi	r7,r7,3
1010521c:	21000044 	addi	r4,r4,1
10105220:	2109883a 	add	r4,r4,r4
10105224:	2109883a 	add	r4,r4,r4
10105228:	1907883a 	add	r3,r3,r4
1010522c:	38000526 	beq	r7,zero,10105244 <memset+0x118>
10105230:	19cf883a 	add	r7,r3,r7
10105234:	19400005 	stb	r5,0(r3)
10105238:	18c00044 	addi	r3,r3,1
1010523c:	38fffd1e 	bne	r7,r3,10105234 <_gp+0xfffe3a60>
10105240:	f800283a 	ret
10105244:	f800283a 	ret
10105248:	2007883a 	mov	r3,r4
1010524c:	300f883a 	mov	r7,r6
10105250:	003fc706 	br	10105170 <_gp+0xfffe399c>

10105254 <_open_r>:
10105254:	defffd04 	addi	sp,sp,-12
10105258:	2805883a 	mov	r2,r5
1010525c:	dc000015 	stw	r16,0(sp)
10105260:	040404b4 	movhi	r16,4114
10105264:	dc400115 	stw	r17,4(sp)
10105268:	300b883a 	mov	r5,r6
1010526c:	842cef04 	addi	r16,r16,-19524
10105270:	2023883a 	mov	r17,r4
10105274:	380d883a 	mov	r6,r7
10105278:	1009883a 	mov	r4,r2
1010527c:	dfc00215 	stw	ra,8(sp)
10105280:	80000015 	stw	zero,0(r16)
10105284:	0114bcc0 	call	10114bcc <open>
10105288:	00ffffc4 	movi	r3,-1
1010528c:	10c00526 	beq	r2,r3,101052a4 <_open_r+0x50>
10105290:	dfc00217 	ldw	ra,8(sp)
10105294:	dc400117 	ldw	r17,4(sp)
10105298:	dc000017 	ldw	r16,0(sp)
1010529c:	dec00304 	addi	sp,sp,12
101052a0:	f800283a 	ret
101052a4:	80c00017 	ldw	r3,0(r16)
101052a8:	183ff926 	beq	r3,zero,10105290 <_gp+0xfffe3abc>
101052ac:	88c00015 	stw	r3,0(r17)
101052b0:	003ff706 	br	10105290 <_gp+0xfffe3abc>

101052b4 <_printf_r>:
101052b4:	defffd04 	addi	sp,sp,-12
101052b8:	2805883a 	mov	r2,r5
101052bc:	dfc00015 	stw	ra,0(sp)
101052c0:	d9800115 	stw	r6,4(sp)
101052c4:	d9c00215 	stw	r7,8(sp)
101052c8:	21400217 	ldw	r5,8(r4)
101052cc:	d9c00104 	addi	r7,sp,4
101052d0:	100d883a 	mov	r6,r2
101052d4:	0107bac0 	call	10107bac <___vfprintf_internal_r>
101052d8:	dfc00017 	ldw	ra,0(sp)
101052dc:	dec00304 	addi	sp,sp,12
101052e0:	f800283a 	ret

101052e4 <printf>:
101052e4:	defffc04 	addi	sp,sp,-16
101052e8:	dfc00015 	stw	ra,0(sp)
101052ec:	d9400115 	stw	r5,4(sp)
101052f0:	d9800215 	stw	r6,8(sp)
101052f4:	d9c00315 	stw	r7,12(sp)
101052f8:	008404b4 	movhi	r2,4114
101052fc:	10a5f604 	addi	r2,r2,-26664
10105300:	10800017 	ldw	r2,0(r2)
10105304:	200b883a 	mov	r5,r4
10105308:	d9800104 	addi	r6,sp,4
1010530c:	11000217 	ldw	r4,8(r2)
10105310:	0109da40 	call	10109da4 <__vfprintf_internal>
10105314:	dfc00017 	ldw	ra,0(sp)
10105318:	dec00404 	addi	sp,sp,16
1010531c:	f800283a 	ret

10105320 <_putchar_r>:
10105320:	21800217 	ldw	r6,8(r4)
10105324:	010d3fc1 	jmpi	1010d3fc <_putc_r>

10105328 <putchar>:
10105328:	008404b4 	movhi	r2,4114
1010532c:	10a5f604 	addi	r2,r2,-26664
10105330:	200b883a 	mov	r5,r4
10105334:	11000017 	ldw	r4,0(r2)
10105338:	21800217 	ldw	r6,8(r4)
1010533c:	010d3fc1 	jmpi	1010d3fc <_putc_r>

10105340 <_puts_r>:
10105340:	defff604 	addi	sp,sp,-40
10105344:	dc000715 	stw	r16,28(sp)
10105348:	2021883a 	mov	r16,r4
1010534c:	2809883a 	mov	r4,r5
10105350:	dc400815 	stw	r17,32(sp)
10105354:	dfc00915 	stw	ra,36(sp)
10105358:	2823883a 	mov	r17,r5
1010535c:	01058d40 	call	101058d4 <strlen>
10105360:	10c00044 	addi	r3,r2,1
10105364:	d8800115 	stw	r2,4(sp)
10105368:	00840474 	movhi	r2,4113
1010536c:	109e6e04 	addi	r2,r2,31160
10105370:	d8800215 	stw	r2,8(sp)
10105374:	00800044 	movi	r2,1
10105378:	d8800315 	stw	r2,12(sp)
1010537c:	00800084 	movi	r2,2
10105380:	dc400015 	stw	r17,0(sp)
10105384:	d8c00615 	stw	r3,24(sp)
10105388:	dec00415 	stw	sp,16(sp)
1010538c:	d8800515 	stw	r2,20(sp)
10105390:	80000226 	beq	r16,zero,1010539c <_puts_r+0x5c>
10105394:	80800e17 	ldw	r2,56(r16)
10105398:	10001426 	beq	r2,zero,101053ec <_puts_r+0xac>
1010539c:	81400217 	ldw	r5,8(r16)
101053a0:	2880030b 	ldhu	r2,12(r5)
101053a4:	10c8000c 	andi	r3,r2,8192
101053a8:	1800061e 	bne	r3,zero,101053c4 <_puts_r+0x84>
101053ac:	29001917 	ldw	r4,100(r5)
101053b0:	00f7ffc4 	movi	r3,-8193
101053b4:	10880014 	ori	r2,r2,8192
101053b8:	20c6703a 	and	r3,r4,r3
101053bc:	2880030d 	sth	r2,12(r5)
101053c0:	28c01915 	stw	r3,100(r5)
101053c4:	d9800404 	addi	r6,sp,16
101053c8:	8009883a 	mov	r4,r16
101053cc:	010b9d00 	call	1010b9d0 <__sfvwrite_r>
101053d0:	1000091e 	bne	r2,zero,101053f8 <_puts_r+0xb8>
101053d4:	00800284 	movi	r2,10
101053d8:	dfc00917 	ldw	ra,36(sp)
101053dc:	dc400817 	ldw	r17,32(sp)
101053e0:	dc000717 	ldw	r16,28(sp)
101053e4:	dec00a04 	addi	sp,sp,40
101053e8:	f800283a 	ret
101053ec:	8009883a 	mov	r4,r16
101053f0:	01039c80 	call	101039c8 <__sinit>
101053f4:	003fe906 	br	1010539c <_gp+0xfffe3bc8>
101053f8:	00bfffc4 	movi	r2,-1
101053fc:	003ff606 	br	101053d8 <_gp+0xfffe3c04>

10105400 <puts>:
10105400:	008404b4 	movhi	r2,4114
10105404:	10a5f604 	addi	r2,r2,-26664
10105408:	200b883a 	mov	r5,r4
1010540c:	11000017 	ldw	r4,0(r2)
10105410:	01053401 	jmpi	10105340 <_puts_r>

10105414 <srand>:
10105414:	008404b4 	movhi	r2,4114
10105418:	10a5f604 	addi	r2,r2,-26664
1010541c:	10800017 	ldw	r2,0(r2)
10105420:	11002915 	stw	r4,164(r2)
10105424:	10002a15 	stw	zero,168(r2)
10105428:	f800283a 	ret

1010542c <rand>:
1010542c:	008404b4 	movhi	r2,4114
10105430:	defffe04 	addi	sp,sp,-8
10105434:	10a5f604 	addi	r2,r2,-26664
10105438:	dc000015 	stw	r16,0(sp)
1010543c:	14000017 	ldw	r16,0(r2)
10105440:	dfc00115 	stw	ra,4(sp)
10105444:	01932574 	movhi	r6,19605
10105448:	81002917 	ldw	r4,164(r16)
1010544c:	81402a17 	ldw	r5,168(r16)
10105450:	01d614b4 	movhi	r7,22610
10105454:	319fcb44 	addi	r6,r6,32557
10105458:	39fd0b44 	addi	r7,r7,-3027
1010545c:	0110fdc0 	call	10110fdc <__muldi3>
10105460:	11000044 	addi	r4,r2,1
10105464:	2085803a 	cmpltu	r2,r4,r2
10105468:	10c7883a 	add	r3,r2,r3
1010546c:	00a00034 	movhi	r2,32768
10105470:	10bfffc4 	addi	r2,r2,-1
10105474:	1884703a 	and	r2,r3,r2
10105478:	81002915 	stw	r4,164(r16)
1010547c:	80c02a15 	stw	r3,168(r16)
10105480:	dfc00117 	ldw	ra,4(sp)
10105484:	dc000017 	ldw	r16,0(sp)
10105488:	dec00204 	addi	sp,sp,8
1010548c:	f800283a 	ret

10105490 <lflush>:
10105490:	2080030b 	ldhu	r2,12(r4)
10105494:	00c00244 	movi	r3,9
10105498:	1080024c 	andi	r2,r2,9
1010549c:	10c00226 	beq	r2,r3,101054a8 <lflush+0x18>
101054a0:	0005883a 	mov	r2,zero
101054a4:	f800283a 	ret
101054a8:	01036481 	jmpi	10103648 <fflush>

101054ac <__srefill_r>:
101054ac:	defffc04 	addi	sp,sp,-16
101054b0:	dc400115 	stw	r17,4(sp)
101054b4:	dc000015 	stw	r16,0(sp)
101054b8:	dfc00315 	stw	ra,12(sp)
101054bc:	dc800215 	stw	r18,8(sp)
101054c0:	2023883a 	mov	r17,r4
101054c4:	2821883a 	mov	r16,r5
101054c8:	20000226 	beq	r4,zero,101054d4 <__srefill_r+0x28>
101054cc:	20800e17 	ldw	r2,56(r4)
101054d0:	10003c26 	beq	r2,zero,101055c4 <__srefill_r+0x118>
101054d4:	80c0030b 	ldhu	r3,12(r16)
101054d8:	1908000c 	andi	r4,r3,8192
101054dc:	1805883a 	mov	r2,r3
101054e0:	2000071e 	bne	r4,zero,10105500 <__srefill_r+0x54>
101054e4:	81001917 	ldw	r4,100(r16)
101054e8:	18880014 	ori	r2,r3,8192
101054ec:	00f7ffc4 	movi	r3,-8193
101054f0:	20c8703a 	and	r4,r4,r3
101054f4:	8080030d 	sth	r2,12(r16)
101054f8:	1007883a 	mov	r3,r2
101054fc:	81001915 	stw	r4,100(r16)
10105500:	80000115 	stw	zero,4(r16)
10105504:	1100080c 	andi	r4,r2,32
10105508:	2000571e 	bne	r4,zero,10105668 <__srefill_r+0x1bc>
1010550c:	1100010c 	andi	r4,r2,4
10105510:	20001f26 	beq	r4,zero,10105590 <__srefill_r+0xe4>
10105514:	81400c17 	ldw	r5,48(r16)
10105518:	28000826 	beq	r5,zero,1010553c <__srefill_r+0x90>
1010551c:	80801004 	addi	r2,r16,64
10105520:	28800226 	beq	r5,r2,1010552c <__srefill_r+0x80>
10105524:	8809883a 	mov	r4,r17
10105528:	0103cf00 	call	10103cf0 <_free_r>
1010552c:	80800f17 	ldw	r2,60(r16)
10105530:	80000c15 	stw	zero,48(r16)
10105534:	80800115 	stw	r2,4(r16)
10105538:	1000391e 	bne	r2,zero,10105620 <__srefill_r+0x174>
1010553c:	80800417 	ldw	r2,16(r16)
10105540:	10004b26 	beq	r2,zero,10105670 <__srefill_r+0x1c4>
10105544:	8480030b 	ldhu	r18,12(r16)
10105548:	908000cc 	andi	r2,r18,3
1010554c:	10001f1e 	bne	r2,zero,101055cc <__srefill_r+0x120>
10105550:	81800417 	ldw	r6,16(r16)
10105554:	80800817 	ldw	r2,32(r16)
10105558:	81c00517 	ldw	r7,20(r16)
1010555c:	81400717 	ldw	r5,28(r16)
10105560:	81800015 	stw	r6,0(r16)
10105564:	8809883a 	mov	r4,r17
10105568:	103ee83a 	callr	r2
1010556c:	80800115 	stw	r2,4(r16)
10105570:	00800e0e 	bge	zero,r2,101055ac <__srefill_r+0x100>
10105574:	0005883a 	mov	r2,zero
10105578:	dfc00317 	ldw	ra,12(sp)
1010557c:	dc800217 	ldw	r18,8(sp)
10105580:	dc400117 	ldw	r17,4(sp)
10105584:	dc000017 	ldw	r16,0(sp)
10105588:	dec00404 	addi	sp,sp,16
1010558c:	f800283a 	ret
10105590:	1100040c 	andi	r4,r2,16
10105594:	20003026 	beq	r4,zero,10105658 <__srefill_r+0x1ac>
10105598:	1080020c 	andi	r2,r2,8
1010559c:	1000241e 	bne	r2,zero,10105630 <__srefill_r+0x184>
101055a0:	18c00114 	ori	r3,r3,4
101055a4:	80c0030d 	sth	r3,12(r16)
101055a8:	003fe406 	br	1010553c <_gp+0xfffe3d68>
101055ac:	80c0030b 	ldhu	r3,12(r16)
101055b0:	1000161e 	bne	r2,zero,1010560c <__srefill_r+0x160>
101055b4:	18c00814 	ori	r3,r3,32
101055b8:	00bfffc4 	movi	r2,-1
101055bc:	80c0030d 	sth	r3,12(r16)
101055c0:	003fed06 	br	10105578 <_gp+0xfffe3da4>
101055c4:	01039c80 	call	101039c8 <__sinit>
101055c8:	003fc206 	br	101054d4 <_gp+0xfffe3d00>
101055cc:	008404b4 	movhi	r2,4114
101055d0:	10a5f504 	addi	r2,r2,-26668
101055d4:	11000017 	ldw	r4,0(r2)
101055d8:	01440434 	movhi	r5,4112
101055dc:	00800044 	movi	r2,1
101055e0:	29552404 	addi	r5,r5,21648
101055e4:	8080030d 	sth	r2,12(r16)
101055e8:	01044dc0 	call	101044dc <_fwalk>
101055ec:	00800244 	movi	r2,9
101055f0:	8480030d 	sth	r18,12(r16)
101055f4:	9480024c 	andi	r18,r18,9
101055f8:	90bfd51e 	bne	r18,r2,10105550 <_gp+0xfffe3d7c>
101055fc:	800b883a 	mov	r5,r16
10105600:	8809883a 	mov	r4,r17
10105604:	01033d00 	call	101033d0 <__sflush_r>
10105608:	003fd106 	br	10105550 <_gp+0xfffe3d7c>
1010560c:	18c01014 	ori	r3,r3,64
10105610:	80000115 	stw	zero,4(r16)
10105614:	00bfffc4 	movi	r2,-1
10105618:	80c0030d 	sth	r3,12(r16)
1010561c:	003fd606 	br	10105578 <_gp+0xfffe3da4>
10105620:	80c00e17 	ldw	r3,56(r16)
10105624:	0005883a 	mov	r2,zero
10105628:	80c00015 	stw	r3,0(r16)
1010562c:	003fd206 	br	10105578 <_gp+0xfffe3da4>
10105630:	800b883a 	mov	r5,r16
10105634:	8809883a 	mov	r4,r17
10105638:	01035ec0 	call	101035ec <_fflush_r>
1010563c:	10000a1e 	bne	r2,zero,10105668 <__srefill_r+0x1bc>
10105640:	8080030b 	ldhu	r2,12(r16)
10105644:	00fffdc4 	movi	r3,-9
10105648:	80000215 	stw	zero,8(r16)
1010564c:	1886703a 	and	r3,r3,r2
10105650:	80000615 	stw	zero,24(r16)
10105654:	003fd206 	br	101055a0 <_gp+0xfffe3dcc>
10105658:	00800244 	movi	r2,9
1010565c:	88800015 	stw	r2,0(r17)
10105660:	18c01014 	ori	r3,r3,64
10105664:	80c0030d 	sth	r3,12(r16)
10105668:	00bfffc4 	movi	r2,-1
1010566c:	003fc206 	br	10105578 <_gp+0xfffe3da4>
10105670:	800b883a 	mov	r5,r16
10105674:	8809883a 	mov	r4,r17
10105678:	01047640 	call	10104764 <__smakebuf_r>
1010567c:	003fb106 	br	10105544 <_gp+0xfffe3d70>

10105680 <_sbrk_r>:
10105680:	defffd04 	addi	sp,sp,-12
10105684:	dc000015 	stw	r16,0(sp)
10105688:	040404b4 	movhi	r16,4114
1010568c:	dc400115 	stw	r17,4(sp)
10105690:	842cef04 	addi	r16,r16,-19524
10105694:	2023883a 	mov	r17,r4
10105698:	2809883a 	mov	r4,r5
1010569c:	dfc00215 	stw	ra,8(sp)
101056a0:	80000015 	stw	zero,0(r16)
101056a4:	01151240 	call	10115124 <sbrk>
101056a8:	00ffffc4 	movi	r3,-1
101056ac:	10c00526 	beq	r2,r3,101056c4 <_sbrk_r+0x44>
101056b0:	dfc00217 	ldw	ra,8(sp)
101056b4:	dc400117 	ldw	r17,4(sp)
101056b8:	dc000017 	ldw	r16,0(sp)
101056bc:	dec00304 	addi	sp,sp,12
101056c0:	f800283a 	ret
101056c4:	80c00017 	ldw	r3,0(r16)
101056c8:	183ff926 	beq	r3,zero,101056b0 <_gp+0xfffe3edc>
101056cc:	88c00015 	stw	r3,0(r17)
101056d0:	003ff706 	br	101056b0 <_gp+0xfffe3edc>

101056d4 <_sprintf_r>:
101056d4:	deffe404 	addi	sp,sp,-112
101056d8:	2807883a 	mov	r3,r5
101056dc:	dfc01a15 	stw	ra,104(sp)
101056e0:	d9c01b15 	stw	r7,108(sp)
101056e4:	00a00034 	movhi	r2,32768
101056e8:	10bfffc4 	addi	r2,r2,-1
101056ec:	02008204 	movi	r8,520
101056f0:	d8800215 	stw	r2,8(sp)
101056f4:	d8800515 	stw	r2,20(sp)
101056f8:	d9c01b04 	addi	r7,sp,108
101056fc:	d80b883a 	mov	r5,sp
10105700:	00bfffc4 	movi	r2,-1
10105704:	d8c00015 	stw	r3,0(sp)
10105708:	d8c00415 	stw	r3,16(sp)
1010570c:	da00030d 	sth	r8,12(sp)
10105710:	d880038d 	sth	r2,14(sp)
10105714:	010596c0 	call	1010596c <___svfprintf_internal_r>
10105718:	d8c00017 	ldw	r3,0(sp)
1010571c:	18000005 	stb	zero,0(r3)
10105720:	dfc01a17 	ldw	ra,104(sp)
10105724:	dec01c04 	addi	sp,sp,112
10105728:	f800283a 	ret

1010572c <sprintf>:
1010572c:	deffe304 	addi	sp,sp,-116
10105730:	2007883a 	mov	r3,r4
10105734:	dfc01a15 	stw	ra,104(sp)
10105738:	d9801b15 	stw	r6,108(sp)
1010573c:	d9c01c15 	stw	r7,112(sp)
10105740:	010404b4 	movhi	r4,4114
10105744:	2125f604 	addi	r4,r4,-26664
10105748:	21000017 	ldw	r4,0(r4)
1010574c:	00a00034 	movhi	r2,32768
10105750:	10bfffc4 	addi	r2,r2,-1
10105754:	280d883a 	mov	r6,r5
10105758:	02008204 	movi	r8,520
1010575c:	d8800215 	stw	r2,8(sp)
10105760:	d8800515 	stw	r2,20(sp)
10105764:	d9c01b04 	addi	r7,sp,108
10105768:	d80b883a 	mov	r5,sp
1010576c:	00bfffc4 	movi	r2,-1
10105770:	d8c00015 	stw	r3,0(sp)
10105774:	d8c00415 	stw	r3,16(sp)
10105778:	da00030d 	sth	r8,12(sp)
1010577c:	d880038d 	sth	r2,14(sp)
10105780:	010596c0 	call	1010596c <___svfprintf_internal_r>
10105784:	d8c00017 	ldw	r3,0(sp)
10105788:	18000005 	stb	zero,0(r3)
1010578c:	dfc01a17 	ldw	ra,104(sp)
10105790:	dec01d04 	addi	sp,sp,116
10105794:	f800283a 	ret

10105798 <__sread>:
10105798:	defffe04 	addi	sp,sp,-8
1010579c:	dc000015 	stw	r16,0(sp)
101057a0:	2821883a 	mov	r16,r5
101057a4:	2940038f 	ldh	r5,14(r5)
101057a8:	dfc00115 	stw	ra,4(sp)
101057ac:	010d5640 	call	1010d564 <_read_r>
101057b0:	10000716 	blt	r2,zero,101057d0 <__sread+0x38>
101057b4:	80c01417 	ldw	r3,80(r16)
101057b8:	1887883a 	add	r3,r3,r2
101057bc:	80c01415 	stw	r3,80(r16)
101057c0:	dfc00117 	ldw	ra,4(sp)
101057c4:	dc000017 	ldw	r16,0(sp)
101057c8:	dec00204 	addi	sp,sp,8
101057cc:	f800283a 	ret
101057d0:	80c0030b 	ldhu	r3,12(r16)
101057d4:	18fbffcc 	andi	r3,r3,61439
101057d8:	80c0030d 	sth	r3,12(r16)
101057dc:	dfc00117 	ldw	ra,4(sp)
101057e0:	dc000017 	ldw	r16,0(sp)
101057e4:	dec00204 	addi	sp,sp,8
101057e8:	f800283a 	ret

101057ec <__seofread>:
101057ec:	0005883a 	mov	r2,zero
101057f0:	f800283a 	ret

101057f4 <__swrite>:
101057f4:	2880030b 	ldhu	r2,12(r5)
101057f8:	defffb04 	addi	sp,sp,-20
101057fc:	dcc00315 	stw	r19,12(sp)
10105800:	dc800215 	stw	r18,8(sp)
10105804:	dc400115 	stw	r17,4(sp)
10105808:	dc000015 	stw	r16,0(sp)
1010580c:	dfc00415 	stw	ra,16(sp)
10105810:	10c0400c 	andi	r3,r2,256
10105814:	2821883a 	mov	r16,r5
10105818:	2023883a 	mov	r17,r4
1010581c:	3025883a 	mov	r18,r6
10105820:	3827883a 	mov	r19,r7
10105824:	18000526 	beq	r3,zero,1010583c <__swrite+0x48>
10105828:	2940038f 	ldh	r5,14(r5)
1010582c:	01c00084 	movi	r7,2
10105830:	000d883a 	mov	r6,zero
10105834:	010c0180 	call	1010c018 <_lseek_r>
10105838:	8080030b 	ldhu	r2,12(r16)
1010583c:	8140038f 	ldh	r5,14(r16)
10105840:	10bbffcc 	andi	r2,r2,61439
10105844:	980f883a 	mov	r7,r19
10105848:	900d883a 	mov	r6,r18
1010584c:	8809883a 	mov	r4,r17
10105850:	8080030d 	sth	r2,12(r16)
10105854:	dfc00417 	ldw	ra,16(sp)
10105858:	dcc00317 	ldw	r19,12(sp)
1010585c:	dc800217 	ldw	r18,8(sp)
10105860:	dc400117 	ldw	r17,4(sp)
10105864:	dc000017 	ldw	r16,0(sp)
10105868:	dec00504 	addi	sp,sp,20
1010586c:	0109e7c1 	jmpi	10109e7c <_write_r>

10105870 <__sseek>:
10105870:	defffe04 	addi	sp,sp,-8
10105874:	dc000015 	stw	r16,0(sp)
10105878:	2821883a 	mov	r16,r5
1010587c:	2940038f 	ldh	r5,14(r5)
10105880:	dfc00115 	stw	ra,4(sp)
10105884:	010c0180 	call	1010c018 <_lseek_r>
10105888:	00ffffc4 	movi	r3,-1
1010588c:	10c00826 	beq	r2,r3,101058b0 <__sseek+0x40>
10105890:	80c0030b 	ldhu	r3,12(r16)
10105894:	80801415 	stw	r2,80(r16)
10105898:	18c40014 	ori	r3,r3,4096
1010589c:	80c0030d 	sth	r3,12(r16)
101058a0:	dfc00117 	ldw	ra,4(sp)
101058a4:	dc000017 	ldw	r16,0(sp)
101058a8:	dec00204 	addi	sp,sp,8
101058ac:	f800283a 	ret
101058b0:	80c0030b 	ldhu	r3,12(r16)
101058b4:	18fbffcc 	andi	r3,r3,61439
101058b8:	80c0030d 	sth	r3,12(r16)
101058bc:	dfc00117 	ldw	ra,4(sp)
101058c0:	dc000017 	ldw	r16,0(sp)
101058c4:	dec00204 	addi	sp,sp,8
101058c8:	f800283a 	ret

101058cc <__sclose>:
101058cc:	2940038f 	ldh	r5,14(r5)
101058d0:	010a0301 	jmpi	1010a030 <_close_r>

101058d4 <strlen>:
101058d4:	208000cc 	andi	r2,r4,3
101058d8:	10002026 	beq	r2,zero,1010595c <strlen+0x88>
101058dc:	20800007 	ldb	r2,0(r4)
101058e0:	10002026 	beq	r2,zero,10105964 <strlen+0x90>
101058e4:	2005883a 	mov	r2,r4
101058e8:	00000206 	br	101058f4 <strlen+0x20>
101058ec:	10c00007 	ldb	r3,0(r2)
101058f0:	18001826 	beq	r3,zero,10105954 <strlen+0x80>
101058f4:	10800044 	addi	r2,r2,1
101058f8:	10c000cc 	andi	r3,r2,3
101058fc:	183ffb1e 	bne	r3,zero,101058ec <_gp+0xfffe4118>
10105900:	10c00017 	ldw	r3,0(r2)
10105904:	01ffbff4 	movhi	r7,65279
10105908:	39ffbfc4 	addi	r7,r7,-257
1010590c:	00ca303a 	nor	r5,zero,r3
10105910:	01a02074 	movhi	r6,32897
10105914:	19c7883a 	add	r3,r3,r7
10105918:	31a02004 	addi	r6,r6,-32640
1010591c:	1946703a 	and	r3,r3,r5
10105920:	1986703a 	and	r3,r3,r6
10105924:	1800091e 	bne	r3,zero,1010594c <strlen+0x78>
10105928:	10800104 	addi	r2,r2,4
1010592c:	10c00017 	ldw	r3,0(r2)
10105930:	19cb883a 	add	r5,r3,r7
10105934:	00c6303a 	nor	r3,zero,r3
10105938:	28c6703a 	and	r3,r5,r3
1010593c:	1986703a 	and	r3,r3,r6
10105940:	183ff926 	beq	r3,zero,10105928 <_gp+0xfffe4154>
10105944:	00000106 	br	1010594c <strlen+0x78>
10105948:	10800044 	addi	r2,r2,1
1010594c:	10c00007 	ldb	r3,0(r2)
10105950:	183ffd1e 	bne	r3,zero,10105948 <_gp+0xfffe4174>
10105954:	1105c83a 	sub	r2,r2,r4
10105958:	f800283a 	ret
1010595c:	2005883a 	mov	r2,r4
10105960:	003fe706 	br	10105900 <_gp+0xfffe412c>
10105964:	0005883a 	mov	r2,zero
10105968:	f800283a 	ret

1010596c <___svfprintf_internal_r>:
1010596c:	deffb704 	addi	sp,sp,-292
10105970:	dfc04815 	stw	ra,288(sp)
10105974:	ddc04615 	stw	r23,280(sp)
10105978:	d9402c15 	stw	r5,176(sp)
1010597c:	d9003915 	stw	r4,228(sp)
10105980:	302f883a 	mov	r23,r6
10105984:	d9c02d15 	stw	r7,180(sp)
10105988:	df004715 	stw	fp,284(sp)
1010598c:	dd804515 	stw	r22,276(sp)
10105990:	dd404415 	stw	r21,272(sp)
10105994:	dd004315 	stw	r20,268(sp)
10105998:	dcc04215 	stw	r19,264(sp)
1010599c:	dc804115 	stw	r18,260(sp)
101059a0:	dc404015 	stw	r17,256(sp)
101059a4:	dc003f15 	stw	r16,252(sp)
101059a8:	010bfe80 	call	1010bfe8 <_localeconv_r>
101059ac:	10800017 	ldw	r2,0(r2)
101059b0:	1009883a 	mov	r4,r2
101059b4:	d8803415 	stw	r2,208(sp)
101059b8:	01058d40 	call	101058d4 <strlen>
101059bc:	d8c02c17 	ldw	r3,176(sp)
101059c0:	d8803815 	stw	r2,224(sp)
101059c4:	1880030b 	ldhu	r2,12(r3)
101059c8:	1080200c 	andi	r2,r2,128
101059cc:	10000226 	beq	r2,zero,101059d8 <___svfprintf_internal_r+0x6c>
101059d0:	18800417 	ldw	r2,16(r3)
101059d4:	10067f26 	beq	r2,zero,101073d4 <___svfprintf_internal_r+0x1a68>
101059d8:	dcc03917 	ldw	r19,228(sp)
101059dc:	d8c00404 	addi	r3,sp,16
101059e0:	05440474 	movhi	r21,4113
101059e4:	d9001e04 	addi	r4,sp,120
101059e8:	ad5e7f84 	addi	r21,r21,31230
101059ec:	d8c01e15 	stw	r3,120(sp)
101059f0:	d8002015 	stw	zero,128(sp)
101059f4:	d8001f15 	stw	zero,124(sp)
101059f8:	d8003315 	stw	zero,204(sp)
101059fc:	d8003615 	stw	zero,216(sp)
10105a00:	d8003715 	stw	zero,220(sp)
10105a04:	1811883a 	mov	r8,r3
10105a08:	d8003a15 	stw	zero,232(sp)
10105a0c:	d8003b15 	stw	zero,236(sp)
10105a10:	d8002f15 	stw	zero,188(sp)
10105a14:	d9002815 	stw	r4,160(sp)
10105a18:	b8800007 	ldb	r2,0(r23)
10105a1c:	10026726 	beq	r2,zero,101063bc <___svfprintf_internal_r+0xa50>
10105a20:	00c00944 	movi	r3,37
10105a24:	b821883a 	mov	r16,r23
10105a28:	10c0021e 	bne	r2,r3,10105a34 <___svfprintf_internal_r+0xc8>
10105a2c:	00001406 	br	10105a80 <___svfprintf_internal_r+0x114>
10105a30:	10c00326 	beq	r2,r3,10105a40 <___svfprintf_internal_r+0xd4>
10105a34:	84000044 	addi	r16,r16,1
10105a38:	80800007 	ldb	r2,0(r16)
10105a3c:	103ffc1e 	bne	r2,zero,10105a30 <_gp+0xfffe425c>
10105a40:	85e3c83a 	sub	r17,r16,r23
10105a44:	88000e26 	beq	r17,zero,10105a80 <___svfprintf_internal_r+0x114>
10105a48:	d8c02017 	ldw	r3,128(sp)
10105a4c:	d8801f17 	ldw	r2,124(sp)
10105a50:	45c00015 	stw	r23,0(r8)
10105a54:	1c47883a 	add	r3,r3,r17
10105a58:	10800044 	addi	r2,r2,1
10105a5c:	d8c02015 	stw	r3,128(sp)
10105a60:	44400115 	stw	r17,4(r8)
10105a64:	d8801f15 	stw	r2,124(sp)
10105a68:	00c001c4 	movi	r3,7
10105a6c:	18809716 	blt	r3,r2,10105ccc <___svfprintf_internal_r+0x360>
10105a70:	42000204 	addi	r8,r8,8
10105a74:	d9402f17 	ldw	r5,188(sp)
10105a78:	2c4b883a 	add	r5,r5,r17
10105a7c:	d9402f15 	stw	r5,188(sp)
10105a80:	80800007 	ldb	r2,0(r16)
10105a84:	10009826 	beq	r2,zero,10105ce8 <___svfprintf_internal_r+0x37c>
10105a88:	84400047 	ldb	r17,1(r16)
10105a8c:	00bfffc4 	movi	r2,-1
10105a90:	85c00044 	addi	r23,r16,1
10105a94:	d8002785 	stb	zero,158(sp)
10105a98:	0007883a 	mov	r3,zero
10105a9c:	000f883a 	mov	r7,zero
10105aa0:	d8802915 	stw	r2,164(sp)
10105aa4:	d8003115 	stw	zero,196(sp)
10105aa8:	0025883a 	mov	r18,zero
10105aac:	01401604 	movi	r5,88
10105ab0:	01800244 	movi	r6,9
10105ab4:	02800a84 	movi	r10,42
10105ab8:	02401b04 	movi	r9,108
10105abc:	bdc00044 	addi	r23,r23,1
10105ac0:	88bff804 	addi	r2,r17,-32
10105ac4:	2882f036 	bltu	r5,r2,10106688 <___svfprintf_internal_r+0xd1c>
10105ac8:	100490ba 	slli	r2,r2,2
10105acc:	01040434 	movhi	r4,4112
10105ad0:	2116b804 	addi	r4,r4,23264
10105ad4:	1105883a 	add	r2,r2,r4
10105ad8:	10800017 	ldw	r2,0(r2)
10105adc:	1000683a 	jmp	r2
10105ae0:	101065f0 	cmpltui	zero,r2,16791
10105ae4:	10106688 	cmpgei	zero,r2,16794
10105ae8:	10106688 	cmpgei	zero,r2,16794
10105aec:	101065e4 	muli	zero,r2,16791
10105af0:	10106688 	cmpgei	zero,r2,16794
10105af4:	10106688 	cmpgei	zero,r2,16794
10105af8:	10106688 	cmpgei	zero,r2,16794
10105afc:	10106688 	cmpgei	zero,r2,16794
10105b00:	10106688 	cmpgei	zero,r2,16794
10105b04:	10106688 	cmpgei	zero,r2,16794
10105b08:	10105d44 	addi	zero,r2,16757
10105b0c:	10106520 	cmpeqi	zero,r2,16788
10105b10:	10106688 	cmpgei	zero,r2,16794
10105b14:	10105c54 	ori	zero,r2,16753
10105b18:	10105d6c 	andhi	zero,r2,16757
10105b1c:	10106688 	cmpgei	zero,r2,16794
10105b20:	10105de0 	cmpeqi	zero,r2,16759
10105b24:	10105dac 	andhi	zero,r2,16758
10105b28:	10105dac 	andhi	zero,r2,16758
10105b2c:	10105dac 	andhi	zero,r2,16758
10105b30:	10105dac 	andhi	zero,r2,16758
10105b34:	10105dac 	andhi	zero,r2,16758
10105b38:	10105dac 	andhi	zero,r2,16758
10105b3c:	10105dac 	andhi	zero,r2,16758
10105b40:	10105dac 	andhi	zero,r2,16758
10105b44:	10105dac 	andhi	zero,r2,16758
10105b48:	10106688 	cmpgei	zero,r2,16794
10105b4c:	10106688 	cmpgei	zero,r2,16794
10105b50:	10106688 	cmpgei	zero,r2,16794
10105b54:	10106688 	cmpgei	zero,r2,16794
10105b58:	10106688 	cmpgei	zero,r2,16794
10105b5c:	10106688 	cmpgei	zero,r2,16794
10105b60:	10106688 	cmpgei	zero,r2,16794
10105b64:	10106688 	cmpgei	zero,r2,16794
10105b68:	10106688 	cmpgei	zero,r2,16794
10105b6c:	10106688 	cmpgei	zero,r2,16794
10105b70:	10105e98 	cmpnei	zero,r2,16762
10105b74:	10105dec 	andhi	zero,r2,16759
10105b78:	10106688 	cmpgei	zero,r2,16794
10105b7c:	10105dec 	andhi	zero,r2,16759
10105b80:	10106688 	cmpgei	zero,r2,16794
10105b84:	10106688 	cmpgei	zero,r2,16794
10105b88:	10106688 	cmpgei	zero,r2,16794
10105b8c:	10106688 	cmpgei	zero,r2,16794
10105b90:	10105e8c 	andi	zero,r2,16762
10105b94:	10106688 	cmpgei	zero,r2,16794
10105b98:	10106688 	cmpgei	zero,r2,16794
10105b9c:	10105f54 	ori	zero,r2,16765
10105ba0:	10106688 	cmpgei	zero,r2,16794
10105ba4:	10106688 	cmpgei	zero,r2,16794
10105ba8:	10106688 	cmpgei	zero,r2,16794
10105bac:	10106688 	cmpgei	zero,r2,16794
10105bb0:	10106688 	cmpgei	zero,r2,16794
10105bb4:	101063c4 	addi	zero,r2,16783
10105bb8:	10106688 	cmpgei	zero,r2,16794
10105bbc:	10106688 	cmpgei	zero,r2,16794
10105bc0:	10106424 	muli	zero,r2,16784
10105bc4:	10106688 	cmpgei	zero,r2,16794
10105bc8:	10106688 	cmpgei	zero,r2,16794
10105bcc:	10106688 	cmpgei	zero,r2,16794
10105bd0:	10106688 	cmpgei	zero,r2,16794
10105bd4:	10106688 	cmpgei	zero,r2,16794
10105bd8:	10106688 	cmpgei	zero,r2,16794
10105bdc:	10106688 	cmpgei	zero,r2,16794
10105be0:	10106688 	cmpgei	zero,r2,16794
10105be4:	10106688 	cmpgei	zero,r2,16794
10105be8:	10106688 	cmpgei	zero,r2,16794
10105bec:	101064d4 	ori	zero,r2,16787
10105bf0:	10106610 	cmplti	zero,r2,16792
10105bf4:	10105dec 	andhi	zero,r2,16759
10105bf8:	10105dec 	andhi	zero,r2,16759
10105bfc:	10105dec 	andhi	zero,r2,16759
10105c00:	10106664 	muli	zero,r2,16793
10105c04:	10106610 	cmplti	zero,r2,16792
10105c08:	10106688 	cmpgei	zero,r2,16794
10105c0c:	10106688 	cmpgei	zero,r2,16794
10105c10:	10106620 	cmpeqi	zero,r2,16792
10105c14:	10106688 	cmpgei	zero,r2,16794
10105c18:	10106630 	cmpltui	zero,r2,16792
10105c1c:	10106510 	cmplti	zero,r2,16788
10105c20:	10105c60 	cmpeqi	zero,r2,16753
10105c24:	10106530 	cmpltui	zero,r2,16788
10105c28:	10106688 	cmpgei	zero,r2,16794
10105c2c:	1010653c 	xorhi	zero,r2,16788
10105c30:	10106688 	cmpgei	zero,r2,16794
10105c34:	10106598 	cmpnei	zero,r2,16790
10105c38:	10106688 	cmpgei	zero,r2,16794
10105c3c:	10106688 	cmpgei	zero,r2,16794
10105c40:	101065a8 	cmpgeui	zero,r2,16790
10105c44:	d9003117 	ldw	r4,196(sp)
10105c48:	d8802d15 	stw	r2,180(sp)
10105c4c:	0109c83a 	sub	r4,zero,r4
10105c50:	d9003115 	stw	r4,196(sp)
10105c54:	94800114 	ori	r18,r18,4
10105c58:	bc400007 	ldb	r17,0(r23)
10105c5c:	003f9706 	br	10105abc <_gp+0xfffe42e8>
10105c60:	00800c04 	movi	r2,48
10105c64:	d9002d17 	ldw	r4,180(sp)
10105c68:	d9402917 	ldw	r5,164(sp)
10105c6c:	d8802705 	stb	r2,156(sp)
10105c70:	00801e04 	movi	r2,120
10105c74:	d8802745 	stb	r2,157(sp)
10105c78:	d8002785 	stb	zero,158(sp)
10105c7c:	20c00104 	addi	r3,r4,4
10105c80:	25000017 	ldw	r20,0(r4)
10105c84:	002d883a 	mov	r22,zero
10105c88:	90800094 	ori	r2,r18,2
10105c8c:	28028616 	blt	r5,zero,101066a8 <___svfprintf_internal_r+0xd3c>
10105c90:	00bfdfc4 	movi	r2,-129
10105c94:	90a4703a 	and	r18,r18,r2
10105c98:	d8c02d15 	stw	r3,180(sp)
10105c9c:	94800094 	ori	r18,r18,2
10105ca0:	a002731e 	bne	r20,zero,10106670 <___svfprintf_internal_r+0xd04>
10105ca4:	00840474 	movhi	r2,4113
10105ca8:	109e7804 	addi	r2,r2,31200
10105cac:	d8803a15 	stw	r2,232(sp)
10105cb0:	04401e04 	movi	r17,120
10105cb4:	d8c02917 	ldw	r3,164(sp)
10105cb8:	0039883a 	mov	fp,zero
10105cbc:	1801d526 	beq	r3,zero,10106414 <___svfprintf_internal_r+0xaa8>
10105cc0:	0029883a 	mov	r20,zero
10105cc4:	002d883a 	mov	r22,zero
10105cc8:	0001f106 	br	10106490 <___svfprintf_internal_r+0xb24>
10105ccc:	d9402c17 	ldw	r5,176(sp)
10105cd0:	d9801e04 	addi	r6,sp,120
10105cd4:	9809883a 	mov	r4,r19
10105cd8:	010df7c0 	call	1010df7c <__ssprint_r>
10105cdc:	1000081e 	bne	r2,zero,10105d00 <___svfprintf_internal_r+0x394>
10105ce0:	da000404 	addi	r8,sp,16
10105ce4:	003f6306 	br	10105a74 <_gp+0xfffe42a0>
10105ce8:	d8802017 	ldw	r2,128(sp)
10105cec:	10000426 	beq	r2,zero,10105d00 <___svfprintf_internal_r+0x394>
10105cf0:	d9402c17 	ldw	r5,176(sp)
10105cf4:	d9003917 	ldw	r4,228(sp)
10105cf8:	d9801e04 	addi	r6,sp,120
10105cfc:	010df7c0 	call	1010df7c <__ssprint_r>
10105d00:	d8802c17 	ldw	r2,176(sp)
10105d04:	10c0030b 	ldhu	r3,12(r2)
10105d08:	d8802f17 	ldw	r2,188(sp)
10105d0c:	18c0100c 	andi	r3,r3,64
10105d10:	1805f51e 	bne	r3,zero,101074e8 <___svfprintf_internal_r+0x1b7c>
10105d14:	dfc04817 	ldw	ra,288(sp)
10105d18:	df004717 	ldw	fp,284(sp)
10105d1c:	ddc04617 	ldw	r23,280(sp)
10105d20:	dd804517 	ldw	r22,276(sp)
10105d24:	dd404417 	ldw	r21,272(sp)
10105d28:	dd004317 	ldw	r20,268(sp)
10105d2c:	dcc04217 	ldw	r19,264(sp)
10105d30:	dc804117 	ldw	r18,260(sp)
10105d34:	dc404017 	ldw	r17,256(sp)
10105d38:	dc003f17 	ldw	r16,252(sp)
10105d3c:	dec04904 	addi	sp,sp,292
10105d40:	f800283a 	ret
10105d44:	d8802d17 	ldw	r2,180(sp)
10105d48:	d9002d17 	ldw	r4,180(sp)
10105d4c:	10800017 	ldw	r2,0(r2)
10105d50:	d8803115 	stw	r2,196(sp)
10105d54:	20800104 	addi	r2,r4,4
10105d58:	d9003117 	ldw	r4,196(sp)
10105d5c:	203fb916 	blt	r4,zero,10105c44 <_gp+0xfffe4470>
10105d60:	d8802d15 	stw	r2,180(sp)
10105d64:	bc400007 	ldb	r17,0(r23)
10105d68:	003f5406 	br	10105abc <_gp+0xfffe42e8>
10105d6c:	bc400007 	ldb	r17,0(r23)
10105d70:	bac00044 	addi	r11,r23,1
10105d74:	8a873926 	beq	r17,r10,10107a5c <___svfprintf_internal_r+0x20f0>
10105d78:	88bff404 	addi	r2,r17,-48
10105d7c:	0009883a 	mov	r4,zero
10105d80:	30868836 	bltu	r6,r2,101077a4 <___svfprintf_internal_r+0x1e38>
10105d84:	5c400007 	ldb	r17,0(r11)
10105d88:	210002a4 	muli	r4,r4,10
10105d8c:	5dc00044 	addi	r23,r11,1
10105d90:	b817883a 	mov	r11,r23
10105d94:	2089883a 	add	r4,r4,r2
10105d98:	88bff404 	addi	r2,r17,-48
10105d9c:	30bff92e 	bgeu	r6,r2,10105d84 <_gp+0xfffe45b0>
10105da0:	2005d716 	blt	r4,zero,10107500 <___svfprintf_internal_r+0x1b94>
10105da4:	d9002915 	stw	r4,164(sp)
10105da8:	003f4506 	br	10105ac0 <_gp+0xfffe42ec>
10105dac:	b809883a 	mov	r4,r23
10105db0:	d8003115 	stw	zero,196(sp)
10105db4:	88bff404 	addi	r2,r17,-48
10105db8:	0017883a 	mov	r11,zero
10105dbc:	24400007 	ldb	r17,0(r4)
10105dc0:	5ac002a4 	muli	r11,r11,10
10105dc4:	bdc00044 	addi	r23,r23,1
10105dc8:	b809883a 	mov	r4,r23
10105dcc:	12d7883a 	add	r11,r2,r11
10105dd0:	88bff404 	addi	r2,r17,-48
10105dd4:	30bff92e 	bgeu	r6,r2,10105dbc <_gp+0xfffe45e8>
10105dd8:	dac03115 	stw	r11,196(sp)
10105ddc:	003f3806 	br	10105ac0 <_gp+0xfffe42ec>
10105de0:	94802014 	ori	r18,r18,128
10105de4:	bc400007 	ldb	r17,0(r23)
10105de8:	003f3406 	br	10105abc <_gp+0xfffe42e8>
10105dec:	18c03fcc 	andi	r3,r3,255
10105df0:	1807471e 	bne	r3,zero,10107b10 <___svfprintf_internal_r+0x21a4>
10105df4:	9080020c 	andi	r2,r18,8
10105df8:	10047d26 	beq	r2,zero,10106ff0 <___svfprintf_internal_r+0x1684>
10105dfc:	d8c02d17 	ldw	r3,180(sp)
10105e00:	d9002d17 	ldw	r4,180(sp)
10105e04:	d9402d17 	ldw	r5,180(sp)
10105e08:	18c00017 	ldw	r3,0(r3)
10105e0c:	21000117 	ldw	r4,4(r4)
10105e10:	29400204 	addi	r5,r5,8
10105e14:	d8c03615 	stw	r3,216(sp)
10105e18:	d9003715 	stw	r4,220(sp)
10105e1c:	d9402d15 	stw	r5,180(sp)
10105e20:	d9003617 	ldw	r4,216(sp)
10105e24:	d9403717 	ldw	r5,220(sp)
10105e28:	da003e15 	stw	r8,248(sp)
10105e2c:	04000044 	movi	r16,1
10105e30:	010db280 	call	1010db28 <__fpclassifyd>
10105e34:	da003e17 	ldw	r8,248(sp)
10105e38:	14044b1e 	bne	r2,r16,10106f68 <___svfprintf_internal_r+0x15fc>
10105e3c:	d9003617 	ldw	r4,216(sp)
10105e40:	d9403717 	ldw	r5,220(sp)
10105e44:	000d883a 	mov	r6,zero
10105e48:	000f883a 	mov	r7,zero
10105e4c:	0112de40 	call	10112de4 <__ledf2>
10105e50:	da003e17 	ldw	r8,248(sp)
10105e54:	1005f316 	blt	r2,zero,10107624 <___svfprintf_internal_r+0x1cb8>
10105e58:	df002783 	ldbu	fp,158(sp)
10105e5c:	008011c4 	movi	r2,71
10105e60:	1445590e 	bge	r2,r17,101073c8 <___svfprintf_internal_r+0x1a5c>
10105e64:	04040474 	movhi	r16,4113
10105e68:	841e7004 	addi	r16,r16,31168
10105e6c:	00c000c4 	movi	r3,3
10105e70:	00bfdfc4 	movi	r2,-129
10105e74:	d8c02a15 	stw	r3,168(sp)
10105e78:	90a4703a 	and	r18,r18,r2
10105e7c:	d8c02e15 	stw	r3,184(sp)
10105e80:	d8002915 	stw	zero,164(sp)
10105e84:	d8003215 	stw	zero,200(sp)
10105e88:	00006606 	br	10106024 <___svfprintf_internal_r+0x6b8>
10105e8c:	94800214 	ori	r18,r18,8
10105e90:	bc400007 	ldb	r17,0(r23)
10105e94:	003f0906 	br	10105abc <_gp+0xfffe42e8>
10105e98:	18c03fcc 	andi	r3,r3,255
10105e9c:	1807181e 	bne	r3,zero,10107b00 <___svfprintf_internal_r+0x2194>
10105ea0:	94800414 	ori	r18,r18,16
10105ea4:	9080080c 	andi	r2,r18,32
10105ea8:	10039626 	beq	r2,zero,10106d04 <___svfprintf_internal_r+0x1398>
10105eac:	d9402d17 	ldw	r5,180(sp)
10105eb0:	28800117 	ldw	r2,4(r5)
10105eb4:	2d000017 	ldw	r20,0(r5)
10105eb8:	29400204 	addi	r5,r5,8
10105ebc:	d9402d15 	stw	r5,180(sp)
10105ec0:	102d883a 	mov	r22,r2
10105ec4:	10039816 	blt	r2,zero,10106d28 <___svfprintf_internal_r+0x13bc>
10105ec8:	d9402917 	ldw	r5,164(sp)
10105ecc:	df002783 	ldbu	fp,158(sp)
10105ed0:	2803ab16 	blt	r5,zero,10106d80 <___svfprintf_internal_r+0x1414>
10105ed4:	00ffdfc4 	movi	r3,-129
10105ed8:	a584b03a 	or	r2,r20,r22
10105edc:	90e4703a 	and	r18,r18,r3
10105ee0:	10014a26 	beq	r2,zero,1010640c <___svfprintf_internal_r+0xaa0>
10105ee4:	b0034b26 	beq	r22,zero,10106c14 <___svfprintf_internal_r+0x12a8>
10105ee8:	dc402a15 	stw	r17,168(sp)
10105eec:	dc001e04 	addi	r16,sp,120
10105ef0:	b023883a 	mov	r17,r22
10105ef4:	402d883a 	mov	r22,r8
10105ef8:	a009883a 	mov	r4,r20
10105efc:	880b883a 	mov	r5,r17
10105f00:	01800284 	movi	r6,10
10105f04:	000f883a 	mov	r7,zero
10105f08:	01115b40 	call	101115b4 <__umoddi3>
10105f0c:	10800c04 	addi	r2,r2,48
10105f10:	843fffc4 	addi	r16,r16,-1
10105f14:	a009883a 	mov	r4,r20
10105f18:	880b883a 	mov	r5,r17
10105f1c:	80800005 	stb	r2,0(r16)
10105f20:	01800284 	movi	r6,10
10105f24:	000f883a 	mov	r7,zero
10105f28:	011103c0 	call	1011103c <__udivdi3>
10105f2c:	1029883a 	mov	r20,r2
10105f30:	10c4b03a 	or	r2,r2,r3
10105f34:	1823883a 	mov	r17,r3
10105f38:	103fef1e 	bne	r2,zero,10105ef8 <_gp+0xfffe4724>
10105f3c:	d8c02817 	ldw	r3,160(sp)
10105f40:	dc402a17 	ldw	r17,168(sp)
10105f44:	b011883a 	mov	r8,r22
10105f48:	1c07c83a 	sub	r3,r3,r16
10105f4c:	d8c02e15 	stw	r3,184(sp)
10105f50:	00002e06 	br	1010600c <___svfprintf_internal_r+0x6a0>
10105f54:	18c03fcc 	andi	r3,r3,255
10105f58:	1806e71e 	bne	r3,zero,10107af8 <___svfprintf_internal_r+0x218c>
10105f5c:	94800414 	ori	r18,r18,16
10105f60:	9080080c 	andi	r2,r18,32
10105f64:	1002d426 	beq	r2,zero,10106ab8 <___svfprintf_internal_r+0x114c>
10105f68:	d9402d17 	ldw	r5,180(sp)
10105f6c:	d8c02917 	ldw	r3,164(sp)
10105f70:	d8002785 	stb	zero,158(sp)
10105f74:	28800204 	addi	r2,r5,8
10105f78:	2d000017 	ldw	r20,0(r5)
10105f7c:	2d800117 	ldw	r22,4(r5)
10105f80:	18041516 	blt	r3,zero,10106fd8 <___svfprintf_internal_r+0x166c>
10105f84:	013fdfc4 	movi	r4,-129
10105f88:	a586b03a 	or	r3,r20,r22
10105f8c:	d8802d15 	stw	r2,180(sp)
10105f90:	9124703a 	and	r18,r18,r4
10105f94:	1802d51e 	bne	r3,zero,10106aec <___svfprintf_internal_r+0x1180>
10105f98:	d9402917 	ldw	r5,164(sp)
10105f9c:	0039883a 	mov	fp,zero
10105fa0:	2806be26 	beq	r5,zero,10107a9c <___svfprintf_internal_r+0x2130>
10105fa4:	0029883a 	mov	r20,zero
10105fa8:	002d883a 	mov	r22,zero
10105fac:	dc001e04 	addi	r16,sp,120
10105fb0:	a006d0fa 	srli	r3,r20,3
10105fb4:	b008977a 	slli	r4,r22,29
10105fb8:	b02cd0fa 	srli	r22,r22,3
10105fbc:	a50001cc 	andi	r20,r20,7
10105fc0:	a0800c04 	addi	r2,r20,48
10105fc4:	843fffc4 	addi	r16,r16,-1
10105fc8:	20e8b03a 	or	r20,r4,r3
10105fcc:	80800005 	stb	r2,0(r16)
10105fd0:	a586b03a 	or	r3,r20,r22
10105fd4:	183ff61e 	bne	r3,zero,10105fb0 <_gp+0xfffe47dc>
10105fd8:	90c0004c 	andi	r3,r18,1
10105fdc:	18013926 	beq	r3,zero,101064c4 <___svfprintf_internal_r+0xb58>
10105fe0:	10803fcc 	andi	r2,r2,255
10105fe4:	1080201c 	xori	r2,r2,128
10105fe8:	10bfe004 	addi	r2,r2,-128
10105fec:	00c00c04 	movi	r3,48
10105ff0:	10c13426 	beq	r2,r3,101064c4 <___svfprintf_internal_r+0xb58>
10105ff4:	80ffffc5 	stb	r3,-1(r16)
10105ff8:	d8c02817 	ldw	r3,160(sp)
10105ffc:	80bfffc4 	addi	r2,r16,-1
10106000:	1021883a 	mov	r16,r2
10106004:	1887c83a 	sub	r3,r3,r2
10106008:	d8c02e15 	stw	r3,184(sp)
1010600c:	d8802e17 	ldw	r2,184(sp)
10106010:	d9002917 	ldw	r4,164(sp)
10106014:	1100010e 	bge	r2,r4,1010601c <___svfprintf_internal_r+0x6b0>
10106018:	2005883a 	mov	r2,r4
1010601c:	d8802a15 	stw	r2,168(sp)
10106020:	d8003215 	stw	zero,200(sp)
10106024:	e7003fcc 	andi	fp,fp,255
10106028:	e700201c 	xori	fp,fp,128
1010602c:	e73fe004 	addi	fp,fp,-128
10106030:	e0000326 	beq	fp,zero,10106040 <___svfprintf_internal_r+0x6d4>
10106034:	d8c02a17 	ldw	r3,168(sp)
10106038:	18c00044 	addi	r3,r3,1
1010603c:	d8c02a15 	stw	r3,168(sp)
10106040:	90c0008c 	andi	r3,r18,2
10106044:	d8c02b15 	stw	r3,172(sp)
10106048:	18000326 	beq	r3,zero,10106058 <___svfprintf_internal_r+0x6ec>
1010604c:	d8c02a17 	ldw	r3,168(sp)
10106050:	18c00084 	addi	r3,r3,2
10106054:	d8c02a15 	stw	r3,168(sp)
10106058:	90c0210c 	andi	r3,r18,132
1010605c:	d8c03015 	stw	r3,192(sp)
10106060:	1801a11e 	bne	r3,zero,101066e8 <___svfprintf_internal_r+0xd7c>
10106064:	d9003117 	ldw	r4,196(sp)
10106068:	d8c02a17 	ldw	r3,168(sp)
1010606c:	20e9c83a 	sub	r20,r4,r3
10106070:	05019d0e 	bge	zero,r20,101066e8 <___svfprintf_internal_r+0xd7c>
10106074:	02400404 	movi	r9,16
10106078:	d8c02017 	ldw	r3,128(sp)
1010607c:	d8801f17 	ldw	r2,124(sp)
10106080:	4d051b0e 	bge	r9,r20,101074f0 <___svfprintf_internal_r+0x1b84>
10106084:	01440474 	movhi	r5,4113
10106088:	295e8384 	addi	r5,r5,31246
1010608c:	dc403c15 	stw	r17,240(sp)
10106090:	d9403515 	stw	r5,212(sp)
10106094:	a023883a 	mov	r17,r20
10106098:	482d883a 	mov	r22,r9
1010609c:	9029883a 	mov	r20,r18
101060a0:	070001c4 	movi	fp,7
101060a4:	8025883a 	mov	r18,r16
101060a8:	dc002c17 	ldw	r16,176(sp)
101060ac:	00000306 	br	101060bc <___svfprintf_internal_r+0x750>
101060b0:	8c7ffc04 	addi	r17,r17,-16
101060b4:	42000204 	addi	r8,r8,8
101060b8:	b440130e 	bge	r22,r17,10106108 <___svfprintf_internal_r+0x79c>
101060bc:	01040474 	movhi	r4,4113
101060c0:	18c00404 	addi	r3,r3,16
101060c4:	10800044 	addi	r2,r2,1
101060c8:	211e8384 	addi	r4,r4,31246
101060cc:	41000015 	stw	r4,0(r8)
101060d0:	45800115 	stw	r22,4(r8)
101060d4:	d8c02015 	stw	r3,128(sp)
101060d8:	d8801f15 	stw	r2,124(sp)
101060dc:	e0bff40e 	bge	fp,r2,101060b0 <_gp+0xfffe48dc>
101060e0:	d9801e04 	addi	r6,sp,120
101060e4:	800b883a 	mov	r5,r16
101060e8:	9809883a 	mov	r4,r19
101060ec:	010df7c0 	call	1010df7c <__ssprint_r>
101060f0:	103f031e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
101060f4:	8c7ffc04 	addi	r17,r17,-16
101060f8:	d8c02017 	ldw	r3,128(sp)
101060fc:	d8801f17 	ldw	r2,124(sp)
10106100:	da000404 	addi	r8,sp,16
10106104:	b47fed16 	blt	r22,r17,101060bc <_gp+0xfffe48e8>
10106108:	9021883a 	mov	r16,r18
1010610c:	a025883a 	mov	r18,r20
10106110:	8829883a 	mov	r20,r17
10106114:	dc403c17 	ldw	r17,240(sp)
10106118:	d9403517 	ldw	r5,212(sp)
1010611c:	a0c7883a 	add	r3,r20,r3
10106120:	10800044 	addi	r2,r2,1
10106124:	41400015 	stw	r5,0(r8)
10106128:	45000115 	stw	r20,4(r8)
1010612c:	d8c02015 	stw	r3,128(sp)
10106130:	d8801f15 	stw	r2,124(sp)
10106134:	010001c4 	movi	r4,7
10106138:	20829f16 	blt	r4,r2,10106bb8 <___svfprintf_internal_r+0x124c>
1010613c:	df002787 	ldb	fp,158(sp)
10106140:	42000204 	addi	r8,r8,8
10106144:	e0000c26 	beq	fp,zero,10106178 <___svfprintf_internal_r+0x80c>
10106148:	d8801f17 	ldw	r2,124(sp)
1010614c:	d9002784 	addi	r4,sp,158
10106150:	18c00044 	addi	r3,r3,1
10106154:	10800044 	addi	r2,r2,1
10106158:	41000015 	stw	r4,0(r8)
1010615c:	01000044 	movi	r4,1
10106160:	41000115 	stw	r4,4(r8)
10106164:	d8c02015 	stw	r3,128(sp)
10106168:	d8801f15 	stw	r2,124(sp)
1010616c:	010001c4 	movi	r4,7
10106170:	20823816 	blt	r4,r2,10106a54 <___svfprintf_internal_r+0x10e8>
10106174:	42000204 	addi	r8,r8,8
10106178:	d8802b17 	ldw	r2,172(sp)
1010617c:	10000c26 	beq	r2,zero,101061b0 <___svfprintf_internal_r+0x844>
10106180:	d8801f17 	ldw	r2,124(sp)
10106184:	d9002704 	addi	r4,sp,156
10106188:	18c00084 	addi	r3,r3,2
1010618c:	10800044 	addi	r2,r2,1
10106190:	41000015 	stw	r4,0(r8)
10106194:	01000084 	movi	r4,2
10106198:	41000115 	stw	r4,4(r8)
1010619c:	d8c02015 	stw	r3,128(sp)
101061a0:	d8801f15 	stw	r2,124(sp)
101061a4:	010001c4 	movi	r4,7
101061a8:	20823216 	blt	r4,r2,10106a74 <___svfprintf_internal_r+0x1108>
101061ac:	42000204 	addi	r8,r8,8
101061b0:	d9003017 	ldw	r4,192(sp)
101061b4:	00802004 	movi	r2,128
101061b8:	20819726 	beq	r4,r2,10106818 <___svfprintf_internal_r+0xeac>
101061bc:	d9402917 	ldw	r5,164(sp)
101061c0:	d8802e17 	ldw	r2,184(sp)
101061c4:	28adc83a 	sub	r22,r5,r2
101061c8:	05802f0e 	bge	zero,r22,10106288 <___svfprintf_internal_r+0x91c>
101061cc:	07000404 	movi	fp,16
101061d0:	d8801f17 	ldw	r2,124(sp)
101061d4:	e583c00e 	bge	fp,r22,101070d8 <___svfprintf_internal_r+0x176c>
101061d8:	01440474 	movhi	r5,4113
101061dc:	295e7f84 	addi	r5,r5,31230
101061e0:	dc402915 	stw	r17,164(sp)
101061e4:	d9402b15 	stw	r5,172(sp)
101061e8:	b023883a 	mov	r17,r22
101061ec:	050001c4 	movi	r20,7
101061f0:	902d883a 	mov	r22,r18
101061f4:	8025883a 	mov	r18,r16
101061f8:	dc002c17 	ldw	r16,176(sp)
101061fc:	00000306 	br	1010620c <___svfprintf_internal_r+0x8a0>
10106200:	8c7ffc04 	addi	r17,r17,-16
10106204:	42000204 	addi	r8,r8,8
10106208:	e440110e 	bge	fp,r17,10106250 <___svfprintf_internal_r+0x8e4>
1010620c:	18c00404 	addi	r3,r3,16
10106210:	10800044 	addi	r2,r2,1
10106214:	45400015 	stw	r21,0(r8)
10106218:	47000115 	stw	fp,4(r8)
1010621c:	d8c02015 	stw	r3,128(sp)
10106220:	d8801f15 	stw	r2,124(sp)
10106224:	a0bff60e 	bge	r20,r2,10106200 <_gp+0xfffe4a2c>
10106228:	d9801e04 	addi	r6,sp,120
1010622c:	800b883a 	mov	r5,r16
10106230:	9809883a 	mov	r4,r19
10106234:	010df7c0 	call	1010df7c <__ssprint_r>
10106238:	103eb11e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
1010623c:	8c7ffc04 	addi	r17,r17,-16
10106240:	d8c02017 	ldw	r3,128(sp)
10106244:	d8801f17 	ldw	r2,124(sp)
10106248:	da000404 	addi	r8,sp,16
1010624c:	e47fef16 	blt	fp,r17,1010620c <_gp+0xfffe4a38>
10106250:	9021883a 	mov	r16,r18
10106254:	b025883a 	mov	r18,r22
10106258:	882d883a 	mov	r22,r17
1010625c:	dc402917 	ldw	r17,164(sp)
10106260:	d9002b17 	ldw	r4,172(sp)
10106264:	1d87883a 	add	r3,r3,r22
10106268:	10800044 	addi	r2,r2,1
1010626c:	41000015 	stw	r4,0(r8)
10106270:	45800115 	stw	r22,4(r8)
10106274:	d8c02015 	stw	r3,128(sp)
10106278:	d8801f15 	stw	r2,124(sp)
1010627c:	010001c4 	movi	r4,7
10106280:	2081ec16 	blt	r4,r2,10106a34 <___svfprintf_internal_r+0x10c8>
10106284:	42000204 	addi	r8,r8,8
10106288:	9080400c 	andi	r2,r18,256
1010628c:	1001181e 	bne	r2,zero,101066f0 <___svfprintf_internal_r+0xd84>
10106290:	d9402e17 	ldw	r5,184(sp)
10106294:	d8801f17 	ldw	r2,124(sp)
10106298:	44000015 	stw	r16,0(r8)
1010629c:	1947883a 	add	r3,r3,r5
101062a0:	10800044 	addi	r2,r2,1
101062a4:	41400115 	stw	r5,4(r8)
101062a8:	d8c02015 	stw	r3,128(sp)
101062ac:	d8801f15 	stw	r2,124(sp)
101062b0:	010001c4 	movi	r4,7
101062b4:	2081d116 	blt	r4,r2,101069fc <___svfprintf_internal_r+0x1090>
101062b8:	42000204 	addi	r8,r8,8
101062bc:	9480010c 	andi	r18,r18,4
101062c0:	90003226 	beq	r18,zero,1010638c <___svfprintf_internal_r+0xa20>
101062c4:	d9403117 	ldw	r5,196(sp)
101062c8:	d8802a17 	ldw	r2,168(sp)
101062cc:	28a1c83a 	sub	r16,r5,r2
101062d0:	04002e0e 	bge	zero,r16,1010638c <___svfprintf_internal_r+0xa20>
101062d4:	04400404 	movi	r17,16
101062d8:	d8801f17 	ldw	r2,124(sp)
101062dc:	8c04b90e 	bge	r17,r16,101075c4 <___svfprintf_internal_r+0x1c58>
101062e0:	01440474 	movhi	r5,4113
101062e4:	295e8384 	addi	r5,r5,31246
101062e8:	d9403515 	stw	r5,212(sp)
101062ec:	048001c4 	movi	r18,7
101062f0:	dd002c17 	ldw	r20,176(sp)
101062f4:	00000306 	br	10106304 <___svfprintf_internal_r+0x998>
101062f8:	843ffc04 	addi	r16,r16,-16
101062fc:	42000204 	addi	r8,r8,8
10106300:	8c00130e 	bge	r17,r16,10106350 <___svfprintf_internal_r+0x9e4>
10106304:	01040474 	movhi	r4,4113
10106308:	18c00404 	addi	r3,r3,16
1010630c:	10800044 	addi	r2,r2,1
10106310:	211e8384 	addi	r4,r4,31246
10106314:	41000015 	stw	r4,0(r8)
10106318:	44400115 	stw	r17,4(r8)
1010631c:	d8c02015 	stw	r3,128(sp)
10106320:	d8801f15 	stw	r2,124(sp)
10106324:	90bff40e 	bge	r18,r2,101062f8 <_gp+0xfffe4b24>
10106328:	d9801e04 	addi	r6,sp,120
1010632c:	a00b883a 	mov	r5,r20
10106330:	9809883a 	mov	r4,r19
10106334:	010df7c0 	call	1010df7c <__ssprint_r>
10106338:	103e711e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
1010633c:	843ffc04 	addi	r16,r16,-16
10106340:	d8c02017 	ldw	r3,128(sp)
10106344:	d8801f17 	ldw	r2,124(sp)
10106348:	da000404 	addi	r8,sp,16
1010634c:	8c3fed16 	blt	r17,r16,10106304 <_gp+0xfffe4b30>
10106350:	d9403517 	ldw	r5,212(sp)
10106354:	1c07883a 	add	r3,r3,r16
10106358:	10800044 	addi	r2,r2,1
1010635c:	41400015 	stw	r5,0(r8)
10106360:	44000115 	stw	r16,4(r8)
10106364:	d8c02015 	stw	r3,128(sp)
10106368:	d8801f15 	stw	r2,124(sp)
1010636c:	010001c4 	movi	r4,7
10106370:	2080060e 	bge	r4,r2,1010638c <___svfprintf_internal_r+0xa20>
10106374:	d9402c17 	ldw	r5,176(sp)
10106378:	d9801e04 	addi	r6,sp,120
1010637c:	9809883a 	mov	r4,r19
10106380:	010df7c0 	call	1010df7c <__ssprint_r>
10106384:	103e5e1e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106388:	d8c02017 	ldw	r3,128(sp)
1010638c:	d8803117 	ldw	r2,196(sp)
10106390:	d9002a17 	ldw	r4,168(sp)
10106394:	1100010e 	bge	r2,r4,1010639c <___svfprintf_internal_r+0xa30>
10106398:	2005883a 	mov	r2,r4
1010639c:	d9402f17 	ldw	r5,188(sp)
101063a0:	288b883a 	add	r5,r5,r2
101063a4:	d9402f15 	stw	r5,188(sp)
101063a8:	18019c1e 	bne	r3,zero,10106a1c <___svfprintf_internal_r+0x10b0>
101063ac:	b8800007 	ldb	r2,0(r23)
101063b0:	d8001f15 	stw	zero,124(sp)
101063b4:	da000404 	addi	r8,sp,16
101063b8:	103d991e 	bne	r2,zero,10105a20 <_gp+0xfffe424c>
101063bc:	b821883a 	mov	r16,r23
101063c0:	003daf06 	br	10105a80 <_gp+0xfffe42ac>
101063c4:	18c03fcc 	andi	r3,r3,255
101063c8:	1805c71e 	bne	r3,zero,10107ae8 <___svfprintf_internal_r+0x217c>
101063cc:	94800414 	ori	r18,r18,16
101063d0:	9080080c 	andi	r2,r18,32
101063d4:	10020126 	beq	r2,zero,10106bdc <___svfprintf_internal_r+0x1270>
101063d8:	d8802d17 	ldw	r2,180(sp)
101063dc:	d9002917 	ldw	r4,164(sp)
101063e0:	d8002785 	stb	zero,158(sp)
101063e4:	10c00204 	addi	r3,r2,8
101063e8:	15000017 	ldw	r20,0(r2)
101063ec:	15800117 	ldw	r22,4(r2)
101063f0:	20038e16 	blt	r4,zero,1010722c <___svfprintf_internal_r+0x18c0>
101063f4:	013fdfc4 	movi	r4,-129
101063f8:	a584b03a 	or	r2,r20,r22
101063fc:	d8c02d15 	stw	r3,180(sp)
10106400:	9124703a 	and	r18,r18,r4
10106404:	0039883a 	mov	fp,zero
10106408:	103eb61e 	bne	r2,zero,10105ee4 <_gp+0xfffe4710>
1010640c:	d8802917 	ldw	r2,164(sp)
10106410:	1002c81e 	bne	r2,zero,10106f34 <___svfprintf_internal_r+0x15c8>
10106414:	d8002915 	stw	zero,164(sp)
10106418:	d8002e15 	stw	zero,184(sp)
1010641c:	dc001e04 	addi	r16,sp,120
10106420:	003efa06 	br	1010600c <_gp+0xfffe4838>
10106424:	18c03fcc 	andi	r3,r3,255
10106428:	1805ad1e 	bne	r3,zero,10107ae0 <___svfprintf_internal_r+0x2174>
1010642c:	01440474 	movhi	r5,4113
10106430:	295e7304 	addi	r5,r5,31180
10106434:	d9403a15 	stw	r5,232(sp)
10106438:	9080080c 	andi	r2,r18,32
1010643c:	10006126 	beq	r2,zero,101065c4 <___svfprintf_internal_r+0xc58>
10106440:	d8802d17 	ldw	r2,180(sp)
10106444:	15000017 	ldw	r20,0(r2)
10106448:	15800117 	ldw	r22,4(r2)
1010644c:	10800204 	addi	r2,r2,8
10106450:	d8802d15 	stw	r2,180(sp)
10106454:	9080004c 	andi	r2,r18,1
10106458:	10018e26 	beq	r2,zero,10106a94 <___svfprintf_internal_r+0x1128>
1010645c:	a584b03a 	or	r2,r20,r22
10106460:	10030926 	beq	r2,zero,10107088 <___svfprintf_internal_r+0x171c>
10106464:	d8c02917 	ldw	r3,164(sp)
10106468:	00800c04 	movi	r2,48
1010646c:	d8802705 	stb	r2,156(sp)
10106470:	dc402745 	stb	r17,157(sp)
10106474:	d8002785 	stb	zero,158(sp)
10106478:	90800094 	ori	r2,r18,2
1010647c:	18048716 	blt	r3,zero,1010769c <___svfprintf_internal_r+0x1d30>
10106480:	00bfdfc4 	movi	r2,-129
10106484:	90a4703a 	and	r18,r18,r2
10106488:	94800094 	ori	r18,r18,2
1010648c:	0039883a 	mov	fp,zero
10106490:	d9003a17 	ldw	r4,232(sp)
10106494:	dc001e04 	addi	r16,sp,120
10106498:	a08003cc 	andi	r2,r20,15
1010649c:	b006973a 	slli	r3,r22,28
101064a0:	2085883a 	add	r2,r4,r2
101064a4:	a028d13a 	srli	r20,r20,4
101064a8:	10800003 	ldbu	r2,0(r2)
101064ac:	b02cd13a 	srli	r22,r22,4
101064b0:	843fffc4 	addi	r16,r16,-1
101064b4:	1d28b03a 	or	r20,r3,r20
101064b8:	80800005 	stb	r2,0(r16)
101064bc:	a584b03a 	or	r2,r20,r22
101064c0:	103ff51e 	bne	r2,zero,10106498 <_gp+0xfffe4cc4>
101064c4:	d8c02817 	ldw	r3,160(sp)
101064c8:	1c07c83a 	sub	r3,r3,r16
101064cc:	d8c02e15 	stw	r3,184(sp)
101064d0:	003ece06 	br	1010600c <_gp+0xfffe4838>
101064d4:	d8c02d17 	ldw	r3,180(sp)
101064d8:	d9002d17 	ldw	r4,180(sp)
101064dc:	d8002785 	stb	zero,158(sp)
101064e0:	18800017 	ldw	r2,0(r3)
101064e4:	21000104 	addi	r4,r4,4
101064e8:	00c00044 	movi	r3,1
101064ec:	d8c02a15 	stw	r3,168(sp)
101064f0:	d8801405 	stb	r2,80(sp)
101064f4:	d9002d15 	stw	r4,180(sp)
101064f8:	d8c02e15 	stw	r3,184(sp)
101064fc:	d8002915 	stw	zero,164(sp)
10106500:	d8003215 	stw	zero,200(sp)
10106504:	dc001404 	addi	r16,sp,80
10106508:	0039883a 	mov	fp,zero
1010650c:	003ecc06 	br	10106040 <_gp+0xfffe486c>
10106510:	18c03fcc 	andi	r3,r3,255
10106514:	183e9226 	beq	r3,zero,10105f60 <_gp+0xfffe478c>
10106518:	d9c02785 	stb	r7,158(sp)
1010651c:	003e9006 	br	10105f60 <_gp+0xfffe478c>
10106520:	00c00044 	movi	r3,1
10106524:	01c00ac4 	movi	r7,43
10106528:	bc400007 	ldb	r17,0(r23)
1010652c:	003d6306 	br	10105abc <_gp+0xfffe42e8>
10106530:	94800814 	ori	r18,r18,32
10106534:	bc400007 	ldb	r17,0(r23)
10106538:	003d6006 	br	10105abc <_gp+0xfffe42e8>
1010653c:	d8c02d17 	ldw	r3,180(sp)
10106540:	d8002785 	stb	zero,158(sp)
10106544:	1c000017 	ldw	r16,0(r3)
10106548:	1d000104 	addi	r20,r3,4
1010654c:	80040f26 	beq	r16,zero,1010758c <___svfprintf_internal_r+0x1c20>
10106550:	d9002917 	ldw	r4,164(sp)
10106554:	2003dc16 	blt	r4,zero,101074c8 <___svfprintf_internal_r+0x1b5c>
10106558:	200d883a 	mov	r6,r4
1010655c:	000b883a 	mov	r5,zero
10106560:	8009883a 	mov	r4,r16
10106564:	da003e15 	stw	r8,248(sp)
10106568:	010c0780 	call	1010c078 <memchr>
1010656c:	da003e17 	ldw	r8,248(sp)
10106570:	10045826 	beq	r2,zero,101076d4 <___svfprintf_internal_r+0x1d68>
10106574:	1405c83a 	sub	r2,r2,r16
10106578:	d8802e15 	stw	r2,184(sp)
1010657c:	1003d816 	blt	r2,zero,101074e0 <___svfprintf_internal_r+0x1b74>
10106580:	df002783 	ldbu	fp,158(sp)
10106584:	d8802a15 	stw	r2,168(sp)
10106588:	dd002d15 	stw	r20,180(sp)
1010658c:	d8002915 	stw	zero,164(sp)
10106590:	d8003215 	stw	zero,200(sp)
10106594:	003ea306 	br	10106024 <_gp+0xfffe4850>
10106598:	18c03fcc 	andi	r3,r3,255
1010659c:	183f8c26 	beq	r3,zero,101063d0 <_gp+0xfffe4bfc>
101065a0:	d9c02785 	stb	r7,158(sp)
101065a4:	003f8a06 	br	101063d0 <_gp+0xfffe4bfc>
101065a8:	18c03fcc 	andi	r3,r3,255
101065ac:	1805631e 	bne	r3,zero,10107b3c <___svfprintf_internal_r+0x21d0>
101065b0:	01440474 	movhi	r5,4113
101065b4:	295e7804 	addi	r5,r5,31200
101065b8:	d9403a15 	stw	r5,232(sp)
101065bc:	9080080c 	andi	r2,r18,32
101065c0:	103f9f1e 	bne	r2,zero,10106440 <_gp+0xfffe4c6c>
101065c4:	9080040c 	andi	r2,r18,16
101065c8:	10029c26 	beq	r2,zero,1010703c <___svfprintf_internal_r+0x16d0>
101065cc:	d8c02d17 	ldw	r3,180(sp)
101065d0:	002d883a 	mov	r22,zero
101065d4:	1d000017 	ldw	r20,0(r3)
101065d8:	18c00104 	addi	r3,r3,4
101065dc:	d8c02d15 	stw	r3,180(sp)
101065e0:	003f9c06 	br	10106454 <_gp+0xfffe4c80>
101065e4:	94800054 	ori	r18,r18,1
101065e8:	bc400007 	ldb	r17,0(r23)
101065ec:	003d3306 	br	10105abc <_gp+0xfffe42e8>
101065f0:	38803fcc 	andi	r2,r7,255
101065f4:	1080201c 	xori	r2,r2,128
101065f8:	10bfe004 	addi	r2,r2,-128
101065fc:	1002971e 	bne	r2,zero,1010705c <___svfprintf_internal_r+0x16f0>
10106600:	00c00044 	movi	r3,1
10106604:	01c00804 	movi	r7,32
10106608:	bc400007 	ldb	r17,0(r23)
1010660c:	003d2b06 	br	10105abc <_gp+0xfffe42e8>
10106610:	18c03fcc 	andi	r3,r3,255
10106614:	183e2326 	beq	r3,zero,10105ea4 <_gp+0xfffe46d0>
10106618:	d9c02785 	stb	r7,158(sp)
1010661c:	003e2106 	br	10105ea4 <_gp+0xfffe46d0>
10106620:	bc400007 	ldb	r17,0(r23)
10106624:	8a430426 	beq	r17,r9,10107238 <___svfprintf_internal_r+0x18cc>
10106628:	94800414 	ori	r18,r18,16
1010662c:	003d2306 	br	10105abc <_gp+0xfffe42e8>
10106630:	18c03fcc 	andi	r3,r3,255
10106634:	18053f1e 	bne	r3,zero,10107b34 <___svfprintf_internal_r+0x21c8>
10106638:	9080080c 	andi	r2,r18,32
1010663c:	10028926 	beq	r2,zero,10107064 <___svfprintf_internal_r+0x16f8>
10106640:	d9402d17 	ldw	r5,180(sp)
10106644:	d9002f17 	ldw	r4,188(sp)
10106648:	28800017 	ldw	r2,0(r5)
1010664c:	2007d7fa 	srai	r3,r4,31
10106650:	29400104 	addi	r5,r5,4
10106654:	d9402d15 	stw	r5,180(sp)
10106658:	11000015 	stw	r4,0(r2)
1010665c:	10c00115 	stw	r3,4(r2)
10106660:	003ced06 	br	10105a18 <_gp+0xfffe4244>
10106664:	94801014 	ori	r18,r18,64
10106668:	bc400007 	ldb	r17,0(r23)
1010666c:	003d1306 	br	10105abc <_gp+0xfffe42e8>
10106670:	01040474 	movhi	r4,4113
10106674:	211e7804 	addi	r4,r4,31200
10106678:	0039883a 	mov	fp,zero
1010667c:	d9003a15 	stw	r4,232(sp)
10106680:	04401e04 	movi	r17,120
10106684:	003f8206 	br	10106490 <_gp+0xfffe4cbc>
10106688:	18c03fcc 	andi	r3,r3,255
1010668c:	1805221e 	bne	r3,zero,10107b18 <___svfprintf_internal_r+0x21ac>
10106690:	883d9526 	beq	r17,zero,10105ce8 <_gp+0xfffe4514>
10106694:	00c00044 	movi	r3,1
10106698:	d8c02a15 	stw	r3,168(sp)
1010669c:	dc401405 	stb	r17,80(sp)
101066a0:	d8002785 	stb	zero,158(sp)
101066a4:	003f9406 	br	101064f8 <_gp+0xfffe4d24>
101066a8:	01040474 	movhi	r4,4113
101066ac:	211e7804 	addi	r4,r4,31200
101066b0:	d9003a15 	stw	r4,232(sp)
101066b4:	d8c02d15 	stw	r3,180(sp)
101066b8:	1025883a 	mov	r18,r2
101066bc:	04401e04 	movi	r17,120
101066c0:	a584b03a 	or	r2,r20,r22
101066c4:	1000fa1e 	bne	r2,zero,10106ab0 <___svfprintf_internal_r+0x1144>
101066c8:	0039883a 	mov	fp,zero
101066cc:	00800084 	movi	r2,2
101066d0:	10803fcc 	andi	r2,r2,255
101066d4:	00c00044 	movi	r3,1
101066d8:	10c21626 	beq	r2,r3,10106f34 <___svfprintf_internal_r+0x15c8>
101066dc:	00c00084 	movi	r3,2
101066e0:	10fe301e 	bne	r2,r3,10105fa4 <_gp+0xfffe47d0>
101066e4:	003d7606 	br	10105cc0 <_gp+0xfffe44ec>
101066e8:	d8c02017 	ldw	r3,128(sp)
101066ec:	003e9506 	br	10106144 <_gp+0xfffe4970>
101066f0:	00801944 	movi	r2,101
101066f4:	14407c0e 	bge	r2,r17,101068e8 <___svfprintf_internal_r+0xf7c>
101066f8:	d9003617 	ldw	r4,216(sp)
101066fc:	d9403717 	ldw	r5,220(sp)
10106700:	000d883a 	mov	r6,zero
10106704:	000f883a 	mov	r7,zero
10106708:	d8c03d15 	stw	r3,244(sp)
1010670c:	da003e15 	stw	r8,248(sp)
10106710:	0112c800 	call	10112c80 <__eqdf2>
10106714:	d8c03d17 	ldw	r3,244(sp)
10106718:	da003e17 	ldw	r8,248(sp)
1010671c:	1000f51e 	bne	r2,zero,10106af4 <___svfprintf_internal_r+0x1188>
10106720:	d8801f17 	ldw	r2,124(sp)
10106724:	01040474 	movhi	r4,4113
10106728:	211e7f04 	addi	r4,r4,31228
1010672c:	18c00044 	addi	r3,r3,1
10106730:	10800044 	addi	r2,r2,1
10106734:	41000015 	stw	r4,0(r8)
10106738:	01000044 	movi	r4,1
1010673c:	41000115 	stw	r4,4(r8)
10106740:	d8c02015 	stw	r3,128(sp)
10106744:	d8801f15 	stw	r2,124(sp)
10106748:	010001c4 	movi	r4,7
1010674c:	20826616 	blt	r4,r2,101070e8 <___svfprintf_internal_r+0x177c>
10106750:	42000204 	addi	r8,r8,8
10106754:	d8802617 	ldw	r2,152(sp)
10106758:	d9403317 	ldw	r5,204(sp)
1010675c:	11400216 	blt	r2,r5,10106768 <___svfprintf_internal_r+0xdfc>
10106760:	9080004c 	andi	r2,r18,1
10106764:	103ed526 	beq	r2,zero,101062bc <_gp+0xfffe4ae8>
10106768:	d8803817 	ldw	r2,224(sp)
1010676c:	d9003417 	ldw	r4,208(sp)
10106770:	d9403817 	ldw	r5,224(sp)
10106774:	1887883a 	add	r3,r3,r2
10106778:	d8801f17 	ldw	r2,124(sp)
1010677c:	41000015 	stw	r4,0(r8)
10106780:	41400115 	stw	r5,4(r8)
10106784:	10800044 	addi	r2,r2,1
10106788:	d8c02015 	stw	r3,128(sp)
1010678c:	d8801f15 	stw	r2,124(sp)
10106790:	010001c4 	movi	r4,7
10106794:	2082af16 	blt	r4,r2,10107254 <___svfprintf_internal_r+0x18e8>
10106798:	42000204 	addi	r8,r8,8
1010679c:	d8803317 	ldw	r2,204(sp)
101067a0:	143fffc4 	addi	r16,r2,-1
101067a4:	043ec50e 	bge	zero,r16,101062bc <_gp+0xfffe4ae8>
101067a8:	04400404 	movi	r17,16
101067ac:	d8801f17 	ldw	r2,124(sp)
101067b0:	8c00860e 	bge	r17,r16,101069cc <___svfprintf_internal_r+0x1060>
101067b4:	01440474 	movhi	r5,4113
101067b8:	295e7f84 	addi	r5,r5,31230
101067bc:	d9402b15 	stw	r5,172(sp)
101067c0:	058001c4 	movi	r22,7
101067c4:	dd002c17 	ldw	r20,176(sp)
101067c8:	00000306 	br	101067d8 <___svfprintf_internal_r+0xe6c>
101067cc:	42000204 	addi	r8,r8,8
101067d0:	843ffc04 	addi	r16,r16,-16
101067d4:	8c00800e 	bge	r17,r16,101069d8 <___svfprintf_internal_r+0x106c>
101067d8:	18c00404 	addi	r3,r3,16
101067dc:	10800044 	addi	r2,r2,1
101067e0:	45400015 	stw	r21,0(r8)
101067e4:	44400115 	stw	r17,4(r8)
101067e8:	d8c02015 	stw	r3,128(sp)
101067ec:	d8801f15 	stw	r2,124(sp)
101067f0:	b0bff60e 	bge	r22,r2,101067cc <_gp+0xfffe4ff8>
101067f4:	d9801e04 	addi	r6,sp,120
101067f8:	a00b883a 	mov	r5,r20
101067fc:	9809883a 	mov	r4,r19
10106800:	010df7c0 	call	1010df7c <__ssprint_r>
10106804:	103d3e1e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106808:	d8c02017 	ldw	r3,128(sp)
1010680c:	d8801f17 	ldw	r2,124(sp)
10106810:	da000404 	addi	r8,sp,16
10106814:	003fee06 	br	101067d0 <_gp+0xfffe4ffc>
10106818:	d9403117 	ldw	r5,196(sp)
1010681c:	d8802a17 	ldw	r2,168(sp)
10106820:	28adc83a 	sub	r22,r5,r2
10106824:	05be650e 	bge	zero,r22,101061bc <_gp+0xfffe49e8>
10106828:	07000404 	movi	fp,16
1010682c:	d8801f17 	ldw	r2,124(sp)
10106830:	e583a20e 	bge	fp,r22,101076bc <___svfprintf_internal_r+0x1d50>
10106834:	01440474 	movhi	r5,4113
10106838:	295e7f84 	addi	r5,r5,31230
1010683c:	dc403015 	stw	r17,192(sp)
10106840:	d9402b15 	stw	r5,172(sp)
10106844:	b023883a 	mov	r17,r22
10106848:	050001c4 	movi	r20,7
1010684c:	902d883a 	mov	r22,r18
10106850:	8025883a 	mov	r18,r16
10106854:	dc002c17 	ldw	r16,176(sp)
10106858:	00000306 	br	10106868 <___svfprintf_internal_r+0xefc>
1010685c:	8c7ffc04 	addi	r17,r17,-16
10106860:	42000204 	addi	r8,r8,8
10106864:	e440110e 	bge	fp,r17,101068ac <___svfprintf_internal_r+0xf40>
10106868:	18c00404 	addi	r3,r3,16
1010686c:	10800044 	addi	r2,r2,1
10106870:	45400015 	stw	r21,0(r8)
10106874:	47000115 	stw	fp,4(r8)
10106878:	d8c02015 	stw	r3,128(sp)
1010687c:	d8801f15 	stw	r2,124(sp)
10106880:	a0bff60e 	bge	r20,r2,1010685c <_gp+0xfffe5088>
10106884:	d9801e04 	addi	r6,sp,120
10106888:	800b883a 	mov	r5,r16
1010688c:	9809883a 	mov	r4,r19
10106890:	010df7c0 	call	1010df7c <__ssprint_r>
10106894:	103d1a1e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106898:	8c7ffc04 	addi	r17,r17,-16
1010689c:	d8c02017 	ldw	r3,128(sp)
101068a0:	d8801f17 	ldw	r2,124(sp)
101068a4:	da000404 	addi	r8,sp,16
101068a8:	e47fef16 	blt	fp,r17,10106868 <_gp+0xfffe5094>
101068ac:	9021883a 	mov	r16,r18
101068b0:	b025883a 	mov	r18,r22
101068b4:	882d883a 	mov	r22,r17
101068b8:	dc403017 	ldw	r17,192(sp)
101068bc:	d9002b17 	ldw	r4,172(sp)
101068c0:	1d87883a 	add	r3,r3,r22
101068c4:	10800044 	addi	r2,r2,1
101068c8:	41000015 	stw	r4,0(r8)
101068cc:	45800115 	stw	r22,4(r8)
101068d0:	d8c02015 	stw	r3,128(sp)
101068d4:	d8801f15 	stw	r2,124(sp)
101068d8:	010001c4 	movi	r4,7
101068dc:	20819a16 	blt	r4,r2,10106f48 <___svfprintf_internal_r+0x15dc>
101068e0:	42000204 	addi	r8,r8,8
101068e4:	003e3506 	br	101061bc <_gp+0xfffe49e8>
101068e8:	d9403317 	ldw	r5,204(sp)
101068ec:	00800044 	movi	r2,1
101068f0:	18c00044 	addi	r3,r3,1
101068f4:	1141710e 	bge	r2,r5,10106ebc <___svfprintf_internal_r+0x1550>
101068f8:	dc401f17 	ldw	r17,124(sp)
101068fc:	00800044 	movi	r2,1
10106900:	40800115 	stw	r2,4(r8)
10106904:	8c400044 	addi	r17,r17,1
10106908:	44000015 	stw	r16,0(r8)
1010690c:	d8c02015 	stw	r3,128(sp)
10106910:	dc401f15 	stw	r17,124(sp)
10106914:	008001c4 	movi	r2,7
10106918:	14417416 	blt	r2,r17,10106eec <___svfprintf_internal_r+0x1580>
1010691c:	42000204 	addi	r8,r8,8
10106920:	d8803817 	ldw	r2,224(sp)
10106924:	d9003417 	ldw	r4,208(sp)
10106928:	8c400044 	addi	r17,r17,1
1010692c:	10c7883a 	add	r3,r2,r3
10106930:	40800115 	stw	r2,4(r8)
10106934:	41000015 	stw	r4,0(r8)
10106938:	d8c02015 	stw	r3,128(sp)
1010693c:	dc401f15 	stw	r17,124(sp)
10106940:	008001c4 	movi	r2,7
10106944:	14417216 	blt	r2,r17,10106f10 <___svfprintf_internal_r+0x15a4>
10106948:	45800204 	addi	r22,r8,8
1010694c:	d9003617 	ldw	r4,216(sp)
10106950:	d9403717 	ldw	r5,220(sp)
10106954:	000d883a 	mov	r6,zero
10106958:	000f883a 	mov	r7,zero
1010695c:	d8c03d15 	stw	r3,244(sp)
10106960:	0112c800 	call	10112c80 <__eqdf2>
10106964:	d8c03d17 	ldw	r3,244(sp)
10106968:	1000b326 	beq	r2,zero,10106c38 <___svfprintf_internal_r+0x12cc>
1010696c:	d9403317 	ldw	r5,204(sp)
10106970:	84000044 	addi	r16,r16,1
10106974:	8c400044 	addi	r17,r17,1
10106978:	28bfffc4 	addi	r2,r5,-1
1010697c:	1887883a 	add	r3,r3,r2
10106980:	b0800115 	stw	r2,4(r22)
10106984:	b4000015 	stw	r16,0(r22)
10106988:	d8c02015 	stw	r3,128(sp)
1010698c:	dc401f15 	stw	r17,124(sp)
10106990:	008001c4 	movi	r2,7
10106994:	1440d216 	blt	r2,r17,10106ce0 <___svfprintf_internal_r+0x1374>
10106998:	b5800204 	addi	r22,r22,8
1010699c:	d9003b17 	ldw	r4,236(sp)
101069a0:	df0022c4 	addi	fp,sp,139
101069a4:	8c400044 	addi	r17,r17,1
101069a8:	20c7883a 	add	r3,r4,r3
101069ac:	b7000015 	stw	fp,0(r22)
101069b0:	b1000115 	stw	r4,4(r22)
101069b4:	d8c02015 	stw	r3,128(sp)
101069b8:	dc401f15 	stw	r17,124(sp)
101069bc:	008001c4 	movi	r2,7
101069c0:	14400e16 	blt	r2,r17,101069fc <___svfprintf_internal_r+0x1090>
101069c4:	b2000204 	addi	r8,r22,8
101069c8:	003e3c06 	br	101062bc <_gp+0xfffe4ae8>
101069cc:	01040474 	movhi	r4,4113
101069d0:	211e7f84 	addi	r4,r4,31230
101069d4:	d9002b15 	stw	r4,172(sp)
101069d8:	d9002b17 	ldw	r4,172(sp)
101069dc:	1c07883a 	add	r3,r3,r16
101069e0:	44000115 	stw	r16,4(r8)
101069e4:	41000015 	stw	r4,0(r8)
101069e8:	10800044 	addi	r2,r2,1
101069ec:	d8c02015 	stw	r3,128(sp)
101069f0:	d8801f15 	stw	r2,124(sp)
101069f4:	010001c4 	movi	r4,7
101069f8:	20be2f0e 	bge	r4,r2,101062b8 <_gp+0xfffe4ae4>
101069fc:	d9402c17 	ldw	r5,176(sp)
10106a00:	d9801e04 	addi	r6,sp,120
10106a04:	9809883a 	mov	r4,r19
10106a08:	010df7c0 	call	1010df7c <__ssprint_r>
10106a0c:	103cbc1e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106a10:	d8c02017 	ldw	r3,128(sp)
10106a14:	da000404 	addi	r8,sp,16
10106a18:	003e2806 	br	101062bc <_gp+0xfffe4ae8>
10106a1c:	d9402c17 	ldw	r5,176(sp)
10106a20:	d9801e04 	addi	r6,sp,120
10106a24:	9809883a 	mov	r4,r19
10106a28:	010df7c0 	call	1010df7c <__ssprint_r>
10106a2c:	103e5f26 	beq	r2,zero,101063ac <_gp+0xfffe4bd8>
10106a30:	003cb306 	br	10105d00 <_gp+0xfffe452c>
10106a34:	d9402c17 	ldw	r5,176(sp)
10106a38:	d9801e04 	addi	r6,sp,120
10106a3c:	9809883a 	mov	r4,r19
10106a40:	010df7c0 	call	1010df7c <__ssprint_r>
10106a44:	103cae1e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106a48:	d8c02017 	ldw	r3,128(sp)
10106a4c:	da000404 	addi	r8,sp,16
10106a50:	003e0d06 	br	10106288 <_gp+0xfffe4ab4>
10106a54:	d9402c17 	ldw	r5,176(sp)
10106a58:	d9801e04 	addi	r6,sp,120
10106a5c:	9809883a 	mov	r4,r19
10106a60:	010df7c0 	call	1010df7c <__ssprint_r>
10106a64:	103ca61e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106a68:	d8c02017 	ldw	r3,128(sp)
10106a6c:	da000404 	addi	r8,sp,16
10106a70:	003dc106 	br	10106178 <_gp+0xfffe49a4>
10106a74:	d9402c17 	ldw	r5,176(sp)
10106a78:	d9801e04 	addi	r6,sp,120
10106a7c:	9809883a 	mov	r4,r19
10106a80:	010df7c0 	call	1010df7c <__ssprint_r>
10106a84:	103c9e1e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106a88:	d8c02017 	ldw	r3,128(sp)
10106a8c:	da000404 	addi	r8,sp,16
10106a90:	003dc706 	br	101061b0 <_gp+0xfffe49dc>
10106a94:	d8802917 	ldw	r2,164(sp)
10106a98:	d8002785 	stb	zero,158(sp)
10106a9c:	103f0816 	blt	r2,zero,101066c0 <_gp+0xfffe4eec>
10106aa0:	00ffdfc4 	movi	r3,-129
10106aa4:	a584b03a 	or	r2,r20,r22
10106aa8:	90e4703a 	and	r18,r18,r3
10106aac:	103c8126 	beq	r2,zero,10105cb4 <_gp+0xfffe44e0>
10106ab0:	0039883a 	mov	fp,zero
10106ab4:	003e7606 	br	10106490 <_gp+0xfffe4cbc>
10106ab8:	9080040c 	andi	r2,r18,16
10106abc:	10013d26 	beq	r2,zero,10106fb4 <___svfprintf_internal_r+0x1648>
10106ac0:	d9002d17 	ldw	r4,180(sp)
10106ac4:	d9402917 	ldw	r5,164(sp)
10106ac8:	d8002785 	stb	zero,158(sp)
10106acc:	20800104 	addi	r2,r4,4
10106ad0:	25000017 	ldw	r20,0(r4)
10106ad4:	002d883a 	mov	r22,zero
10106ad8:	28013f16 	blt	r5,zero,10106fd8 <___svfprintf_internal_r+0x166c>
10106adc:	00ffdfc4 	movi	r3,-129
10106ae0:	d8802d15 	stw	r2,180(sp)
10106ae4:	90e4703a 	and	r18,r18,r3
10106ae8:	a03d2b26 	beq	r20,zero,10105f98 <_gp+0xfffe47c4>
10106aec:	0039883a 	mov	fp,zero
10106af0:	003d2e06 	br	10105fac <_gp+0xfffe47d8>
10106af4:	dc402617 	ldw	r17,152(sp)
10106af8:	0441830e 	bge	zero,r17,10107108 <___svfprintf_internal_r+0x179c>
10106afc:	dc403217 	ldw	r17,200(sp)
10106b00:	d8803317 	ldw	r2,204(sp)
10106b04:	1440010e 	bge	r2,r17,10106b0c <___svfprintf_internal_r+0x11a0>
10106b08:	1023883a 	mov	r17,r2
10106b0c:	04400a0e 	bge	zero,r17,10106b38 <___svfprintf_internal_r+0x11cc>
10106b10:	d8801f17 	ldw	r2,124(sp)
10106b14:	1c47883a 	add	r3,r3,r17
10106b18:	44000015 	stw	r16,0(r8)
10106b1c:	10800044 	addi	r2,r2,1
10106b20:	44400115 	stw	r17,4(r8)
10106b24:	d8c02015 	stw	r3,128(sp)
10106b28:	d8801f15 	stw	r2,124(sp)
10106b2c:	010001c4 	movi	r4,7
10106b30:	20827516 	blt	r4,r2,10107508 <___svfprintf_internal_r+0x1b9c>
10106b34:	42000204 	addi	r8,r8,8
10106b38:	88027b16 	blt	r17,zero,10107528 <___svfprintf_internal_r+0x1bbc>
10106b3c:	d9003217 	ldw	r4,200(sp)
10106b40:	2463c83a 	sub	r17,r4,r17
10106b44:	0440990e 	bge	zero,r17,10106dac <___svfprintf_internal_r+0x1440>
10106b48:	05800404 	movi	r22,16
10106b4c:	d8801f17 	ldw	r2,124(sp)
10106b50:	b441530e 	bge	r22,r17,101070a0 <___svfprintf_internal_r+0x1734>
10106b54:	01040474 	movhi	r4,4113
10106b58:	211e7f84 	addi	r4,r4,31230
10106b5c:	d9002b15 	stw	r4,172(sp)
10106b60:	070001c4 	movi	fp,7
10106b64:	dd002c17 	ldw	r20,176(sp)
10106b68:	00000306 	br	10106b78 <___svfprintf_internal_r+0x120c>
10106b6c:	42000204 	addi	r8,r8,8
10106b70:	8c7ffc04 	addi	r17,r17,-16
10106b74:	b4414d0e 	bge	r22,r17,101070ac <___svfprintf_internal_r+0x1740>
10106b78:	18c00404 	addi	r3,r3,16
10106b7c:	10800044 	addi	r2,r2,1
10106b80:	45400015 	stw	r21,0(r8)
10106b84:	45800115 	stw	r22,4(r8)
10106b88:	d8c02015 	stw	r3,128(sp)
10106b8c:	d8801f15 	stw	r2,124(sp)
10106b90:	e0bff60e 	bge	fp,r2,10106b6c <_gp+0xfffe5398>
10106b94:	d9801e04 	addi	r6,sp,120
10106b98:	a00b883a 	mov	r5,r20
10106b9c:	9809883a 	mov	r4,r19
10106ba0:	010df7c0 	call	1010df7c <__ssprint_r>
10106ba4:	103c561e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106ba8:	d8c02017 	ldw	r3,128(sp)
10106bac:	d8801f17 	ldw	r2,124(sp)
10106bb0:	da000404 	addi	r8,sp,16
10106bb4:	003fee06 	br	10106b70 <_gp+0xfffe539c>
10106bb8:	d9402c17 	ldw	r5,176(sp)
10106bbc:	d9801e04 	addi	r6,sp,120
10106bc0:	9809883a 	mov	r4,r19
10106bc4:	010df7c0 	call	1010df7c <__ssprint_r>
10106bc8:	103c4d1e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106bcc:	d8c02017 	ldw	r3,128(sp)
10106bd0:	df002787 	ldb	fp,158(sp)
10106bd4:	da000404 	addi	r8,sp,16
10106bd8:	003d5a06 	br	10106144 <_gp+0xfffe4970>
10106bdc:	9080040c 	andi	r2,r18,16
10106be0:	10005c26 	beq	r2,zero,10106d54 <___svfprintf_internal_r+0x13e8>
10106be4:	d9402d17 	ldw	r5,180(sp)
10106be8:	d8c02917 	ldw	r3,164(sp)
10106bec:	d8002785 	stb	zero,158(sp)
10106bf0:	28800104 	addi	r2,r5,4
10106bf4:	2d000017 	ldw	r20,0(r5)
10106bf8:	002d883a 	mov	r22,zero
10106bfc:	18005e16 	blt	r3,zero,10106d78 <___svfprintf_internal_r+0x140c>
10106c00:	00ffdfc4 	movi	r3,-129
10106c04:	d8802d15 	stw	r2,180(sp)
10106c08:	90e4703a 	and	r18,r18,r3
10106c0c:	0039883a 	mov	fp,zero
10106c10:	a03dfe26 	beq	r20,zero,1010640c <_gp+0xfffe4c38>
10106c14:	00800244 	movi	r2,9
10106c18:	153cb336 	bltu	r2,r20,10105ee8 <_gp+0xfffe4714>
10106c1c:	a5000c04 	addi	r20,r20,48
10106c20:	dc001dc4 	addi	r16,sp,119
10106c24:	dd001dc5 	stb	r20,119(sp)
10106c28:	d8c02817 	ldw	r3,160(sp)
10106c2c:	1c07c83a 	sub	r3,r3,r16
10106c30:	d8c02e15 	stw	r3,184(sp)
10106c34:	003cf506 	br	1010600c <_gp+0xfffe4838>
10106c38:	d8803317 	ldw	r2,204(sp)
10106c3c:	143fffc4 	addi	r16,r2,-1
10106c40:	043f560e 	bge	zero,r16,1010699c <_gp+0xfffe51c8>
10106c44:	07000404 	movi	fp,16
10106c48:	e403530e 	bge	fp,r16,10107998 <___svfprintf_internal_r+0x202c>
10106c4c:	01440474 	movhi	r5,4113
10106c50:	295e7f84 	addi	r5,r5,31230
10106c54:	d9402b15 	stw	r5,172(sp)
10106c58:	01c001c4 	movi	r7,7
10106c5c:	dd002c17 	ldw	r20,176(sp)
10106c60:	00000306 	br	10106c70 <___svfprintf_internal_r+0x1304>
10106c64:	843ffc04 	addi	r16,r16,-16
10106c68:	b5800204 	addi	r22,r22,8
10106c6c:	e400130e 	bge	fp,r16,10106cbc <___svfprintf_internal_r+0x1350>
10106c70:	18c00404 	addi	r3,r3,16
10106c74:	8c400044 	addi	r17,r17,1
10106c78:	b5400015 	stw	r21,0(r22)
10106c7c:	b7000115 	stw	fp,4(r22)
10106c80:	d8c02015 	stw	r3,128(sp)
10106c84:	dc401f15 	stw	r17,124(sp)
10106c88:	3c7ff60e 	bge	r7,r17,10106c64 <_gp+0xfffe5490>
10106c8c:	d9801e04 	addi	r6,sp,120
10106c90:	a00b883a 	mov	r5,r20
10106c94:	9809883a 	mov	r4,r19
10106c98:	d9c03d15 	stw	r7,244(sp)
10106c9c:	010df7c0 	call	1010df7c <__ssprint_r>
10106ca0:	d9c03d17 	ldw	r7,244(sp)
10106ca4:	103c161e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106ca8:	843ffc04 	addi	r16,r16,-16
10106cac:	d8c02017 	ldw	r3,128(sp)
10106cb0:	dc401f17 	ldw	r17,124(sp)
10106cb4:	dd800404 	addi	r22,sp,16
10106cb8:	e43fed16 	blt	fp,r16,10106c70 <_gp+0xfffe549c>
10106cbc:	d8802b17 	ldw	r2,172(sp)
10106cc0:	1c07883a 	add	r3,r3,r16
10106cc4:	8c400044 	addi	r17,r17,1
10106cc8:	b0800015 	stw	r2,0(r22)
10106ccc:	b4000115 	stw	r16,4(r22)
10106cd0:	d8c02015 	stw	r3,128(sp)
10106cd4:	dc401f15 	stw	r17,124(sp)
10106cd8:	008001c4 	movi	r2,7
10106cdc:	147f2e0e 	bge	r2,r17,10106998 <_gp+0xfffe51c4>
10106ce0:	d9402c17 	ldw	r5,176(sp)
10106ce4:	d9801e04 	addi	r6,sp,120
10106ce8:	9809883a 	mov	r4,r19
10106cec:	010df7c0 	call	1010df7c <__ssprint_r>
10106cf0:	103c031e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106cf4:	d8c02017 	ldw	r3,128(sp)
10106cf8:	dc401f17 	ldw	r17,124(sp)
10106cfc:	dd800404 	addi	r22,sp,16
10106d00:	003f2606 	br	1010699c <_gp+0xfffe51c8>
10106d04:	9080040c 	andi	r2,r18,16
10106d08:	1000c326 	beq	r2,zero,10107018 <___svfprintf_internal_r+0x16ac>
10106d0c:	d8802d17 	ldw	r2,180(sp)
10106d10:	15000017 	ldw	r20,0(r2)
10106d14:	10800104 	addi	r2,r2,4
10106d18:	d8802d15 	stw	r2,180(sp)
10106d1c:	a02dd7fa 	srai	r22,r20,31
10106d20:	b005883a 	mov	r2,r22
10106d24:	103c680e 	bge	r2,zero,10105ec8 <_gp+0xfffe46f4>
10106d28:	0529c83a 	sub	r20,zero,r20
10106d2c:	a004c03a 	cmpne	r2,r20,zero
10106d30:	05adc83a 	sub	r22,zero,r22
10106d34:	b0adc83a 	sub	r22,r22,r2
10106d38:	d8802917 	ldw	r2,164(sp)
10106d3c:	07000b44 	movi	fp,45
10106d40:	df002785 	stb	fp,158(sp)
10106d44:	10022e16 	blt	r2,zero,10107600 <___svfprintf_internal_r+0x1c94>
10106d48:	00bfdfc4 	movi	r2,-129
10106d4c:	90a4703a 	and	r18,r18,r2
10106d50:	003c6406 	br	10105ee4 <_gp+0xfffe4710>
10106d54:	9080100c 	andi	r2,r18,64
10106d58:	d8002785 	stb	zero,158(sp)
10106d5c:	10012526 	beq	r2,zero,101071f4 <___svfprintf_internal_r+0x1888>
10106d60:	d9002d17 	ldw	r4,180(sp)
10106d64:	d9402917 	ldw	r5,164(sp)
10106d68:	002d883a 	mov	r22,zero
10106d6c:	20800104 	addi	r2,r4,4
10106d70:	2500000b 	ldhu	r20,0(r4)
10106d74:	283fa20e 	bge	r5,zero,10106c00 <_gp+0xfffe542c>
10106d78:	d8802d15 	stw	r2,180(sp)
10106d7c:	0039883a 	mov	fp,zero
10106d80:	a584b03a 	or	r2,r20,r22
10106d84:	103c571e 	bne	r2,zero,10105ee4 <_gp+0xfffe4710>
10106d88:	00800044 	movi	r2,1
10106d8c:	003e5006 	br	101066d0 <_gp+0xfffe4efc>
10106d90:	d9402c17 	ldw	r5,176(sp)
10106d94:	d9801e04 	addi	r6,sp,120
10106d98:	9809883a 	mov	r4,r19
10106d9c:	010df7c0 	call	1010df7c <__ssprint_r>
10106da0:	103bd71e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106da4:	d8c02017 	ldw	r3,128(sp)
10106da8:	da000404 	addi	r8,sp,16
10106dac:	d9003217 	ldw	r4,200(sp)
10106db0:	d8802617 	ldw	r2,152(sp)
10106db4:	d9403317 	ldw	r5,204(sp)
10106db8:	8123883a 	add	r17,r16,r4
10106dbc:	11400216 	blt	r2,r5,10106dc8 <___svfprintf_internal_r+0x145c>
10106dc0:	9100004c 	andi	r4,r18,1
10106dc4:	20000d26 	beq	r4,zero,10106dfc <___svfprintf_internal_r+0x1490>
10106dc8:	d9003817 	ldw	r4,224(sp)
10106dcc:	d9403417 	ldw	r5,208(sp)
10106dd0:	1907883a 	add	r3,r3,r4
10106dd4:	d9001f17 	ldw	r4,124(sp)
10106dd8:	41400015 	stw	r5,0(r8)
10106ddc:	d9403817 	ldw	r5,224(sp)
10106de0:	21000044 	addi	r4,r4,1
10106de4:	d8c02015 	stw	r3,128(sp)
10106de8:	41400115 	stw	r5,4(r8)
10106dec:	d9001f15 	stw	r4,124(sp)
10106df0:	014001c4 	movi	r5,7
10106df4:	2901dc16 	blt	r5,r4,10107568 <___svfprintf_internal_r+0x1bfc>
10106df8:	42000204 	addi	r8,r8,8
10106dfc:	d9003317 	ldw	r4,204(sp)
10106e00:	8121883a 	add	r16,r16,r4
10106e04:	2085c83a 	sub	r2,r4,r2
10106e08:	8461c83a 	sub	r16,r16,r17
10106e0c:	1400010e 	bge	r2,r16,10106e14 <___svfprintf_internal_r+0x14a8>
10106e10:	1021883a 	mov	r16,r2
10106e14:	04000a0e 	bge	zero,r16,10106e40 <___svfprintf_internal_r+0x14d4>
10106e18:	d9001f17 	ldw	r4,124(sp)
10106e1c:	1c07883a 	add	r3,r3,r16
10106e20:	44400015 	stw	r17,0(r8)
10106e24:	21000044 	addi	r4,r4,1
10106e28:	44000115 	stw	r16,4(r8)
10106e2c:	d8c02015 	stw	r3,128(sp)
10106e30:	d9001f15 	stw	r4,124(sp)
10106e34:	014001c4 	movi	r5,7
10106e38:	2901e616 	blt	r5,r4,101075d4 <___svfprintf_internal_r+0x1c68>
10106e3c:	42000204 	addi	r8,r8,8
10106e40:	8001f616 	blt	r16,zero,1010761c <___svfprintf_internal_r+0x1cb0>
10106e44:	1421c83a 	sub	r16,r2,r16
10106e48:	043d1c0e 	bge	zero,r16,101062bc <_gp+0xfffe4ae8>
10106e4c:	04400404 	movi	r17,16
10106e50:	d8801f17 	ldw	r2,124(sp)
10106e54:	8c3edd0e 	bge	r17,r16,101069cc <_gp+0xfffe51f8>
10106e58:	01440474 	movhi	r5,4113
10106e5c:	295e7f84 	addi	r5,r5,31230
10106e60:	d9402b15 	stw	r5,172(sp)
10106e64:	058001c4 	movi	r22,7
10106e68:	dd002c17 	ldw	r20,176(sp)
10106e6c:	00000306 	br	10106e7c <___svfprintf_internal_r+0x1510>
10106e70:	42000204 	addi	r8,r8,8
10106e74:	843ffc04 	addi	r16,r16,-16
10106e78:	8c3ed70e 	bge	r17,r16,101069d8 <_gp+0xfffe5204>
10106e7c:	18c00404 	addi	r3,r3,16
10106e80:	10800044 	addi	r2,r2,1
10106e84:	45400015 	stw	r21,0(r8)
10106e88:	44400115 	stw	r17,4(r8)
10106e8c:	d8c02015 	stw	r3,128(sp)
10106e90:	d8801f15 	stw	r2,124(sp)
10106e94:	b0bff60e 	bge	r22,r2,10106e70 <_gp+0xfffe569c>
10106e98:	d9801e04 	addi	r6,sp,120
10106e9c:	a00b883a 	mov	r5,r20
10106ea0:	9809883a 	mov	r4,r19
10106ea4:	010df7c0 	call	1010df7c <__ssprint_r>
10106ea8:	103b951e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106eac:	d8c02017 	ldw	r3,128(sp)
10106eb0:	d8801f17 	ldw	r2,124(sp)
10106eb4:	da000404 	addi	r8,sp,16
10106eb8:	003fee06 	br	10106e74 <_gp+0xfffe56a0>
10106ebc:	9088703a 	and	r4,r18,r2
10106ec0:	203e8d1e 	bne	r4,zero,101068f8 <_gp+0xfffe5124>
10106ec4:	dc401f17 	ldw	r17,124(sp)
10106ec8:	40800115 	stw	r2,4(r8)
10106ecc:	44000015 	stw	r16,0(r8)
10106ed0:	8c400044 	addi	r17,r17,1
10106ed4:	d8c02015 	stw	r3,128(sp)
10106ed8:	dc401f15 	stw	r17,124(sp)
10106edc:	008001c4 	movi	r2,7
10106ee0:	147f7f16 	blt	r2,r17,10106ce0 <_gp+0xfffe550c>
10106ee4:	45800204 	addi	r22,r8,8
10106ee8:	003eac06 	br	1010699c <_gp+0xfffe51c8>
10106eec:	d9402c17 	ldw	r5,176(sp)
10106ef0:	d9801e04 	addi	r6,sp,120
10106ef4:	9809883a 	mov	r4,r19
10106ef8:	010df7c0 	call	1010df7c <__ssprint_r>
10106efc:	103b801e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106f00:	d8c02017 	ldw	r3,128(sp)
10106f04:	dc401f17 	ldw	r17,124(sp)
10106f08:	da000404 	addi	r8,sp,16
10106f0c:	003e8406 	br	10106920 <_gp+0xfffe514c>
10106f10:	d9402c17 	ldw	r5,176(sp)
10106f14:	d9801e04 	addi	r6,sp,120
10106f18:	9809883a 	mov	r4,r19
10106f1c:	010df7c0 	call	1010df7c <__ssprint_r>
10106f20:	103b771e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106f24:	d8c02017 	ldw	r3,128(sp)
10106f28:	dc401f17 	ldw	r17,124(sp)
10106f2c:	dd800404 	addi	r22,sp,16
10106f30:	003e8606 	br	1010694c <_gp+0xfffe5178>
10106f34:	0029883a 	mov	r20,zero
10106f38:	a5000c04 	addi	r20,r20,48
10106f3c:	dc001dc4 	addi	r16,sp,119
10106f40:	dd001dc5 	stb	r20,119(sp)
10106f44:	003f3806 	br	10106c28 <_gp+0xfffe5454>
10106f48:	d9402c17 	ldw	r5,176(sp)
10106f4c:	d9801e04 	addi	r6,sp,120
10106f50:	9809883a 	mov	r4,r19
10106f54:	010df7c0 	call	1010df7c <__ssprint_r>
10106f58:	103b691e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10106f5c:	d8c02017 	ldw	r3,128(sp)
10106f60:	da000404 	addi	r8,sp,16
10106f64:	003c9506 	br	101061bc <_gp+0xfffe49e8>
10106f68:	d9003617 	ldw	r4,216(sp)
10106f6c:	d9403717 	ldw	r5,220(sp)
10106f70:	da003e15 	stw	r8,248(sp)
10106f74:	010db280 	call	1010db28 <__fpclassifyd>
10106f78:	da003e17 	ldw	r8,248(sp)
10106f7c:	1000bd1e 	bne	r2,zero,10107274 <___svfprintf_internal_r+0x1908>
10106f80:	008011c4 	movi	r2,71
10106f84:	14411e0e 	bge	r2,r17,10107400 <___svfprintf_internal_r+0x1a94>
10106f88:	04040474 	movhi	r16,4113
10106f8c:	841e7204 	addi	r16,r16,31176
10106f90:	00c000c4 	movi	r3,3
10106f94:	00bfdfc4 	movi	r2,-129
10106f98:	d8c02a15 	stw	r3,168(sp)
10106f9c:	90a4703a 	and	r18,r18,r2
10106fa0:	df002783 	ldbu	fp,158(sp)
10106fa4:	d8c02e15 	stw	r3,184(sp)
10106fa8:	d8002915 	stw	zero,164(sp)
10106fac:	d8003215 	stw	zero,200(sp)
10106fb0:	003c1c06 	br	10106024 <_gp+0xfffe4850>
10106fb4:	9080100c 	andi	r2,r18,64
10106fb8:	d8002785 	stb	zero,158(sp)
10106fbc:	10009426 	beq	r2,zero,10107210 <___svfprintf_internal_r+0x18a4>
10106fc0:	d8c02d17 	ldw	r3,180(sp)
10106fc4:	d9002917 	ldw	r4,164(sp)
10106fc8:	002d883a 	mov	r22,zero
10106fcc:	18800104 	addi	r2,r3,4
10106fd0:	1d00000b 	ldhu	r20,0(r3)
10106fd4:	203ec10e 	bge	r4,zero,10106adc <_gp+0xfffe5308>
10106fd8:	a586b03a 	or	r3,r20,r22
10106fdc:	d8802d15 	stw	r2,180(sp)
10106fe0:	183ec21e 	bne	r3,zero,10106aec <_gp+0xfffe5318>
10106fe4:	0039883a 	mov	fp,zero
10106fe8:	0005883a 	mov	r2,zero
10106fec:	003db806 	br	101066d0 <_gp+0xfffe4efc>
10106ff0:	d8802d17 	ldw	r2,180(sp)
10106ff4:	d8c02d17 	ldw	r3,180(sp)
10106ff8:	d9002d17 	ldw	r4,180(sp)
10106ffc:	10800017 	ldw	r2,0(r2)
10107000:	18c00117 	ldw	r3,4(r3)
10107004:	21000204 	addi	r4,r4,8
10107008:	d8803615 	stw	r2,216(sp)
1010700c:	d8c03715 	stw	r3,220(sp)
10107010:	d9002d15 	stw	r4,180(sp)
10107014:	003b8206 	br	10105e20 <_gp+0xfffe464c>
10107018:	9080100c 	andi	r2,r18,64
1010701c:	10010726 	beq	r2,zero,1010743c <___svfprintf_internal_r+0x1ad0>
10107020:	d8c02d17 	ldw	r3,180(sp)
10107024:	1d00000f 	ldh	r20,0(r3)
10107028:	18c00104 	addi	r3,r3,4
1010702c:	d8c02d15 	stw	r3,180(sp)
10107030:	a02dd7fa 	srai	r22,r20,31
10107034:	b005883a 	mov	r2,r22
10107038:	003ba206 	br	10105ec4 <_gp+0xfffe46f0>
1010703c:	9080100c 	andi	r2,r18,64
10107040:	10010526 	beq	r2,zero,10107458 <___svfprintf_internal_r+0x1aec>
10107044:	d9002d17 	ldw	r4,180(sp)
10107048:	002d883a 	mov	r22,zero
1010704c:	2500000b 	ldhu	r20,0(r4)
10107050:	21000104 	addi	r4,r4,4
10107054:	d9002d15 	stw	r4,180(sp)
10107058:	003cfe06 	br	10106454 <_gp+0xfffe4c80>
1010705c:	bc400007 	ldb	r17,0(r23)
10107060:	003a9606 	br	10105abc <_gp+0xfffe42e8>
10107064:	9080040c 	andi	r2,r18,16
10107068:	10010126 	beq	r2,zero,10107470 <___svfprintf_internal_r+0x1b04>
1010706c:	d9402d17 	ldw	r5,180(sp)
10107070:	d8c02f17 	ldw	r3,188(sp)
10107074:	28800017 	ldw	r2,0(r5)
10107078:	29400104 	addi	r5,r5,4
1010707c:	d9402d15 	stw	r5,180(sp)
10107080:	10c00015 	stw	r3,0(r2)
10107084:	003a6406 	br	10105a18 <_gp+0xfffe4244>
10107088:	d9002917 	ldw	r4,164(sp)
1010708c:	d8002785 	stb	zero,158(sp)
10107090:	203d8d16 	blt	r4,zero,101066c8 <_gp+0xfffe4ef4>
10107094:	00bfdfc4 	movi	r2,-129
10107098:	90a4703a 	and	r18,r18,r2
1010709c:	003b0506 	br	10105cb4 <_gp+0xfffe44e0>
101070a0:	01440474 	movhi	r5,4113
101070a4:	295e7f84 	addi	r5,r5,31230
101070a8:	d9402b15 	stw	r5,172(sp)
101070ac:	d9402b17 	ldw	r5,172(sp)
101070b0:	1c47883a 	add	r3,r3,r17
101070b4:	10800044 	addi	r2,r2,1
101070b8:	41400015 	stw	r5,0(r8)
101070bc:	44400115 	stw	r17,4(r8)
101070c0:	d8c02015 	stw	r3,128(sp)
101070c4:	d8801f15 	stw	r2,124(sp)
101070c8:	010001c4 	movi	r4,7
101070cc:	20bf3016 	blt	r4,r2,10106d90 <_gp+0xfffe55bc>
101070d0:	42000204 	addi	r8,r8,8
101070d4:	003f3506 	br	10106dac <_gp+0xfffe55d8>
101070d8:	01040474 	movhi	r4,4113
101070dc:	211e7f84 	addi	r4,r4,31230
101070e0:	d9002b15 	stw	r4,172(sp)
101070e4:	003c5e06 	br	10106260 <_gp+0xfffe4a8c>
101070e8:	d9402c17 	ldw	r5,176(sp)
101070ec:	d9801e04 	addi	r6,sp,120
101070f0:	9809883a 	mov	r4,r19
101070f4:	010df7c0 	call	1010df7c <__ssprint_r>
101070f8:	103b011e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
101070fc:	d8c02017 	ldw	r3,128(sp)
10107100:	da000404 	addi	r8,sp,16
10107104:	003d9306 	br	10106754 <_gp+0xfffe4f80>
10107108:	d8801f17 	ldw	r2,124(sp)
1010710c:	01440474 	movhi	r5,4113
10107110:	01000044 	movi	r4,1
10107114:	18c00044 	addi	r3,r3,1
10107118:	10800044 	addi	r2,r2,1
1010711c:	295e7f04 	addi	r5,r5,31228
10107120:	41000115 	stw	r4,4(r8)
10107124:	41400015 	stw	r5,0(r8)
10107128:	d8c02015 	stw	r3,128(sp)
1010712c:	d8801f15 	stw	r2,124(sp)
10107130:	010001c4 	movi	r4,7
10107134:	2080b516 	blt	r4,r2,1010740c <___svfprintf_internal_r+0x1aa0>
10107138:	42000204 	addi	r8,r8,8
1010713c:	8800041e 	bne	r17,zero,10107150 <___svfprintf_internal_r+0x17e4>
10107140:	d8803317 	ldw	r2,204(sp)
10107144:	1000021e 	bne	r2,zero,10107150 <___svfprintf_internal_r+0x17e4>
10107148:	9080004c 	andi	r2,r18,1
1010714c:	103c5b26 	beq	r2,zero,101062bc <_gp+0xfffe4ae8>
10107150:	d9003817 	ldw	r4,224(sp)
10107154:	d8801f17 	ldw	r2,124(sp)
10107158:	d9403417 	ldw	r5,208(sp)
1010715c:	20c7883a 	add	r3,r4,r3
10107160:	10800044 	addi	r2,r2,1
10107164:	41000115 	stw	r4,4(r8)
10107168:	41400015 	stw	r5,0(r8)
1010716c:	d8c02015 	stw	r3,128(sp)
10107170:	d8801f15 	stw	r2,124(sp)
10107174:	010001c4 	movi	r4,7
10107178:	20818016 	blt	r4,r2,1010777c <___svfprintf_internal_r+0x1e10>
1010717c:	42000204 	addi	r8,r8,8
10107180:	0463c83a 	sub	r17,zero,r17
10107184:	0440cb0e 	bge	zero,r17,101074b4 <___svfprintf_internal_r+0x1b48>
10107188:	05800404 	movi	r22,16
1010718c:	b440e80e 	bge	r22,r17,10107530 <___svfprintf_internal_r+0x1bc4>
10107190:	01440474 	movhi	r5,4113
10107194:	295e7f84 	addi	r5,r5,31230
10107198:	d9402b15 	stw	r5,172(sp)
1010719c:	070001c4 	movi	fp,7
101071a0:	dd002c17 	ldw	r20,176(sp)
101071a4:	00000306 	br	101071b4 <___svfprintf_internal_r+0x1848>
101071a8:	42000204 	addi	r8,r8,8
101071ac:	8c7ffc04 	addi	r17,r17,-16
101071b0:	b440e20e 	bge	r22,r17,1010753c <___svfprintf_internal_r+0x1bd0>
101071b4:	18c00404 	addi	r3,r3,16
101071b8:	10800044 	addi	r2,r2,1
101071bc:	45400015 	stw	r21,0(r8)
101071c0:	45800115 	stw	r22,4(r8)
101071c4:	d8c02015 	stw	r3,128(sp)
101071c8:	d8801f15 	stw	r2,124(sp)
101071cc:	e0bff60e 	bge	fp,r2,101071a8 <_gp+0xfffe59d4>
101071d0:	d9801e04 	addi	r6,sp,120
101071d4:	a00b883a 	mov	r5,r20
101071d8:	9809883a 	mov	r4,r19
101071dc:	010df7c0 	call	1010df7c <__ssprint_r>
101071e0:	103ac71e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
101071e4:	d8c02017 	ldw	r3,128(sp)
101071e8:	d8801f17 	ldw	r2,124(sp)
101071ec:	da000404 	addi	r8,sp,16
101071f0:	003fee06 	br	101071ac <_gp+0xfffe59d8>
101071f4:	d8c02d17 	ldw	r3,180(sp)
101071f8:	d9002917 	ldw	r4,164(sp)
101071fc:	002d883a 	mov	r22,zero
10107200:	18800104 	addi	r2,r3,4
10107204:	1d000017 	ldw	r20,0(r3)
10107208:	203e7d0e 	bge	r4,zero,10106c00 <_gp+0xfffe542c>
1010720c:	003eda06 	br	10106d78 <_gp+0xfffe55a4>
10107210:	d9402d17 	ldw	r5,180(sp)
10107214:	d8c02917 	ldw	r3,164(sp)
10107218:	002d883a 	mov	r22,zero
1010721c:	28800104 	addi	r2,r5,4
10107220:	2d000017 	ldw	r20,0(r5)
10107224:	183e2d0e 	bge	r3,zero,10106adc <_gp+0xfffe5308>
10107228:	003f6b06 	br	10106fd8 <_gp+0xfffe5804>
1010722c:	d8c02d15 	stw	r3,180(sp)
10107230:	0039883a 	mov	fp,zero
10107234:	003ed206 	br	10106d80 <_gp+0xfffe55ac>
10107238:	bc400043 	ldbu	r17,1(r23)
1010723c:	94800814 	ori	r18,r18,32
10107240:	bdc00044 	addi	r23,r23,1
10107244:	8c403fcc 	andi	r17,r17,255
10107248:	8c40201c 	xori	r17,r17,128
1010724c:	8c7fe004 	addi	r17,r17,-128
10107250:	003a1a06 	br	10105abc <_gp+0xfffe42e8>
10107254:	d9402c17 	ldw	r5,176(sp)
10107258:	d9801e04 	addi	r6,sp,120
1010725c:	9809883a 	mov	r4,r19
10107260:	010df7c0 	call	1010df7c <__ssprint_r>
10107264:	103aa61e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10107268:	d8c02017 	ldw	r3,128(sp)
1010726c:	da000404 	addi	r8,sp,16
10107270:	003d4a06 	br	1010679c <_gp+0xfffe4fc8>
10107274:	d9002917 	ldw	r4,164(sp)
10107278:	05bff7c4 	movi	r22,-33
1010727c:	00bfffc4 	movi	r2,-1
10107280:	8dac703a 	and	r22,r17,r22
10107284:	20806a26 	beq	r4,r2,10107430 <___svfprintf_internal_r+0x1ac4>
10107288:	008011c4 	movi	r2,71
1010728c:	b0813726 	beq	r22,r2,1010776c <___svfprintf_internal_r+0x1e00>
10107290:	d9003717 	ldw	r4,220(sp)
10107294:	90c04014 	ori	r3,r18,256
10107298:	d8c02b15 	stw	r3,172(sp)
1010729c:	20015d16 	blt	r4,zero,10107814 <___svfprintf_internal_r+0x1ea8>
101072a0:	dd003717 	ldw	r20,220(sp)
101072a4:	d8002a05 	stb	zero,168(sp)
101072a8:	00801984 	movi	r2,102
101072ac:	88814026 	beq	r17,r2,101077b0 <___svfprintf_internal_r+0x1e44>
101072b0:	00801184 	movi	r2,70
101072b4:	88817126 	beq	r17,r2,1010787c <___svfprintf_internal_r+0x1f10>
101072b8:	00801144 	movi	r2,69
101072bc:	b0816226 	beq	r22,r2,10107848 <___svfprintf_internal_r+0x1edc>
101072c0:	d8c02917 	ldw	r3,164(sp)
101072c4:	d8802104 	addi	r2,sp,132
101072c8:	d8800315 	stw	r2,12(sp)
101072cc:	d9403617 	ldw	r5,216(sp)
101072d0:	d8802504 	addi	r2,sp,148
101072d4:	d8800215 	stw	r2,8(sp)
101072d8:	d8802604 	addi	r2,sp,152
101072dc:	d8c00015 	stw	r3,0(sp)
101072e0:	d8800115 	stw	r2,4(sp)
101072e4:	01c00084 	movi	r7,2
101072e8:	a00d883a 	mov	r6,r20
101072ec:	9809883a 	mov	r4,r19
101072f0:	d8c03d15 	stw	r3,244(sp)
101072f4:	da003e15 	stw	r8,248(sp)
101072f8:	010a29c0 	call	1010a29c <_dtoa_r>
101072fc:	1021883a 	mov	r16,r2
10107300:	008019c4 	movi	r2,103
10107304:	d8c03d17 	ldw	r3,244(sp)
10107308:	da003e17 	ldw	r8,248(sp)
1010730c:	8880e726 	beq	r17,r2,101076ac <___svfprintf_internal_r+0x1d40>
10107310:	008011c4 	movi	r2,71
10107314:	8880d426 	beq	r17,r2,10107668 <___svfprintf_internal_r+0x1cfc>
10107318:	80f9883a 	add	fp,r16,r3
1010731c:	d9003617 	ldw	r4,216(sp)
10107320:	000d883a 	mov	r6,zero
10107324:	000f883a 	mov	r7,zero
10107328:	a00b883a 	mov	r5,r20
1010732c:	da003e15 	stw	r8,248(sp)
10107330:	0112c800 	call	10112c80 <__eqdf2>
10107334:	da003e17 	ldw	r8,248(sp)
10107338:	1000e426 	beq	r2,zero,101076cc <___svfprintf_internal_r+0x1d60>
1010733c:	d8802117 	ldw	r2,132(sp)
10107340:	1700062e 	bgeu	r2,fp,1010735c <___svfprintf_internal_r+0x19f0>
10107344:	01000c04 	movi	r4,48
10107348:	10c00044 	addi	r3,r2,1
1010734c:	d8c02115 	stw	r3,132(sp)
10107350:	11000005 	stb	r4,0(r2)
10107354:	d8802117 	ldw	r2,132(sp)
10107358:	173ffb36 	bltu	r2,fp,10107348 <_gp+0xfffe5b74>
1010735c:	1405c83a 	sub	r2,r2,r16
10107360:	d8803315 	stw	r2,204(sp)
10107364:	008011c4 	movi	r2,71
10107368:	b080c526 	beq	r22,r2,10107680 <___svfprintf_internal_r+0x1d14>
1010736c:	00801944 	movi	r2,101
10107370:	1441d90e 	bge	r2,r17,10107ad8 <___svfprintf_internal_r+0x216c>
10107374:	d8c02617 	ldw	r3,152(sp)
10107378:	00801984 	movi	r2,102
1010737c:	d8c03215 	stw	r3,200(sp)
10107380:	88813426 	beq	r17,r2,10107854 <___svfprintf_internal_r+0x1ee8>
10107384:	d8c03217 	ldw	r3,200(sp)
10107388:	d9003317 	ldw	r4,204(sp)
1010738c:	19012516 	blt	r3,r4,10107824 <___svfprintf_internal_r+0x1eb8>
10107390:	9480004c 	andi	r18,r18,1
10107394:	9001841e 	bne	r18,zero,101079a8 <___svfprintf_internal_r+0x203c>
10107398:	1805883a 	mov	r2,r3
1010739c:	1801cc16 	blt	r3,zero,10107ad0 <___svfprintf_internal_r+0x2164>
101073a0:	d8c03217 	ldw	r3,200(sp)
101073a4:	044019c4 	movi	r17,103
101073a8:	d8c02e15 	stw	r3,184(sp)
101073ac:	df002a07 	ldb	fp,168(sp)
101073b0:	e000a61e 	bne	fp,zero,1010764c <___svfprintf_internal_r+0x1ce0>
101073b4:	df002783 	ldbu	fp,158(sp)
101073b8:	d8802a15 	stw	r2,168(sp)
101073bc:	dc802b17 	ldw	r18,172(sp)
101073c0:	d8002915 	stw	zero,164(sp)
101073c4:	003b1706 	br	10106024 <_gp+0xfffe4850>
101073c8:	04040474 	movhi	r16,4113
101073cc:	841e6f04 	addi	r16,r16,31164
101073d0:	003aa606 	br	10105e6c <_gp+0xfffe4698>
101073d4:	d9003917 	ldw	r4,228(sp)
101073d8:	04001004 	movi	r16,64
101073dc:	800b883a 	mov	r5,r16
101073e0:	01049200 	call	10104920 <_malloc_r>
101073e4:	d9002c17 	ldw	r4,176(sp)
101073e8:	20800015 	stw	r2,0(r4)
101073ec:	20800415 	stw	r2,16(r4)
101073f0:	1001cb26 	beq	r2,zero,10107b20 <___svfprintf_internal_r+0x21b4>
101073f4:	d8802c17 	ldw	r2,176(sp)
101073f8:	14000515 	stw	r16,20(r2)
101073fc:	00397606 	br	101059d8 <_gp+0xfffe4204>
10107400:	04040474 	movhi	r16,4113
10107404:	841e7104 	addi	r16,r16,31172
10107408:	003ee106 	br	10106f90 <_gp+0xfffe57bc>
1010740c:	d9402c17 	ldw	r5,176(sp)
10107410:	d9801e04 	addi	r6,sp,120
10107414:	9809883a 	mov	r4,r19
10107418:	010df7c0 	call	1010df7c <__ssprint_r>
1010741c:	103a381e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10107420:	dc402617 	ldw	r17,152(sp)
10107424:	d8c02017 	ldw	r3,128(sp)
10107428:	da000404 	addi	r8,sp,16
1010742c:	003f4306 	br	1010713c <_gp+0xfffe5968>
10107430:	01400184 	movi	r5,6
10107434:	d9402915 	stw	r5,164(sp)
10107438:	003f9506 	br	10107290 <_gp+0xfffe5abc>
1010743c:	d9002d17 	ldw	r4,180(sp)
10107440:	25000017 	ldw	r20,0(r4)
10107444:	21000104 	addi	r4,r4,4
10107448:	d9002d15 	stw	r4,180(sp)
1010744c:	a02dd7fa 	srai	r22,r20,31
10107450:	b005883a 	mov	r2,r22
10107454:	003a9b06 	br	10105ec4 <_gp+0xfffe46f0>
10107458:	d9402d17 	ldw	r5,180(sp)
1010745c:	002d883a 	mov	r22,zero
10107460:	2d000017 	ldw	r20,0(r5)
10107464:	29400104 	addi	r5,r5,4
10107468:	d9402d15 	stw	r5,180(sp)
1010746c:	003bf906 	br	10106454 <_gp+0xfffe4c80>
10107470:	9480100c 	andi	r18,r18,64
10107474:	90006e26 	beq	r18,zero,10107630 <___svfprintf_internal_r+0x1cc4>
10107478:	d9002d17 	ldw	r4,180(sp)
1010747c:	d9402f17 	ldw	r5,188(sp)
10107480:	20800017 	ldw	r2,0(r4)
10107484:	21000104 	addi	r4,r4,4
10107488:	d9002d15 	stw	r4,180(sp)
1010748c:	1140000d 	sth	r5,0(r2)
10107490:	00396106 	br	10105a18 <_gp+0xfffe4244>
10107494:	d9402c17 	ldw	r5,176(sp)
10107498:	d9801e04 	addi	r6,sp,120
1010749c:	9809883a 	mov	r4,r19
101074a0:	010df7c0 	call	1010df7c <__ssprint_r>
101074a4:	103a161e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
101074a8:	d8c02017 	ldw	r3,128(sp)
101074ac:	d8801f17 	ldw	r2,124(sp)
101074b0:	da000404 	addi	r8,sp,16
101074b4:	d9403317 	ldw	r5,204(sp)
101074b8:	10800044 	addi	r2,r2,1
101074bc:	44000015 	stw	r16,0(r8)
101074c0:	28c7883a 	add	r3,r5,r3
101074c4:	003b7706 	br	101062a4 <_gp+0xfffe4ad0>
101074c8:	8009883a 	mov	r4,r16
101074cc:	da003e15 	stw	r8,248(sp)
101074d0:	01058d40 	call	101058d4 <strlen>
101074d4:	d8802e15 	stw	r2,184(sp)
101074d8:	da003e17 	ldw	r8,248(sp)
101074dc:	103c280e 	bge	r2,zero,10106580 <_gp+0xfffe4dac>
101074e0:	0005883a 	mov	r2,zero
101074e4:	003c2606 	br	10106580 <_gp+0xfffe4dac>
101074e8:	00bfffc4 	movi	r2,-1
101074ec:	003a0906 	br	10105d14 <_gp+0xfffe4540>
101074f0:	01040474 	movhi	r4,4113
101074f4:	211e8384 	addi	r4,r4,31246
101074f8:	d9003515 	stw	r4,212(sp)
101074fc:	003b0606 	br	10106118 <_gp+0xfffe4944>
10107500:	013fffc4 	movi	r4,-1
10107504:	003a2706 	br	10105da4 <_gp+0xfffe45d0>
10107508:	d9402c17 	ldw	r5,176(sp)
1010750c:	d9801e04 	addi	r6,sp,120
10107510:	9809883a 	mov	r4,r19
10107514:	010df7c0 	call	1010df7c <__ssprint_r>
10107518:	1039f91e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
1010751c:	d8c02017 	ldw	r3,128(sp)
10107520:	da000404 	addi	r8,sp,16
10107524:	003d8406 	br	10106b38 <_gp+0xfffe5364>
10107528:	0023883a 	mov	r17,zero
1010752c:	003d8306 	br	10106b3c <_gp+0xfffe5368>
10107530:	01040474 	movhi	r4,4113
10107534:	211e7f84 	addi	r4,r4,31230
10107538:	d9002b15 	stw	r4,172(sp)
1010753c:	d9002b17 	ldw	r4,172(sp)
10107540:	1c47883a 	add	r3,r3,r17
10107544:	10800044 	addi	r2,r2,1
10107548:	41000015 	stw	r4,0(r8)
1010754c:	44400115 	stw	r17,4(r8)
10107550:	d8c02015 	stw	r3,128(sp)
10107554:	d8801f15 	stw	r2,124(sp)
10107558:	010001c4 	movi	r4,7
1010755c:	20bfcd16 	blt	r4,r2,10107494 <_gp+0xfffe5cc0>
10107560:	42000204 	addi	r8,r8,8
10107564:	003fd306 	br	101074b4 <_gp+0xfffe5ce0>
10107568:	d9402c17 	ldw	r5,176(sp)
1010756c:	d9801e04 	addi	r6,sp,120
10107570:	9809883a 	mov	r4,r19
10107574:	010df7c0 	call	1010df7c <__ssprint_r>
10107578:	1039e11e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
1010757c:	d8802617 	ldw	r2,152(sp)
10107580:	d8c02017 	ldw	r3,128(sp)
10107584:	da000404 	addi	r8,sp,16
10107588:	003e1c06 	br	10106dfc <_gp+0xfffe5628>
1010758c:	d8802917 	ldw	r2,164(sp)
10107590:	00c00184 	movi	r3,6
10107594:	1880012e 	bgeu	r3,r2,1010759c <___svfprintf_internal_r+0x1c30>
10107598:	1805883a 	mov	r2,r3
1010759c:	d8802e15 	stw	r2,184(sp)
101075a0:	1000f316 	blt	r2,zero,10107970 <___svfprintf_internal_r+0x2004>
101075a4:	04040474 	movhi	r16,4113
101075a8:	d8802a15 	stw	r2,168(sp)
101075ac:	dd002d15 	stw	r20,180(sp)
101075b0:	d8002915 	stw	zero,164(sp)
101075b4:	d8003215 	stw	zero,200(sp)
101075b8:	841e7d04 	addi	r16,r16,31220
101075bc:	0039883a 	mov	fp,zero
101075c0:	003a9f06 	br	10106040 <_gp+0xfffe486c>
101075c4:	01040474 	movhi	r4,4113
101075c8:	211e8384 	addi	r4,r4,31246
101075cc:	d9003515 	stw	r4,212(sp)
101075d0:	003b5f06 	br	10106350 <_gp+0xfffe4b7c>
101075d4:	d9402c17 	ldw	r5,176(sp)
101075d8:	d9801e04 	addi	r6,sp,120
101075dc:	9809883a 	mov	r4,r19
101075e0:	010df7c0 	call	1010df7c <__ssprint_r>
101075e4:	1039c61e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
101075e8:	d8802617 	ldw	r2,152(sp)
101075ec:	d9403317 	ldw	r5,204(sp)
101075f0:	d8c02017 	ldw	r3,128(sp)
101075f4:	da000404 	addi	r8,sp,16
101075f8:	2885c83a 	sub	r2,r5,r2
101075fc:	003e1006 	br	10106e40 <_gp+0xfffe566c>
10107600:	00800044 	movi	r2,1
10107604:	10803fcc 	andi	r2,r2,255
10107608:	00c00044 	movi	r3,1
1010760c:	10fa3526 	beq	r2,r3,10105ee4 <_gp+0xfffe4710>
10107610:	00c00084 	movi	r3,2
10107614:	10fb9e26 	beq	r2,r3,10106490 <_gp+0xfffe4cbc>
10107618:	003a6406 	br	10105fac <_gp+0xfffe47d8>
1010761c:	0021883a 	mov	r16,zero
10107620:	003e0806 	br	10106e44 <_gp+0xfffe5670>
10107624:	07000b44 	movi	fp,45
10107628:	df002785 	stb	fp,158(sp)
1010762c:	003a0b06 	br	10105e5c <_gp+0xfffe4688>
10107630:	d8c02d17 	ldw	r3,180(sp)
10107634:	d9002f17 	ldw	r4,188(sp)
10107638:	18800017 	ldw	r2,0(r3)
1010763c:	18c00104 	addi	r3,r3,4
10107640:	d8c02d15 	stw	r3,180(sp)
10107644:	11000015 	stw	r4,0(r2)
10107648:	0038f306 	br	10105a18 <_gp+0xfffe4244>
1010764c:	00c00b44 	movi	r3,45
10107650:	d8c02785 	stb	r3,158(sp)
10107654:	d8802a15 	stw	r2,168(sp)
10107658:	dc802b17 	ldw	r18,172(sp)
1010765c:	d8002915 	stw	zero,164(sp)
10107660:	07000b44 	movi	fp,45
10107664:	003a7306 	br	10106034 <_gp+0xfffe4860>
10107668:	9080004c 	andi	r2,r18,1
1010766c:	1000941e 	bne	r2,zero,101078c0 <___svfprintf_internal_r+0x1f54>
10107670:	d8802117 	ldw	r2,132(sp)
10107674:	1405c83a 	sub	r2,r2,r16
10107678:	d8803315 	stw	r2,204(sp)
1010767c:	b441161e 	bne	r22,r17,10107ad8 <___svfprintf_internal_r+0x216c>
10107680:	dd802617 	ldw	r22,152(sp)
10107684:	00bfff44 	movi	r2,-3
10107688:	b0801a16 	blt	r22,r2,101076f4 <___svfprintf_internal_r+0x1d88>
1010768c:	d9402917 	ldw	r5,164(sp)
10107690:	2d801816 	blt	r5,r22,101076f4 <___svfprintf_internal_r+0x1d88>
10107694:	dd803215 	stw	r22,200(sp)
10107698:	003f3a06 	br	10107384 <_gp+0xfffe5bb0>
1010769c:	1025883a 	mov	r18,r2
101076a0:	0039883a 	mov	fp,zero
101076a4:	00800084 	movi	r2,2
101076a8:	003fd606 	br	10107604 <_gp+0xfffe5e30>
101076ac:	9080004c 	andi	r2,r18,1
101076b0:	103f191e 	bne	r2,zero,10107318 <_gp+0xfffe5b44>
101076b4:	d8802117 	ldw	r2,132(sp)
101076b8:	003f2806 	br	1010735c <_gp+0xfffe5b88>
101076bc:	01040474 	movhi	r4,4113
101076c0:	211e7f84 	addi	r4,r4,31230
101076c4:	d9002b15 	stw	r4,172(sp)
101076c8:	003c7c06 	br	101068bc <_gp+0xfffe50e8>
101076cc:	e005883a 	mov	r2,fp
101076d0:	003f2206 	br	1010735c <_gp+0xfffe5b88>
101076d4:	d9402917 	ldw	r5,164(sp)
101076d8:	df002783 	ldbu	fp,158(sp)
101076dc:	dd002d15 	stw	r20,180(sp)
101076e0:	d9402a15 	stw	r5,168(sp)
101076e4:	d9402e15 	stw	r5,184(sp)
101076e8:	d8002915 	stw	zero,164(sp)
101076ec:	d8003215 	stw	zero,200(sp)
101076f0:	003a4c06 	br	10106024 <_gp+0xfffe4850>
101076f4:	8c7fff84 	addi	r17,r17,-2
101076f8:	b5bfffc4 	addi	r22,r22,-1
101076fc:	dd802615 	stw	r22,152(sp)
10107700:	dc4022c5 	stb	r17,139(sp)
10107704:	b000c316 	blt	r22,zero,10107a14 <___svfprintf_internal_r+0x20a8>
10107708:	00800ac4 	movi	r2,43
1010770c:	d8802305 	stb	r2,140(sp)
10107710:	00800244 	movi	r2,9
10107714:	15806e16 	blt	r2,r22,101078d0 <___svfprintf_internal_r+0x1f64>
10107718:	00800c04 	movi	r2,48
1010771c:	b5800c04 	addi	r22,r22,48
10107720:	d8802345 	stb	r2,141(sp)
10107724:	dd802385 	stb	r22,142(sp)
10107728:	d88023c4 	addi	r2,sp,143
1010772c:	df0022c4 	addi	fp,sp,139
10107730:	d8c03317 	ldw	r3,204(sp)
10107734:	1739c83a 	sub	fp,r2,fp
10107738:	d9003317 	ldw	r4,204(sp)
1010773c:	e0c7883a 	add	r3,fp,r3
10107740:	df003b15 	stw	fp,236(sp)
10107744:	d8c02e15 	stw	r3,184(sp)
10107748:	00800044 	movi	r2,1
1010774c:	1100b70e 	bge	r2,r4,10107a2c <___svfprintf_internal_r+0x20c0>
10107750:	d8c02e17 	ldw	r3,184(sp)
10107754:	18c00044 	addi	r3,r3,1
10107758:	d8c02e15 	stw	r3,184(sp)
1010775c:	1805883a 	mov	r2,r3
10107760:	1800b016 	blt	r3,zero,10107a24 <___svfprintf_internal_r+0x20b8>
10107764:	d8003215 	stw	zero,200(sp)
10107768:	003f1006 	br	101073ac <_gp+0xfffe5bd8>
1010776c:	d8802917 	ldw	r2,164(sp)
10107770:	103ec71e 	bne	r2,zero,10107290 <_gp+0xfffe5abc>
10107774:	dc002915 	stw	r16,164(sp)
10107778:	003ec506 	br	10107290 <_gp+0xfffe5abc>
1010777c:	d9402c17 	ldw	r5,176(sp)
10107780:	d9801e04 	addi	r6,sp,120
10107784:	9809883a 	mov	r4,r19
10107788:	010df7c0 	call	1010df7c <__ssprint_r>
1010778c:	10395c1e 	bne	r2,zero,10105d00 <_gp+0xfffe452c>
10107790:	dc402617 	ldw	r17,152(sp)
10107794:	d8c02017 	ldw	r3,128(sp)
10107798:	d8801f17 	ldw	r2,124(sp)
1010779c:	da000404 	addi	r8,sp,16
101077a0:	003e7706 	br	10107180 <_gp+0xfffe59ac>
101077a4:	582f883a 	mov	r23,r11
101077a8:	d8002915 	stw	zero,164(sp)
101077ac:	0038c406 	br	10105ac0 <_gp+0xfffe42ec>
101077b0:	d8c02917 	ldw	r3,164(sp)
101077b4:	d8802104 	addi	r2,sp,132
101077b8:	d8800315 	stw	r2,12(sp)
101077bc:	d9403617 	ldw	r5,216(sp)
101077c0:	d8802504 	addi	r2,sp,148
101077c4:	d8800215 	stw	r2,8(sp)
101077c8:	d8802604 	addi	r2,sp,152
101077cc:	d8c00015 	stw	r3,0(sp)
101077d0:	9809883a 	mov	r4,r19
101077d4:	d8800115 	stw	r2,4(sp)
101077d8:	01c000c4 	movi	r7,3
101077dc:	a00d883a 	mov	r6,r20
101077e0:	da003e15 	stw	r8,248(sp)
101077e4:	010a29c0 	call	1010a29c <_dtoa_r>
101077e8:	d9002917 	ldw	r4,164(sp)
101077ec:	da003e17 	ldw	r8,248(sp)
101077f0:	1021883a 	mov	r16,r2
101077f4:	1139883a 	add	fp,r2,r4
101077f8:	2007883a 	mov	r3,r4
101077fc:	81000007 	ldb	r4,0(r16)
10107800:	00800c04 	movi	r2,48
10107804:	20806f26 	beq	r4,r2,101079c4 <___svfprintf_internal_r+0x2058>
10107808:	d8c02617 	ldw	r3,152(sp)
1010780c:	e0f9883a 	add	fp,fp,r3
10107810:	003ec206 	br	1010731c <_gp+0xfffe5b48>
10107814:	00c00b44 	movi	r3,45
10107818:	2520003c 	xorhi	r20,r4,32768
1010781c:	d8c02a05 	stb	r3,168(sp)
10107820:	003ea106 	br	101072a8 <_gp+0xfffe5ad4>
10107824:	d8c03217 	ldw	r3,200(sp)
10107828:	00c0890e 	bge	zero,r3,10107a50 <___svfprintf_internal_r+0x20e4>
1010782c:	00800044 	movi	r2,1
10107830:	d9003317 	ldw	r4,204(sp)
10107834:	1105883a 	add	r2,r2,r4
10107838:	d8802e15 	stw	r2,184(sp)
1010783c:	10005f16 	blt	r2,zero,101079bc <___svfprintf_internal_r+0x2050>
10107840:	044019c4 	movi	r17,103
10107844:	003ed906 	br	101073ac <_gp+0xfffe5bd8>
10107848:	d9002917 	ldw	r4,164(sp)
1010784c:	20c00044 	addi	r3,r4,1
10107850:	003e9c06 	br	101072c4 <_gp+0xfffe5af0>
10107854:	d9002917 	ldw	r4,164(sp)
10107858:	00c0680e 	bge	zero,r3,101079fc <___svfprintf_internal_r+0x2090>
1010785c:	2000461e 	bne	r4,zero,10107978 <___svfprintf_internal_r+0x200c>
10107860:	9480004c 	andi	r18,r18,1
10107864:	9000441e 	bne	r18,zero,10107978 <___svfprintf_internal_r+0x200c>
10107868:	1805883a 	mov	r2,r3
1010786c:	1800a016 	blt	r3,zero,10107af0 <___svfprintf_internal_r+0x2184>
10107870:	d8c03217 	ldw	r3,200(sp)
10107874:	d8c02e15 	stw	r3,184(sp)
10107878:	003ecc06 	br	101073ac <_gp+0xfffe5bd8>
1010787c:	d9402917 	ldw	r5,164(sp)
10107880:	d8802104 	addi	r2,sp,132
10107884:	d8800315 	stw	r2,12(sp)
10107888:	d9400015 	stw	r5,0(sp)
1010788c:	d8802504 	addi	r2,sp,148
10107890:	d9403617 	ldw	r5,216(sp)
10107894:	d8800215 	stw	r2,8(sp)
10107898:	d8802604 	addi	r2,sp,152
1010789c:	d8800115 	stw	r2,4(sp)
101078a0:	01c000c4 	movi	r7,3
101078a4:	a00d883a 	mov	r6,r20
101078a8:	9809883a 	mov	r4,r19
101078ac:	da003e15 	stw	r8,248(sp)
101078b0:	010a29c0 	call	1010a29c <_dtoa_r>
101078b4:	d8c02917 	ldw	r3,164(sp)
101078b8:	da003e17 	ldw	r8,248(sp)
101078bc:	1021883a 	mov	r16,r2
101078c0:	00801184 	movi	r2,70
101078c4:	80f9883a 	add	fp,r16,r3
101078c8:	88bfcc26 	beq	r17,r2,101077fc <_gp+0xfffe6028>
101078cc:	003e9306 	br	1010731c <_gp+0xfffe5b48>
101078d0:	df0022c4 	addi	fp,sp,139
101078d4:	dc002915 	stw	r16,164(sp)
101078d8:	9829883a 	mov	r20,r19
101078dc:	e021883a 	mov	r16,fp
101078e0:	4027883a 	mov	r19,r8
101078e4:	b009883a 	mov	r4,r22
101078e8:	01400284 	movi	r5,10
101078ec:	01031200 	call	10103120 <__modsi3>
101078f0:	10800c04 	addi	r2,r2,48
101078f4:	843fffc4 	addi	r16,r16,-1
101078f8:	b009883a 	mov	r4,r22
101078fc:	01400284 	movi	r5,10
10107900:	80800005 	stb	r2,0(r16)
10107904:	010309c0 	call	1010309c <__divsi3>
10107908:	102d883a 	mov	r22,r2
1010790c:	00800244 	movi	r2,9
10107910:	15bff416 	blt	r2,r22,101078e4 <_gp+0xfffe6110>
10107914:	9811883a 	mov	r8,r19
10107918:	b0800c04 	addi	r2,r22,48
1010791c:	a027883a 	mov	r19,r20
10107920:	8029883a 	mov	r20,r16
10107924:	a17fffc4 	addi	r5,r20,-1
10107928:	a0bfffc5 	stb	r2,-1(r20)
1010792c:	dc002917 	ldw	r16,164(sp)
10107930:	2f00752e 	bgeu	r5,fp,10107b08 <___svfprintf_internal_r+0x219c>
10107934:	d9c02384 	addi	r7,sp,142
10107938:	3d0fc83a 	sub	r7,r7,r20
1010793c:	d9002344 	addi	r4,sp,141
10107940:	e1cf883a 	add	r7,fp,r7
10107944:	00000106 	br	1010794c <___svfprintf_internal_r+0x1fe0>
10107948:	28800003 	ldbu	r2,0(r5)
1010794c:	20800005 	stb	r2,0(r4)
10107950:	21000044 	addi	r4,r4,1
10107954:	29400044 	addi	r5,r5,1
10107958:	21fffb1e 	bne	r4,r7,10107948 <_gp+0xfffe6174>
1010795c:	d8802304 	addi	r2,sp,140
10107960:	1505c83a 	sub	r2,r2,r20
10107964:	d8c02344 	addi	r3,sp,141
10107968:	1885883a 	add	r2,r3,r2
1010796c:	003f7006 	br	10107730 <_gp+0xfffe5f5c>
10107970:	0005883a 	mov	r2,zero
10107974:	003f0b06 	br	101075a4 <_gp+0xfffe5dd0>
10107978:	d9002917 	ldw	r4,164(sp)
1010797c:	d8c03217 	ldw	r3,200(sp)
10107980:	20800044 	addi	r2,r4,1
10107984:	1885883a 	add	r2,r3,r2
10107988:	d8802e15 	stw	r2,184(sp)
1010798c:	103e870e 	bge	r2,zero,101073ac <_gp+0xfffe5bd8>
10107990:	0005883a 	mov	r2,zero
10107994:	003e8506 	br	101073ac <_gp+0xfffe5bd8>
10107998:	01040474 	movhi	r4,4113
1010799c:	211e7f84 	addi	r4,r4,31230
101079a0:	d9002b15 	stw	r4,172(sp)
101079a4:	003cc506 	br	10106cbc <_gp+0xfffe54e8>
101079a8:	d8c03217 	ldw	r3,200(sp)
101079ac:	18c00044 	addi	r3,r3,1
101079b0:	d8c02e15 	stw	r3,184(sp)
101079b4:	1805883a 	mov	r2,r3
101079b8:	183fa10e 	bge	r3,zero,10107840 <_gp+0xfffe606c>
101079bc:	0005883a 	mov	r2,zero
101079c0:	003f9f06 	br	10107840 <_gp+0xfffe606c>
101079c4:	d9003617 	ldw	r4,216(sp)
101079c8:	000d883a 	mov	r6,zero
101079cc:	000f883a 	mov	r7,zero
101079d0:	a00b883a 	mov	r5,r20
101079d4:	d8c03d15 	stw	r3,244(sp)
101079d8:	da003e15 	stw	r8,248(sp)
101079dc:	0112c800 	call	10112c80 <__eqdf2>
101079e0:	d8c03d17 	ldw	r3,244(sp)
101079e4:	da003e17 	ldw	r8,248(sp)
101079e8:	103f8726 	beq	r2,zero,10107808 <_gp+0xfffe6034>
101079ec:	00800044 	movi	r2,1
101079f0:	10c7c83a 	sub	r3,r2,r3
101079f4:	d8c02615 	stw	r3,152(sp)
101079f8:	003f8406 	br	1010780c <_gp+0xfffe6038>
101079fc:	20000e1e 	bne	r4,zero,10107a38 <___svfprintf_internal_r+0x20cc>
10107a00:	9480004c 	andi	r18,r18,1
10107a04:	90000c1e 	bne	r18,zero,10107a38 <___svfprintf_internal_r+0x20cc>
10107a08:	00800044 	movi	r2,1
10107a0c:	d8802e15 	stw	r2,184(sp)
10107a10:	003e6606 	br	101073ac <_gp+0xfffe5bd8>
10107a14:	00800b44 	movi	r2,45
10107a18:	05adc83a 	sub	r22,zero,r22
10107a1c:	d8802305 	stb	r2,140(sp)
10107a20:	003f3b06 	br	10107710 <_gp+0xfffe5f3c>
10107a24:	0005883a 	mov	r2,zero
10107a28:	003f4e06 	br	10107764 <_gp+0xfffe5f90>
10107a2c:	90a4703a 	and	r18,r18,r2
10107a30:	903f4a26 	beq	r18,zero,1010775c <_gp+0xfffe5f88>
10107a34:	003f4606 	br	10107750 <_gp+0xfffe5f7c>
10107a38:	d8c02917 	ldw	r3,164(sp)
10107a3c:	18c00084 	addi	r3,r3,2
10107a40:	d8c02e15 	stw	r3,184(sp)
10107a44:	1805883a 	mov	r2,r3
10107a48:	183e580e 	bge	r3,zero,101073ac <_gp+0xfffe5bd8>
10107a4c:	003fd006 	br	10107990 <_gp+0xfffe61bc>
10107a50:	00800084 	movi	r2,2
10107a54:	10c5c83a 	sub	r2,r2,r3
10107a58:	003f7506 	br	10107830 <_gp+0xfffe605c>
10107a5c:	d8802d17 	ldw	r2,180(sp)
10107a60:	d9002d17 	ldw	r4,180(sp)
10107a64:	bc400043 	ldbu	r17,1(r23)
10107a68:	10800017 	ldw	r2,0(r2)
10107a6c:	582f883a 	mov	r23,r11
10107a70:	d8802915 	stw	r2,164(sp)
10107a74:	20800104 	addi	r2,r4,4
10107a78:	d9002917 	ldw	r4,164(sp)
10107a7c:	d8802d15 	stw	r2,180(sp)
10107a80:	203df00e 	bge	r4,zero,10107244 <_gp+0xfffe5a70>
10107a84:	8c403fcc 	andi	r17,r17,255
10107a88:	00bfffc4 	movi	r2,-1
10107a8c:	8c40201c 	xori	r17,r17,128
10107a90:	d8802915 	stw	r2,164(sp)
10107a94:	8c7fe004 	addi	r17,r17,-128
10107a98:	00380806 	br	10105abc <_gp+0xfffe42e8>
10107a9c:	9080004c 	andi	r2,r18,1
10107aa0:	0039883a 	mov	fp,zero
10107aa4:	10000726 	beq	r2,zero,10107ac4 <___svfprintf_internal_r+0x2158>
10107aa8:	d8c02817 	ldw	r3,160(sp)
10107aac:	dc001dc4 	addi	r16,sp,119
10107ab0:	00800c04 	movi	r2,48
10107ab4:	1c07c83a 	sub	r3,r3,r16
10107ab8:	d8801dc5 	stb	r2,119(sp)
10107abc:	d8c02e15 	stw	r3,184(sp)
10107ac0:	00395206 	br	1010600c <_gp+0xfffe4838>
10107ac4:	d8002e15 	stw	zero,184(sp)
10107ac8:	dc001e04 	addi	r16,sp,120
10107acc:	00394f06 	br	1010600c <_gp+0xfffe4838>
10107ad0:	0005883a 	mov	r2,zero
10107ad4:	003e3206 	br	101073a0 <_gp+0xfffe5bcc>
10107ad8:	dd802617 	ldw	r22,152(sp)
10107adc:	003f0606 	br	101076f8 <_gp+0xfffe5f24>
10107ae0:	d9c02785 	stb	r7,158(sp)
10107ae4:	003a5106 	br	1010642c <_gp+0xfffe4c58>
10107ae8:	d9c02785 	stb	r7,158(sp)
10107aec:	003a3706 	br	101063cc <_gp+0xfffe4bf8>
10107af0:	0005883a 	mov	r2,zero
10107af4:	003f5e06 	br	10107870 <_gp+0xfffe609c>
10107af8:	d9c02785 	stb	r7,158(sp)
10107afc:	00391706 	br	10105f5c <_gp+0xfffe4788>
10107b00:	d9c02785 	stb	r7,158(sp)
10107b04:	0038e606 	br	10105ea0 <_gp+0xfffe46cc>
10107b08:	d8802344 	addi	r2,sp,141
10107b0c:	003f0806 	br	10107730 <_gp+0xfffe5f5c>
10107b10:	d9c02785 	stb	r7,158(sp)
10107b14:	0038b706 	br	10105df4 <_gp+0xfffe4620>
10107b18:	d9c02785 	stb	r7,158(sp)
10107b1c:	003adc06 	br	10106690 <_gp+0xfffe4ebc>
10107b20:	d9403917 	ldw	r5,228(sp)
10107b24:	00800304 	movi	r2,12
10107b28:	28800015 	stw	r2,0(r5)
10107b2c:	00bfffc4 	movi	r2,-1
10107b30:	00387806 	br	10105d14 <_gp+0xfffe4540>
10107b34:	d9c02785 	stb	r7,158(sp)
10107b38:	003abf06 	br	10106638 <_gp+0xfffe4e64>
10107b3c:	d9c02785 	stb	r7,158(sp)
10107b40:	003a9b06 	br	101065b0 <_gp+0xfffe4ddc>

10107b44 <time>:
10107b44:	008404b4 	movhi	r2,4114
10107b48:	defffc04 	addi	sp,sp,-16
10107b4c:	10a5f604 	addi	r2,r2,-26664
10107b50:	dc000215 	stw	r16,8(sp)
10107b54:	2021883a 	mov	r16,r4
10107b58:	11000017 	ldw	r4,0(r2)
10107b5c:	000d883a 	mov	r6,zero
10107b60:	d80b883a 	mov	r5,sp
10107b64:	dfc00315 	stw	ra,12(sp)
10107b68:	010be8c0 	call	1010be8c <_gettimeofday_r>
10107b6c:	10000716 	blt	r2,zero,10107b8c <time+0x48>
10107b70:	d8800017 	ldw	r2,0(sp)
10107b74:	80000126 	beq	r16,zero,10107b7c <time+0x38>
10107b78:	80800015 	stw	r2,0(r16)
10107b7c:	dfc00317 	ldw	ra,12(sp)
10107b80:	dc000217 	ldw	r16,8(sp)
10107b84:	dec00404 	addi	sp,sp,16
10107b88:	f800283a 	ret
10107b8c:	00bfffc4 	movi	r2,-1
10107b90:	003ffa06 	br	10107b7c <_gp+0xfffe63a8>

10107b94 <_vfiprintf_r>:
10107b94:	deffff04 	addi	sp,sp,-4
10107b98:	dfc00015 	stw	ra,0(sp)
10107b9c:	010f49c0 	call	1010f49c <___vfiprintf_internal_r>
10107ba0:	dfc00017 	ldw	ra,0(sp)
10107ba4:	dec00104 	addi	sp,sp,4
10107ba8:	f800283a 	ret

10107bac <___vfprintf_internal_r>:
10107bac:	deffb804 	addi	sp,sp,-288
10107bb0:	dfc04715 	stw	ra,284(sp)
10107bb4:	ddc04515 	stw	r23,276(sp)
10107bb8:	dd404315 	stw	r21,268(sp)
10107bbc:	d9002c15 	stw	r4,176(sp)
10107bc0:	282f883a 	mov	r23,r5
10107bc4:	302b883a 	mov	r21,r6
10107bc8:	d9c02d15 	stw	r7,180(sp)
10107bcc:	df004615 	stw	fp,280(sp)
10107bd0:	dd804415 	stw	r22,272(sp)
10107bd4:	dd004215 	stw	r20,264(sp)
10107bd8:	dcc04115 	stw	r19,260(sp)
10107bdc:	dc804015 	stw	r18,256(sp)
10107be0:	dc403f15 	stw	r17,252(sp)
10107be4:	dc003e15 	stw	r16,248(sp)
10107be8:	010bfe80 	call	1010bfe8 <_localeconv_r>
10107bec:	10800017 	ldw	r2,0(r2)
10107bf0:	1009883a 	mov	r4,r2
10107bf4:	d8803415 	stw	r2,208(sp)
10107bf8:	01058d40 	call	101058d4 <strlen>
10107bfc:	d8803715 	stw	r2,220(sp)
10107c00:	d8802c17 	ldw	r2,176(sp)
10107c04:	10000226 	beq	r2,zero,10107c10 <___vfprintf_internal_r+0x64>
10107c08:	10800e17 	ldw	r2,56(r2)
10107c0c:	1000f926 	beq	r2,zero,10107ff4 <___vfprintf_internal_r+0x448>
10107c10:	b880030b 	ldhu	r2,12(r23)
10107c14:	10c8000c 	andi	r3,r2,8192
10107c18:	1800061e 	bne	r3,zero,10107c34 <___vfprintf_internal_r+0x88>
10107c1c:	b9001917 	ldw	r4,100(r23)
10107c20:	00f7ffc4 	movi	r3,-8193
10107c24:	10880014 	ori	r2,r2,8192
10107c28:	20c6703a 	and	r3,r4,r3
10107c2c:	b880030d 	sth	r2,12(r23)
10107c30:	b8c01915 	stw	r3,100(r23)
10107c34:	10c0020c 	andi	r3,r2,8
10107c38:	1800c126 	beq	r3,zero,10107f40 <___vfprintf_internal_r+0x394>
10107c3c:	b8c00417 	ldw	r3,16(r23)
10107c40:	1800bf26 	beq	r3,zero,10107f40 <___vfprintf_internal_r+0x394>
10107c44:	1080068c 	andi	r2,r2,26
10107c48:	00c00284 	movi	r3,10
10107c4c:	10c0c426 	beq	r2,r3,10107f60 <___vfprintf_internal_r+0x3b4>
10107c50:	d8c00404 	addi	r3,sp,16
10107c54:	05040474 	movhi	r20,4113
10107c58:	d9001e04 	addi	r4,sp,120
10107c5c:	a51e8784 	addi	r20,r20,31262
10107c60:	d8c01e15 	stw	r3,120(sp)
10107c64:	d8002015 	stw	zero,128(sp)
10107c68:	d8001f15 	stw	zero,124(sp)
10107c6c:	d8003315 	stw	zero,204(sp)
10107c70:	d8003615 	stw	zero,216(sp)
10107c74:	d8003815 	stw	zero,224(sp)
10107c78:	1811883a 	mov	r8,r3
10107c7c:	d8003915 	stw	zero,228(sp)
10107c80:	d8003a15 	stw	zero,232(sp)
10107c84:	d8002f15 	stw	zero,188(sp)
10107c88:	d9002815 	stw	r4,160(sp)
10107c8c:	a8800007 	ldb	r2,0(r21)
10107c90:	10027b26 	beq	r2,zero,10108680 <___vfprintf_internal_r+0xad4>
10107c94:	00c00944 	movi	r3,37
10107c98:	a821883a 	mov	r16,r21
10107c9c:	10c0021e 	bne	r2,r3,10107ca8 <___vfprintf_internal_r+0xfc>
10107ca0:	00001406 	br	10107cf4 <___vfprintf_internal_r+0x148>
10107ca4:	10c00326 	beq	r2,r3,10107cb4 <___vfprintf_internal_r+0x108>
10107ca8:	84000044 	addi	r16,r16,1
10107cac:	80800007 	ldb	r2,0(r16)
10107cb0:	103ffc1e 	bne	r2,zero,10107ca4 <_gp+0xfffe64d0>
10107cb4:	8563c83a 	sub	r17,r16,r21
10107cb8:	88000e26 	beq	r17,zero,10107cf4 <___vfprintf_internal_r+0x148>
10107cbc:	d8c02017 	ldw	r3,128(sp)
10107cc0:	d8801f17 	ldw	r2,124(sp)
10107cc4:	45400015 	stw	r21,0(r8)
10107cc8:	1c47883a 	add	r3,r3,r17
10107ccc:	10800044 	addi	r2,r2,1
10107cd0:	d8c02015 	stw	r3,128(sp)
10107cd4:	44400115 	stw	r17,4(r8)
10107cd8:	d8801f15 	stw	r2,124(sp)
10107cdc:	00c001c4 	movi	r3,7
10107ce0:	1880a716 	blt	r3,r2,10107f80 <___vfprintf_internal_r+0x3d4>
10107ce4:	42000204 	addi	r8,r8,8
10107ce8:	d9402f17 	ldw	r5,188(sp)
10107cec:	2c4b883a 	add	r5,r5,r17
10107cf0:	d9402f15 	stw	r5,188(sp)
10107cf4:	80800007 	ldb	r2,0(r16)
10107cf8:	1000a826 	beq	r2,zero,10107f9c <___vfprintf_internal_r+0x3f0>
10107cfc:	84400047 	ldb	r17,1(r16)
10107d00:	00bfffc4 	movi	r2,-1
10107d04:	85400044 	addi	r21,r16,1
10107d08:	d8002785 	stb	zero,158(sp)
10107d0c:	0007883a 	mov	r3,zero
10107d10:	000f883a 	mov	r7,zero
10107d14:	d8802915 	stw	r2,164(sp)
10107d18:	d8003115 	stw	zero,196(sp)
10107d1c:	0025883a 	mov	r18,zero
10107d20:	01401604 	movi	r5,88
10107d24:	01800244 	movi	r6,9
10107d28:	02800a84 	movi	r10,42
10107d2c:	02401b04 	movi	r9,108
10107d30:	ad400044 	addi	r21,r21,1
10107d34:	88bff804 	addi	r2,r17,-32
10107d38:	28830436 	bltu	r5,r2,1010894c <___vfprintf_internal_r+0xda0>
10107d3c:	100490ba 	slli	r2,r2,2
10107d40:	01040434 	movhi	r4,4112
10107d44:	211f5504 	addi	r4,r4,32084
10107d48:	1105883a 	add	r2,r2,r4
10107d4c:	10800017 	ldw	r2,0(r2)
10107d50:	1000683a 	jmp	r2
10107d54:	1010886c 	andhi	zero,r2,16929
10107d58:	1010894c 	andi	zero,r2,16933
10107d5c:	1010894c 	andi	zero,r2,16933
10107d60:	1010888c 	andi	zero,r2,16930
10107d64:	1010894c 	andi	zero,r2,16933
10107d68:	1010894c 	andi	zero,r2,16933
10107d6c:	1010894c 	andi	zero,r2,16933
10107d70:	1010894c 	andi	zero,r2,16933
10107d74:	1010894c 	andi	zero,r2,16933
10107d78:	1010894c 	andi	zero,r2,16933
10107d7c:	10108000 	call	11010800 <_gp+0xeef02c>
10107d80:	101087a8 	cmpgeui	zero,r2,16926
10107d84:	1010894c 	andi	zero,r2,16933
10107d88:	10107ec8 	cmpgei	zero,r2,16891
10107d8c:	10108028 	cmpgeui	zero,r2,16896
10107d90:	1010894c 	andi	zero,r2,16933
10107d94:	10108068 	cmpgeui	zero,r2,16897
10107d98:	10108074 	orhi	zero,r2,16897
10107d9c:	10108074 	orhi	zero,r2,16897
10107da0:	10108074 	orhi	zero,r2,16897
10107da4:	10108074 	orhi	zero,r2,16897
10107da8:	10108074 	orhi	zero,r2,16897
10107dac:	10108074 	orhi	zero,r2,16897
10107db0:	10108074 	orhi	zero,r2,16897
10107db4:	10108074 	orhi	zero,r2,16897
10107db8:	10108074 	orhi	zero,r2,16897
10107dbc:	1010894c 	andi	zero,r2,16933
10107dc0:	1010894c 	andi	zero,r2,16933
10107dc4:	1010894c 	andi	zero,r2,16933
10107dc8:	1010894c 	andi	zero,r2,16933
10107dcc:	1010894c 	andi	zero,r2,16933
10107dd0:	1010894c 	andi	zero,r2,16933
10107dd4:	1010894c 	andi	zero,r2,16933
10107dd8:	1010894c 	andi	zero,r2,16933
10107ddc:	1010894c 	andi	zero,r2,16933
10107de0:	1010894c 	andi	zero,r2,16933
10107de4:	101080a8 	cmpgeui	zero,r2,16898
10107de8:	10108164 	muli	zero,r2,16901
10107dec:	1010894c 	andi	zero,r2,16933
10107df0:	10108164 	muli	zero,r2,16901
10107df4:	1010894c 	andi	zero,r2,16933
10107df8:	1010894c 	andi	zero,r2,16933
10107dfc:	1010894c 	andi	zero,r2,16933
10107e00:	1010894c 	andi	zero,r2,16933
10107e04:	10108204 	addi	zero,r2,16904
10107e08:	1010894c 	andi	zero,r2,16933
10107e0c:	1010894c 	andi	zero,r2,16933
10107e10:	10108210 	cmplti	zero,r2,16904
10107e14:	1010894c 	andi	zero,r2,16933
10107e18:	1010894c 	andi	zero,r2,16933
10107e1c:	1010894c 	andi	zero,r2,16933
10107e20:	1010894c 	andi	zero,r2,16933
10107e24:	1010894c 	andi	zero,r2,16933
10107e28:	10108688 	cmpgei	zero,r2,16922
10107e2c:	1010894c 	andi	zero,r2,16933
10107e30:	1010894c 	andi	zero,r2,16933
10107e34:	101086e8 	cmpgeui	zero,r2,16923
10107e38:	1010894c 	andi	zero,r2,16933
10107e3c:	1010894c 	andi	zero,r2,16933
10107e40:	1010894c 	andi	zero,r2,16933
10107e44:	1010894c 	andi	zero,r2,16933
10107e48:	1010894c 	andi	zero,r2,16933
10107e4c:	1010894c 	andi	zero,r2,16933
10107e50:	1010894c 	andi	zero,r2,16933
10107e54:	1010894c 	andi	zero,r2,16933
10107e58:	1010894c 	andi	zero,r2,16933
10107e5c:	1010894c 	andi	zero,r2,16933
10107e60:	101088f8 	rdprs	zero,r2,16931
10107e64:	10108898 	cmpnei	zero,r2,16930
10107e68:	10108164 	muli	zero,r2,16901
10107e6c:	10108164 	muli	zero,r2,16901
10107e70:	10108164 	muli	zero,r2,16901
10107e74:	101088a8 	cmpgeui	zero,r2,16930
10107e78:	10108898 	cmpnei	zero,r2,16930
10107e7c:	1010894c 	andi	zero,r2,16933
10107e80:	1010894c 	andi	zero,r2,16933
10107e84:	101088b4 	orhi	zero,r2,16930
10107e88:	1010894c 	andi	zero,r2,16933
10107e8c:	101088c4 	addi	zero,r2,16931
10107e90:	10108798 	cmpnei	zero,r2,16926
10107e94:	10107ed4 	ori	zero,r2,16891
10107e98:	101087b8 	rdprs	zero,r2,16926
10107e9c:	1010894c 	andi	zero,r2,16933
10107ea0:	101087c4 	addi	zero,r2,16927
10107ea4:	1010894c 	andi	zero,r2,16933
10107ea8:	10108820 	cmpeqi	zero,r2,16928
10107eac:	1010894c 	andi	zero,r2,16933
10107eb0:	1010894c 	andi	zero,r2,16933
10107eb4:	10108830 	cmpltui	zero,r2,16928
10107eb8:	d9003117 	ldw	r4,196(sp)
10107ebc:	d8802d15 	stw	r2,180(sp)
10107ec0:	0109c83a 	sub	r4,zero,r4
10107ec4:	d9003115 	stw	r4,196(sp)
10107ec8:	94800114 	ori	r18,r18,4
10107ecc:	ac400007 	ldb	r17,0(r21)
10107ed0:	003f9706 	br	10107d30 <_gp+0xfffe655c>
10107ed4:	00800c04 	movi	r2,48
10107ed8:	d9002d17 	ldw	r4,180(sp)
10107edc:	d9402917 	ldw	r5,164(sp)
10107ee0:	d8802705 	stb	r2,156(sp)
10107ee4:	00801e04 	movi	r2,120
10107ee8:	d8802745 	stb	r2,157(sp)
10107eec:	d8002785 	stb	zero,158(sp)
10107ef0:	20c00104 	addi	r3,r4,4
10107ef4:	24c00017 	ldw	r19,0(r4)
10107ef8:	002d883a 	mov	r22,zero
10107efc:	90800094 	ori	r2,r18,2
10107f00:	28029a16 	blt	r5,zero,1010896c <___vfprintf_internal_r+0xdc0>
10107f04:	00bfdfc4 	movi	r2,-129
10107f08:	90a4703a 	and	r18,r18,r2
10107f0c:	d8c02d15 	stw	r3,180(sp)
10107f10:	94800094 	ori	r18,r18,2
10107f14:	9802871e 	bne	r19,zero,10108934 <___vfprintf_internal_r+0xd88>
10107f18:	00840474 	movhi	r2,4113
10107f1c:	109e7804 	addi	r2,r2,31200
10107f20:	d8803915 	stw	r2,228(sp)
10107f24:	04401e04 	movi	r17,120
10107f28:	d8802917 	ldw	r2,164(sp)
10107f2c:	0039883a 	mov	fp,zero
10107f30:	1001e926 	beq	r2,zero,101086d8 <___vfprintf_internal_r+0xb2c>
10107f34:	0027883a 	mov	r19,zero
10107f38:	002d883a 	mov	r22,zero
10107f3c:	00020506 	br	10108754 <___vfprintf_internal_r+0xba8>
10107f40:	d9002c17 	ldw	r4,176(sp)
10107f44:	b80b883a 	mov	r5,r23
10107f48:	0109edc0 	call	10109edc <__swsetup_r>
10107f4c:	1005ac1e 	bne	r2,zero,10109600 <___vfprintf_internal_r+0x1a54>
10107f50:	b880030b 	ldhu	r2,12(r23)
10107f54:	00c00284 	movi	r3,10
10107f58:	1080068c 	andi	r2,r2,26
10107f5c:	10ff3c1e 	bne	r2,r3,10107c50 <_gp+0xfffe647c>
10107f60:	b880038f 	ldh	r2,14(r23)
10107f64:	103f3a16 	blt	r2,zero,10107c50 <_gp+0xfffe647c>
10107f68:	d9c02d17 	ldw	r7,180(sp)
10107f6c:	d9002c17 	ldw	r4,176(sp)
10107f70:	a80d883a 	mov	r6,r21
10107f74:	b80b883a 	mov	r5,r23
10107f78:	0109dc00 	call	10109dc0 <__sbprintf>
10107f7c:	00001106 	br	10107fc4 <___vfprintf_internal_r+0x418>
10107f80:	d9002c17 	ldw	r4,176(sp)
10107f84:	d9801e04 	addi	r6,sp,120
10107f88:	b80b883a 	mov	r5,r23
10107f8c:	010f4840 	call	1010f484 <__sprint_r>
10107f90:	1000081e 	bne	r2,zero,10107fb4 <___vfprintf_internal_r+0x408>
10107f94:	da000404 	addi	r8,sp,16
10107f98:	003f5306 	br	10107ce8 <_gp+0xfffe6514>
10107f9c:	d8802017 	ldw	r2,128(sp)
10107fa0:	10000426 	beq	r2,zero,10107fb4 <___vfprintf_internal_r+0x408>
10107fa4:	d9002c17 	ldw	r4,176(sp)
10107fa8:	d9801e04 	addi	r6,sp,120
10107fac:	b80b883a 	mov	r5,r23
10107fb0:	010f4840 	call	1010f484 <__sprint_r>
10107fb4:	b880030b 	ldhu	r2,12(r23)
10107fb8:	1080100c 	andi	r2,r2,64
10107fbc:	1005901e 	bne	r2,zero,10109600 <___vfprintf_internal_r+0x1a54>
10107fc0:	d8802f17 	ldw	r2,188(sp)
10107fc4:	dfc04717 	ldw	ra,284(sp)
10107fc8:	df004617 	ldw	fp,280(sp)
10107fcc:	ddc04517 	ldw	r23,276(sp)
10107fd0:	dd804417 	ldw	r22,272(sp)
10107fd4:	dd404317 	ldw	r21,268(sp)
10107fd8:	dd004217 	ldw	r20,264(sp)
10107fdc:	dcc04117 	ldw	r19,260(sp)
10107fe0:	dc804017 	ldw	r18,256(sp)
10107fe4:	dc403f17 	ldw	r17,252(sp)
10107fe8:	dc003e17 	ldw	r16,248(sp)
10107fec:	dec04804 	addi	sp,sp,288
10107ff0:	f800283a 	ret
10107ff4:	d9002c17 	ldw	r4,176(sp)
10107ff8:	01039c80 	call	101039c8 <__sinit>
10107ffc:	003f0406 	br	10107c10 <_gp+0xfffe643c>
10108000:	d8802d17 	ldw	r2,180(sp)
10108004:	d9002d17 	ldw	r4,180(sp)
10108008:	10800017 	ldw	r2,0(r2)
1010800c:	d8803115 	stw	r2,196(sp)
10108010:	20800104 	addi	r2,r4,4
10108014:	d9003117 	ldw	r4,196(sp)
10108018:	203fa716 	blt	r4,zero,10107eb8 <_gp+0xfffe66e4>
1010801c:	d8802d15 	stw	r2,180(sp)
10108020:	ac400007 	ldb	r17,0(r21)
10108024:	003f4206 	br	10107d30 <_gp+0xfffe655c>
10108028:	ac400007 	ldb	r17,0(r21)
1010802c:	aac00044 	addi	r11,r21,1
10108030:	8a872826 	beq	r17,r10,10109cd4 <___vfprintf_internal_r+0x2128>
10108034:	88bff404 	addi	r2,r17,-48
10108038:	0009883a 	mov	r4,zero
1010803c:	30867d36 	bltu	r6,r2,10109a34 <___vfprintf_internal_r+0x1e88>
10108040:	5c400007 	ldb	r17,0(r11)
10108044:	210002a4 	muli	r4,r4,10
10108048:	5d400044 	addi	r21,r11,1
1010804c:	a817883a 	mov	r11,r21
10108050:	2089883a 	add	r4,r4,r2
10108054:	88bff404 	addi	r2,r17,-48
10108058:	30bff92e 	bgeu	r6,r2,10108040 <_gp+0xfffe686c>
1010805c:	2005c916 	blt	r4,zero,10109784 <___vfprintf_internal_r+0x1bd8>
10108060:	d9002915 	stw	r4,164(sp)
10108064:	003f3306 	br	10107d34 <_gp+0xfffe6560>
10108068:	94802014 	ori	r18,r18,128
1010806c:	ac400007 	ldb	r17,0(r21)
10108070:	003f2f06 	br	10107d30 <_gp+0xfffe655c>
10108074:	a809883a 	mov	r4,r21
10108078:	d8003115 	stw	zero,196(sp)
1010807c:	88bff404 	addi	r2,r17,-48
10108080:	0017883a 	mov	r11,zero
10108084:	24400007 	ldb	r17,0(r4)
10108088:	5ac002a4 	muli	r11,r11,10
1010808c:	ad400044 	addi	r21,r21,1
10108090:	a809883a 	mov	r4,r21
10108094:	12d7883a 	add	r11,r2,r11
10108098:	88bff404 	addi	r2,r17,-48
1010809c:	30bff92e 	bgeu	r6,r2,10108084 <_gp+0xfffe68b0>
101080a0:	dac03115 	stw	r11,196(sp)
101080a4:	003f2306 	br	10107d34 <_gp+0xfffe6560>
101080a8:	18c03fcc 	andi	r3,r3,255
101080ac:	18072b1e 	bne	r3,zero,10109d5c <___vfprintf_internal_r+0x21b0>
101080b0:	94800414 	ori	r18,r18,16
101080b4:	9080080c 	andi	r2,r18,32
101080b8:	10037b26 	beq	r2,zero,10108ea8 <___vfprintf_internal_r+0x12fc>
101080bc:	d9402d17 	ldw	r5,180(sp)
101080c0:	28800117 	ldw	r2,4(r5)
101080c4:	2cc00017 	ldw	r19,0(r5)
101080c8:	29400204 	addi	r5,r5,8
101080cc:	d9402d15 	stw	r5,180(sp)
101080d0:	102d883a 	mov	r22,r2
101080d4:	10044b16 	blt	r2,zero,10109204 <___vfprintf_internal_r+0x1658>
101080d8:	d9402917 	ldw	r5,164(sp)
101080dc:	df002783 	ldbu	fp,158(sp)
101080e0:	2803bc16 	blt	r5,zero,10108fd4 <___vfprintf_internal_r+0x1428>
101080e4:	00ffdfc4 	movi	r3,-129
101080e8:	9d84b03a 	or	r2,r19,r22
101080ec:	90e4703a 	and	r18,r18,r3
101080f0:	10017726 	beq	r2,zero,101086d0 <___vfprintf_internal_r+0xb24>
101080f4:	b0038326 	beq	r22,zero,10108f04 <___vfprintf_internal_r+0x1358>
101080f8:	dc402a15 	stw	r17,168(sp)
101080fc:	dc001e04 	addi	r16,sp,120
10108100:	b023883a 	mov	r17,r22
10108104:	402d883a 	mov	r22,r8
10108108:	9809883a 	mov	r4,r19
1010810c:	880b883a 	mov	r5,r17
10108110:	01800284 	movi	r6,10
10108114:	000f883a 	mov	r7,zero
10108118:	01115b40 	call	101115b4 <__umoddi3>
1010811c:	10800c04 	addi	r2,r2,48
10108120:	843fffc4 	addi	r16,r16,-1
10108124:	9809883a 	mov	r4,r19
10108128:	880b883a 	mov	r5,r17
1010812c:	80800005 	stb	r2,0(r16)
10108130:	01800284 	movi	r6,10
10108134:	000f883a 	mov	r7,zero
10108138:	011103c0 	call	1011103c <__udivdi3>
1010813c:	1027883a 	mov	r19,r2
10108140:	10c4b03a 	or	r2,r2,r3
10108144:	1823883a 	mov	r17,r3
10108148:	103fef1e 	bne	r2,zero,10108108 <_gp+0xfffe6934>
1010814c:	d8c02817 	ldw	r3,160(sp)
10108150:	dc402a17 	ldw	r17,168(sp)
10108154:	b011883a 	mov	r8,r22
10108158:	1c07c83a 	sub	r3,r3,r16
1010815c:	d8c02e15 	stw	r3,184(sp)
10108160:	00005906 	br	101082c8 <___vfprintf_internal_r+0x71c>
10108164:	18c03fcc 	andi	r3,r3,255
10108168:	1806fa1e 	bne	r3,zero,10109d54 <___vfprintf_internal_r+0x21a8>
1010816c:	9080020c 	andi	r2,r18,8
10108170:	10048a26 	beq	r2,zero,1010939c <___vfprintf_internal_r+0x17f0>
10108174:	d8c02d17 	ldw	r3,180(sp)
10108178:	d9002d17 	ldw	r4,180(sp)
1010817c:	d9402d17 	ldw	r5,180(sp)
10108180:	18c00017 	ldw	r3,0(r3)
10108184:	21000117 	ldw	r4,4(r4)
10108188:	29400204 	addi	r5,r5,8
1010818c:	d8c03615 	stw	r3,216(sp)
10108190:	d9003815 	stw	r4,224(sp)
10108194:	d9402d15 	stw	r5,180(sp)
10108198:	d9003617 	ldw	r4,216(sp)
1010819c:	d9403817 	ldw	r5,224(sp)
101081a0:	da003d15 	stw	r8,244(sp)
101081a4:	04000044 	movi	r16,1
101081a8:	010db280 	call	1010db28 <__fpclassifyd>
101081ac:	da003d17 	ldw	r8,244(sp)
101081b0:	14041f1e 	bne	r2,r16,10109230 <___vfprintf_internal_r+0x1684>
101081b4:	d9003617 	ldw	r4,216(sp)
101081b8:	d9403817 	ldw	r5,224(sp)
101081bc:	000d883a 	mov	r6,zero
101081c0:	000f883a 	mov	r7,zero
101081c4:	0112de40 	call	10112de4 <__ledf2>
101081c8:	da003d17 	ldw	r8,244(sp)
101081cc:	1005be16 	blt	r2,zero,101098c8 <___vfprintf_internal_r+0x1d1c>
101081d0:	df002783 	ldbu	fp,158(sp)
101081d4:	008011c4 	movi	r2,71
101081d8:	1445330e 	bge	r2,r17,101096a8 <___vfprintf_internal_r+0x1afc>
101081dc:	04040474 	movhi	r16,4113
101081e0:	841e7004 	addi	r16,r16,31168
101081e4:	00c000c4 	movi	r3,3
101081e8:	00bfdfc4 	movi	r2,-129
101081ec:	d8c02a15 	stw	r3,168(sp)
101081f0:	90a4703a 	and	r18,r18,r2
101081f4:	d8c02e15 	stw	r3,184(sp)
101081f8:	d8002915 	stw	zero,164(sp)
101081fc:	d8003215 	stw	zero,200(sp)
10108200:	00003706 	br	101082e0 <___vfprintf_internal_r+0x734>
10108204:	94800214 	ori	r18,r18,8
10108208:	ac400007 	ldb	r17,0(r21)
1010820c:	003ec806 	br	10107d30 <_gp+0xfffe655c>
10108210:	18c03fcc 	andi	r3,r3,255
10108214:	1806db1e 	bne	r3,zero,10109d84 <___vfprintf_internal_r+0x21d8>
10108218:	94800414 	ori	r18,r18,16
1010821c:	9080080c 	andi	r2,r18,32
10108220:	1002d826 	beq	r2,zero,10108d84 <___vfprintf_internal_r+0x11d8>
10108224:	d9402d17 	ldw	r5,180(sp)
10108228:	d8c02917 	ldw	r3,164(sp)
1010822c:	d8002785 	stb	zero,158(sp)
10108230:	28800204 	addi	r2,r5,8
10108234:	2cc00017 	ldw	r19,0(r5)
10108238:	2d800117 	ldw	r22,4(r5)
1010823c:	18048f16 	blt	r3,zero,1010947c <___vfprintf_internal_r+0x18d0>
10108240:	013fdfc4 	movi	r4,-129
10108244:	9d86b03a 	or	r3,r19,r22
10108248:	d8802d15 	stw	r2,180(sp)
1010824c:	9124703a 	and	r18,r18,r4
10108250:	1802d91e 	bne	r3,zero,10108db8 <___vfprintf_internal_r+0x120c>
10108254:	d8c02917 	ldw	r3,164(sp)
10108258:	0039883a 	mov	fp,zero
1010825c:	1805c326 	beq	r3,zero,1010996c <___vfprintf_internal_r+0x1dc0>
10108260:	0027883a 	mov	r19,zero
10108264:	002d883a 	mov	r22,zero
10108268:	dc001e04 	addi	r16,sp,120
1010826c:	9806d0fa 	srli	r3,r19,3
10108270:	b008977a 	slli	r4,r22,29
10108274:	b02cd0fa 	srli	r22,r22,3
10108278:	9cc001cc 	andi	r19,r19,7
1010827c:	98800c04 	addi	r2,r19,48
10108280:	843fffc4 	addi	r16,r16,-1
10108284:	20e6b03a 	or	r19,r4,r3
10108288:	80800005 	stb	r2,0(r16)
1010828c:	9d86b03a 	or	r3,r19,r22
10108290:	183ff61e 	bne	r3,zero,1010826c <_gp+0xfffe6a98>
10108294:	90c0004c 	andi	r3,r18,1
10108298:	18013b26 	beq	r3,zero,10108788 <___vfprintf_internal_r+0xbdc>
1010829c:	10803fcc 	andi	r2,r2,255
101082a0:	1080201c 	xori	r2,r2,128
101082a4:	10bfe004 	addi	r2,r2,-128
101082a8:	00c00c04 	movi	r3,48
101082ac:	10c13626 	beq	r2,r3,10108788 <___vfprintf_internal_r+0xbdc>
101082b0:	80ffffc5 	stb	r3,-1(r16)
101082b4:	d8c02817 	ldw	r3,160(sp)
101082b8:	80bfffc4 	addi	r2,r16,-1
101082bc:	1021883a 	mov	r16,r2
101082c0:	1887c83a 	sub	r3,r3,r2
101082c4:	d8c02e15 	stw	r3,184(sp)
101082c8:	d8802e17 	ldw	r2,184(sp)
101082cc:	d9002917 	ldw	r4,164(sp)
101082d0:	1100010e 	bge	r2,r4,101082d8 <___vfprintf_internal_r+0x72c>
101082d4:	2005883a 	mov	r2,r4
101082d8:	d8802a15 	stw	r2,168(sp)
101082dc:	d8003215 	stw	zero,200(sp)
101082e0:	e7003fcc 	andi	fp,fp,255
101082e4:	e700201c 	xori	fp,fp,128
101082e8:	e73fe004 	addi	fp,fp,-128
101082ec:	e0000326 	beq	fp,zero,101082fc <___vfprintf_internal_r+0x750>
101082f0:	d8c02a17 	ldw	r3,168(sp)
101082f4:	18c00044 	addi	r3,r3,1
101082f8:	d8c02a15 	stw	r3,168(sp)
101082fc:	90c0008c 	andi	r3,r18,2
10108300:	d8c02b15 	stw	r3,172(sp)
10108304:	18000326 	beq	r3,zero,10108314 <___vfprintf_internal_r+0x768>
10108308:	d8c02a17 	ldw	r3,168(sp)
1010830c:	18c00084 	addi	r3,r3,2
10108310:	d8c02a15 	stw	r3,168(sp)
10108314:	90c0210c 	andi	r3,r18,132
10108318:	d8c03015 	stw	r3,192(sp)
1010831c:	1801a31e 	bne	r3,zero,101089ac <___vfprintf_internal_r+0xe00>
10108320:	d9003117 	ldw	r4,196(sp)
10108324:	d8c02a17 	ldw	r3,168(sp)
10108328:	20e7c83a 	sub	r19,r4,r3
1010832c:	04c19f0e 	bge	zero,r19,101089ac <___vfprintf_internal_r+0xe00>
10108330:	02400404 	movi	r9,16
10108334:	d8c02017 	ldw	r3,128(sp)
10108338:	d8801f17 	ldw	r2,124(sp)
1010833c:	4cc50d0e 	bge	r9,r19,10109774 <___vfprintf_internal_r+0x1bc8>
10108340:	01440474 	movhi	r5,4113
10108344:	295e8b84 	addi	r5,r5,31278
10108348:	dc403b15 	stw	r17,236(sp)
1010834c:	d9403515 	stw	r5,212(sp)
10108350:	9823883a 	mov	r17,r19
10108354:	482d883a 	mov	r22,r9
10108358:	9027883a 	mov	r19,r18
1010835c:	070001c4 	movi	fp,7
10108360:	8025883a 	mov	r18,r16
10108364:	dc002c17 	ldw	r16,176(sp)
10108368:	00000306 	br	10108378 <___vfprintf_internal_r+0x7cc>
1010836c:	8c7ffc04 	addi	r17,r17,-16
10108370:	42000204 	addi	r8,r8,8
10108374:	b440130e 	bge	r22,r17,101083c4 <___vfprintf_internal_r+0x818>
10108378:	01040474 	movhi	r4,4113
1010837c:	18c00404 	addi	r3,r3,16
10108380:	10800044 	addi	r2,r2,1
10108384:	211e8b84 	addi	r4,r4,31278
10108388:	41000015 	stw	r4,0(r8)
1010838c:	45800115 	stw	r22,4(r8)
10108390:	d8c02015 	stw	r3,128(sp)
10108394:	d8801f15 	stw	r2,124(sp)
10108398:	e0bff40e 	bge	fp,r2,1010836c <_gp+0xfffe6b98>
1010839c:	d9801e04 	addi	r6,sp,120
101083a0:	b80b883a 	mov	r5,r23
101083a4:	8009883a 	mov	r4,r16
101083a8:	010f4840 	call	1010f484 <__sprint_r>
101083ac:	103f011e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
101083b0:	8c7ffc04 	addi	r17,r17,-16
101083b4:	d8c02017 	ldw	r3,128(sp)
101083b8:	d8801f17 	ldw	r2,124(sp)
101083bc:	da000404 	addi	r8,sp,16
101083c0:	b47fed16 	blt	r22,r17,10108378 <_gp+0xfffe6ba4>
101083c4:	9021883a 	mov	r16,r18
101083c8:	9825883a 	mov	r18,r19
101083cc:	8827883a 	mov	r19,r17
101083d0:	dc403b17 	ldw	r17,236(sp)
101083d4:	d9403517 	ldw	r5,212(sp)
101083d8:	98c7883a 	add	r3,r19,r3
101083dc:	10800044 	addi	r2,r2,1
101083e0:	41400015 	stw	r5,0(r8)
101083e4:	44c00115 	stw	r19,4(r8)
101083e8:	d8c02015 	stw	r3,128(sp)
101083ec:	d8801f15 	stw	r2,124(sp)
101083f0:	010001c4 	movi	r4,7
101083f4:	2082a316 	blt	r4,r2,10108e84 <___vfprintf_internal_r+0x12d8>
101083f8:	df002787 	ldb	fp,158(sp)
101083fc:	42000204 	addi	r8,r8,8
10108400:	e0000c26 	beq	fp,zero,10108434 <___vfprintf_internal_r+0x888>
10108404:	d8801f17 	ldw	r2,124(sp)
10108408:	d9002784 	addi	r4,sp,158
1010840c:	18c00044 	addi	r3,r3,1
10108410:	10800044 	addi	r2,r2,1
10108414:	41000015 	stw	r4,0(r8)
10108418:	01000044 	movi	r4,1
1010841c:	41000115 	stw	r4,4(r8)
10108420:	d8c02015 	stw	r3,128(sp)
10108424:	d8801f15 	stw	r2,124(sp)
10108428:	010001c4 	movi	r4,7
1010842c:	20823c16 	blt	r4,r2,10108d20 <___vfprintf_internal_r+0x1174>
10108430:	42000204 	addi	r8,r8,8
10108434:	d8802b17 	ldw	r2,172(sp)
10108438:	10000c26 	beq	r2,zero,1010846c <___vfprintf_internal_r+0x8c0>
1010843c:	d8801f17 	ldw	r2,124(sp)
10108440:	d9002704 	addi	r4,sp,156
10108444:	18c00084 	addi	r3,r3,2
10108448:	10800044 	addi	r2,r2,1
1010844c:	41000015 	stw	r4,0(r8)
10108450:	01000084 	movi	r4,2
10108454:	41000115 	stw	r4,4(r8)
10108458:	d8c02015 	stw	r3,128(sp)
1010845c:	d8801f15 	stw	r2,124(sp)
10108460:	010001c4 	movi	r4,7
10108464:	20823616 	blt	r4,r2,10108d40 <___vfprintf_internal_r+0x1194>
10108468:	42000204 	addi	r8,r8,8
1010846c:	d9003017 	ldw	r4,192(sp)
10108470:	00802004 	movi	r2,128
10108474:	20819926 	beq	r4,r2,10108adc <___vfprintf_internal_r+0xf30>
10108478:	d9402917 	ldw	r5,164(sp)
1010847c:	d8802e17 	ldw	r2,184(sp)
10108480:	28adc83a 	sub	r22,r5,r2
10108484:	0580310e 	bge	zero,r22,1010854c <___vfprintf_internal_r+0x9a0>
10108488:	07000404 	movi	fp,16
1010848c:	d8801f17 	ldw	r2,124(sp)
10108490:	e584140e 	bge	fp,r22,101094e4 <___vfprintf_internal_r+0x1938>
10108494:	01440474 	movhi	r5,4113
10108498:	295e8784 	addi	r5,r5,31262
1010849c:	dc402915 	stw	r17,164(sp)
101084a0:	d9402b15 	stw	r5,172(sp)
101084a4:	b023883a 	mov	r17,r22
101084a8:	04c001c4 	movi	r19,7
101084ac:	a82d883a 	mov	r22,r21
101084b0:	902b883a 	mov	r21,r18
101084b4:	8025883a 	mov	r18,r16
101084b8:	dc002c17 	ldw	r16,176(sp)
101084bc:	00000306 	br	101084cc <___vfprintf_internal_r+0x920>
101084c0:	8c7ffc04 	addi	r17,r17,-16
101084c4:	42000204 	addi	r8,r8,8
101084c8:	e440110e 	bge	fp,r17,10108510 <___vfprintf_internal_r+0x964>
101084cc:	18c00404 	addi	r3,r3,16
101084d0:	10800044 	addi	r2,r2,1
101084d4:	45000015 	stw	r20,0(r8)
101084d8:	47000115 	stw	fp,4(r8)
101084dc:	d8c02015 	stw	r3,128(sp)
101084e0:	d8801f15 	stw	r2,124(sp)
101084e4:	98bff60e 	bge	r19,r2,101084c0 <_gp+0xfffe6cec>
101084e8:	d9801e04 	addi	r6,sp,120
101084ec:	b80b883a 	mov	r5,r23
101084f0:	8009883a 	mov	r4,r16
101084f4:	010f4840 	call	1010f484 <__sprint_r>
101084f8:	103eae1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
101084fc:	8c7ffc04 	addi	r17,r17,-16
10108500:	d8c02017 	ldw	r3,128(sp)
10108504:	d8801f17 	ldw	r2,124(sp)
10108508:	da000404 	addi	r8,sp,16
1010850c:	e47fef16 	blt	fp,r17,101084cc <_gp+0xfffe6cf8>
10108510:	9021883a 	mov	r16,r18
10108514:	a825883a 	mov	r18,r21
10108518:	b02b883a 	mov	r21,r22
1010851c:	882d883a 	mov	r22,r17
10108520:	dc402917 	ldw	r17,164(sp)
10108524:	d9002b17 	ldw	r4,172(sp)
10108528:	1d87883a 	add	r3,r3,r22
1010852c:	10800044 	addi	r2,r2,1
10108530:	41000015 	stw	r4,0(r8)
10108534:	45800115 	stw	r22,4(r8)
10108538:	d8c02015 	stw	r3,128(sp)
1010853c:	d8801f15 	stw	r2,124(sp)
10108540:	010001c4 	movi	r4,7
10108544:	2081ee16 	blt	r4,r2,10108d00 <___vfprintf_internal_r+0x1154>
10108548:	42000204 	addi	r8,r8,8
1010854c:	9080400c 	andi	r2,r18,256
10108550:	1001181e 	bne	r2,zero,101089b4 <___vfprintf_internal_r+0xe08>
10108554:	d9402e17 	ldw	r5,184(sp)
10108558:	d8801f17 	ldw	r2,124(sp)
1010855c:	44000015 	stw	r16,0(r8)
10108560:	1947883a 	add	r3,r3,r5
10108564:	10800044 	addi	r2,r2,1
10108568:	41400115 	stw	r5,4(r8)
1010856c:	d8c02015 	stw	r3,128(sp)
10108570:	d8801f15 	stw	r2,124(sp)
10108574:	010001c4 	movi	r4,7
10108578:	2081d316 	blt	r4,r2,10108cc8 <___vfprintf_internal_r+0x111c>
1010857c:	42000204 	addi	r8,r8,8
10108580:	9480010c 	andi	r18,r18,4
10108584:	90003226 	beq	r18,zero,10108650 <___vfprintf_internal_r+0xaa4>
10108588:	d9403117 	ldw	r5,196(sp)
1010858c:	d8802a17 	ldw	r2,168(sp)
10108590:	28a1c83a 	sub	r16,r5,r2
10108594:	04002e0e 	bge	zero,r16,10108650 <___vfprintf_internal_r+0xaa4>
10108598:	04400404 	movi	r17,16
1010859c:	d8801f17 	ldw	r2,124(sp)
101085a0:	8c04a20e 	bge	r17,r16,1010982c <___vfprintf_internal_r+0x1c80>
101085a4:	01440474 	movhi	r5,4113
101085a8:	295e8b84 	addi	r5,r5,31278
101085ac:	d9403515 	stw	r5,212(sp)
101085b0:	048001c4 	movi	r18,7
101085b4:	dcc02c17 	ldw	r19,176(sp)
101085b8:	00000306 	br	101085c8 <___vfprintf_internal_r+0xa1c>
101085bc:	843ffc04 	addi	r16,r16,-16
101085c0:	42000204 	addi	r8,r8,8
101085c4:	8c00130e 	bge	r17,r16,10108614 <___vfprintf_internal_r+0xa68>
101085c8:	01040474 	movhi	r4,4113
101085cc:	18c00404 	addi	r3,r3,16
101085d0:	10800044 	addi	r2,r2,1
101085d4:	211e8b84 	addi	r4,r4,31278
101085d8:	41000015 	stw	r4,0(r8)
101085dc:	44400115 	stw	r17,4(r8)
101085e0:	d8c02015 	stw	r3,128(sp)
101085e4:	d8801f15 	stw	r2,124(sp)
101085e8:	90bff40e 	bge	r18,r2,101085bc <_gp+0xfffe6de8>
101085ec:	d9801e04 	addi	r6,sp,120
101085f0:	b80b883a 	mov	r5,r23
101085f4:	9809883a 	mov	r4,r19
101085f8:	010f4840 	call	1010f484 <__sprint_r>
101085fc:	103e6d1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108600:	843ffc04 	addi	r16,r16,-16
10108604:	d8c02017 	ldw	r3,128(sp)
10108608:	d8801f17 	ldw	r2,124(sp)
1010860c:	da000404 	addi	r8,sp,16
10108610:	8c3fed16 	blt	r17,r16,101085c8 <_gp+0xfffe6df4>
10108614:	d9403517 	ldw	r5,212(sp)
10108618:	1c07883a 	add	r3,r3,r16
1010861c:	10800044 	addi	r2,r2,1
10108620:	41400015 	stw	r5,0(r8)
10108624:	44000115 	stw	r16,4(r8)
10108628:	d8c02015 	stw	r3,128(sp)
1010862c:	d8801f15 	stw	r2,124(sp)
10108630:	010001c4 	movi	r4,7
10108634:	2080060e 	bge	r4,r2,10108650 <___vfprintf_internal_r+0xaa4>
10108638:	d9002c17 	ldw	r4,176(sp)
1010863c:	d9801e04 	addi	r6,sp,120
10108640:	b80b883a 	mov	r5,r23
10108644:	010f4840 	call	1010f484 <__sprint_r>
10108648:	103e5a1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
1010864c:	d8c02017 	ldw	r3,128(sp)
10108650:	d8803117 	ldw	r2,196(sp)
10108654:	d9002a17 	ldw	r4,168(sp)
10108658:	1100010e 	bge	r2,r4,10108660 <___vfprintf_internal_r+0xab4>
1010865c:	2005883a 	mov	r2,r4
10108660:	d9402f17 	ldw	r5,188(sp)
10108664:	288b883a 	add	r5,r5,r2
10108668:	d9402f15 	stw	r5,188(sp)
1010866c:	18019e1e 	bne	r3,zero,10108ce8 <___vfprintf_internal_r+0x113c>
10108670:	a8800007 	ldb	r2,0(r21)
10108674:	d8001f15 	stw	zero,124(sp)
10108678:	da000404 	addi	r8,sp,16
1010867c:	103d851e 	bne	r2,zero,10107c94 <_gp+0xfffe64c0>
10108680:	a821883a 	mov	r16,r21
10108684:	003d9b06 	br	10107cf4 <_gp+0xfffe6520>
10108688:	18c03fcc 	andi	r3,r3,255
1010868c:	1805c11e 	bne	r3,zero,10109d94 <___vfprintf_internal_r+0x21e8>
10108690:	94800414 	ori	r18,r18,16
10108694:	9080080c 	andi	r2,r18,32
10108698:	10020c26 	beq	r2,zero,10108ecc <___vfprintf_internal_r+0x1320>
1010869c:	d8802d17 	ldw	r2,180(sp)
101086a0:	d9002917 	ldw	r4,164(sp)
101086a4:	d8002785 	stb	zero,158(sp)
101086a8:	10c00204 	addi	r3,r2,8
101086ac:	14c00017 	ldw	r19,0(r2)
101086b0:	15800117 	ldw	r22,4(r2)
101086b4:	20040f16 	blt	r4,zero,101096f4 <___vfprintf_internal_r+0x1b48>
101086b8:	013fdfc4 	movi	r4,-129
101086bc:	9d84b03a 	or	r2,r19,r22
101086c0:	d8c02d15 	stw	r3,180(sp)
101086c4:	9124703a 	and	r18,r18,r4
101086c8:	0039883a 	mov	fp,zero
101086cc:	103e891e 	bne	r2,zero,101080f4 <_gp+0xfffe6920>
101086d0:	d9002917 	ldw	r4,164(sp)
101086d4:	2002c11e 	bne	r4,zero,101091dc <___vfprintf_internal_r+0x1630>
101086d8:	d8002915 	stw	zero,164(sp)
101086dc:	d8002e15 	stw	zero,184(sp)
101086e0:	dc001e04 	addi	r16,sp,120
101086e4:	003ef806 	br	101082c8 <_gp+0xfffe6af4>
101086e8:	18c03fcc 	andi	r3,r3,255
101086ec:	18059d1e 	bne	r3,zero,10109d64 <___vfprintf_internal_r+0x21b8>
101086f0:	01440474 	movhi	r5,4113
101086f4:	295e7304 	addi	r5,r5,31180
101086f8:	d9403915 	stw	r5,228(sp)
101086fc:	9080080c 	andi	r2,r18,32
10108700:	10005226 	beq	r2,zero,1010884c <___vfprintf_internal_r+0xca0>
10108704:	d8802d17 	ldw	r2,180(sp)
10108708:	14c00017 	ldw	r19,0(r2)
1010870c:	15800117 	ldw	r22,4(r2)
10108710:	10800204 	addi	r2,r2,8
10108714:	d8802d15 	stw	r2,180(sp)
10108718:	9080004c 	andi	r2,r18,1
1010871c:	10019026 	beq	r2,zero,10108d60 <___vfprintf_internal_r+0x11b4>
10108720:	9d84b03a 	or	r2,r19,r22
10108724:	10036926 	beq	r2,zero,101094cc <___vfprintf_internal_r+0x1920>
10108728:	d8c02917 	ldw	r3,164(sp)
1010872c:	00800c04 	movi	r2,48
10108730:	d8802705 	stb	r2,156(sp)
10108734:	dc402745 	stb	r17,157(sp)
10108738:	d8002785 	stb	zero,158(sp)
1010873c:	90800094 	ori	r2,r18,2
10108740:	18045d16 	blt	r3,zero,101098b8 <___vfprintf_internal_r+0x1d0c>
10108744:	00bfdfc4 	movi	r2,-129
10108748:	90a4703a 	and	r18,r18,r2
1010874c:	94800094 	ori	r18,r18,2
10108750:	0039883a 	mov	fp,zero
10108754:	d9003917 	ldw	r4,228(sp)
10108758:	dc001e04 	addi	r16,sp,120
1010875c:	988003cc 	andi	r2,r19,15
10108760:	b006973a 	slli	r3,r22,28
10108764:	2085883a 	add	r2,r4,r2
10108768:	9826d13a 	srli	r19,r19,4
1010876c:	10800003 	ldbu	r2,0(r2)
10108770:	b02cd13a 	srli	r22,r22,4
10108774:	843fffc4 	addi	r16,r16,-1
10108778:	1ce6b03a 	or	r19,r3,r19
1010877c:	80800005 	stb	r2,0(r16)
10108780:	9d84b03a 	or	r2,r19,r22
10108784:	103ff51e 	bne	r2,zero,1010875c <_gp+0xfffe6f88>
10108788:	d8c02817 	ldw	r3,160(sp)
1010878c:	1c07c83a 	sub	r3,r3,r16
10108790:	d8c02e15 	stw	r3,184(sp)
10108794:	003ecc06 	br	101082c8 <_gp+0xfffe6af4>
10108798:	18c03fcc 	andi	r3,r3,255
1010879c:	183e9f26 	beq	r3,zero,1010821c <_gp+0xfffe6a48>
101087a0:	d9c02785 	stb	r7,158(sp)
101087a4:	003e9d06 	br	1010821c <_gp+0xfffe6a48>
101087a8:	00c00044 	movi	r3,1
101087ac:	01c00ac4 	movi	r7,43
101087b0:	ac400007 	ldb	r17,0(r21)
101087b4:	003d5e06 	br	10107d30 <_gp+0xfffe655c>
101087b8:	94800814 	ori	r18,r18,32
101087bc:	ac400007 	ldb	r17,0(r21)
101087c0:	003d5b06 	br	10107d30 <_gp+0xfffe655c>
101087c4:	d8c02d17 	ldw	r3,180(sp)
101087c8:	d8002785 	stb	zero,158(sp)
101087cc:	1c000017 	ldw	r16,0(r3)
101087d0:	1cc00104 	addi	r19,r3,4
101087d4:	80041926 	beq	r16,zero,1010983c <___vfprintf_internal_r+0x1c90>
101087d8:	d9002917 	ldw	r4,164(sp)
101087dc:	2003d016 	blt	r4,zero,10109720 <___vfprintf_internal_r+0x1b74>
101087e0:	200d883a 	mov	r6,r4
101087e4:	000b883a 	mov	r5,zero
101087e8:	8009883a 	mov	r4,r16
101087ec:	da003d15 	stw	r8,244(sp)
101087f0:	010c0780 	call	1010c078 <memchr>
101087f4:	da003d17 	ldw	r8,244(sp)
101087f8:	10045426 	beq	r2,zero,1010994c <___vfprintf_internal_r+0x1da0>
101087fc:	1405c83a 	sub	r2,r2,r16
10108800:	d8802e15 	stw	r2,184(sp)
10108804:	1003cc16 	blt	r2,zero,10109738 <___vfprintf_internal_r+0x1b8c>
10108808:	df002783 	ldbu	fp,158(sp)
1010880c:	d8802a15 	stw	r2,168(sp)
10108810:	dcc02d15 	stw	r19,180(sp)
10108814:	d8002915 	stw	zero,164(sp)
10108818:	d8003215 	stw	zero,200(sp)
1010881c:	003eb006 	br	101082e0 <_gp+0xfffe6b0c>
10108820:	18c03fcc 	andi	r3,r3,255
10108824:	183f9b26 	beq	r3,zero,10108694 <_gp+0xfffe6ec0>
10108828:	d9c02785 	stb	r7,158(sp)
1010882c:	003f9906 	br	10108694 <_gp+0xfffe6ec0>
10108830:	18c03fcc 	andi	r3,r3,255
10108834:	1805551e 	bne	r3,zero,10109d8c <___vfprintf_internal_r+0x21e0>
10108838:	01440474 	movhi	r5,4113
1010883c:	295e7804 	addi	r5,r5,31200
10108840:	d9403915 	stw	r5,228(sp)
10108844:	9080080c 	andi	r2,r18,32
10108848:	103fae1e 	bne	r2,zero,10108704 <_gp+0xfffe6f30>
1010884c:	9080040c 	andi	r2,r18,16
10108850:	1002de26 	beq	r2,zero,101093cc <___vfprintf_internal_r+0x1820>
10108854:	d8c02d17 	ldw	r3,180(sp)
10108858:	002d883a 	mov	r22,zero
1010885c:	1cc00017 	ldw	r19,0(r3)
10108860:	18c00104 	addi	r3,r3,4
10108864:	d8c02d15 	stw	r3,180(sp)
10108868:	003fab06 	br	10108718 <_gp+0xfffe6f44>
1010886c:	38803fcc 	andi	r2,r7,255
10108870:	1080201c 	xori	r2,r2,128
10108874:	10bfe004 	addi	r2,r2,-128
10108878:	1002d21e 	bne	r2,zero,101093c4 <___vfprintf_internal_r+0x1818>
1010887c:	00c00044 	movi	r3,1
10108880:	01c00804 	movi	r7,32
10108884:	ac400007 	ldb	r17,0(r21)
10108888:	003d2906 	br	10107d30 <_gp+0xfffe655c>
1010888c:	94800054 	ori	r18,r18,1
10108890:	ac400007 	ldb	r17,0(r21)
10108894:	003d2606 	br	10107d30 <_gp+0xfffe655c>
10108898:	18c03fcc 	andi	r3,r3,255
1010889c:	183e0526 	beq	r3,zero,101080b4 <_gp+0xfffe68e0>
101088a0:	d9c02785 	stb	r7,158(sp)
101088a4:	003e0306 	br	101080b4 <_gp+0xfffe68e0>
101088a8:	94801014 	ori	r18,r18,64
101088ac:	ac400007 	ldb	r17,0(r21)
101088b0:	003d1f06 	br	10107d30 <_gp+0xfffe655c>
101088b4:	ac400007 	ldb	r17,0(r21)
101088b8:	8a438726 	beq	r17,r9,101096d8 <___vfprintf_internal_r+0x1b2c>
101088bc:	94800414 	ori	r18,r18,16
101088c0:	003d1b06 	br	10107d30 <_gp+0xfffe655c>
101088c4:	18c03fcc 	andi	r3,r3,255
101088c8:	1805341e 	bne	r3,zero,10109d9c <___vfprintf_internal_r+0x21f0>
101088cc:	9080080c 	andi	r2,r18,32
101088d0:	1002cd26 	beq	r2,zero,10109408 <___vfprintf_internal_r+0x185c>
101088d4:	d9402d17 	ldw	r5,180(sp)
101088d8:	d9002f17 	ldw	r4,188(sp)
101088dc:	28800017 	ldw	r2,0(r5)
101088e0:	2007d7fa 	srai	r3,r4,31
101088e4:	29400104 	addi	r5,r5,4
101088e8:	d9402d15 	stw	r5,180(sp)
101088ec:	11000015 	stw	r4,0(r2)
101088f0:	10c00115 	stw	r3,4(r2)
101088f4:	003ce506 	br	10107c8c <_gp+0xfffe64b8>
101088f8:	d8c02d17 	ldw	r3,180(sp)
101088fc:	d9002d17 	ldw	r4,180(sp)
10108900:	d8002785 	stb	zero,158(sp)
10108904:	18800017 	ldw	r2,0(r3)
10108908:	21000104 	addi	r4,r4,4
1010890c:	00c00044 	movi	r3,1
10108910:	d8c02a15 	stw	r3,168(sp)
10108914:	d8801405 	stb	r2,80(sp)
10108918:	d9002d15 	stw	r4,180(sp)
1010891c:	d8c02e15 	stw	r3,184(sp)
10108920:	d8002915 	stw	zero,164(sp)
10108924:	d8003215 	stw	zero,200(sp)
10108928:	dc001404 	addi	r16,sp,80
1010892c:	0039883a 	mov	fp,zero
10108930:	003e7206 	br	101082fc <_gp+0xfffe6b28>
10108934:	01040474 	movhi	r4,4113
10108938:	211e7804 	addi	r4,r4,31200
1010893c:	0039883a 	mov	fp,zero
10108940:	d9003915 	stw	r4,228(sp)
10108944:	04401e04 	movi	r17,120
10108948:	003f8206 	br	10108754 <_gp+0xfffe6f80>
1010894c:	18c03fcc 	andi	r3,r3,255
10108950:	1805061e 	bne	r3,zero,10109d6c <___vfprintf_internal_r+0x21c0>
10108954:	883d9126 	beq	r17,zero,10107f9c <_gp+0xfffe67c8>
10108958:	00c00044 	movi	r3,1
1010895c:	d8c02a15 	stw	r3,168(sp)
10108960:	dc401405 	stb	r17,80(sp)
10108964:	d8002785 	stb	zero,158(sp)
10108968:	003fec06 	br	1010891c <_gp+0xfffe7148>
1010896c:	01440474 	movhi	r5,4113
10108970:	295e7804 	addi	r5,r5,31200
10108974:	d9403915 	stw	r5,228(sp)
10108978:	d8c02d15 	stw	r3,180(sp)
1010897c:	1025883a 	mov	r18,r2
10108980:	04401e04 	movi	r17,120
10108984:	9d84b03a 	or	r2,r19,r22
10108988:	1000fc1e 	bne	r2,zero,10108d7c <___vfprintf_internal_r+0x11d0>
1010898c:	0039883a 	mov	fp,zero
10108990:	00800084 	movi	r2,2
10108994:	10803fcc 	andi	r2,r2,255
10108998:	00c00044 	movi	r3,1
1010899c:	10c20f26 	beq	r2,r3,101091dc <___vfprintf_internal_r+0x1630>
101089a0:	00c00084 	movi	r3,2
101089a4:	10fd6326 	beq	r2,r3,10107f34 <_gp+0xfffe6760>
101089a8:	003e2d06 	br	10108260 <_gp+0xfffe6a8c>
101089ac:	d8c02017 	ldw	r3,128(sp)
101089b0:	003e9306 	br	10108400 <_gp+0xfffe6c2c>
101089b4:	00801944 	movi	r2,101
101089b8:	14407e0e 	bge	r2,r17,10108bb4 <___vfprintf_internal_r+0x1008>
101089bc:	d9003617 	ldw	r4,216(sp)
101089c0:	d9403817 	ldw	r5,224(sp)
101089c4:	000d883a 	mov	r6,zero
101089c8:	000f883a 	mov	r7,zero
101089cc:	d8c03c15 	stw	r3,240(sp)
101089d0:	da003d15 	stw	r8,244(sp)
101089d4:	0112c800 	call	10112c80 <__eqdf2>
101089d8:	d8c03c17 	ldw	r3,240(sp)
101089dc:	da003d17 	ldw	r8,244(sp)
101089e0:	1000f71e 	bne	r2,zero,10108dc0 <___vfprintf_internal_r+0x1214>
101089e4:	d8801f17 	ldw	r2,124(sp)
101089e8:	01040474 	movhi	r4,4113
101089ec:	211e7f04 	addi	r4,r4,31228
101089f0:	18c00044 	addi	r3,r3,1
101089f4:	10800044 	addi	r2,r2,1
101089f8:	41000015 	stw	r4,0(r8)
101089fc:	01000044 	movi	r4,1
10108a00:	41000115 	stw	r4,4(r8)
10108a04:	d8c02015 	stw	r3,128(sp)
10108a08:	d8801f15 	stw	r2,124(sp)
10108a0c:	010001c4 	movi	r4,7
10108a10:	2082b816 	blt	r4,r2,101094f4 <___vfprintf_internal_r+0x1948>
10108a14:	42000204 	addi	r8,r8,8
10108a18:	d8802617 	ldw	r2,152(sp)
10108a1c:	d9403317 	ldw	r5,204(sp)
10108a20:	11400216 	blt	r2,r5,10108a2c <___vfprintf_internal_r+0xe80>
10108a24:	9080004c 	andi	r2,r18,1
10108a28:	103ed526 	beq	r2,zero,10108580 <_gp+0xfffe6dac>
10108a2c:	d8803717 	ldw	r2,220(sp)
10108a30:	d9003417 	ldw	r4,208(sp)
10108a34:	d9403717 	ldw	r5,220(sp)
10108a38:	1887883a 	add	r3,r3,r2
10108a3c:	d8801f17 	ldw	r2,124(sp)
10108a40:	41000015 	stw	r4,0(r8)
10108a44:	41400115 	stw	r5,4(r8)
10108a48:	10800044 	addi	r2,r2,1
10108a4c:	d8c02015 	stw	r3,128(sp)
10108a50:	d8801f15 	stw	r2,124(sp)
10108a54:	010001c4 	movi	r4,7
10108a58:	20832916 	blt	r4,r2,10109700 <___vfprintf_internal_r+0x1b54>
10108a5c:	42000204 	addi	r8,r8,8
10108a60:	d8803317 	ldw	r2,204(sp)
10108a64:	143fffc4 	addi	r16,r2,-1
10108a68:	043ec50e 	bge	zero,r16,10108580 <_gp+0xfffe6dac>
10108a6c:	04400404 	movi	r17,16
10108a70:	d8801f17 	ldw	r2,124(sp)
10108a74:	8c00880e 	bge	r17,r16,10108c98 <___vfprintf_internal_r+0x10ec>
10108a78:	01440474 	movhi	r5,4113
10108a7c:	295e8784 	addi	r5,r5,31262
10108a80:	d9402b15 	stw	r5,172(sp)
10108a84:	058001c4 	movi	r22,7
10108a88:	dcc02c17 	ldw	r19,176(sp)
10108a8c:	00000306 	br	10108a9c <___vfprintf_internal_r+0xef0>
10108a90:	42000204 	addi	r8,r8,8
10108a94:	843ffc04 	addi	r16,r16,-16
10108a98:	8c00820e 	bge	r17,r16,10108ca4 <___vfprintf_internal_r+0x10f8>
10108a9c:	18c00404 	addi	r3,r3,16
10108aa0:	10800044 	addi	r2,r2,1
10108aa4:	45000015 	stw	r20,0(r8)
10108aa8:	44400115 	stw	r17,4(r8)
10108aac:	d8c02015 	stw	r3,128(sp)
10108ab0:	d8801f15 	stw	r2,124(sp)
10108ab4:	b0bff60e 	bge	r22,r2,10108a90 <_gp+0xfffe72bc>
10108ab8:	d9801e04 	addi	r6,sp,120
10108abc:	b80b883a 	mov	r5,r23
10108ac0:	9809883a 	mov	r4,r19
10108ac4:	010f4840 	call	1010f484 <__sprint_r>
10108ac8:	103d3a1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108acc:	d8c02017 	ldw	r3,128(sp)
10108ad0:	d8801f17 	ldw	r2,124(sp)
10108ad4:	da000404 	addi	r8,sp,16
10108ad8:	003fee06 	br	10108a94 <_gp+0xfffe72c0>
10108adc:	d9403117 	ldw	r5,196(sp)
10108ae0:	d8802a17 	ldw	r2,168(sp)
10108ae4:	28adc83a 	sub	r22,r5,r2
10108ae8:	05be630e 	bge	zero,r22,10108478 <_gp+0xfffe6ca4>
10108aec:	07000404 	movi	fp,16
10108af0:	d8801f17 	ldw	r2,124(sp)
10108af4:	e5838f0e 	bge	fp,r22,10109934 <___vfprintf_internal_r+0x1d88>
10108af8:	01440474 	movhi	r5,4113
10108afc:	295e8784 	addi	r5,r5,31262
10108b00:	dc403015 	stw	r17,192(sp)
10108b04:	d9402b15 	stw	r5,172(sp)
10108b08:	b023883a 	mov	r17,r22
10108b0c:	04c001c4 	movi	r19,7
10108b10:	a82d883a 	mov	r22,r21
10108b14:	902b883a 	mov	r21,r18
10108b18:	8025883a 	mov	r18,r16
10108b1c:	dc002c17 	ldw	r16,176(sp)
10108b20:	00000306 	br	10108b30 <___vfprintf_internal_r+0xf84>
10108b24:	8c7ffc04 	addi	r17,r17,-16
10108b28:	42000204 	addi	r8,r8,8
10108b2c:	e440110e 	bge	fp,r17,10108b74 <___vfprintf_internal_r+0xfc8>
10108b30:	18c00404 	addi	r3,r3,16
10108b34:	10800044 	addi	r2,r2,1
10108b38:	45000015 	stw	r20,0(r8)
10108b3c:	47000115 	stw	fp,4(r8)
10108b40:	d8c02015 	stw	r3,128(sp)
10108b44:	d8801f15 	stw	r2,124(sp)
10108b48:	98bff60e 	bge	r19,r2,10108b24 <_gp+0xfffe7350>
10108b4c:	d9801e04 	addi	r6,sp,120
10108b50:	b80b883a 	mov	r5,r23
10108b54:	8009883a 	mov	r4,r16
10108b58:	010f4840 	call	1010f484 <__sprint_r>
10108b5c:	103d151e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108b60:	8c7ffc04 	addi	r17,r17,-16
10108b64:	d8c02017 	ldw	r3,128(sp)
10108b68:	d8801f17 	ldw	r2,124(sp)
10108b6c:	da000404 	addi	r8,sp,16
10108b70:	e47fef16 	blt	fp,r17,10108b30 <_gp+0xfffe735c>
10108b74:	9021883a 	mov	r16,r18
10108b78:	a825883a 	mov	r18,r21
10108b7c:	b02b883a 	mov	r21,r22
10108b80:	882d883a 	mov	r22,r17
10108b84:	dc403017 	ldw	r17,192(sp)
10108b88:	d9002b17 	ldw	r4,172(sp)
10108b8c:	1d87883a 	add	r3,r3,r22
10108b90:	10800044 	addi	r2,r2,1
10108b94:	41000015 	stw	r4,0(r8)
10108b98:	45800115 	stw	r22,4(r8)
10108b9c:	d8c02015 	stw	r3,128(sp)
10108ba0:	d8801f15 	stw	r2,124(sp)
10108ba4:	010001c4 	movi	r4,7
10108ba8:	20818e16 	blt	r4,r2,101091e4 <___vfprintf_internal_r+0x1638>
10108bac:	42000204 	addi	r8,r8,8
10108bb0:	003e3106 	br	10108478 <_gp+0xfffe6ca4>
10108bb4:	d9403317 	ldw	r5,204(sp)
10108bb8:	00800044 	movi	r2,1
10108bbc:	18c00044 	addi	r3,r3,1
10108bc0:	1141530e 	bge	r2,r5,10109110 <___vfprintf_internal_r+0x1564>
10108bc4:	dc401f17 	ldw	r17,124(sp)
10108bc8:	00800044 	movi	r2,1
10108bcc:	40800115 	stw	r2,4(r8)
10108bd0:	8c400044 	addi	r17,r17,1
10108bd4:	44000015 	stw	r16,0(r8)
10108bd8:	d8c02015 	stw	r3,128(sp)
10108bdc:	dc401f15 	stw	r17,124(sp)
10108be0:	008001c4 	movi	r2,7
10108be4:	14416b16 	blt	r2,r17,10109194 <___vfprintf_internal_r+0x15e8>
10108be8:	42000204 	addi	r8,r8,8
10108bec:	d8803717 	ldw	r2,220(sp)
10108bf0:	d9003417 	ldw	r4,208(sp)
10108bf4:	8c400044 	addi	r17,r17,1
10108bf8:	10c7883a 	add	r3,r2,r3
10108bfc:	40800115 	stw	r2,4(r8)
10108c00:	41000015 	stw	r4,0(r8)
10108c04:	d8c02015 	stw	r3,128(sp)
10108c08:	dc401f15 	stw	r17,124(sp)
10108c0c:	008001c4 	movi	r2,7
10108c10:	14416916 	blt	r2,r17,101091b8 <___vfprintf_internal_r+0x160c>
10108c14:	45800204 	addi	r22,r8,8
10108c18:	d9003617 	ldw	r4,216(sp)
10108c1c:	d9403817 	ldw	r5,224(sp)
10108c20:	000d883a 	mov	r6,zero
10108c24:	000f883a 	mov	r7,zero
10108c28:	d8c03c15 	stw	r3,240(sp)
10108c2c:	0112c800 	call	10112c80 <__eqdf2>
10108c30:	d8c03c17 	ldw	r3,240(sp)
10108c34:	1000bc26 	beq	r2,zero,10108f28 <___vfprintf_internal_r+0x137c>
10108c38:	d9403317 	ldw	r5,204(sp)
10108c3c:	84000044 	addi	r16,r16,1
10108c40:	8c400044 	addi	r17,r17,1
10108c44:	28bfffc4 	addi	r2,r5,-1
10108c48:	1887883a 	add	r3,r3,r2
10108c4c:	b0800115 	stw	r2,4(r22)
10108c50:	b4000015 	stw	r16,0(r22)
10108c54:	d8c02015 	stw	r3,128(sp)
10108c58:	dc401f15 	stw	r17,124(sp)
10108c5c:	008001c4 	movi	r2,7
10108c60:	14414316 	blt	r2,r17,10109170 <___vfprintf_internal_r+0x15c4>
10108c64:	b5800204 	addi	r22,r22,8
10108c68:	d9003a17 	ldw	r4,232(sp)
10108c6c:	df0022c4 	addi	fp,sp,139
10108c70:	8c400044 	addi	r17,r17,1
10108c74:	20c7883a 	add	r3,r4,r3
10108c78:	b7000015 	stw	fp,0(r22)
10108c7c:	b1000115 	stw	r4,4(r22)
10108c80:	d8c02015 	stw	r3,128(sp)
10108c84:	dc401f15 	stw	r17,124(sp)
10108c88:	008001c4 	movi	r2,7
10108c8c:	14400e16 	blt	r2,r17,10108cc8 <___vfprintf_internal_r+0x111c>
10108c90:	b2000204 	addi	r8,r22,8
10108c94:	003e3a06 	br	10108580 <_gp+0xfffe6dac>
10108c98:	01040474 	movhi	r4,4113
10108c9c:	211e8784 	addi	r4,r4,31262
10108ca0:	d9002b15 	stw	r4,172(sp)
10108ca4:	d9002b17 	ldw	r4,172(sp)
10108ca8:	1c07883a 	add	r3,r3,r16
10108cac:	44000115 	stw	r16,4(r8)
10108cb0:	41000015 	stw	r4,0(r8)
10108cb4:	10800044 	addi	r2,r2,1
10108cb8:	d8c02015 	stw	r3,128(sp)
10108cbc:	d8801f15 	stw	r2,124(sp)
10108cc0:	010001c4 	movi	r4,7
10108cc4:	20be2d0e 	bge	r4,r2,1010857c <_gp+0xfffe6da8>
10108cc8:	d9002c17 	ldw	r4,176(sp)
10108ccc:	d9801e04 	addi	r6,sp,120
10108cd0:	b80b883a 	mov	r5,r23
10108cd4:	010f4840 	call	1010f484 <__sprint_r>
10108cd8:	103cb61e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108cdc:	d8c02017 	ldw	r3,128(sp)
10108ce0:	da000404 	addi	r8,sp,16
10108ce4:	003e2606 	br	10108580 <_gp+0xfffe6dac>
10108ce8:	d9002c17 	ldw	r4,176(sp)
10108cec:	d9801e04 	addi	r6,sp,120
10108cf0:	b80b883a 	mov	r5,r23
10108cf4:	010f4840 	call	1010f484 <__sprint_r>
10108cf8:	103e5d26 	beq	r2,zero,10108670 <_gp+0xfffe6e9c>
10108cfc:	003cad06 	br	10107fb4 <_gp+0xfffe67e0>
10108d00:	d9002c17 	ldw	r4,176(sp)
10108d04:	d9801e04 	addi	r6,sp,120
10108d08:	b80b883a 	mov	r5,r23
10108d0c:	010f4840 	call	1010f484 <__sprint_r>
10108d10:	103ca81e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108d14:	d8c02017 	ldw	r3,128(sp)
10108d18:	da000404 	addi	r8,sp,16
10108d1c:	003e0b06 	br	1010854c <_gp+0xfffe6d78>
10108d20:	d9002c17 	ldw	r4,176(sp)
10108d24:	d9801e04 	addi	r6,sp,120
10108d28:	b80b883a 	mov	r5,r23
10108d2c:	010f4840 	call	1010f484 <__sprint_r>
10108d30:	103ca01e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108d34:	d8c02017 	ldw	r3,128(sp)
10108d38:	da000404 	addi	r8,sp,16
10108d3c:	003dbd06 	br	10108434 <_gp+0xfffe6c60>
10108d40:	d9002c17 	ldw	r4,176(sp)
10108d44:	d9801e04 	addi	r6,sp,120
10108d48:	b80b883a 	mov	r5,r23
10108d4c:	010f4840 	call	1010f484 <__sprint_r>
10108d50:	103c981e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108d54:	d8c02017 	ldw	r3,128(sp)
10108d58:	da000404 	addi	r8,sp,16
10108d5c:	003dc306 	br	1010846c <_gp+0xfffe6c98>
10108d60:	d8802917 	ldw	r2,164(sp)
10108d64:	d8002785 	stb	zero,158(sp)
10108d68:	103f0616 	blt	r2,zero,10108984 <_gp+0xfffe71b0>
10108d6c:	00ffdfc4 	movi	r3,-129
10108d70:	9d84b03a 	or	r2,r19,r22
10108d74:	90e4703a 	and	r18,r18,r3
10108d78:	103c6b26 	beq	r2,zero,10107f28 <_gp+0xfffe6754>
10108d7c:	0039883a 	mov	fp,zero
10108d80:	003e7406 	br	10108754 <_gp+0xfffe6f80>
10108d84:	9080040c 	andi	r2,r18,16
10108d88:	1001b326 	beq	r2,zero,10109458 <___vfprintf_internal_r+0x18ac>
10108d8c:	d9002d17 	ldw	r4,180(sp)
10108d90:	d9402917 	ldw	r5,164(sp)
10108d94:	d8002785 	stb	zero,158(sp)
10108d98:	20800104 	addi	r2,r4,4
10108d9c:	24c00017 	ldw	r19,0(r4)
10108da0:	002d883a 	mov	r22,zero
10108da4:	2801b516 	blt	r5,zero,1010947c <___vfprintf_internal_r+0x18d0>
10108da8:	00ffdfc4 	movi	r3,-129
10108dac:	d8802d15 	stw	r2,180(sp)
10108db0:	90e4703a 	and	r18,r18,r3
10108db4:	983d2726 	beq	r19,zero,10108254 <_gp+0xfffe6a80>
10108db8:	0039883a 	mov	fp,zero
10108dbc:	003d2a06 	br	10108268 <_gp+0xfffe6a94>
10108dc0:	dc402617 	ldw	r17,152(sp)
10108dc4:	0441d30e 	bge	zero,r17,10109514 <___vfprintf_internal_r+0x1968>
10108dc8:	dc403217 	ldw	r17,200(sp)
10108dcc:	d8803317 	ldw	r2,204(sp)
10108dd0:	1440010e 	bge	r2,r17,10108dd8 <___vfprintf_internal_r+0x122c>
10108dd4:	1023883a 	mov	r17,r2
10108dd8:	04400a0e 	bge	zero,r17,10108e04 <___vfprintf_internal_r+0x1258>
10108ddc:	d8801f17 	ldw	r2,124(sp)
10108de0:	1c47883a 	add	r3,r3,r17
10108de4:	44000015 	stw	r16,0(r8)
10108de8:	10800044 	addi	r2,r2,1
10108dec:	44400115 	stw	r17,4(r8)
10108df0:	d8c02015 	stw	r3,128(sp)
10108df4:	d8801f15 	stw	r2,124(sp)
10108df8:	010001c4 	movi	r4,7
10108dfc:	20826516 	blt	r4,r2,10109794 <___vfprintf_internal_r+0x1be8>
10108e00:	42000204 	addi	r8,r8,8
10108e04:	88026116 	blt	r17,zero,1010978c <___vfprintf_internal_r+0x1be0>
10108e08:	d9003217 	ldw	r4,200(sp)
10108e0c:	2463c83a 	sub	r17,r4,r17
10108e10:	04407b0e 	bge	zero,r17,10109000 <___vfprintf_internal_r+0x1454>
10108e14:	05800404 	movi	r22,16
10108e18:	d8801f17 	ldw	r2,124(sp)
10108e1c:	b4419d0e 	bge	r22,r17,10109494 <___vfprintf_internal_r+0x18e8>
10108e20:	01040474 	movhi	r4,4113
10108e24:	211e8784 	addi	r4,r4,31262
10108e28:	d9002b15 	stw	r4,172(sp)
10108e2c:	070001c4 	movi	fp,7
10108e30:	dcc02c17 	ldw	r19,176(sp)
10108e34:	00000306 	br	10108e44 <___vfprintf_internal_r+0x1298>
10108e38:	42000204 	addi	r8,r8,8
10108e3c:	8c7ffc04 	addi	r17,r17,-16
10108e40:	b441970e 	bge	r22,r17,101094a0 <___vfprintf_internal_r+0x18f4>
10108e44:	18c00404 	addi	r3,r3,16
10108e48:	10800044 	addi	r2,r2,1
10108e4c:	45000015 	stw	r20,0(r8)
10108e50:	45800115 	stw	r22,4(r8)
10108e54:	d8c02015 	stw	r3,128(sp)
10108e58:	d8801f15 	stw	r2,124(sp)
10108e5c:	e0bff60e 	bge	fp,r2,10108e38 <_gp+0xfffe7664>
10108e60:	d9801e04 	addi	r6,sp,120
10108e64:	b80b883a 	mov	r5,r23
10108e68:	9809883a 	mov	r4,r19
10108e6c:	010f4840 	call	1010f484 <__sprint_r>
10108e70:	103c501e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108e74:	d8c02017 	ldw	r3,128(sp)
10108e78:	d8801f17 	ldw	r2,124(sp)
10108e7c:	da000404 	addi	r8,sp,16
10108e80:	003fee06 	br	10108e3c <_gp+0xfffe7668>
10108e84:	d9002c17 	ldw	r4,176(sp)
10108e88:	d9801e04 	addi	r6,sp,120
10108e8c:	b80b883a 	mov	r5,r23
10108e90:	010f4840 	call	1010f484 <__sprint_r>
10108e94:	103c471e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108e98:	d8c02017 	ldw	r3,128(sp)
10108e9c:	df002787 	ldb	fp,158(sp)
10108ea0:	da000404 	addi	r8,sp,16
10108ea4:	003d5606 	br	10108400 <_gp+0xfffe6c2c>
10108ea8:	9080040c 	andi	r2,r18,16
10108eac:	10016126 	beq	r2,zero,10109434 <___vfprintf_internal_r+0x1888>
10108eb0:	d8802d17 	ldw	r2,180(sp)
10108eb4:	14c00017 	ldw	r19,0(r2)
10108eb8:	10800104 	addi	r2,r2,4
10108ebc:	d8802d15 	stw	r2,180(sp)
10108ec0:	982dd7fa 	srai	r22,r19,31
10108ec4:	b005883a 	mov	r2,r22
10108ec8:	003c8206 	br	101080d4 <_gp+0xfffe6900>
10108ecc:	9080040c 	andi	r2,r18,16
10108ed0:	10003526 	beq	r2,zero,10108fa8 <___vfprintf_internal_r+0x13fc>
10108ed4:	d9402d17 	ldw	r5,180(sp)
10108ed8:	d8c02917 	ldw	r3,164(sp)
10108edc:	d8002785 	stb	zero,158(sp)
10108ee0:	28800104 	addi	r2,r5,4
10108ee4:	2cc00017 	ldw	r19,0(r5)
10108ee8:	002d883a 	mov	r22,zero
10108eec:	18003716 	blt	r3,zero,10108fcc <___vfprintf_internal_r+0x1420>
10108ef0:	00ffdfc4 	movi	r3,-129
10108ef4:	d8802d15 	stw	r2,180(sp)
10108ef8:	90e4703a 	and	r18,r18,r3
10108efc:	0039883a 	mov	fp,zero
10108f00:	983df326 	beq	r19,zero,101086d0 <_gp+0xfffe6efc>
10108f04:	00800244 	movi	r2,9
10108f08:	14fc7b36 	bltu	r2,r19,101080f8 <_gp+0xfffe6924>
10108f0c:	d8c02817 	ldw	r3,160(sp)
10108f10:	dc001dc4 	addi	r16,sp,119
10108f14:	9cc00c04 	addi	r19,r19,48
10108f18:	1c07c83a 	sub	r3,r3,r16
10108f1c:	dcc01dc5 	stb	r19,119(sp)
10108f20:	d8c02e15 	stw	r3,184(sp)
10108f24:	003ce806 	br	101082c8 <_gp+0xfffe6af4>
10108f28:	d8803317 	ldw	r2,204(sp)
10108f2c:	143fffc4 	addi	r16,r2,-1
10108f30:	043f4d0e 	bge	zero,r16,10108c68 <_gp+0xfffe7494>
10108f34:	07000404 	movi	fp,16
10108f38:	e400810e 	bge	fp,r16,10109140 <___vfprintf_internal_r+0x1594>
10108f3c:	01440474 	movhi	r5,4113
10108f40:	295e8784 	addi	r5,r5,31262
10108f44:	d9402b15 	stw	r5,172(sp)
10108f48:	01c001c4 	movi	r7,7
10108f4c:	dcc02c17 	ldw	r19,176(sp)
10108f50:	00000306 	br	10108f60 <___vfprintf_internal_r+0x13b4>
10108f54:	b5800204 	addi	r22,r22,8
10108f58:	843ffc04 	addi	r16,r16,-16
10108f5c:	e4007b0e 	bge	fp,r16,1010914c <___vfprintf_internal_r+0x15a0>
10108f60:	18c00404 	addi	r3,r3,16
10108f64:	8c400044 	addi	r17,r17,1
10108f68:	b5000015 	stw	r20,0(r22)
10108f6c:	b7000115 	stw	fp,4(r22)
10108f70:	d8c02015 	stw	r3,128(sp)
10108f74:	dc401f15 	stw	r17,124(sp)
10108f78:	3c7ff60e 	bge	r7,r17,10108f54 <_gp+0xfffe7780>
10108f7c:	d9801e04 	addi	r6,sp,120
10108f80:	b80b883a 	mov	r5,r23
10108f84:	9809883a 	mov	r4,r19
10108f88:	d9c03c15 	stw	r7,240(sp)
10108f8c:	010f4840 	call	1010f484 <__sprint_r>
10108f90:	d9c03c17 	ldw	r7,240(sp)
10108f94:	103c071e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108f98:	d8c02017 	ldw	r3,128(sp)
10108f9c:	dc401f17 	ldw	r17,124(sp)
10108fa0:	dd800404 	addi	r22,sp,16
10108fa4:	003fec06 	br	10108f58 <_gp+0xfffe7784>
10108fa8:	9080100c 	andi	r2,r18,64
10108fac:	d8002785 	stb	zero,158(sp)
10108fb0:	10010e26 	beq	r2,zero,101093ec <___vfprintf_internal_r+0x1840>
10108fb4:	d9002d17 	ldw	r4,180(sp)
10108fb8:	d9402917 	ldw	r5,164(sp)
10108fbc:	002d883a 	mov	r22,zero
10108fc0:	20800104 	addi	r2,r4,4
10108fc4:	24c0000b 	ldhu	r19,0(r4)
10108fc8:	283fc90e 	bge	r5,zero,10108ef0 <_gp+0xfffe771c>
10108fcc:	d8802d15 	stw	r2,180(sp)
10108fd0:	0039883a 	mov	fp,zero
10108fd4:	9d84b03a 	or	r2,r19,r22
10108fd8:	103c461e 	bne	r2,zero,101080f4 <_gp+0xfffe6920>
10108fdc:	00800044 	movi	r2,1
10108fe0:	003e6c06 	br	10108994 <_gp+0xfffe71c0>
10108fe4:	d9002c17 	ldw	r4,176(sp)
10108fe8:	d9801e04 	addi	r6,sp,120
10108fec:	b80b883a 	mov	r5,r23
10108ff0:	010f4840 	call	1010f484 <__sprint_r>
10108ff4:	103bef1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10108ff8:	d8c02017 	ldw	r3,128(sp)
10108ffc:	da000404 	addi	r8,sp,16
10109000:	d9003217 	ldw	r4,200(sp)
10109004:	d8802617 	ldw	r2,152(sp)
10109008:	d9403317 	ldw	r5,204(sp)
1010900c:	8123883a 	add	r17,r16,r4
10109010:	11400216 	blt	r2,r5,1010901c <___vfprintf_internal_r+0x1470>
10109014:	9100004c 	andi	r4,r18,1
10109018:	20000d26 	beq	r4,zero,10109050 <___vfprintf_internal_r+0x14a4>
1010901c:	d9003717 	ldw	r4,220(sp)
10109020:	d9403417 	ldw	r5,208(sp)
10109024:	1907883a 	add	r3,r3,r4
10109028:	d9001f17 	ldw	r4,124(sp)
1010902c:	41400015 	stw	r5,0(r8)
10109030:	d9403717 	ldw	r5,220(sp)
10109034:	21000044 	addi	r4,r4,1
10109038:	d8c02015 	stw	r3,128(sp)
1010903c:	41400115 	stw	r5,4(r8)
10109040:	d9001f15 	stw	r4,124(sp)
10109044:	014001c4 	movi	r5,7
10109048:	2901e816 	blt	r5,r4,101097ec <___vfprintf_internal_r+0x1c40>
1010904c:	42000204 	addi	r8,r8,8
10109050:	d9003317 	ldw	r4,204(sp)
10109054:	8121883a 	add	r16,r16,r4
10109058:	2085c83a 	sub	r2,r4,r2
1010905c:	8461c83a 	sub	r16,r16,r17
10109060:	1400010e 	bge	r2,r16,10109068 <___vfprintf_internal_r+0x14bc>
10109064:	1021883a 	mov	r16,r2
10109068:	04000a0e 	bge	zero,r16,10109094 <___vfprintf_internal_r+0x14e8>
1010906c:	d9001f17 	ldw	r4,124(sp)
10109070:	1c07883a 	add	r3,r3,r16
10109074:	44400015 	stw	r17,0(r8)
10109078:	21000044 	addi	r4,r4,1
1010907c:	44000115 	stw	r16,4(r8)
10109080:	d8c02015 	stw	r3,128(sp)
10109084:	d9001f15 	stw	r4,124(sp)
10109088:	014001c4 	movi	r5,7
1010908c:	2901fb16 	blt	r5,r4,1010987c <___vfprintf_internal_r+0x1cd0>
10109090:	42000204 	addi	r8,r8,8
10109094:	8001f716 	blt	r16,zero,10109874 <___vfprintf_internal_r+0x1cc8>
10109098:	1421c83a 	sub	r16,r2,r16
1010909c:	043d380e 	bge	zero,r16,10108580 <_gp+0xfffe6dac>
101090a0:	04400404 	movi	r17,16
101090a4:	d8801f17 	ldw	r2,124(sp)
101090a8:	8c3efb0e 	bge	r17,r16,10108c98 <_gp+0xfffe74c4>
101090ac:	01440474 	movhi	r5,4113
101090b0:	295e8784 	addi	r5,r5,31262
101090b4:	d9402b15 	stw	r5,172(sp)
101090b8:	058001c4 	movi	r22,7
101090bc:	dcc02c17 	ldw	r19,176(sp)
101090c0:	00000306 	br	101090d0 <___vfprintf_internal_r+0x1524>
101090c4:	42000204 	addi	r8,r8,8
101090c8:	843ffc04 	addi	r16,r16,-16
101090cc:	8c3ef50e 	bge	r17,r16,10108ca4 <_gp+0xfffe74d0>
101090d0:	18c00404 	addi	r3,r3,16
101090d4:	10800044 	addi	r2,r2,1
101090d8:	45000015 	stw	r20,0(r8)
101090dc:	44400115 	stw	r17,4(r8)
101090e0:	d8c02015 	stw	r3,128(sp)
101090e4:	d8801f15 	stw	r2,124(sp)
101090e8:	b0bff60e 	bge	r22,r2,101090c4 <_gp+0xfffe78f0>
101090ec:	d9801e04 	addi	r6,sp,120
101090f0:	b80b883a 	mov	r5,r23
101090f4:	9809883a 	mov	r4,r19
101090f8:	010f4840 	call	1010f484 <__sprint_r>
101090fc:	103bad1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10109100:	d8c02017 	ldw	r3,128(sp)
10109104:	d8801f17 	ldw	r2,124(sp)
10109108:	da000404 	addi	r8,sp,16
1010910c:	003fee06 	br	101090c8 <_gp+0xfffe78f4>
10109110:	9088703a 	and	r4,r18,r2
10109114:	203eab1e 	bne	r4,zero,10108bc4 <_gp+0xfffe73f0>
10109118:	dc401f17 	ldw	r17,124(sp)
1010911c:	40800115 	stw	r2,4(r8)
10109120:	44000015 	stw	r16,0(r8)
10109124:	8c400044 	addi	r17,r17,1
10109128:	d8c02015 	stw	r3,128(sp)
1010912c:	dc401f15 	stw	r17,124(sp)
10109130:	008001c4 	movi	r2,7
10109134:	14400e16 	blt	r2,r17,10109170 <___vfprintf_internal_r+0x15c4>
10109138:	45800204 	addi	r22,r8,8
1010913c:	003eca06 	br	10108c68 <_gp+0xfffe7494>
10109140:	01040474 	movhi	r4,4113
10109144:	211e8784 	addi	r4,r4,31262
10109148:	d9002b15 	stw	r4,172(sp)
1010914c:	d8802b17 	ldw	r2,172(sp)
10109150:	1c07883a 	add	r3,r3,r16
10109154:	8c400044 	addi	r17,r17,1
10109158:	b0800015 	stw	r2,0(r22)
1010915c:	b4000115 	stw	r16,4(r22)
10109160:	d8c02015 	stw	r3,128(sp)
10109164:	dc401f15 	stw	r17,124(sp)
10109168:	008001c4 	movi	r2,7
1010916c:	147ebd0e 	bge	r2,r17,10108c64 <_gp+0xfffe7490>
10109170:	d9002c17 	ldw	r4,176(sp)
10109174:	d9801e04 	addi	r6,sp,120
10109178:	b80b883a 	mov	r5,r23
1010917c:	010f4840 	call	1010f484 <__sprint_r>
10109180:	103b8c1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10109184:	d8c02017 	ldw	r3,128(sp)
10109188:	dc401f17 	ldw	r17,124(sp)
1010918c:	dd800404 	addi	r22,sp,16
10109190:	003eb506 	br	10108c68 <_gp+0xfffe7494>
10109194:	d9002c17 	ldw	r4,176(sp)
10109198:	d9801e04 	addi	r6,sp,120
1010919c:	b80b883a 	mov	r5,r23
101091a0:	010f4840 	call	1010f484 <__sprint_r>
101091a4:	103b831e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
101091a8:	d8c02017 	ldw	r3,128(sp)
101091ac:	dc401f17 	ldw	r17,124(sp)
101091b0:	da000404 	addi	r8,sp,16
101091b4:	003e8d06 	br	10108bec <_gp+0xfffe7418>
101091b8:	d9002c17 	ldw	r4,176(sp)
101091bc:	d9801e04 	addi	r6,sp,120
101091c0:	b80b883a 	mov	r5,r23
101091c4:	010f4840 	call	1010f484 <__sprint_r>
101091c8:	103b7a1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
101091cc:	d8c02017 	ldw	r3,128(sp)
101091d0:	dc401f17 	ldw	r17,124(sp)
101091d4:	dd800404 	addi	r22,sp,16
101091d8:	003e8f06 	br	10108c18 <_gp+0xfffe7444>
101091dc:	0027883a 	mov	r19,zero
101091e0:	003f4a06 	br	10108f0c <_gp+0xfffe7738>
101091e4:	d9002c17 	ldw	r4,176(sp)
101091e8:	d9801e04 	addi	r6,sp,120
101091ec:	b80b883a 	mov	r5,r23
101091f0:	010f4840 	call	1010f484 <__sprint_r>
101091f4:	103b6f1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
101091f8:	d8c02017 	ldw	r3,128(sp)
101091fc:	da000404 	addi	r8,sp,16
10109200:	003c9d06 	br	10108478 <_gp+0xfffe6ca4>
10109204:	04e7c83a 	sub	r19,zero,r19
10109208:	9804c03a 	cmpne	r2,r19,zero
1010920c:	05adc83a 	sub	r22,zero,r22
10109210:	b0adc83a 	sub	r22,r22,r2
10109214:	d8802917 	ldw	r2,164(sp)
10109218:	07000b44 	movi	fp,45
1010921c:	df002785 	stb	fp,158(sp)
10109220:	10017b16 	blt	r2,zero,10109810 <___vfprintf_internal_r+0x1c64>
10109224:	00bfdfc4 	movi	r2,-129
10109228:	90a4703a 	and	r18,r18,r2
1010922c:	003bb106 	br	101080f4 <_gp+0xfffe6920>
10109230:	d9003617 	ldw	r4,216(sp)
10109234:	d9403817 	ldw	r5,224(sp)
10109238:	da003d15 	stw	r8,244(sp)
1010923c:	010db280 	call	1010db28 <__fpclassifyd>
10109240:	da003d17 	ldw	r8,244(sp)
10109244:	1000f026 	beq	r2,zero,10109608 <___vfprintf_internal_r+0x1a5c>
10109248:	d9002917 	ldw	r4,164(sp)
1010924c:	05bff7c4 	movi	r22,-33
10109250:	00bfffc4 	movi	r2,-1
10109254:	8dac703a 	and	r22,r17,r22
10109258:	20820026 	beq	r4,r2,10109a5c <___vfprintf_internal_r+0x1eb0>
1010925c:	008011c4 	movi	r2,71
10109260:	b081f726 	beq	r22,r2,10109a40 <___vfprintf_internal_r+0x1e94>
10109264:	d9003817 	ldw	r4,224(sp)
10109268:	90c04014 	ori	r3,r18,256
1010926c:	d8c02b15 	stw	r3,172(sp)
10109270:	20021516 	blt	r4,zero,10109ac8 <___vfprintf_internal_r+0x1f1c>
10109274:	dcc03817 	ldw	r19,224(sp)
10109278:	d8002a05 	stb	zero,168(sp)
1010927c:	00801984 	movi	r2,102
10109280:	8881f926 	beq	r17,r2,10109a68 <___vfprintf_internal_r+0x1ebc>
10109284:	00801184 	movi	r2,70
10109288:	88821c26 	beq	r17,r2,10109afc <___vfprintf_internal_r+0x1f50>
1010928c:	00801144 	movi	r2,69
10109290:	b081ef26 	beq	r22,r2,10109a50 <___vfprintf_internal_r+0x1ea4>
10109294:	d8c02917 	ldw	r3,164(sp)
10109298:	d8802104 	addi	r2,sp,132
1010929c:	d8800315 	stw	r2,12(sp)
101092a0:	d9403617 	ldw	r5,216(sp)
101092a4:	d8802504 	addi	r2,sp,148
101092a8:	d9002c17 	ldw	r4,176(sp)
101092ac:	d8800215 	stw	r2,8(sp)
101092b0:	d8802604 	addi	r2,sp,152
101092b4:	d8c00015 	stw	r3,0(sp)
101092b8:	d8800115 	stw	r2,4(sp)
101092bc:	01c00084 	movi	r7,2
101092c0:	980d883a 	mov	r6,r19
101092c4:	d8c03c15 	stw	r3,240(sp)
101092c8:	da003d15 	stw	r8,244(sp)
101092cc:	010a29c0 	call	1010a29c <_dtoa_r>
101092d0:	1021883a 	mov	r16,r2
101092d4:	008019c4 	movi	r2,103
101092d8:	d8c03c17 	ldw	r3,240(sp)
101092dc:	da003d17 	ldw	r8,244(sp)
101092e0:	88817126 	beq	r17,r2,101098a8 <___vfprintf_internal_r+0x1cfc>
101092e4:	008011c4 	movi	r2,71
101092e8:	88829226 	beq	r17,r2,10109d34 <___vfprintf_internal_r+0x2188>
101092ec:	80f9883a 	add	fp,r16,r3
101092f0:	d9003617 	ldw	r4,216(sp)
101092f4:	000d883a 	mov	r6,zero
101092f8:	000f883a 	mov	r7,zero
101092fc:	980b883a 	mov	r5,r19
10109300:	da003d15 	stw	r8,244(sp)
10109304:	0112c800 	call	10112c80 <__eqdf2>
10109308:	da003d17 	ldw	r8,244(sp)
1010930c:	10018d26 	beq	r2,zero,10109944 <___vfprintf_internal_r+0x1d98>
10109310:	d8802117 	ldw	r2,132(sp)
10109314:	1700062e 	bgeu	r2,fp,10109330 <___vfprintf_internal_r+0x1784>
10109318:	01000c04 	movi	r4,48
1010931c:	10c00044 	addi	r3,r2,1
10109320:	d8c02115 	stw	r3,132(sp)
10109324:	11000005 	stb	r4,0(r2)
10109328:	d8802117 	ldw	r2,132(sp)
1010932c:	173ffb36 	bltu	r2,fp,1010931c <_gp+0xfffe7b48>
10109330:	1405c83a 	sub	r2,r2,r16
10109334:	d8803315 	stw	r2,204(sp)
10109338:	008011c4 	movi	r2,71
1010933c:	b0817626 	beq	r22,r2,10109918 <___vfprintf_internal_r+0x1d6c>
10109340:	00801944 	movi	r2,101
10109344:	1442810e 	bge	r2,r17,10109d4c <___vfprintf_internal_r+0x21a0>
10109348:	d8c02617 	ldw	r3,152(sp)
1010934c:	00801984 	movi	r2,102
10109350:	d8c03215 	stw	r3,200(sp)
10109354:	8881fe26 	beq	r17,r2,10109b50 <___vfprintf_internal_r+0x1fa4>
10109358:	d8c03217 	ldw	r3,200(sp)
1010935c:	d9003317 	ldw	r4,204(sp)
10109360:	1901dd16 	blt	r3,r4,10109ad8 <___vfprintf_internal_r+0x1f2c>
10109364:	9480004c 	andi	r18,r18,1
10109368:	90022b1e 	bne	r18,zero,10109c18 <___vfprintf_internal_r+0x206c>
1010936c:	1805883a 	mov	r2,r3
10109370:	18028016 	blt	r3,zero,10109d74 <___vfprintf_internal_r+0x21c8>
10109374:	d8c03217 	ldw	r3,200(sp)
10109378:	044019c4 	movi	r17,103
1010937c:	d8c02e15 	stw	r3,184(sp)
10109380:	df002a07 	ldb	fp,168(sp)
10109384:	e001531e 	bne	fp,zero,101098d4 <___vfprintf_internal_r+0x1d28>
10109388:	df002783 	ldbu	fp,158(sp)
1010938c:	d8802a15 	stw	r2,168(sp)
10109390:	dc802b17 	ldw	r18,172(sp)
10109394:	d8002915 	stw	zero,164(sp)
10109398:	003bd106 	br	101082e0 <_gp+0xfffe6b0c>
1010939c:	d8802d17 	ldw	r2,180(sp)
101093a0:	d8c02d17 	ldw	r3,180(sp)
101093a4:	d9002d17 	ldw	r4,180(sp)
101093a8:	10800017 	ldw	r2,0(r2)
101093ac:	18c00117 	ldw	r3,4(r3)
101093b0:	21000204 	addi	r4,r4,8
101093b4:	d8803615 	stw	r2,216(sp)
101093b8:	d8c03815 	stw	r3,224(sp)
101093bc:	d9002d15 	stw	r4,180(sp)
101093c0:	003b7506 	br	10108198 <_gp+0xfffe69c4>
101093c4:	ac400007 	ldb	r17,0(r21)
101093c8:	003a5906 	br	10107d30 <_gp+0xfffe655c>
101093cc:	9080100c 	andi	r2,r18,64
101093d0:	1000a826 	beq	r2,zero,10109674 <___vfprintf_internal_r+0x1ac8>
101093d4:	d9002d17 	ldw	r4,180(sp)
101093d8:	002d883a 	mov	r22,zero
101093dc:	24c0000b 	ldhu	r19,0(r4)
101093e0:	21000104 	addi	r4,r4,4
101093e4:	d9002d15 	stw	r4,180(sp)
101093e8:	003ccb06 	br	10108718 <_gp+0xfffe6f44>
101093ec:	d8c02d17 	ldw	r3,180(sp)
101093f0:	d9002917 	ldw	r4,164(sp)
101093f4:	002d883a 	mov	r22,zero
101093f8:	18800104 	addi	r2,r3,4
101093fc:	1cc00017 	ldw	r19,0(r3)
10109400:	203ebb0e 	bge	r4,zero,10108ef0 <_gp+0xfffe771c>
10109404:	003ef106 	br	10108fcc <_gp+0xfffe77f8>
10109408:	9080040c 	andi	r2,r18,16
1010940c:	1000921e 	bne	r2,zero,10109658 <___vfprintf_internal_r+0x1aac>
10109410:	9480100c 	andi	r18,r18,64
10109414:	90013926 	beq	r18,zero,101098fc <___vfprintf_internal_r+0x1d50>
10109418:	d9002d17 	ldw	r4,180(sp)
1010941c:	d9402f17 	ldw	r5,188(sp)
10109420:	20800017 	ldw	r2,0(r4)
10109424:	21000104 	addi	r4,r4,4
10109428:	d9002d15 	stw	r4,180(sp)
1010942c:	1140000d 	sth	r5,0(r2)
10109430:	003a1606 	br	10107c8c <_gp+0xfffe64b8>
10109434:	9080100c 	andi	r2,r18,64
10109438:	10008026 	beq	r2,zero,1010963c <___vfprintf_internal_r+0x1a90>
1010943c:	d8c02d17 	ldw	r3,180(sp)
10109440:	1cc0000f 	ldh	r19,0(r3)
10109444:	18c00104 	addi	r3,r3,4
10109448:	d8c02d15 	stw	r3,180(sp)
1010944c:	982dd7fa 	srai	r22,r19,31
10109450:	b005883a 	mov	r2,r22
10109454:	003b1f06 	br	101080d4 <_gp+0xfffe6900>
10109458:	9080100c 	andi	r2,r18,64
1010945c:	d8002785 	stb	zero,158(sp)
10109460:	10008a1e 	bne	r2,zero,1010968c <___vfprintf_internal_r+0x1ae0>
10109464:	d9402d17 	ldw	r5,180(sp)
10109468:	d8c02917 	ldw	r3,164(sp)
1010946c:	002d883a 	mov	r22,zero
10109470:	28800104 	addi	r2,r5,4
10109474:	2cc00017 	ldw	r19,0(r5)
10109478:	183e4b0e 	bge	r3,zero,10108da8 <_gp+0xfffe75d4>
1010947c:	9d86b03a 	or	r3,r19,r22
10109480:	d8802d15 	stw	r2,180(sp)
10109484:	183e4c1e 	bne	r3,zero,10108db8 <_gp+0xfffe75e4>
10109488:	0039883a 	mov	fp,zero
1010948c:	0005883a 	mov	r2,zero
10109490:	003d4006 	br	10108994 <_gp+0xfffe71c0>
10109494:	01440474 	movhi	r5,4113
10109498:	295e8784 	addi	r5,r5,31262
1010949c:	d9402b15 	stw	r5,172(sp)
101094a0:	d9402b17 	ldw	r5,172(sp)
101094a4:	1c47883a 	add	r3,r3,r17
101094a8:	10800044 	addi	r2,r2,1
101094ac:	41400015 	stw	r5,0(r8)
101094b0:	44400115 	stw	r17,4(r8)
101094b4:	d8c02015 	stw	r3,128(sp)
101094b8:	d8801f15 	stw	r2,124(sp)
101094bc:	010001c4 	movi	r4,7
101094c0:	20bec816 	blt	r4,r2,10108fe4 <_gp+0xfffe7810>
101094c4:	42000204 	addi	r8,r8,8
101094c8:	003ecd06 	br	10109000 <_gp+0xfffe782c>
101094cc:	d9002917 	ldw	r4,164(sp)
101094d0:	d8002785 	stb	zero,158(sp)
101094d4:	203d2d16 	blt	r4,zero,1010898c <_gp+0xfffe71b8>
101094d8:	00bfdfc4 	movi	r2,-129
101094dc:	90a4703a 	and	r18,r18,r2
101094e0:	003a9106 	br	10107f28 <_gp+0xfffe6754>
101094e4:	01040474 	movhi	r4,4113
101094e8:	211e8784 	addi	r4,r4,31262
101094ec:	d9002b15 	stw	r4,172(sp)
101094f0:	003c0c06 	br	10108524 <_gp+0xfffe6d50>
101094f4:	d9002c17 	ldw	r4,176(sp)
101094f8:	d9801e04 	addi	r6,sp,120
101094fc:	b80b883a 	mov	r5,r23
10109500:	010f4840 	call	1010f484 <__sprint_r>
10109504:	103aab1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10109508:	d8c02017 	ldw	r3,128(sp)
1010950c:	da000404 	addi	r8,sp,16
10109510:	003d4106 	br	10108a18 <_gp+0xfffe7244>
10109514:	d8801f17 	ldw	r2,124(sp)
10109518:	01440474 	movhi	r5,4113
1010951c:	01000044 	movi	r4,1
10109520:	18c00044 	addi	r3,r3,1
10109524:	10800044 	addi	r2,r2,1
10109528:	295e7f04 	addi	r5,r5,31228
1010952c:	41000115 	stw	r4,4(r8)
10109530:	41400015 	stw	r5,0(r8)
10109534:	d8c02015 	stw	r3,128(sp)
10109538:	d8801f15 	stw	r2,124(sp)
1010953c:	010001c4 	movi	r4,7
10109540:	20805c16 	blt	r4,r2,101096b4 <___vfprintf_internal_r+0x1b08>
10109544:	42000204 	addi	r8,r8,8
10109548:	8800041e 	bne	r17,zero,1010955c <___vfprintf_internal_r+0x19b0>
1010954c:	d8803317 	ldw	r2,204(sp)
10109550:	1000021e 	bne	r2,zero,1010955c <___vfprintf_internal_r+0x19b0>
10109554:	9080004c 	andi	r2,r18,1
10109558:	103c0926 	beq	r2,zero,10108580 <_gp+0xfffe6dac>
1010955c:	d9003717 	ldw	r4,220(sp)
10109560:	d8801f17 	ldw	r2,124(sp)
10109564:	d9403417 	ldw	r5,208(sp)
10109568:	20c7883a 	add	r3,r4,r3
1010956c:	10800044 	addi	r2,r2,1
10109570:	41000115 	stw	r4,4(r8)
10109574:	41400015 	stw	r5,0(r8)
10109578:	d8c02015 	stw	r3,128(sp)
1010957c:	d8801f15 	stw	r2,124(sp)
10109580:	010001c4 	movi	r4,7
10109584:	20812116 	blt	r4,r2,10109a0c <___vfprintf_internal_r+0x1e60>
10109588:	42000204 	addi	r8,r8,8
1010958c:	0463c83a 	sub	r17,zero,r17
10109590:	0440730e 	bge	zero,r17,10109760 <___vfprintf_internal_r+0x1bb4>
10109594:	05800404 	movi	r22,16
10109598:	b440860e 	bge	r22,r17,101097b4 <___vfprintf_internal_r+0x1c08>
1010959c:	01440474 	movhi	r5,4113
101095a0:	295e8784 	addi	r5,r5,31262
101095a4:	d9402b15 	stw	r5,172(sp)
101095a8:	070001c4 	movi	fp,7
101095ac:	dcc02c17 	ldw	r19,176(sp)
101095b0:	00000306 	br	101095c0 <___vfprintf_internal_r+0x1a14>
101095b4:	42000204 	addi	r8,r8,8
101095b8:	8c7ffc04 	addi	r17,r17,-16
101095bc:	b440800e 	bge	r22,r17,101097c0 <___vfprintf_internal_r+0x1c14>
101095c0:	18c00404 	addi	r3,r3,16
101095c4:	10800044 	addi	r2,r2,1
101095c8:	45000015 	stw	r20,0(r8)
101095cc:	45800115 	stw	r22,4(r8)
101095d0:	d8c02015 	stw	r3,128(sp)
101095d4:	d8801f15 	stw	r2,124(sp)
101095d8:	e0bff60e 	bge	fp,r2,101095b4 <_gp+0xfffe7de0>
101095dc:	d9801e04 	addi	r6,sp,120
101095e0:	b80b883a 	mov	r5,r23
101095e4:	9809883a 	mov	r4,r19
101095e8:	010f4840 	call	1010f484 <__sprint_r>
101095ec:	103a711e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
101095f0:	d8c02017 	ldw	r3,128(sp)
101095f4:	d8801f17 	ldw	r2,124(sp)
101095f8:	da000404 	addi	r8,sp,16
101095fc:	003fee06 	br	101095b8 <_gp+0xfffe7de4>
10109600:	00bfffc4 	movi	r2,-1
10109604:	003a6f06 	br	10107fc4 <_gp+0xfffe67f0>
10109608:	008011c4 	movi	r2,71
1010960c:	1440b816 	blt	r2,r17,101098f0 <___vfprintf_internal_r+0x1d44>
10109610:	04040474 	movhi	r16,4113
10109614:	841e7104 	addi	r16,r16,31172
10109618:	00c000c4 	movi	r3,3
1010961c:	00bfdfc4 	movi	r2,-129
10109620:	d8c02a15 	stw	r3,168(sp)
10109624:	90a4703a 	and	r18,r18,r2
10109628:	df002783 	ldbu	fp,158(sp)
1010962c:	d8c02e15 	stw	r3,184(sp)
10109630:	d8002915 	stw	zero,164(sp)
10109634:	d8003215 	stw	zero,200(sp)
10109638:	003b2906 	br	101082e0 <_gp+0xfffe6b0c>
1010963c:	d9002d17 	ldw	r4,180(sp)
10109640:	24c00017 	ldw	r19,0(r4)
10109644:	21000104 	addi	r4,r4,4
10109648:	d9002d15 	stw	r4,180(sp)
1010964c:	982dd7fa 	srai	r22,r19,31
10109650:	b005883a 	mov	r2,r22
10109654:	003a9f06 	br	101080d4 <_gp+0xfffe6900>
10109658:	d9402d17 	ldw	r5,180(sp)
1010965c:	d8c02f17 	ldw	r3,188(sp)
10109660:	28800017 	ldw	r2,0(r5)
10109664:	29400104 	addi	r5,r5,4
10109668:	d9402d15 	stw	r5,180(sp)
1010966c:	10c00015 	stw	r3,0(r2)
10109670:	00398606 	br	10107c8c <_gp+0xfffe64b8>
10109674:	d9402d17 	ldw	r5,180(sp)
10109678:	002d883a 	mov	r22,zero
1010967c:	2cc00017 	ldw	r19,0(r5)
10109680:	29400104 	addi	r5,r5,4
10109684:	d9402d15 	stw	r5,180(sp)
10109688:	003c2306 	br	10108718 <_gp+0xfffe6f44>
1010968c:	d8c02d17 	ldw	r3,180(sp)
10109690:	d9002917 	ldw	r4,164(sp)
10109694:	002d883a 	mov	r22,zero
10109698:	18800104 	addi	r2,r3,4
1010969c:	1cc0000b 	ldhu	r19,0(r3)
101096a0:	203dc10e 	bge	r4,zero,10108da8 <_gp+0xfffe75d4>
101096a4:	003f7506 	br	1010947c <_gp+0xfffe7ca8>
101096a8:	04040474 	movhi	r16,4113
101096ac:	841e6f04 	addi	r16,r16,31164
101096b0:	003acc06 	br	101081e4 <_gp+0xfffe6a10>
101096b4:	d9002c17 	ldw	r4,176(sp)
101096b8:	d9801e04 	addi	r6,sp,120
101096bc:	b80b883a 	mov	r5,r23
101096c0:	010f4840 	call	1010f484 <__sprint_r>
101096c4:	103a3b1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
101096c8:	dc402617 	ldw	r17,152(sp)
101096cc:	d8c02017 	ldw	r3,128(sp)
101096d0:	da000404 	addi	r8,sp,16
101096d4:	003f9c06 	br	10109548 <_gp+0xfffe7d74>
101096d8:	ac400043 	ldbu	r17,1(r21)
101096dc:	94800814 	ori	r18,r18,32
101096e0:	ad400044 	addi	r21,r21,1
101096e4:	8c403fcc 	andi	r17,r17,255
101096e8:	8c40201c 	xori	r17,r17,128
101096ec:	8c7fe004 	addi	r17,r17,-128
101096f0:	00398f06 	br	10107d30 <_gp+0xfffe655c>
101096f4:	d8c02d15 	stw	r3,180(sp)
101096f8:	0039883a 	mov	fp,zero
101096fc:	003e3506 	br	10108fd4 <_gp+0xfffe7800>
10109700:	d9002c17 	ldw	r4,176(sp)
10109704:	d9801e04 	addi	r6,sp,120
10109708:	b80b883a 	mov	r5,r23
1010970c:	010f4840 	call	1010f484 <__sprint_r>
10109710:	103a281e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10109714:	d8c02017 	ldw	r3,128(sp)
10109718:	da000404 	addi	r8,sp,16
1010971c:	003cd006 	br	10108a60 <_gp+0xfffe728c>
10109720:	8009883a 	mov	r4,r16
10109724:	da003d15 	stw	r8,244(sp)
10109728:	01058d40 	call	101058d4 <strlen>
1010972c:	d8802e15 	stw	r2,184(sp)
10109730:	da003d17 	ldw	r8,244(sp)
10109734:	103c340e 	bge	r2,zero,10108808 <_gp+0xfffe7034>
10109738:	0005883a 	mov	r2,zero
1010973c:	003c3206 	br	10108808 <_gp+0xfffe7034>
10109740:	d9002c17 	ldw	r4,176(sp)
10109744:	d9801e04 	addi	r6,sp,120
10109748:	b80b883a 	mov	r5,r23
1010974c:	010f4840 	call	1010f484 <__sprint_r>
10109750:	103a181e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10109754:	d8c02017 	ldw	r3,128(sp)
10109758:	d8801f17 	ldw	r2,124(sp)
1010975c:	da000404 	addi	r8,sp,16
10109760:	d9403317 	ldw	r5,204(sp)
10109764:	10800044 	addi	r2,r2,1
10109768:	44000015 	stw	r16,0(r8)
1010976c:	28c7883a 	add	r3,r5,r3
10109770:	003b7d06 	br	10108568 <_gp+0xfffe6d94>
10109774:	01040474 	movhi	r4,4113
10109778:	211e8b84 	addi	r4,r4,31278
1010977c:	d9003515 	stw	r4,212(sp)
10109780:	003b1406 	br	101083d4 <_gp+0xfffe6c00>
10109784:	013fffc4 	movi	r4,-1
10109788:	003a3506 	br	10108060 <_gp+0xfffe688c>
1010978c:	0023883a 	mov	r17,zero
10109790:	003d9d06 	br	10108e08 <_gp+0xfffe7634>
10109794:	d9002c17 	ldw	r4,176(sp)
10109798:	d9801e04 	addi	r6,sp,120
1010979c:	b80b883a 	mov	r5,r23
101097a0:	010f4840 	call	1010f484 <__sprint_r>
101097a4:	103a031e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
101097a8:	d8c02017 	ldw	r3,128(sp)
101097ac:	da000404 	addi	r8,sp,16
101097b0:	003d9406 	br	10108e04 <_gp+0xfffe7630>
101097b4:	01040474 	movhi	r4,4113
101097b8:	211e8784 	addi	r4,r4,31262
101097bc:	d9002b15 	stw	r4,172(sp)
101097c0:	d9002b17 	ldw	r4,172(sp)
101097c4:	1c47883a 	add	r3,r3,r17
101097c8:	10800044 	addi	r2,r2,1
101097cc:	41000015 	stw	r4,0(r8)
101097d0:	44400115 	stw	r17,4(r8)
101097d4:	d8c02015 	stw	r3,128(sp)
101097d8:	d8801f15 	stw	r2,124(sp)
101097dc:	010001c4 	movi	r4,7
101097e0:	20bfd716 	blt	r4,r2,10109740 <_gp+0xfffe7f6c>
101097e4:	42000204 	addi	r8,r8,8
101097e8:	003fdd06 	br	10109760 <_gp+0xfffe7f8c>
101097ec:	d9002c17 	ldw	r4,176(sp)
101097f0:	d9801e04 	addi	r6,sp,120
101097f4:	b80b883a 	mov	r5,r23
101097f8:	010f4840 	call	1010f484 <__sprint_r>
101097fc:	1039ed1e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10109800:	d8802617 	ldw	r2,152(sp)
10109804:	d8c02017 	ldw	r3,128(sp)
10109808:	da000404 	addi	r8,sp,16
1010980c:	003e1006 	br	10109050 <_gp+0xfffe787c>
10109810:	00800044 	movi	r2,1
10109814:	10803fcc 	andi	r2,r2,255
10109818:	00c00044 	movi	r3,1
1010981c:	10fa3526 	beq	r2,r3,101080f4 <_gp+0xfffe6920>
10109820:	00c00084 	movi	r3,2
10109824:	10fbcb26 	beq	r2,r3,10108754 <_gp+0xfffe6f80>
10109828:	003a8f06 	br	10108268 <_gp+0xfffe6a94>
1010982c:	01040474 	movhi	r4,4113
10109830:	211e8b84 	addi	r4,r4,31278
10109834:	d9003515 	stw	r4,212(sp)
10109838:	003b7606 	br	10108614 <_gp+0xfffe6e40>
1010983c:	d8802917 	ldw	r2,164(sp)
10109840:	00c00184 	movi	r3,6
10109844:	1880012e 	bgeu	r3,r2,1010984c <___vfprintf_internal_r+0x1ca0>
10109848:	1805883a 	mov	r2,r3
1010984c:	d8802e15 	stw	r2,184(sp)
10109850:	1000ef16 	blt	r2,zero,10109c10 <___vfprintf_internal_r+0x2064>
10109854:	04040474 	movhi	r16,4113
10109858:	d8802a15 	stw	r2,168(sp)
1010985c:	dcc02d15 	stw	r19,180(sp)
10109860:	d8002915 	stw	zero,164(sp)
10109864:	d8003215 	stw	zero,200(sp)
10109868:	841e7d04 	addi	r16,r16,31220
1010986c:	0039883a 	mov	fp,zero
10109870:	003aa206 	br	101082fc <_gp+0xfffe6b28>
10109874:	0021883a 	mov	r16,zero
10109878:	003e0706 	br	10109098 <_gp+0xfffe78c4>
1010987c:	d9002c17 	ldw	r4,176(sp)
10109880:	d9801e04 	addi	r6,sp,120
10109884:	b80b883a 	mov	r5,r23
10109888:	010f4840 	call	1010f484 <__sprint_r>
1010988c:	1039c91e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10109890:	d8802617 	ldw	r2,152(sp)
10109894:	d9403317 	ldw	r5,204(sp)
10109898:	d8c02017 	ldw	r3,128(sp)
1010989c:	da000404 	addi	r8,sp,16
101098a0:	2885c83a 	sub	r2,r5,r2
101098a4:	003dfb06 	br	10109094 <_gp+0xfffe78c0>
101098a8:	9080004c 	andi	r2,r18,1
101098ac:	103e8f1e 	bne	r2,zero,101092ec <_gp+0xfffe7b18>
101098b0:	d8802117 	ldw	r2,132(sp)
101098b4:	003e9e06 	br	10109330 <_gp+0xfffe7b5c>
101098b8:	1025883a 	mov	r18,r2
101098bc:	0039883a 	mov	fp,zero
101098c0:	00800084 	movi	r2,2
101098c4:	003fd306 	br	10109814 <_gp+0xfffe8040>
101098c8:	07000b44 	movi	fp,45
101098cc:	df002785 	stb	fp,158(sp)
101098d0:	003a4006 	br	101081d4 <_gp+0xfffe6a00>
101098d4:	00c00b44 	movi	r3,45
101098d8:	d8c02785 	stb	r3,158(sp)
101098dc:	d8802a15 	stw	r2,168(sp)
101098e0:	dc802b17 	ldw	r18,172(sp)
101098e4:	d8002915 	stw	zero,164(sp)
101098e8:	07000b44 	movi	fp,45
101098ec:	003a8006 	br	101082f0 <_gp+0xfffe6b1c>
101098f0:	04040474 	movhi	r16,4113
101098f4:	841e7204 	addi	r16,r16,31176
101098f8:	003f4706 	br	10109618 <_gp+0xfffe7e44>
101098fc:	d8c02d17 	ldw	r3,180(sp)
10109900:	d9002f17 	ldw	r4,188(sp)
10109904:	18800017 	ldw	r2,0(r3)
10109908:	18c00104 	addi	r3,r3,4
1010990c:	d8c02d15 	stw	r3,180(sp)
10109910:	11000015 	stw	r4,0(r2)
10109914:	0038dd06 	br	10107c8c <_gp+0xfffe64b8>
10109918:	dd802617 	ldw	r22,152(sp)
1010991c:	00bfff44 	movi	r2,-3
10109920:	b0801c16 	blt	r22,r2,10109994 <___vfprintf_internal_r+0x1de8>
10109924:	d9402917 	ldw	r5,164(sp)
10109928:	2d801a16 	blt	r5,r22,10109994 <___vfprintf_internal_r+0x1de8>
1010992c:	dd803215 	stw	r22,200(sp)
10109930:	003e8906 	br	10109358 <_gp+0xfffe7b84>
10109934:	01040474 	movhi	r4,4113
10109938:	211e8784 	addi	r4,r4,31262
1010993c:	d9002b15 	stw	r4,172(sp)
10109940:	003c9106 	br	10108b88 <_gp+0xfffe73b4>
10109944:	e005883a 	mov	r2,fp
10109948:	003e7906 	br	10109330 <_gp+0xfffe7b5c>
1010994c:	d9402917 	ldw	r5,164(sp)
10109950:	df002783 	ldbu	fp,158(sp)
10109954:	dcc02d15 	stw	r19,180(sp)
10109958:	d9402a15 	stw	r5,168(sp)
1010995c:	d9402e15 	stw	r5,184(sp)
10109960:	d8002915 	stw	zero,164(sp)
10109964:	d8003215 	stw	zero,200(sp)
10109968:	003a5d06 	br	101082e0 <_gp+0xfffe6b0c>
1010996c:	9080004c 	andi	r2,r18,1
10109970:	0039883a 	mov	fp,zero
10109974:	10000426 	beq	r2,zero,10109988 <___vfprintf_internal_r+0x1ddc>
10109978:	00800c04 	movi	r2,48
1010997c:	dc001dc4 	addi	r16,sp,119
10109980:	d8801dc5 	stb	r2,119(sp)
10109984:	003b8006 	br	10108788 <_gp+0xfffe6fb4>
10109988:	d8002e15 	stw	zero,184(sp)
1010998c:	dc001e04 	addi	r16,sp,120
10109990:	003a4d06 	br	101082c8 <_gp+0xfffe6af4>
10109994:	8c7fff84 	addi	r17,r17,-2
10109998:	b5bfffc4 	addi	r22,r22,-1
1010999c:	dd802615 	stw	r22,152(sp)
101099a0:	dc4022c5 	stb	r17,139(sp)
101099a4:	b000bf16 	blt	r22,zero,10109ca4 <___vfprintf_internal_r+0x20f8>
101099a8:	00800ac4 	movi	r2,43
101099ac:	d8802305 	stb	r2,140(sp)
101099b0:	00800244 	movi	r2,9
101099b4:	15807016 	blt	r2,r22,10109b78 <___vfprintf_internal_r+0x1fcc>
101099b8:	00800c04 	movi	r2,48
101099bc:	b5800c04 	addi	r22,r22,48
101099c0:	d8802345 	stb	r2,141(sp)
101099c4:	dd802385 	stb	r22,142(sp)
101099c8:	d88023c4 	addi	r2,sp,143
101099cc:	df0022c4 	addi	fp,sp,139
101099d0:	d8c03317 	ldw	r3,204(sp)
101099d4:	1739c83a 	sub	fp,r2,fp
101099d8:	d9003317 	ldw	r4,204(sp)
101099dc:	e0c7883a 	add	r3,fp,r3
101099e0:	df003a15 	stw	fp,232(sp)
101099e4:	d8c02e15 	stw	r3,184(sp)
101099e8:	00800044 	movi	r2,1
101099ec:	1100b30e 	bge	r2,r4,10109cbc <___vfprintf_internal_r+0x2110>
101099f0:	d8c02e17 	ldw	r3,184(sp)
101099f4:	18c00044 	addi	r3,r3,1
101099f8:	d8c02e15 	stw	r3,184(sp)
101099fc:	1805883a 	mov	r2,r3
10109a00:	1800ac16 	blt	r3,zero,10109cb4 <___vfprintf_internal_r+0x2108>
10109a04:	d8003215 	stw	zero,200(sp)
10109a08:	003e5d06 	br	10109380 <_gp+0xfffe7bac>
10109a0c:	d9002c17 	ldw	r4,176(sp)
10109a10:	d9801e04 	addi	r6,sp,120
10109a14:	b80b883a 	mov	r5,r23
10109a18:	010f4840 	call	1010f484 <__sprint_r>
10109a1c:	1039651e 	bne	r2,zero,10107fb4 <_gp+0xfffe67e0>
10109a20:	dc402617 	ldw	r17,152(sp)
10109a24:	d8c02017 	ldw	r3,128(sp)
10109a28:	d8801f17 	ldw	r2,124(sp)
10109a2c:	da000404 	addi	r8,sp,16
10109a30:	003ed606 	br	1010958c <_gp+0xfffe7db8>
10109a34:	582b883a 	mov	r21,r11
10109a38:	d8002915 	stw	zero,164(sp)
10109a3c:	0038bd06 	br	10107d34 <_gp+0xfffe6560>
10109a40:	d8802917 	ldw	r2,164(sp)
10109a44:	103e071e 	bne	r2,zero,10109264 <_gp+0xfffe7a90>
10109a48:	dc002915 	stw	r16,164(sp)
10109a4c:	003e0506 	br	10109264 <_gp+0xfffe7a90>
10109a50:	d9002917 	ldw	r4,164(sp)
10109a54:	20c00044 	addi	r3,r4,1
10109a58:	003e0f06 	br	10109298 <_gp+0xfffe7ac4>
10109a5c:	01400184 	movi	r5,6
10109a60:	d9402915 	stw	r5,164(sp)
10109a64:	003dff06 	br	10109264 <_gp+0xfffe7a90>
10109a68:	d8802104 	addi	r2,sp,132
10109a6c:	d8800315 	stw	r2,12(sp)
10109a70:	d8802504 	addi	r2,sp,148
10109a74:	d8800215 	stw	r2,8(sp)
10109a78:	d8802604 	addi	r2,sp,152
10109a7c:	d8800115 	stw	r2,4(sp)
10109a80:	d8802917 	ldw	r2,164(sp)
10109a84:	d9403617 	ldw	r5,216(sp)
10109a88:	d9002c17 	ldw	r4,176(sp)
10109a8c:	d8800015 	stw	r2,0(sp)
10109a90:	01c000c4 	movi	r7,3
10109a94:	980d883a 	mov	r6,r19
10109a98:	da003d15 	stw	r8,244(sp)
10109a9c:	010a29c0 	call	1010a29c <_dtoa_r>
10109aa0:	d8c02917 	ldw	r3,164(sp)
10109aa4:	da003d17 	ldw	r8,244(sp)
10109aa8:	1021883a 	mov	r16,r2
10109aac:	10f9883a 	add	fp,r2,r3
10109ab0:	81000007 	ldb	r4,0(r16)
10109ab4:	00800c04 	movi	r2,48
10109ab8:	20805e26 	beq	r4,r2,10109c34 <___vfprintf_internal_r+0x2088>
10109abc:	d8c02617 	ldw	r3,152(sp)
10109ac0:	e0f9883a 	add	fp,fp,r3
10109ac4:	003e0a06 	br	101092f0 <_gp+0xfffe7b1c>
10109ac8:	00c00b44 	movi	r3,45
10109acc:	24e0003c 	xorhi	r19,r4,32768
10109ad0:	d8c02a05 	stb	r3,168(sp)
10109ad4:	003de906 	br	1010927c <_gp+0xfffe7aa8>
10109ad8:	d8c03217 	ldw	r3,200(sp)
10109adc:	00c07a0e 	bge	zero,r3,10109cc8 <___vfprintf_internal_r+0x211c>
10109ae0:	00800044 	movi	r2,1
10109ae4:	d9003317 	ldw	r4,204(sp)
10109ae8:	1105883a 	add	r2,r2,r4
10109aec:	d8802e15 	stw	r2,184(sp)
10109af0:	10004e16 	blt	r2,zero,10109c2c <___vfprintf_internal_r+0x2080>
10109af4:	044019c4 	movi	r17,103
10109af8:	003e2106 	br	10109380 <_gp+0xfffe7bac>
10109afc:	d9002917 	ldw	r4,164(sp)
10109b00:	d8802104 	addi	r2,sp,132
10109b04:	d8800315 	stw	r2,12(sp)
10109b08:	d9000015 	stw	r4,0(sp)
10109b0c:	d8802504 	addi	r2,sp,148
10109b10:	d9403617 	ldw	r5,216(sp)
10109b14:	d9002c17 	ldw	r4,176(sp)
10109b18:	d8800215 	stw	r2,8(sp)
10109b1c:	d8802604 	addi	r2,sp,152
10109b20:	d8800115 	stw	r2,4(sp)
10109b24:	01c000c4 	movi	r7,3
10109b28:	980d883a 	mov	r6,r19
10109b2c:	da003d15 	stw	r8,244(sp)
10109b30:	010a29c0 	call	1010a29c <_dtoa_r>
10109b34:	d8c02917 	ldw	r3,164(sp)
10109b38:	da003d17 	ldw	r8,244(sp)
10109b3c:	1021883a 	mov	r16,r2
10109b40:	00801184 	movi	r2,70
10109b44:	80f9883a 	add	fp,r16,r3
10109b48:	88bfd926 	beq	r17,r2,10109ab0 <_gp+0xfffe82dc>
10109b4c:	003de806 	br	101092f0 <_gp+0xfffe7b1c>
10109b50:	d9002917 	ldw	r4,164(sp)
10109b54:	00c04d0e 	bge	zero,r3,10109c8c <___vfprintf_internal_r+0x20e0>
10109b58:	2000441e 	bne	r4,zero,10109c6c <___vfprintf_internal_r+0x20c0>
10109b5c:	9480004c 	andi	r18,r18,1
10109b60:	9000421e 	bne	r18,zero,10109c6c <___vfprintf_internal_r+0x20c0>
10109b64:	1805883a 	mov	r2,r3
10109b68:	18007016 	blt	r3,zero,10109d2c <___vfprintf_internal_r+0x2180>
10109b6c:	d8c03217 	ldw	r3,200(sp)
10109b70:	d8c02e15 	stw	r3,184(sp)
10109b74:	003e0206 	br	10109380 <_gp+0xfffe7bac>
10109b78:	df0022c4 	addi	fp,sp,139
10109b7c:	dc002915 	stw	r16,164(sp)
10109b80:	4027883a 	mov	r19,r8
10109b84:	e021883a 	mov	r16,fp
10109b88:	b009883a 	mov	r4,r22
10109b8c:	01400284 	movi	r5,10
10109b90:	01031200 	call	10103120 <__modsi3>
10109b94:	10800c04 	addi	r2,r2,48
10109b98:	843fffc4 	addi	r16,r16,-1
10109b9c:	b009883a 	mov	r4,r22
10109ba0:	01400284 	movi	r5,10
10109ba4:	80800005 	stb	r2,0(r16)
10109ba8:	010309c0 	call	1010309c <__divsi3>
10109bac:	102d883a 	mov	r22,r2
10109bb0:	00800244 	movi	r2,9
10109bb4:	15bff416 	blt	r2,r22,10109b88 <_gp+0xfffe83b4>
10109bb8:	9811883a 	mov	r8,r19
10109bbc:	b0800c04 	addi	r2,r22,48
10109bc0:	8027883a 	mov	r19,r16
10109bc4:	997fffc4 	addi	r5,r19,-1
10109bc8:	98bfffc5 	stb	r2,-1(r19)
10109bcc:	dc002917 	ldw	r16,164(sp)
10109bd0:	2f006a2e 	bgeu	r5,fp,10109d7c <___vfprintf_internal_r+0x21d0>
10109bd4:	d9c02384 	addi	r7,sp,142
10109bd8:	3ccfc83a 	sub	r7,r7,r19
10109bdc:	d9002344 	addi	r4,sp,141
10109be0:	e1cf883a 	add	r7,fp,r7
10109be4:	00000106 	br	10109bec <___vfprintf_internal_r+0x2040>
10109be8:	28800003 	ldbu	r2,0(r5)
10109bec:	20800005 	stb	r2,0(r4)
10109bf0:	21000044 	addi	r4,r4,1
10109bf4:	29400044 	addi	r5,r5,1
10109bf8:	393ffb1e 	bne	r7,r4,10109be8 <_gp+0xfffe8414>
10109bfc:	d8802304 	addi	r2,sp,140
10109c00:	14c5c83a 	sub	r2,r2,r19
10109c04:	d8c02344 	addi	r3,sp,141
10109c08:	1885883a 	add	r2,r3,r2
10109c0c:	003f7006 	br	101099d0 <_gp+0xfffe81fc>
10109c10:	0005883a 	mov	r2,zero
10109c14:	003f0f06 	br	10109854 <_gp+0xfffe8080>
10109c18:	d8c03217 	ldw	r3,200(sp)
10109c1c:	18c00044 	addi	r3,r3,1
10109c20:	d8c02e15 	stw	r3,184(sp)
10109c24:	1805883a 	mov	r2,r3
10109c28:	183fb20e 	bge	r3,zero,10109af4 <_gp+0xfffe8320>
10109c2c:	0005883a 	mov	r2,zero
10109c30:	003fb006 	br	10109af4 <_gp+0xfffe8320>
10109c34:	d9003617 	ldw	r4,216(sp)
10109c38:	000d883a 	mov	r6,zero
10109c3c:	000f883a 	mov	r7,zero
10109c40:	980b883a 	mov	r5,r19
10109c44:	d8c03c15 	stw	r3,240(sp)
10109c48:	da003d15 	stw	r8,244(sp)
10109c4c:	0112c800 	call	10112c80 <__eqdf2>
10109c50:	d8c03c17 	ldw	r3,240(sp)
10109c54:	da003d17 	ldw	r8,244(sp)
10109c58:	103f9826 	beq	r2,zero,10109abc <_gp+0xfffe82e8>
10109c5c:	00800044 	movi	r2,1
10109c60:	10c7c83a 	sub	r3,r2,r3
10109c64:	d8c02615 	stw	r3,152(sp)
10109c68:	003f9506 	br	10109ac0 <_gp+0xfffe82ec>
10109c6c:	d9002917 	ldw	r4,164(sp)
10109c70:	d8c03217 	ldw	r3,200(sp)
10109c74:	20800044 	addi	r2,r4,1
10109c78:	1885883a 	add	r2,r3,r2
10109c7c:	d8802e15 	stw	r2,184(sp)
10109c80:	103dbf0e 	bge	r2,zero,10109380 <_gp+0xfffe7bac>
10109c84:	0005883a 	mov	r2,zero
10109c88:	003dbd06 	br	10109380 <_gp+0xfffe7bac>
10109c8c:	2000211e 	bne	r4,zero,10109d14 <___vfprintf_internal_r+0x2168>
10109c90:	9480004c 	andi	r18,r18,1
10109c94:	90001f1e 	bne	r18,zero,10109d14 <___vfprintf_internal_r+0x2168>
10109c98:	00800044 	movi	r2,1
10109c9c:	d8802e15 	stw	r2,184(sp)
10109ca0:	003db706 	br	10109380 <_gp+0xfffe7bac>
10109ca4:	00800b44 	movi	r2,45
10109ca8:	05adc83a 	sub	r22,zero,r22
10109cac:	d8802305 	stb	r2,140(sp)
10109cb0:	003f3f06 	br	101099b0 <_gp+0xfffe81dc>
10109cb4:	0005883a 	mov	r2,zero
10109cb8:	003f5206 	br	10109a04 <_gp+0xfffe8230>
10109cbc:	90a4703a 	and	r18,r18,r2
10109cc0:	903f4e26 	beq	r18,zero,101099fc <_gp+0xfffe8228>
10109cc4:	003f4a06 	br	101099f0 <_gp+0xfffe821c>
10109cc8:	00800084 	movi	r2,2
10109ccc:	10c5c83a 	sub	r2,r2,r3
10109cd0:	003f8406 	br	10109ae4 <_gp+0xfffe8310>
10109cd4:	d8802d17 	ldw	r2,180(sp)
10109cd8:	d9002d17 	ldw	r4,180(sp)
10109cdc:	ac400043 	ldbu	r17,1(r21)
10109ce0:	10800017 	ldw	r2,0(r2)
10109ce4:	582b883a 	mov	r21,r11
10109ce8:	d8802915 	stw	r2,164(sp)
10109cec:	20800104 	addi	r2,r4,4
10109cf0:	d9002917 	ldw	r4,164(sp)
10109cf4:	d8802d15 	stw	r2,180(sp)
10109cf8:	203e7a0e 	bge	r4,zero,101096e4 <_gp+0xfffe7f10>
10109cfc:	8c403fcc 	andi	r17,r17,255
10109d00:	00bfffc4 	movi	r2,-1
10109d04:	8c40201c 	xori	r17,r17,128
10109d08:	d8802915 	stw	r2,164(sp)
10109d0c:	8c7fe004 	addi	r17,r17,-128
10109d10:	00380706 	br	10107d30 <_gp+0xfffe655c>
10109d14:	d8c02917 	ldw	r3,164(sp)
10109d18:	18c00084 	addi	r3,r3,2
10109d1c:	d8c02e15 	stw	r3,184(sp)
10109d20:	1805883a 	mov	r2,r3
10109d24:	183d960e 	bge	r3,zero,10109380 <_gp+0xfffe7bac>
10109d28:	003fd606 	br	10109c84 <_gp+0xfffe84b0>
10109d2c:	0005883a 	mov	r2,zero
10109d30:	003f8e06 	br	10109b6c <_gp+0xfffe8398>
10109d34:	9080004c 	andi	r2,r18,1
10109d38:	103f811e 	bne	r2,zero,10109b40 <_gp+0xfffe836c>
10109d3c:	d8802117 	ldw	r2,132(sp)
10109d40:	1405c83a 	sub	r2,r2,r16
10109d44:	d8803315 	stw	r2,204(sp)
10109d48:	b47ef326 	beq	r22,r17,10109918 <_gp+0xfffe8144>
10109d4c:	dd802617 	ldw	r22,152(sp)
10109d50:	003f1106 	br	10109998 <_gp+0xfffe81c4>
10109d54:	d9c02785 	stb	r7,158(sp)
10109d58:	00390406 	br	1010816c <_gp+0xfffe6998>
10109d5c:	d9c02785 	stb	r7,158(sp)
10109d60:	0038d306 	br	101080b0 <_gp+0xfffe68dc>
10109d64:	d9c02785 	stb	r7,158(sp)
10109d68:	003a6106 	br	101086f0 <_gp+0xfffe6f1c>
10109d6c:	d9c02785 	stb	r7,158(sp)
10109d70:	003af806 	br	10108954 <_gp+0xfffe7180>
10109d74:	0005883a 	mov	r2,zero
10109d78:	003d7e06 	br	10109374 <_gp+0xfffe7ba0>
10109d7c:	d8802344 	addi	r2,sp,141
10109d80:	003f1306 	br	101099d0 <_gp+0xfffe81fc>
10109d84:	d9c02785 	stb	r7,158(sp)
10109d88:	00392306 	br	10108218 <_gp+0xfffe6a44>
10109d8c:	d9c02785 	stb	r7,158(sp)
10109d90:	003aa906 	br	10108838 <_gp+0xfffe7064>
10109d94:	d9c02785 	stb	r7,158(sp)
10109d98:	003a3d06 	br	10108690 <_gp+0xfffe6ebc>
10109d9c:	d9c02785 	stb	r7,158(sp)
10109da0:	003aca06 	br	101088cc <_gp+0xfffe70f8>

10109da4 <__vfprintf_internal>:
10109da4:	008404b4 	movhi	r2,4114
10109da8:	10a5f604 	addi	r2,r2,-26664
10109dac:	300f883a 	mov	r7,r6
10109db0:	280d883a 	mov	r6,r5
10109db4:	200b883a 	mov	r5,r4
10109db8:	11000017 	ldw	r4,0(r2)
10109dbc:	0107bac1 	jmpi	10107bac <___vfprintf_internal_r>

10109dc0 <__sbprintf>:
10109dc0:	2880030b 	ldhu	r2,12(r5)
10109dc4:	2ac01917 	ldw	r11,100(r5)
10109dc8:	2a80038b 	ldhu	r10,14(r5)
10109dcc:	2a400717 	ldw	r9,28(r5)
10109dd0:	2a000917 	ldw	r8,36(r5)
10109dd4:	defee204 	addi	sp,sp,-1144
10109dd8:	00c10004 	movi	r3,1024
10109ddc:	dc011a15 	stw	r16,1128(sp)
10109de0:	10bfff4c 	andi	r2,r2,65533
10109de4:	2821883a 	mov	r16,r5
10109de8:	d8cb883a 	add	r5,sp,r3
10109dec:	dc811c15 	stw	r18,1136(sp)
10109df0:	dc411b15 	stw	r17,1132(sp)
10109df4:	dfc11d15 	stw	ra,1140(sp)
10109df8:	2025883a 	mov	r18,r4
10109dfc:	d881030d 	sth	r2,1036(sp)
10109e00:	dac11915 	stw	r11,1124(sp)
10109e04:	da81038d 	sth	r10,1038(sp)
10109e08:	da410715 	stw	r9,1052(sp)
10109e0c:	da010915 	stw	r8,1060(sp)
10109e10:	dec10015 	stw	sp,1024(sp)
10109e14:	dec10415 	stw	sp,1040(sp)
10109e18:	d8c10215 	stw	r3,1032(sp)
10109e1c:	d8c10515 	stw	r3,1044(sp)
10109e20:	d8010615 	stw	zero,1048(sp)
10109e24:	0107bac0 	call	10107bac <___vfprintf_internal_r>
10109e28:	1023883a 	mov	r17,r2
10109e2c:	10000416 	blt	r2,zero,10109e40 <__sbprintf+0x80>
10109e30:	d9410004 	addi	r5,sp,1024
10109e34:	9009883a 	mov	r4,r18
10109e38:	01035ec0 	call	101035ec <_fflush_r>
10109e3c:	10000d1e 	bne	r2,zero,10109e74 <__sbprintf+0xb4>
10109e40:	d881030b 	ldhu	r2,1036(sp)
10109e44:	1080100c 	andi	r2,r2,64
10109e48:	10000326 	beq	r2,zero,10109e58 <__sbprintf+0x98>
10109e4c:	8080030b 	ldhu	r2,12(r16)
10109e50:	10801014 	ori	r2,r2,64
10109e54:	8080030d 	sth	r2,12(r16)
10109e58:	8805883a 	mov	r2,r17
10109e5c:	dfc11d17 	ldw	ra,1140(sp)
10109e60:	dc811c17 	ldw	r18,1136(sp)
10109e64:	dc411b17 	ldw	r17,1132(sp)
10109e68:	dc011a17 	ldw	r16,1128(sp)
10109e6c:	dec11e04 	addi	sp,sp,1144
10109e70:	f800283a 	ret
10109e74:	047fffc4 	movi	r17,-1
10109e78:	003ff106 	br	10109e40 <_gp+0xfffe866c>

10109e7c <_write_r>:
10109e7c:	defffd04 	addi	sp,sp,-12
10109e80:	2805883a 	mov	r2,r5
10109e84:	dc000015 	stw	r16,0(sp)
10109e88:	040404b4 	movhi	r16,4114
10109e8c:	dc400115 	stw	r17,4(sp)
10109e90:	300b883a 	mov	r5,r6
10109e94:	842cef04 	addi	r16,r16,-19524
10109e98:	2023883a 	mov	r17,r4
10109e9c:	380d883a 	mov	r6,r7
10109ea0:	1009883a 	mov	r4,r2
10109ea4:	dfc00215 	stw	ra,8(sp)
10109ea8:	80000015 	stw	zero,0(r16)
10109eac:	01153e40 	call	101153e4 <write>
10109eb0:	00ffffc4 	movi	r3,-1
10109eb4:	10c00526 	beq	r2,r3,10109ecc <_write_r+0x50>
10109eb8:	dfc00217 	ldw	ra,8(sp)
10109ebc:	dc400117 	ldw	r17,4(sp)
10109ec0:	dc000017 	ldw	r16,0(sp)
10109ec4:	dec00304 	addi	sp,sp,12
10109ec8:	f800283a 	ret
10109ecc:	80c00017 	ldw	r3,0(r16)
10109ed0:	183ff926 	beq	r3,zero,10109eb8 <_gp+0xfffe86e4>
10109ed4:	88c00015 	stw	r3,0(r17)
10109ed8:	003ff706 	br	10109eb8 <_gp+0xfffe86e4>

10109edc <__swsetup_r>:
10109edc:	008404b4 	movhi	r2,4114
10109ee0:	defffd04 	addi	sp,sp,-12
10109ee4:	10a5f604 	addi	r2,r2,-26664
10109ee8:	dc400115 	stw	r17,4(sp)
10109eec:	2023883a 	mov	r17,r4
10109ef0:	11000017 	ldw	r4,0(r2)
10109ef4:	dc000015 	stw	r16,0(sp)
10109ef8:	dfc00215 	stw	ra,8(sp)
10109efc:	2821883a 	mov	r16,r5
10109f00:	20000226 	beq	r4,zero,10109f0c <__swsetup_r+0x30>
10109f04:	20800e17 	ldw	r2,56(r4)
10109f08:	10003126 	beq	r2,zero,10109fd0 <__swsetup_r+0xf4>
10109f0c:	8080030b 	ldhu	r2,12(r16)
10109f10:	10c0020c 	andi	r3,r2,8
10109f14:	1009883a 	mov	r4,r2
10109f18:	18000f26 	beq	r3,zero,10109f58 <__swsetup_r+0x7c>
10109f1c:	80c00417 	ldw	r3,16(r16)
10109f20:	18001526 	beq	r3,zero,10109f78 <__swsetup_r+0x9c>
10109f24:	1100004c 	andi	r4,r2,1
10109f28:	20001c1e 	bne	r4,zero,10109f9c <__swsetup_r+0xc0>
10109f2c:	1080008c 	andi	r2,r2,2
10109f30:	1000291e 	bne	r2,zero,10109fd8 <__swsetup_r+0xfc>
10109f34:	80800517 	ldw	r2,20(r16)
10109f38:	80800215 	stw	r2,8(r16)
10109f3c:	18001c26 	beq	r3,zero,10109fb0 <__swsetup_r+0xd4>
10109f40:	0005883a 	mov	r2,zero
10109f44:	dfc00217 	ldw	ra,8(sp)
10109f48:	dc400117 	ldw	r17,4(sp)
10109f4c:	dc000017 	ldw	r16,0(sp)
10109f50:	dec00304 	addi	sp,sp,12
10109f54:	f800283a 	ret
10109f58:	2080040c 	andi	r2,r4,16
10109f5c:	10002e26 	beq	r2,zero,1010a018 <__swsetup_r+0x13c>
10109f60:	2080010c 	andi	r2,r4,4
10109f64:	10001e1e 	bne	r2,zero,10109fe0 <__swsetup_r+0x104>
10109f68:	80c00417 	ldw	r3,16(r16)
10109f6c:	20800214 	ori	r2,r4,8
10109f70:	8080030d 	sth	r2,12(r16)
10109f74:	183feb1e 	bne	r3,zero,10109f24 <_gp+0xfffe8750>
10109f78:	1100a00c 	andi	r4,r2,640
10109f7c:	01408004 	movi	r5,512
10109f80:	217fe826 	beq	r4,r5,10109f24 <_gp+0xfffe8750>
10109f84:	800b883a 	mov	r5,r16
10109f88:	8809883a 	mov	r4,r17
10109f8c:	01047640 	call	10104764 <__smakebuf_r>
10109f90:	8080030b 	ldhu	r2,12(r16)
10109f94:	80c00417 	ldw	r3,16(r16)
10109f98:	003fe206 	br	10109f24 <_gp+0xfffe8750>
10109f9c:	80800517 	ldw	r2,20(r16)
10109fa0:	80000215 	stw	zero,8(r16)
10109fa4:	0085c83a 	sub	r2,zero,r2
10109fa8:	80800615 	stw	r2,24(r16)
10109fac:	183fe41e 	bne	r3,zero,10109f40 <_gp+0xfffe876c>
10109fb0:	80c0030b 	ldhu	r3,12(r16)
10109fb4:	0005883a 	mov	r2,zero
10109fb8:	1900200c 	andi	r4,r3,128
10109fbc:	203fe126 	beq	r4,zero,10109f44 <_gp+0xfffe8770>
10109fc0:	18c01014 	ori	r3,r3,64
10109fc4:	80c0030d 	sth	r3,12(r16)
10109fc8:	00bfffc4 	movi	r2,-1
10109fcc:	003fdd06 	br	10109f44 <_gp+0xfffe8770>
10109fd0:	01039c80 	call	101039c8 <__sinit>
10109fd4:	003fcd06 	br	10109f0c <_gp+0xfffe8738>
10109fd8:	0005883a 	mov	r2,zero
10109fdc:	003fd606 	br	10109f38 <_gp+0xfffe8764>
10109fe0:	81400c17 	ldw	r5,48(r16)
10109fe4:	28000626 	beq	r5,zero,1010a000 <__swsetup_r+0x124>
10109fe8:	80801004 	addi	r2,r16,64
10109fec:	28800326 	beq	r5,r2,10109ffc <__swsetup_r+0x120>
10109ff0:	8809883a 	mov	r4,r17
10109ff4:	0103cf00 	call	10103cf0 <_free_r>
10109ff8:	8100030b 	ldhu	r4,12(r16)
10109ffc:	80000c15 	stw	zero,48(r16)
1010a000:	80c00417 	ldw	r3,16(r16)
1010a004:	00bff6c4 	movi	r2,-37
1010a008:	1108703a 	and	r4,r2,r4
1010a00c:	80000115 	stw	zero,4(r16)
1010a010:	80c00015 	stw	r3,0(r16)
1010a014:	003fd506 	br	10109f6c <_gp+0xfffe8798>
1010a018:	00800244 	movi	r2,9
1010a01c:	88800015 	stw	r2,0(r17)
1010a020:	20801014 	ori	r2,r4,64
1010a024:	8080030d 	sth	r2,12(r16)
1010a028:	00bfffc4 	movi	r2,-1
1010a02c:	003fc506 	br	10109f44 <_gp+0xfffe8770>

1010a030 <_close_r>:
1010a030:	defffd04 	addi	sp,sp,-12
1010a034:	dc000015 	stw	r16,0(sp)
1010a038:	040404b4 	movhi	r16,4114
1010a03c:	dc400115 	stw	r17,4(sp)
1010a040:	842cef04 	addi	r16,r16,-19524
1010a044:	2023883a 	mov	r17,r4
1010a048:	2809883a 	mov	r4,r5
1010a04c:	dfc00215 	stw	ra,8(sp)
1010a050:	80000015 	stw	zero,0(r16)
1010a054:	01141900 	call	10114190 <close>
1010a058:	00ffffc4 	movi	r3,-1
1010a05c:	10c00526 	beq	r2,r3,1010a074 <_close_r+0x44>
1010a060:	dfc00217 	ldw	ra,8(sp)
1010a064:	dc400117 	ldw	r17,4(sp)
1010a068:	dc000017 	ldw	r16,0(sp)
1010a06c:	dec00304 	addi	sp,sp,12
1010a070:	f800283a 	ret
1010a074:	80c00017 	ldw	r3,0(r16)
1010a078:	183ff926 	beq	r3,zero,1010a060 <_gp+0xfffe888c>
1010a07c:	88c00015 	stw	r3,0(r17)
1010a080:	003ff706 	br	1010a060 <_gp+0xfffe888c>

1010a084 <abort>:
1010a084:	deffff04 	addi	sp,sp,-4
1010a088:	01000184 	movi	r4,6
1010a08c:	dfc00015 	stw	ra,0(sp)
1010a090:	010ddf00 	call	1010ddf0 <raise>
1010a094:	01000044 	movi	r4,1
1010a098:	011428c0 	call	1011428c <_exit>

1010a09c <quorem>:
1010a09c:	defff704 	addi	sp,sp,-36
1010a0a0:	dc800215 	stw	r18,8(sp)
1010a0a4:	20800417 	ldw	r2,16(r4)
1010a0a8:	2c800417 	ldw	r18,16(r5)
1010a0ac:	dfc00815 	stw	ra,32(sp)
1010a0b0:	ddc00715 	stw	r23,28(sp)
1010a0b4:	dd800615 	stw	r22,24(sp)
1010a0b8:	dd400515 	stw	r21,20(sp)
1010a0bc:	dd000415 	stw	r20,16(sp)
1010a0c0:	dcc00315 	stw	r19,12(sp)
1010a0c4:	dc400115 	stw	r17,4(sp)
1010a0c8:	dc000015 	stw	r16,0(sp)
1010a0cc:	14807116 	blt	r2,r18,1010a294 <quorem+0x1f8>
1010a0d0:	94bfffc4 	addi	r18,r18,-1
1010a0d4:	94ad883a 	add	r22,r18,r18
1010a0d8:	b5ad883a 	add	r22,r22,r22
1010a0dc:	2c400504 	addi	r17,r5,20
1010a0e0:	8da9883a 	add	r20,r17,r22
1010a0e4:	25400504 	addi	r21,r4,20
1010a0e8:	282f883a 	mov	r23,r5
1010a0ec:	adad883a 	add	r22,r21,r22
1010a0f0:	a1400017 	ldw	r5,0(r20)
1010a0f4:	2021883a 	mov	r16,r4
1010a0f8:	b1000017 	ldw	r4,0(r22)
1010a0fc:	29400044 	addi	r5,r5,1
1010a100:	01031940 	call	10103194 <__udivsi3>
1010a104:	1027883a 	mov	r19,r2
1010a108:	10002c26 	beq	r2,zero,1010a1bc <quorem+0x120>
1010a10c:	a813883a 	mov	r9,r21
1010a110:	880b883a 	mov	r5,r17
1010a114:	0009883a 	mov	r4,zero
1010a118:	000d883a 	mov	r6,zero
1010a11c:	2a000017 	ldw	r8,0(r5)
1010a120:	49c00017 	ldw	r7,0(r9)
1010a124:	29400104 	addi	r5,r5,4
1010a128:	40bfffcc 	andi	r2,r8,65535
1010a12c:	14c5383a 	mul	r2,r2,r19
1010a130:	4010d43a 	srli	r8,r8,16
1010a134:	38ffffcc 	andi	r3,r7,65535
1010a138:	1105883a 	add	r2,r2,r4
1010a13c:	1008d43a 	srli	r4,r2,16
1010a140:	44d1383a 	mul	r8,r8,r19
1010a144:	198d883a 	add	r6,r3,r6
1010a148:	10ffffcc 	andi	r3,r2,65535
1010a14c:	30c7c83a 	sub	r3,r6,r3
1010a150:	380ed43a 	srli	r7,r7,16
1010a154:	4105883a 	add	r2,r8,r4
1010a158:	180dd43a 	srai	r6,r3,16
1010a15c:	113fffcc 	andi	r4,r2,65535
1010a160:	390fc83a 	sub	r7,r7,r4
1010a164:	398d883a 	add	r6,r7,r6
1010a168:	300e943a 	slli	r7,r6,16
1010a16c:	18ffffcc 	andi	r3,r3,65535
1010a170:	1008d43a 	srli	r4,r2,16
1010a174:	38ceb03a 	or	r7,r7,r3
1010a178:	49c00015 	stw	r7,0(r9)
1010a17c:	300dd43a 	srai	r6,r6,16
1010a180:	4a400104 	addi	r9,r9,4
1010a184:	a17fe52e 	bgeu	r20,r5,1010a11c <_gp+0xfffe8948>
1010a188:	b0800017 	ldw	r2,0(r22)
1010a18c:	10000b1e 	bne	r2,zero,1010a1bc <quorem+0x120>
1010a190:	b0bfff04 	addi	r2,r22,-4
1010a194:	a880082e 	bgeu	r21,r2,1010a1b8 <quorem+0x11c>
1010a198:	b0ffff17 	ldw	r3,-4(r22)
1010a19c:	18000326 	beq	r3,zero,1010a1ac <quorem+0x110>
1010a1a0:	00000506 	br	1010a1b8 <quorem+0x11c>
1010a1a4:	10c00017 	ldw	r3,0(r2)
1010a1a8:	1800031e 	bne	r3,zero,1010a1b8 <quorem+0x11c>
1010a1ac:	10bfff04 	addi	r2,r2,-4
1010a1b0:	94bfffc4 	addi	r18,r18,-1
1010a1b4:	a8bffb36 	bltu	r21,r2,1010a1a4 <_gp+0xfffe89d0>
1010a1b8:	84800415 	stw	r18,16(r16)
1010a1bc:	b80b883a 	mov	r5,r23
1010a1c0:	8009883a 	mov	r4,r16
1010a1c4:	010ccc80 	call	1010ccc8 <__mcmp>
1010a1c8:	10002616 	blt	r2,zero,1010a264 <quorem+0x1c8>
1010a1cc:	9cc00044 	addi	r19,r19,1
1010a1d0:	a805883a 	mov	r2,r21
1010a1d4:	000b883a 	mov	r5,zero
1010a1d8:	11000017 	ldw	r4,0(r2)
1010a1dc:	89800017 	ldw	r6,0(r17)
1010a1e0:	10800104 	addi	r2,r2,4
1010a1e4:	20ffffcc 	andi	r3,r4,65535
1010a1e8:	194b883a 	add	r5,r3,r5
1010a1ec:	30ffffcc 	andi	r3,r6,65535
1010a1f0:	28c7c83a 	sub	r3,r5,r3
1010a1f4:	300cd43a 	srli	r6,r6,16
1010a1f8:	2008d43a 	srli	r4,r4,16
1010a1fc:	180bd43a 	srai	r5,r3,16
1010a200:	18ffffcc 	andi	r3,r3,65535
1010a204:	2189c83a 	sub	r4,r4,r6
1010a208:	2149883a 	add	r4,r4,r5
1010a20c:	200c943a 	slli	r6,r4,16
1010a210:	8c400104 	addi	r17,r17,4
1010a214:	200bd43a 	srai	r5,r4,16
1010a218:	30c6b03a 	or	r3,r6,r3
1010a21c:	10ffff15 	stw	r3,-4(r2)
1010a220:	a47fed2e 	bgeu	r20,r17,1010a1d8 <_gp+0xfffe8a04>
1010a224:	9485883a 	add	r2,r18,r18
1010a228:	1085883a 	add	r2,r2,r2
1010a22c:	a887883a 	add	r3,r21,r2
1010a230:	18800017 	ldw	r2,0(r3)
1010a234:	10000b1e 	bne	r2,zero,1010a264 <quorem+0x1c8>
1010a238:	18bfff04 	addi	r2,r3,-4
1010a23c:	a880082e 	bgeu	r21,r2,1010a260 <quorem+0x1c4>
1010a240:	18ffff17 	ldw	r3,-4(r3)
1010a244:	18000326 	beq	r3,zero,1010a254 <quorem+0x1b8>
1010a248:	00000506 	br	1010a260 <quorem+0x1c4>
1010a24c:	10c00017 	ldw	r3,0(r2)
1010a250:	1800031e 	bne	r3,zero,1010a260 <quorem+0x1c4>
1010a254:	10bfff04 	addi	r2,r2,-4
1010a258:	94bfffc4 	addi	r18,r18,-1
1010a25c:	a8bffb36 	bltu	r21,r2,1010a24c <_gp+0xfffe8a78>
1010a260:	84800415 	stw	r18,16(r16)
1010a264:	9805883a 	mov	r2,r19
1010a268:	dfc00817 	ldw	ra,32(sp)
1010a26c:	ddc00717 	ldw	r23,28(sp)
1010a270:	dd800617 	ldw	r22,24(sp)
1010a274:	dd400517 	ldw	r21,20(sp)
1010a278:	dd000417 	ldw	r20,16(sp)
1010a27c:	dcc00317 	ldw	r19,12(sp)
1010a280:	dc800217 	ldw	r18,8(sp)
1010a284:	dc400117 	ldw	r17,4(sp)
1010a288:	dc000017 	ldw	r16,0(sp)
1010a28c:	dec00904 	addi	sp,sp,36
1010a290:	f800283a 	ret
1010a294:	0005883a 	mov	r2,zero
1010a298:	003ff306 	br	1010a268 <_gp+0xfffe8a94>

1010a29c <_dtoa_r>:
1010a29c:	20801017 	ldw	r2,64(r4)
1010a2a0:	deffde04 	addi	sp,sp,-136
1010a2a4:	df002015 	stw	fp,128(sp)
1010a2a8:	dcc01b15 	stw	r19,108(sp)
1010a2ac:	dc801a15 	stw	r18,104(sp)
1010a2b0:	dc401915 	stw	r17,100(sp)
1010a2b4:	dc001815 	stw	r16,96(sp)
1010a2b8:	dfc02115 	stw	ra,132(sp)
1010a2bc:	ddc01f15 	stw	r23,124(sp)
1010a2c0:	dd801e15 	stw	r22,120(sp)
1010a2c4:	dd401d15 	stw	r21,116(sp)
1010a2c8:	dd001c15 	stw	r20,112(sp)
1010a2cc:	d9c00315 	stw	r7,12(sp)
1010a2d0:	2039883a 	mov	fp,r4
1010a2d4:	3023883a 	mov	r17,r6
1010a2d8:	2825883a 	mov	r18,r5
1010a2dc:	dc002417 	ldw	r16,144(sp)
1010a2e0:	3027883a 	mov	r19,r6
1010a2e4:	10000826 	beq	r2,zero,1010a308 <_dtoa_r+0x6c>
1010a2e8:	21801117 	ldw	r6,68(r4)
1010a2ec:	00c00044 	movi	r3,1
1010a2f0:	100b883a 	mov	r5,r2
1010a2f4:	1986983a 	sll	r3,r3,r6
1010a2f8:	11800115 	stw	r6,4(r2)
1010a2fc:	10c00215 	stw	r3,8(r2)
1010a300:	010c4a80 	call	1010c4a8 <_Bfree>
1010a304:	e0001015 	stw	zero,64(fp)
1010a308:	88002e16 	blt	r17,zero,1010a3c4 <_dtoa_r+0x128>
1010a30c:	80000015 	stw	zero,0(r16)
1010a310:	889ffc2c 	andhi	r2,r17,32752
1010a314:	00dffc34 	movhi	r3,32752
1010a318:	10c01c26 	beq	r2,r3,1010a38c <_dtoa_r+0xf0>
1010a31c:	000d883a 	mov	r6,zero
1010a320:	000f883a 	mov	r7,zero
1010a324:	9009883a 	mov	r4,r18
1010a328:	980b883a 	mov	r5,r19
1010a32c:	0112c800 	call	10112c80 <__eqdf2>
1010a330:	10002b1e 	bne	r2,zero,1010a3e0 <_dtoa_r+0x144>
1010a334:	d9c02317 	ldw	r7,140(sp)
1010a338:	00800044 	movi	r2,1
1010a33c:	38800015 	stw	r2,0(r7)
1010a340:	d8802517 	ldw	r2,148(sp)
1010a344:	10019e26 	beq	r2,zero,1010a9c0 <_dtoa_r+0x724>
1010a348:	d8c02517 	ldw	r3,148(sp)
1010a34c:	00840474 	movhi	r2,4113
1010a350:	109e7f44 	addi	r2,r2,31229
1010a354:	18800015 	stw	r2,0(r3)
1010a358:	10bfffc4 	addi	r2,r2,-1
1010a35c:	dfc02117 	ldw	ra,132(sp)
1010a360:	df002017 	ldw	fp,128(sp)
1010a364:	ddc01f17 	ldw	r23,124(sp)
1010a368:	dd801e17 	ldw	r22,120(sp)
1010a36c:	dd401d17 	ldw	r21,116(sp)
1010a370:	dd001c17 	ldw	r20,112(sp)
1010a374:	dcc01b17 	ldw	r19,108(sp)
1010a378:	dc801a17 	ldw	r18,104(sp)
1010a37c:	dc401917 	ldw	r17,100(sp)
1010a380:	dc001817 	ldw	r16,96(sp)
1010a384:	dec02204 	addi	sp,sp,136
1010a388:	f800283a 	ret
1010a38c:	d8c02317 	ldw	r3,140(sp)
1010a390:	0089c3c4 	movi	r2,9999
1010a394:	18800015 	stw	r2,0(r3)
1010a398:	90017726 	beq	r18,zero,1010a978 <_dtoa_r+0x6dc>
1010a39c:	00840474 	movhi	r2,4113
1010a3a0:	109e9304 	addi	r2,r2,31308
1010a3a4:	d9002517 	ldw	r4,148(sp)
1010a3a8:	203fec26 	beq	r4,zero,1010a35c <_gp+0xfffe8b88>
1010a3ac:	10c000c7 	ldb	r3,3(r2)
1010a3b0:	1801781e 	bne	r3,zero,1010a994 <_dtoa_r+0x6f8>
1010a3b4:	10c000c4 	addi	r3,r2,3
1010a3b8:	d9802517 	ldw	r6,148(sp)
1010a3bc:	30c00015 	stw	r3,0(r6)
1010a3c0:	003fe606 	br	1010a35c <_gp+0xfffe8b88>
1010a3c4:	04e00034 	movhi	r19,32768
1010a3c8:	9cffffc4 	addi	r19,r19,-1
1010a3cc:	00800044 	movi	r2,1
1010a3d0:	8ce6703a 	and	r19,r17,r19
1010a3d4:	80800015 	stw	r2,0(r16)
1010a3d8:	9823883a 	mov	r17,r19
1010a3dc:	003fcc06 	br	1010a310 <_gp+0xfffe8b3c>
1010a3e0:	d8800204 	addi	r2,sp,8
1010a3e4:	d8800015 	stw	r2,0(sp)
1010a3e8:	d9c00104 	addi	r7,sp,4
1010a3ec:	900b883a 	mov	r5,r18
1010a3f0:	980d883a 	mov	r6,r19
1010a3f4:	e009883a 	mov	r4,fp
1010a3f8:	8820d53a 	srli	r16,r17,20
1010a3fc:	010d0940 	call	1010d094 <__d2b>
1010a400:	d8800915 	stw	r2,36(sp)
1010a404:	8001651e 	bne	r16,zero,1010a99c <_dtoa_r+0x700>
1010a408:	dd800217 	ldw	r22,8(sp)
1010a40c:	dc000117 	ldw	r16,4(sp)
1010a410:	00800804 	movi	r2,32
1010a414:	b421883a 	add	r16,r22,r16
1010a418:	80c10c84 	addi	r3,r16,1074
1010a41c:	10c2d10e 	bge	r2,r3,1010af64 <_dtoa_r+0xcc8>
1010a420:	00801004 	movi	r2,64
1010a424:	81010484 	addi	r4,r16,1042
1010a428:	10c7c83a 	sub	r3,r2,r3
1010a42c:	9108d83a 	srl	r4,r18,r4
1010a430:	88e2983a 	sll	r17,r17,r3
1010a434:	2448b03a 	or	r4,r4,r17
1010a438:	01140480 	call	10114048 <__floatunsidf>
1010a43c:	017f8434 	movhi	r5,65040
1010a440:	01800044 	movi	r6,1
1010a444:	1009883a 	mov	r4,r2
1010a448:	194b883a 	add	r5,r3,r5
1010a44c:	843fffc4 	addi	r16,r16,-1
1010a450:	d9801115 	stw	r6,68(sp)
1010a454:	000d883a 	mov	r6,zero
1010a458:	01cffe34 	movhi	r7,16376
1010a45c:	01135f00 	call	101135f0 <__subdf3>
1010a460:	0198dbf4 	movhi	r6,25455
1010a464:	01cff4f4 	movhi	r7,16339
1010a468:	3190d844 	addi	r6,r6,17249
1010a46c:	39e1e9c4 	addi	r7,r7,-30809
1010a470:	1009883a 	mov	r4,r2
1010a474:	180b883a 	mov	r5,r3
1010a478:	0112ed80 	call	10112ed8 <__muldf3>
1010a47c:	01a2d874 	movhi	r6,35681
1010a480:	01cff1f4 	movhi	r7,16327
1010a484:	31b22cc4 	addi	r6,r6,-14157
1010a488:	39e28a04 	addi	r7,r7,-30168
1010a48c:	180b883a 	mov	r5,r3
1010a490:	1009883a 	mov	r4,r2
1010a494:	0111aec0 	call	10111aec <__adddf3>
1010a498:	8009883a 	mov	r4,r16
1010a49c:	1029883a 	mov	r20,r2
1010a4a0:	1823883a 	mov	r17,r3
1010a4a4:	0113f6c0 	call	10113f6c <__floatsidf>
1010a4a8:	019427f4 	movhi	r6,20639
1010a4ac:	01cff4f4 	movhi	r7,16339
1010a4b0:	319e7ec4 	addi	r6,r6,31227
1010a4b4:	39d104c4 	addi	r7,r7,17427
1010a4b8:	1009883a 	mov	r4,r2
1010a4bc:	180b883a 	mov	r5,r3
1010a4c0:	0112ed80 	call	10112ed8 <__muldf3>
1010a4c4:	100d883a 	mov	r6,r2
1010a4c8:	180f883a 	mov	r7,r3
1010a4cc:	a009883a 	mov	r4,r20
1010a4d0:	880b883a 	mov	r5,r17
1010a4d4:	0111aec0 	call	10111aec <__adddf3>
1010a4d8:	1009883a 	mov	r4,r2
1010a4dc:	180b883a 	mov	r5,r3
1010a4e0:	1029883a 	mov	r20,r2
1010a4e4:	1823883a 	mov	r17,r3
1010a4e8:	0113eec0 	call	10113eec <__fixdfsi>
1010a4ec:	000d883a 	mov	r6,zero
1010a4f0:	000f883a 	mov	r7,zero
1010a4f4:	a009883a 	mov	r4,r20
1010a4f8:	880b883a 	mov	r5,r17
1010a4fc:	d8800515 	stw	r2,20(sp)
1010a500:	0112de40 	call	10112de4 <__ledf2>
1010a504:	10028716 	blt	r2,zero,1010af24 <_dtoa_r+0xc88>
1010a508:	d8c00517 	ldw	r3,20(sp)
1010a50c:	00800584 	movi	r2,22
1010a510:	10c27536 	bltu	r2,r3,1010aee8 <_dtoa_r+0xc4c>
1010a514:	180490fa 	slli	r2,r3,3
1010a518:	00c40474 	movhi	r3,4113
1010a51c:	18deae04 	addi	r3,r3,31416
1010a520:	1885883a 	add	r2,r3,r2
1010a524:	11000017 	ldw	r4,0(r2)
1010a528:	11400117 	ldw	r5,4(r2)
1010a52c:	900d883a 	mov	r6,r18
1010a530:	980f883a 	mov	r7,r19
1010a534:	0112d080 	call	10112d08 <__gedf2>
1010a538:	00828d0e 	bge	zero,r2,1010af70 <_dtoa_r+0xcd4>
1010a53c:	d9000517 	ldw	r4,20(sp)
1010a540:	d8000e15 	stw	zero,56(sp)
1010a544:	213fffc4 	addi	r4,r4,-1
1010a548:	d9000515 	stw	r4,20(sp)
1010a54c:	b42dc83a 	sub	r22,r22,r16
1010a550:	b5bfffc4 	addi	r22,r22,-1
1010a554:	b0026f16 	blt	r22,zero,1010af14 <_dtoa_r+0xc78>
1010a558:	d8000815 	stw	zero,32(sp)
1010a55c:	d9c00517 	ldw	r7,20(sp)
1010a560:	38026416 	blt	r7,zero,1010aef4 <_dtoa_r+0xc58>
1010a564:	b1ed883a 	add	r22,r22,r7
1010a568:	d9c00d15 	stw	r7,52(sp)
1010a56c:	d8000a15 	stw	zero,40(sp)
1010a570:	d9800317 	ldw	r6,12(sp)
1010a574:	00800244 	movi	r2,9
1010a578:	11811436 	bltu	r2,r6,1010a9cc <_dtoa_r+0x730>
1010a57c:	00800144 	movi	r2,5
1010a580:	1184e10e 	bge	r2,r6,1010b908 <_dtoa_r+0x166c>
1010a584:	31bfff04 	addi	r6,r6,-4
1010a588:	d9800315 	stw	r6,12(sp)
1010a58c:	0023883a 	mov	r17,zero
1010a590:	d9800317 	ldw	r6,12(sp)
1010a594:	008000c4 	movi	r2,3
1010a598:	30836726 	beq	r6,r2,1010b338 <_dtoa_r+0x109c>
1010a59c:	1183410e 	bge	r2,r6,1010b2a4 <_dtoa_r+0x1008>
1010a5a0:	d9c00317 	ldw	r7,12(sp)
1010a5a4:	00800104 	movi	r2,4
1010a5a8:	38827c26 	beq	r7,r2,1010af9c <_dtoa_r+0xd00>
1010a5ac:	00800144 	movi	r2,5
1010a5b0:	3884c41e 	bne	r7,r2,1010b8c4 <_dtoa_r+0x1628>
1010a5b4:	00800044 	movi	r2,1
1010a5b8:	d8800b15 	stw	r2,44(sp)
1010a5bc:	d8c00517 	ldw	r3,20(sp)
1010a5c0:	d9002217 	ldw	r4,136(sp)
1010a5c4:	1907883a 	add	r3,r3,r4
1010a5c8:	19800044 	addi	r6,r3,1
1010a5cc:	d8c00c15 	stw	r3,48(sp)
1010a5d0:	d9800615 	stw	r6,24(sp)
1010a5d4:	0183a40e 	bge	zero,r6,1010b468 <_dtoa_r+0x11cc>
1010a5d8:	d9800617 	ldw	r6,24(sp)
1010a5dc:	3021883a 	mov	r16,r6
1010a5e0:	e0001115 	stw	zero,68(fp)
1010a5e4:	008005c4 	movi	r2,23
1010a5e8:	1184c92e 	bgeu	r2,r6,1010b910 <_dtoa_r+0x1674>
1010a5ec:	00c00044 	movi	r3,1
1010a5f0:	00800104 	movi	r2,4
1010a5f4:	1085883a 	add	r2,r2,r2
1010a5f8:	11000504 	addi	r4,r2,20
1010a5fc:	180b883a 	mov	r5,r3
1010a600:	18c00044 	addi	r3,r3,1
1010a604:	313ffb2e 	bgeu	r6,r4,1010a5f4 <_gp+0xfffe8e20>
1010a608:	e1401115 	stw	r5,68(fp)
1010a60c:	e009883a 	mov	r4,fp
1010a610:	010c4000 	call	1010c400 <_Balloc>
1010a614:	d8800715 	stw	r2,28(sp)
1010a618:	e0801015 	stw	r2,64(fp)
1010a61c:	00800384 	movi	r2,14
1010a620:	1400f736 	bltu	r2,r16,1010aa00 <_dtoa_r+0x764>
1010a624:	8800f626 	beq	r17,zero,1010aa00 <_dtoa_r+0x764>
1010a628:	d9c00517 	ldw	r7,20(sp)
1010a62c:	01c39a0e 	bge	zero,r7,1010b498 <_dtoa_r+0x11fc>
1010a630:	388003cc 	andi	r2,r7,15
1010a634:	100490fa 	slli	r2,r2,3
1010a638:	382bd13a 	srai	r21,r7,4
1010a63c:	00c40474 	movhi	r3,4113
1010a640:	18deae04 	addi	r3,r3,31416
1010a644:	1885883a 	add	r2,r3,r2
1010a648:	a8c0040c 	andi	r3,r21,16
1010a64c:	12400017 	ldw	r9,0(r2)
1010a650:	12000117 	ldw	r8,4(r2)
1010a654:	18037926 	beq	r3,zero,1010b43c <_dtoa_r+0x11a0>
1010a658:	00840474 	movhi	r2,4113
1010a65c:	109ea404 	addi	r2,r2,31376
1010a660:	11800817 	ldw	r6,32(r2)
1010a664:	11c00917 	ldw	r7,36(r2)
1010a668:	9009883a 	mov	r4,r18
1010a66c:	980b883a 	mov	r5,r19
1010a670:	da001715 	stw	r8,92(sp)
1010a674:	da401615 	stw	r9,88(sp)
1010a678:	01123980 	call	10112398 <__divdf3>
1010a67c:	da001717 	ldw	r8,92(sp)
1010a680:	da401617 	ldw	r9,88(sp)
1010a684:	ad4003cc 	andi	r21,r21,15
1010a688:	040000c4 	movi	r16,3
1010a68c:	1023883a 	mov	r17,r2
1010a690:	1829883a 	mov	r20,r3
1010a694:	a8001126 	beq	r21,zero,1010a6dc <_dtoa_r+0x440>
1010a698:	05c40474 	movhi	r23,4113
1010a69c:	bddea404 	addi	r23,r23,31376
1010a6a0:	4805883a 	mov	r2,r9
1010a6a4:	4007883a 	mov	r3,r8
1010a6a8:	a980004c 	andi	r6,r21,1
1010a6ac:	1009883a 	mov	r4,r2
1010a6b0:	a82bd07a 	srai	r21,r21,1
1010a6b4:	180b883a 	mov	r5,r3
1010a6b8:	30000426 	beq	r6,zero,1010a6cc <_dtoa_r+0x430>
1010a6bc:	b9800017 	ldw	r6,0(r23)
1010a6c0:	b9c00117 	ldw	r7,4(r23)
1010a6c4:	84000044 	addi	r16,r16,1
1010a6c8:	0112ed80 	call	10112ed8 <__muldf3>
1010a6cc:	bdc00204 	addi	r23,r23,8
1010a6d0:	a83ff51e 	bne	r21,zero,1010a6a8 <_gp+0xfffe8ed4>
1010a6d4:	1013883a 	mov	r9,r2
1010a6d8:	1811883a 	mov	r8,r3
1010a6dc:	480d883a 	mov	r6,r9
1010a6e0:	400f883a 	mov	r7,r8
1010a6e4:	8809883a 	mov	r4,r17
1010a6e8:	a00b883a 	mov	r5,r20
1010a6ec:	01123980 	call	10112398 <__divdf3>
1010a6f0:	d8800f15 	stw	r2,60(sp)
1010a6f4:	d8c01015 	stw	r3,64(sp)
1010a6f8:	d8c00e17 	ldw	r3,56(sp)
1010a6fc:	18000626 	beq	r3,zero,1010a718 <_dtoa_r+0x47c>
1010a700:	d9000f17 	ldw	r4,60(sp)
1010a704:	d9401017 	ldw	r5,64(sp)
1010a708:	000d883a 	mov	r6,zero
1010a70c:	01cffc34 	movhi	r7,16368
1010a710:	0112de40 	call	10112de4 <__ledf2>
1010a714:	10040b16 	blt	r2,zero,1010b744 <_dtoa_r+0x14a8>
1010a718:	8009883a 	mov	r4,r16
1010a71c:	0113f6c0 	call	10113f6c <__floatsidf>
1010a720:	d9800f17 	ldw	r6,60(sp)
1010a724:	d9c01017 	ldw	r7,64(sp)
1010a728:	1009883a 	mov	r4,r2
1010a72c:	180b883a 	mov	r5,r3
1010a730:	0112ed80 	call	10112ed8 <__muldf3>
1010a734:	000d883a 	mov	r6,zero
1010a738:	01d00734 	movhi	r7,16412
1010a73c:	1009883a 	mov	r4,r2
1010a740:	180b883a 	mov	r5,r3
1010a744:	0111aec0 	call	10111aec <__adddf3>
1010a748:	1021883a 	mov	r16,r2
1010a74c:	d8800617 	ldw	r2,24(sp)
1010a750:	047f3034 	movhi	r17,64704
1010a754:	1c63883a 	add	r17,r3,r17
1010a758:	10031826 	beq	r2,zero,1010b3bc <_dtoa_r+0x1120>
1010a75c:	d8c00517 	ldw	r3,20(sp)
1010a760:	db000617 	ldw	r12,24(sp)
1010a764:	d8c01315 	stw	r3,76(sp)
1010a768:	d9000b17 	ldw	r4,44(sp)
1010a76c:	20038f26 	beq	r4,zero,1010b5ac <_dtoa_r+0x1310>
1010a770:	60bfffc4 	addi	r2,r12,-1
1010a774:	100490fa 	slli	r2,r2,3
1010a778:	00c40474 	movhi	r3,4113
1010a77c:	18deae04 	addi	r3,r3,31416
1010a780:	1885883a 	add	r2,r3,r2
1010a784:	11800017 	ldw	r6,0(r2)
1010a788:	11c00117 	ldw	r7,4(r2)
1010a78c:	d8800717 	ldw	r2,28(sp)
1010a790:	0009883a 	mov	r4,zero
1010a794:	014ff834 	movhi	r5,16352
1010a798:	db001615 	stw	r12,88(sp)
1010a79c:	15c00044 	addi	r23,r2,1
1010a7a0:	01123980 	call	10112398 <__divdf3>
1010a7a4:	800d883a 	mov	r6,r16
1010a7a8:	880f883a 	mov	r7,r17
1010a7ac:	1009883a 	mov	r4,r2
1010a7b0:	180b883a 	mov	r5,r3
1010a7b4:	01135f00 	call	101135f0 <__subdf3>
1010a7b8:	d9401017 	ldw	r5,64(sp)
1010a7bc:	d9000f17 	ldw	r4,60(sp)
1010a7c0:	102b883a 	mov	r21,r2
1010a7c4:	d8c01215 	stw	r3,72(sp)
1010a7c8:	0113eec0 	call	10113eec <__fixdfsi>
1010a7cc:	1009883a 	mov	r4,r2
1010a7d0:	1029883a 	mov	r20,r2
1010a7d4:	0113f6c0 	call	10113f6c <__floatsidf>
1010a7d8:	d9000f17 	ldw	r4,60(sp)
1010a7dc:	d9401017 	ldw	r5,64(sp)
1010a7e0:	100d883a 	mov	r6,r2
1010a7e4:	180f883a 	mov	r7,r3
1010a7e8:	01135f00 	call	101135f0 <__subdf3>
1010a7ec:	1823883a 	mov	r17,r3
1010a7f0:	d8c00717 	ldw	r3,28(sp)
1010a7f4:	d9401217 	ldw	r5,72(sp)
1010a7f8:	a2000c04 	addi	r8,r20,48
1010a7fc:	1021883a 	mov	r16,r2
1010a800:	1a000005 	stb	r8,0(r3)
1010a804:	800d883a 	mov	r6,r16
1010a808:	880f883a 	mov	r7,r17
1010a80c:	a809883a 	mov	r4,r21
1010a810:	4029883a 	mov	r20,r8
1010a814:	0112d080 	call	10112d08 <__gedf2>
1010a818:	00841d16 	blt	zero,r2,1010b890 <_dtoa_r+0x15f4>
1010a81c:	800d883a 	mov	r6,r16
1010a820:	880f883a 	mov	r7,r17
1010a824:	0009883a 	mov	r4,zero
1010a828:	014ffc34 	movhi	r5,16368
1010a82c:	01135f00 	call	101135f0 <__subdf3>
1010a830:	d9401217 	ldw	r5,72(sp)
1010a834:	100d883a 	mov	r6,r2
1010a838:	180f883a 	mov	r7,r3
1010a83c:	a809883a 	mov	r4,r21
1010a840:	0112d080 	call	10112d08 <__gedf2>
1010a844:	db001617 	ldw	r12,88(sp)
1010a848:	00840e16 	blt	zero,r2,1010b884 <_dtoa_r+0x15e8>
1010a84c:	00800044 	movi	r2,1
1010a850:	13006b0e 	bge	r2,r12,1010aa00 <_dtoa_r+0x764>
1010a854:	d9000717 	ldw	r4,28(sp)
1010a858:	dd800f15 	stw	r22,60(sp)
1010a85c:	dcc01015 	stw	r19,64(sp)
1010a860:	2319883a 	add	r12,r4,r12
1010a864:	dcc01217 	ldw	r19,72(sp)
1010a868:	602d883a 	mov	r22,r12
1010a86c:	dc801215 	stw	r18,72(sp)
1010a870:	b825883a 	mov	r18,r23
1010a874:	00000906 	br	1010a89c <_dtoa_r+0x600>
1010a878:	01135f00 	call	101135f0 <__subdf3>
1010a87c:	a80d883a 	mov	r6,r21
1010a880:	980f883a 	mov	r7,r19
1010a884:	1009883a 	mov	r4,r2
1010a888:	180b883a 	mov	r5,r3
1010a88c:	0112de40 	call	10112de4 <__ledf2>
1010a890:	1003e816 	blt	r2,zero,1010b834 <_dtoa_r+0x1598>
1010a894:	b825883a 	mov	r18,r23
1010a898:	bd83e926 	beq	r23,r22,1010b840 <_dtoa_r+0x15a4>
1010a89c:	a809883a 	mov	r4,r21
1010a8a0:	980b883a 	mov	r5,r19
1010a8a4:	000d883a 	mov	r6,zero
1010a8a8:	01d00934 	movhi	r7,16420
1010a8ac:	0112ed80 	call	10112ed8 <__muldf3>
1010a8b0:	000d883a 	mov	r6,zero
1010a8b4:	01d00934 	movhi	r7,16420
1010a8b8:	8009883a 	mov	r4,r16
1010a8bc:	880b883a 	mov	r5,r17
1010a8c0:	102b883a 	mov	r21,r2
1010a8c4:	1827883a 	mov	r19,r3
1010a8c8:	0112ed80 	call	10112ed8 <__muldf3>
1010a8cc:	180b883a 	mov	r5,r3
1010a8d0:	1009883a 	mov	r4,r2
1010a8d4:	1821883a 	mov	r16,r3
1010a8d8:	1023883a 	mov	r17,r2
1010a8dc:	0113eec0 	call	10113eec <__fixdfsi>
1010a8e0:	1009883a 	mov	r4,r2
1010a8e4:	1029883a 	mov	r20,r2
1010a8e8:	0113f6c0 	call	10113f6c <__floatsidf>
1010a8ec:	8809883a 	mov	r4,r17
1010a8f0:	800b883a 	mov	r5,r16
1010a8f4:	100d883a 	mov	r6,r2
1010a8f8:	180f883a 	mov	r7,r3
1010a8fc:	01135f00 	call	101135f0 <__subdf3>
1010a900:	a5000c04 	addi	r20,r20,48
1010a904:	a80d883a 	mov	r6,r21
1010a908:	980f883a 	mov	r7,r19
1010a90c:	1009883a 	mov	r4,r2
1010a910:	180b883a 	mov	r5,r3
1010a914:	95000005 	stb	r20,0(r18)
1010a918:	1021883a 	mov	r16,r2
1010a91c:	1823883a 	mov	r17,r3
1010a920:	0112de40 	call	10112de4 <__ledf2>
1010a924:	bdc00044 	addi	r23,r23,1
1010a928:	800d883a 	mov	r6,r16
1010a92c:	880f883a 	mov	r7,r17
1010a930:	0009883a 	mov	r4,zero
1010a934:	014ffc34 	movhi	r5,16368
1010a938:	103fcf0e 	bge	r2,zero,1010a878 <_gp+0xfffe90a4>
1010a93c:	d8c01317 	ldw	r3,76(sp)
1010a940:	d8c00515 	stw	r3,20(sp)
1010a944:	d9400917 	ldw	r5,36(sp)
1010a948:	e009883a 	mov	r4,fp
1010a94c:	010c4a80 	call	1010c4a8 <_Bfree>
1010a950:	d9000517 	ldw	r4,20(sp)
1010a954:	d9802317 	ldw	r6,140(sp)
1010a958:	d9c02517 	ldw	r7,148(sp)
1010a95c:	b8000005 	stb	zero,0(r23)
1010a960:	20800044 	addi	r2,r4,1
1010a964:	30800015 	stw	r2,0(r6)
1010a968:	3802aa26 	beq	r7,zero,1010b414 <_dtoa_r+0x1178>
1010a96c:	3dc00015 	stw	r23,0(r7)
1010a970:	d8800717 	ldw	r2,28(sp)
1010a974:	003e7906 	br	1010a35c <_gp+0xfffe8b88>
1010a978:	00800434 	movhi	r2,16
1010a97c:	10bfffc4 	addi	r2,r2,-1
1010a980:	88a2703a 	and	r17,r17,r2
1010a984:	883e851e 	bne	r17,zero,1010a39c <_gp+0xfffe8bc8>
1010a988:	00840474 	movhi	r2,4113
1010a98c:	109e9004 	addi	r2,r2,31296
1010a990:	003e8406 	br	1010a3a4 <_gp+0xfffe8bd0>
1010a994:	10c00204 	addi	r3,r2,8
1010a998:	003e8706 	br	1010a3b8 <_gp+0xfffe8be4>
1010a99c:	01400434 	movhi	r5,16
1010a9a0:	297fffc4 	addi	r5,r5,-1
1010a9a4:	994a703a 	and	r5,r19,r5
1010a9a8:	9009883a 	mov	r4,r18
1010a9ac:	843f0044 	addi	r16,r16,-1023
1010a9b0:	294ffc34 	orhi	r5,r5,16368
1010a9b4:	dd800217 	ldw	r22,8(sp)
1010a9b8:	d8001115 	stw	zero,68(sp)
1010a9bc:	003ea506 	br	1010a454 <_gp+0xfffe8c80>
1010a9c0:	00840474 	movhi	r2,4113
1010a9c4:	109e7f04 	addi	r2,r2,31228
1010a9c8:	003e6406 	br	1010a35c <_gp+0xfffe8b88>
1010a9cc:	e0001115 	stw	zero,68(fp)
1010a9d0:	000b883a 	mov	r5,zero
1010a9d4:	e009883a 	mov	r4,fp
1010a9d8:	010c4000 	call	1010c400 <_Balloc>
1010a9dc:	01bfffc4 	movi	r6,-1
1010a9e0:	01c00044 	movi	r7,1
1010a9e4:	d8800715 	stw	r2,28(sp)
1010a9e8:	d9800c15 	stw	r6,48(sp)
1010a9ec:	e0801015 	stw	r2,64(fp)
1010a9f0:	d8000315 	stw	zero,12(sp)
1010a9f4:	d9c00b15 	stw	r7,44(sp)
1010a9f8:	d9800615 	stw	r6,24(sp)
1010a9fc:	d8002215 	stw	zero,136(sp)
1010aa00:	d8800117 	ldw	r2,4(sp)
1010aa04:	10008916 	blt	r2,zero,1010ac2c <_dtoa_r+0x990>
1010aa08:	d9000517 	ldw	r4,20(sp)
1010aa0c:	00c00384 	movi	r3,14
1010aa10:	19008616 	blt	r3,r4,1010ac2c <_dtoa_r+0x990>
1010aa14:	200490fa 	slli	r2,r4,3
1010aa18:	00c40474 	movhi	r3,4113
1010aa1c:	d9802217 	ldw	r6,136(sp)
1010aa20:	18deae04 	addi	r3,r3,31416
1010aa24:	1885883a 	add	r2,r3,r2
1010aa28:	14000017 	ldw	r16,0(r2)
1010aa2c:	14400117 	ldw	r17,4(r2)
1010aa30:	30016316 	blt	r6,zero,1010afc0 <_dtoa_r+0xd24>
1010aa34:	800d883a 	mov	r6,r16
1010aa38:	880f883a 	mov	r7,r17
1010aa3c:	9009883a 	mov	r4,r18
1010aa40:	980b883a 	mov	r5,r19
1010aa44:	01123980 	call	10112398 <__divdf3>
1010aa48:	180b883a 	mov	r5,r3
1010aa4c:	1009883a 	mov	r4,r2
1010aa50:	0113eec0 	call	10113eec <__fixdfsi>
1010aa54:	1009883a 	mov	r4,r2
1010aa58:	102b883a 	mov	r21,r2
1010aa5c:	0113f6c0 	call	10113f6c <__floatsidf>
1010aa60:	800d883a 	mov	r6,r16
1010aa64:	880f883a 	mov	r7,r17
1010aa68:	1009883a 	mov	r4,r2
1010aa6c:	180b883a 	mov	r5,r3
1010aa70:	0112ed80 	call	10112ed8 <__muldf3>
1010aa74:	100d883a 	mov	r6,r2
1010aa78:	180f883a 	mov	r7,r3
1010aa7c:	9009883a 	mov	r4,r18
1010aa80:	980b883a 	mov	r5,r19
1010aa84:	01135f00 	call	101135f0 <__subdf3>
1010aa88:	d9c00717 	ldw	r7,28(sp)
1010aa8c:	1009883a 	mov	r4,r2
1010aa90:	a8800c04 	addi	r2,r21,48
1010aa94:	38800005 	stb	r2,0(r7)
1010aa98:	3dc00044 	addi	r23,r7,1
1010aa9c:	d9c00617 	ldw	r7,24(sp)
1010aaa0:	01800044 	movi	r6,1
1010aaa4:	180b883a 	mov	r5,r3
1010aaa8:	2005883a 	mov	r2,r4
1010aaac:	39803826 	beq	r7,r6,1010ab90 <_dtoa_r+0x8f4>
1010aab0:	000d883a 	mov	r6,zero
1010aab4:	01d00934 	movhi	r7,16420
1010aab8:	0112ed80 	call	10112ed8 <__muldf3>
1010aabc:	000d883a 	mov	r6,zero
1010aac0:	000f883a 	mov	r7,zero
1010aac4:	1009883a 	mov	r4,r2
1010aac8:	180b883a 	mov	r5,r3
1010aacc:	1025883a 	mov	r18,r2
1010aad0:	1827883a 	mov	r19,r3
1010aad4:	0112c800 	call	10112c80 <__eqdf2>
1010aad8:	103f9a26 	beq	r2,zero,1010a944 <_gp+0xfffe9170>
1010aadc:	d9c00617 	ldw	r7,24(sp)
1010aae0:	d8c00717 	ldw	r3,28(sp)
1010aae4:	b829883a 	mov	r20,r23
1010aae8:	38bfffc4 	addi	r2,r7,-1
1010aaec:	18ad883a 	add	r22,r3,r2
1010aaf0:	00000a06 	br	1010ab1c <_dtoa_r+0x880>
1010aaf4:	0112ed80 	call	10112ed8 <__muldf3>
1010aaf8:	000d883a 	mov	r6,zero
1010aafc:	000f883a 	mov	r7,zero
1010ab00:	1009883a 	mov	r4,r2
1010ab04:	180b883a 	mov	r5,r3
1010ab08:	1025883a 	mov	r18,r2
1010ab0c:	1827883a 	mov	r19,r3
1010ab10:	b829883a 	mov	r20,r23
1010ab14:	0112c800 	call	10112c80 <__eqdf2>
1010ab18:	103f8a26 	beq	r2,zero,1010a944 <_gp+0xfffe9170>
1010ab1c:	800d883a 	mov	r6,r16
1010ab20:	880f883a 	mov	r7,r17
1010ab24:	9009883a 	mov	r4,r18
1010ab28:	980b883a 	mov	r5,r19
1010ab2c:	01123980 	call	10112398 <__divdf3>
1010ab30:	180b883a 	mov	r5,r3
1010ab34:	1009883a 	mov	r4,r2
1010ab38:	0113eec0 	call	10113eec <__fixdfsi>
1010ab3c:	1009883a 	mov	r4,r2
1010ab40:	102b883a 	mov	r21,r2
1010ab44:	0113f6c0 	call	10113f6c <__floatsidf>
1010ab48:	800d883a 	mov	r6,r16
1010ab4c:	880f883a 	mov	r7,r17
1010ab50:	1009883a 	mov	r4,r2
1010ab54:	180b883a 	mov	r5,r3
1010ab58:	0112ed80 	call	10112ed8 <__muldf3>
1010ab5c:	100d883a 	mov	r6,r2
1010ab60:	180f883a 	mov	r7,r3
1010ab64:	9009883a 	mov	r4,r18
1010ab68:	980b883a 	mov	r5,r19
1010ab6c:	01135f00 	call	101135f0 <__subdf3>
1010ab70:	aa000c04 	addi	r8,r21,48
1010ab74:	a2000005 	stb	r8,0(r20)
1010ab78:	000d883a 	mov	r6,zero
1010ab7c:	01d00934 	movhi	r7,16420
1010ab80:	1009883a 	mov	r4,r2
1010ab84:	180b883a 	mov	r5,r3
1010ab88:	a5c00044 	addi	r23,r20,1
1010ab8c:	b53fd91e 	bne	r22,r20,1010aaf4 <_gp+0xfffe9320>
1010ab90:	100d883a 	mov	r6,r2
1010ab94:	180f883a 	mov	r7,r3
1010ab98:	1009883a 	mov	r4,r2
1010ab9c:	180b883a 	mov	r5,r3
1010aba0:	0111aec0 	call	10111aec <__adddf3>
1010aba4:	100d883a 	mov	r6,r2
1010aba8:	180f883a 	mov	r7,r3
1010abac:	8009883a 	mov	r4,r16
1010abb0:	880b883a 	mov	r5,r17
1010abb4:	1027883a 	mov	r19,r2
1010abb8:	1825883a 	mov	r18,r3
1010abbc:	0112de40 	call	10112de4 <__ledf2>
1010abc0:	10000816 	blt	r2,zero,1010abe4 <_dtoa_r+0x948>
1010abc4:	980d883a 	mov	r6,r19
1010abc8:	900f883a 	mov	r7,r18
1010abcc:	8009883a 	mov	r4,r16
1010abd0:	880b883a 	mov	r5,r17
1010abd4:	0112c800 	call	10112c80 <__eqdf2>
1010abd8:	103f5a1e 	bne	r2,zero,1010a944 <_gp+0xfffe9170>
1010abdc:	ad40004c 	andi	r21,r21,1
1010abe0:	a83f5826 	beq	r21,zero,1010a944 <_gp+0xfffe9170>
1010abe4:	bd3fffc3 	ldbu	r20,-1(r23)
1010abe8:	b8bfffc4 	addi	r2,r23,-1
1010abec:	1007883a 	mov	r3,r2
1010abf0:	01400e44 	movi	r5,57
1010abf4:	d9800717 	ldw	r6,28(sp)
1010abf8:	00000506 	br	1010ac10 <_dtoa_r+0x974>
1010abfc:	18ffffc4 	addi	r3,r3,-1
1010ac00:	11824726 	beq	r2,r6,1010b520 <_dtoa_r+0x1284>
1010ac04:	1d000003 	ldbu	r20,0(r3)
1010ac08:	102f883a 	mov	r23,r2
1010ac0c:	10bfffc4 	addi	r2,r2,-1
1010ac10:	a1003fcc 	andi	r4,r20,255
1010ac14:	2100201c 	xori	r4,r4,128
1010ac18:	213fe004 	addi	r4,r4,-128
1010ac1c:	217ff726 	beq	r4,r5,1010abfc <_gp+0xfffe9428>
1010ac20:	a2000044 	addi	r8,r20,1
1010ac24:	12000005 	stb	r8,0(r2)
1010ac28:	003f4606 	br	1010a944 <_gp+0xfffe9170>
1010ac2c:	d9000b17 	ldw	r4,44(sp)
1010ac30:	2000c826 	beq	r4,zero,1010af54 <_dtoa_r+0xcb8>
1010ac34:	d9800317 	ldw	r6,12(sp)
1010ac38:	00c00044 	movi	r3,1
1010ac3c:	1980f90e 	bge	r3,r6,1010b024 <_dtoa_r+0xd88>
1010ac40:	d8800617 	ldw	r2,24(sp)
1010ac44:	d8c00a17 	ldw	r3,40(sp)
1010ac48:	157fffc4 	addi	r21,r2,-1
1010ac4c:	1d41f316 	blt	r3,r21,1010b41c <_dtoa_r+0x1180>
1010ac50:	1d6bc83a 	sub	r21,r3,r21
1010ac54:	d9c00617 	ldw	r7,24(sp)
1010ac58:	3802aa16 	blt	r7,zero,1010b704 <_dtoa_r+0x1468>
1010ac5c:	dd000817 	ldw	r20,32(sp)
1010ac60:	d8800617 	ldw	r2,24(sp)
1010ac64:	d8c00817 	ldw	r3,32(sp)
1010ac68:	01400044 	movi	r5,1
1010ac6c:	e009883a 	mov	r4,fp
1010ac70:	1887883a 	add	r3,r3,r2
1010ac74:	d8c00815 	stw	r3,32(sp)
1010ac78:	b0ad883a 	add	r22,r22,r2
1010ac7c:	010c80c0 	call	1010c80c <__i2b>
1010ac80:	1023883a 	mov	r17,r2
1010ac84:	a0000826 	beq	r20,zero,1010aca8 <_dtoa_r+0xa0c>
1010ac88:	0580070e 	bge	zero,r22,1010aca8 <_dtoa_r+0xa0c>
1010ac8c:	a005883a 	mov	r2,r20
1010ac90:	b500b916 	blt	r22,r20,1010af78 <_dtoa_r+0xcdc>
1010ac94:	d9000817 	ldw	r4,32(sp)
1010ac98:	a0a9c83a 	sub	r20,r20,r2
1010ac9c:	b0adc83a 	sub	r22,r22,r2
1010aca0:	2089c83a 	sub	r4,r4,r2
1010aca4:	d9000815 	stw	r4,32(sp)
1010aca8:	d9800a17 	ldw	r6,40(sp)
1010acac:	0181810e 	bge	zero,r6,1010b2b4 <_dtoa_r+0x1018>
1010acb0:	d9c00b17 	ldw	r7,44(sp)
1010acb4:	3800b326 	beq	r7,zero,1010af84 <_dtoa_r+0xce8>
1010acb8:	a800b226 	beq	r21,zero,1010af84 <_dtoa_r+0xce8>
1010acbc:	880b883a 	mov	r5,r17
1010acc0:	a80d883a 	mov	r6,r21
1010acc4:	e009883a 	mov	r4,fp
1010acc8:	010ca400 	call	1010ca40 <__pow5mult>
1010accc:	d9800917 	ldw	r6,36(sp)
1010acd0:	100b883a 	mov	r5,r2
1010acd4:	e009883a 	mov	r4,fp
1010acd8:	1023883a 	mov	r17,r2
1010acdc:	010c8480 	call	1010c848 <__multiply>
1010ace0:	1021883a 	mov	r16,r2
1010ace4:	d8800a17 	ldw	r2,40(sp)
1010ace8:	d9400917 	ldw	r5,36(sp)
1010acec:	e009883a 	mov	r4,fp
1010acf0:	1545c83a 	sub	r2,r2,r21
1010acf4:	d8800a15 	stw	r2,40(sp)
1010acf8:	010c4a80 	call	1010c4a8 <_Bfree>
1010acfc:	d8c00a17 	ldw	r3,40(sp)
1010ad00:	18009f1e 	bne	r3,zero,1010af80 <_dtoa_r+0xce4>
1010ad04:	05c00044 	movi	r23,1
1010ad08:	e009883a 	mov	r4,fp
1010ad0c:	b80b883a 	mov	r5,r23
1010ad10:	010c80c0 	call	1010c80c <__i2b>
1010ad14:	d9000d17 	ldw	r4,52(sp)
1010ad18:	102b883a 	mov	r21,r2
1010ad1c:	2000ce26 	beq	r4,zero,1010b058 <_dtoa_r+0xdbc>
1010ad20:	200d883a 	mov	r6,r4
1010ad24:	100b883a 	mov	r5,r2
1010ad28:	e009883a 	mov	r4,fp
1010ad2c:	010ca400 	call	1010ca40 <__pow5mult>
1010ad30:	d9800317 	ldw	r6,12(sp)
1010ad34:	102b883a 	mov	r21,r2
1010ad38:	b981810e 	bge	r23,r6,1010b340 <_dtoa_r+0x10a4>
1010ad3c:	0027883a 	mov	r19,zero
1010ad40:	a8800417 	ldw	r2,16(r21)
1010ad44:	05c00804 	movi	r23,32
1010ad48:	10800104 	addi	r2,r2,4
1010ad4c:	1085883a 	add	r2,r2,r2
1010ad50:	1085883a 	add	r2,r2,r2
1010ad54:	a885883a 	add	r2,r21,r2
1010ad58:	11000017 	ldw	r4,0(r2)
1010ad5c:	010c6f40 	call	1010c6f4 <__hi0bits>
1010ad60:	b885c83a 	sub	r2,r23,r2
1010ad64:	1585883a 	add	r2,r2,r22
1010ad68:	108007cc 	andi	r2,r2,31
1010ad6c:	1000b326 	beq	r2,zero,1010b03c <_dtoa_r+0xda0>
1010ad70:	00c00804 	movi	r3,32
1010ad74:	1887c83a 	sub	r3,r3,r2
1010ad78:	01000104 	movi	r4,4
1010ad7c:	20c2cd0e 	bge	r4,r3,1010b8b4 <_dtoa_r+0x1618>
1010ad80:	00c00704 	movi	r3,28
1010ad84:	1885c83a 	sub	r2,r3,r2
1010ad88:	d8c00817 	ldw	r3,32(sp)
1010ad8c:	a0a9883a 	add	r20,r20,r2
1010ad90:	b0ad883a 	add	r22,r22,r2
1010ad94:	1887883a 	add	r3,r3,r2
1010ad98:	d8c00815 	stw	r3,32(sp)
1010ad9c:	d9800817 	ldw	r6,32(sp)
1010ada0:	0180040e 	bge	zero,r6,1010adb4 <_dtoa_r+0xb18>
1010ada4:	800b883a 	mov	r5,r16
1010ada8:	e009883a 	mov	r4,fp
1010adac:	010cb800 	call	1010cb80 <__lshift>
1010adb0:	1021883a 	mov	r16,r2
1010adb4:	0580050e 	bge	zero,r22,1010adcc <_dtoa_r+0xb30>
1010adb8:	a80b883a 	mov	r5,r21
1010adbc:	b00d883a 	mov	r6,r22
1010adc0:	e009883a 	mov	r4,fp
1010adc4:	010cb800 	call	1010cb80 <__lshift>
1010adc8:	102b883a 	mov	r21,r2
1010adcc:	d9c00e17 	ldw	r7,56(sp)
1010add0:	3801211e 	bne	r7,zero,1010b258 <_dtoa_r+0xfbc>
1010add4:	d9800617 	ldw	r6,24(sp)
1010add8:	0181380e 	bge	zero,r6,1010b2bc <_dtoa_r+0x1020>
1010addc:	d8c00b17 	ldw	r3,44(sp)
1010ade0:	1800ab1e 	bne	r3,zero,1010b090 <_dtoa_r+0xdf4>
1010ade4:	dc800717 	ldw	r18,28(sp)
1010ade8:	dcc00617 	ldw	r19,24(sp)
1010adec:	9029883a 	mov	r20,r18
1010adf0:	00000206 	br	1010adfc <_dtoa_r+0xb60>
1010adf4:	010c4d00 	call	1010c4d0 <__multadd>
1010adf8:	1021883a 	mov	r16,r2
1010adfc:	a80b883a 	mov	r5,r21
1010ae00:	8009883a 	mov	r4,r16
1010ae04:	010a09c0 	call	1010a09c <quorem>
1010ae08:	10800c04 	addi	r2,r2,48
1010ae0c:	90800005 	stb	r2,0(r18)
1010ae10:	94800044 	addi	r18,r18,1
1010ae14:	9507c83a 	sub	r3,r18,r20
1010ae18:	000f883a 	mov	r7,zero
1010ae1c:	01800284 	movi	r6,10
1010ae20:	800b883a 	mov	r5,r16
1010ae24:	e009883a 	mov	r4,fp
1010ae28:	1cfff216 	blt	r3,r19,1010adf4 <_gp+0xfffe9620>
1010ae2c:	1011883a 	mov	r8,r2
1010ae30:	d8800617 	ldw	r2,24(sp)
1010ae34:	0082370e 	bge	zero,r2,1010b714 <_dtoa_r+0x1478>
1010ae38:	d9000717 	ldw	r4,28(sp)
1010ae3c:	0025883a 	mov	r18,zero
1010ae40:	20af883a 	add	r23,r4,r2
1010ae44:	01800044 	movi	r6,1
1010ae48:	800b883a 	mov	r5,r16
1010ae4c:	e009883a 	mov	r4,fp
1010ae50:	da001715 	stw	r8,92(sp)
1010ae54:	010cb800 	call	1010cb80 <__lshift>
1010ae58:	a80b883a 	mov	r5,r21
1010ae5c:	1009883a 	mov	r4,r2
1010ae60:	d8800915 	stw	r2,36(sp)
1010ae64:	010ccc80 	call	1010ccc8 <__mcmp>
1010ae68:	da001717 	ldw	r8,92(sp)
1010ae6c:	0081800e 	bge	zero,r2,1010b470 <_dtoa_r+0x11d4>
1010ae70:	b93fffc3 	ldbu	r4,-1(r23)
1010ae74:	b8bfffc4 	addi	r2,r23,-1
1010ae78:	1007883a 	mov	r3,r2
1010ae7c:	01800e44 	movi	r6,57
1010ae80:	d9c00717 	ldw	r7,28(sp)
1010ae84:	00000506 	br	1010ae9c <_dtoa_r+0xc00>
1010ae88:	18ffffc4 	addi	r3,r3,-1
1010ae8c:	11c12326 	beq	r2,r7,1010b31c <_dtoa_r+0x1080>
1010ae90:	19000003 	ldbu	r4,0(r3)
1010ae94:	102f883a 	mov	r23,r2
1010ae98:	10bfffc4 	addi	r2,r2,-1
1010ae9c:	21403fcc 	andi	r5,r4,255
1010aea0:	2940201c 	xori	r5,r5,128
1010aea4:	297fe004 	addi	r5,r5,-128
1010aea8:	29bff726 	beq	r5,r6,1010ae88 <_gp+0xfffe96b4>
1010aeac:	21000044 	addi	r4,r4,1
1010aeb0:	11000005 	stb	r4,0(r2)
1010aeb4:	a80b883a 	mov	r5,r21
1010aeb8:	e009883a 	mov	r4,fp
1010aebc:	010c4a80 	call	1010c4a8 <_Bfree>
1010aec0:	883ea026 	beq	r17,zero,1010a944 <_gp+0xfffe9170>
1010aec4:	90000426 	beq	r18,zero,1010aed8 <_dtoa_r+0xc3c>
1010aec8:	94400326 	beq	r18,r17,1010aed8 <_dtoa_r+0xc3c>
1010aecc:	900b883a 	mov	r5,r18
1010aed0:	e009883a 	mov	r4,fp
1010aed4:	010c4a80 	call	1010c4a8 <_Bfree>
1010aed8:	880b883a 	mov	r5,r17
1010aedc:	e009883a 	mov	r4,fp
1010aee0:	010c4a80 	call	1010c4a8 <_Bfree>
1010aee4:	003e9706 	br	1010a944 <_gp+0xfffe9170>
1010aee8:	01800044 	movi	r6,1
1010aeec:	d9800e15 	stw	r6,56(sp)
1010aef0:	003d9606 	br	1010a54c <_gp+0xfffe8d78>
1010aef4:	d8800817 	ldw	r2,32(sp)
1010aef8:	d8c00517 	ldw	r3,20(sp)
1010aefc:	d8000d15 	stw	zero,52(sp)
1010af00:	10c5c83a 	sub	r2,r2,r3
1010af04:	00c9c83a 	sub	r4,zero,r3
1010af08:	d8800815 	stw	r2,32(sp)
1010af0c:	d9000a15 	stw	r4,40(sp)
1010af10:	003d9706 	br	1010a570 <_gp+0xfffe8d9c>
1010af14:	05adc83a 	sub	r22,zero,r22
1010af18:	dd800815 	stw	r22,32(sp)
1010af1c:	002d883a 	mov	r22,zero
1010af20:	003d8e06 	br	1010a55c <_gp+0xfffe8d88>
1010af24:	d9000517 	ldw	r4,20(sp)
1010af28:	0113f6c0 	call	10113f6c <__floatsidf>
1010af2c:	100d883a 	mov	r6,r2
1010af30:	180f883a 	mov	r7,r3
1010af34:	a009883a 	mov	r4,r20
1010af38:	880b883a 	mov	r5,r17
1010af3c:	0112c800 	call	10112c80 <__eqdf2>
1010af40:	103d7126 	beq	r2,zero,1010a508 <_gp+0xfffe8d34>
1010af44:	d9c00517 	ldw	r7,20(sp)
1010af48:	39ffffc4 	addi	r7,r7,-1
1010af4c:	d9c00515 	stw	r7,20(sp)
1010af50:	003d6d06 	br	1010a508 <_gp+0xfffe8d34>
1010af54:	dd400a17 	ldw	r21,40(sp)
1010af58:	dd000817 	ldw	r20,32(sp)
1010af5c:	0023883a 	mov	r17,zero
1010af60:	003f4806 	br	1010ac84 <_gp+0xfffe94b0>
1010af64:	10e3c83a 	sub	r17,r2,r3
1010af68:	9448983a 	sll	r4,r18,r17
1010af6c:	003d3206 	br	1010a438 <_gp+0xfffe8c64>
1010af70:	d8000e15 	stw	zero,56(sp)
1010af74:	003d7506 	br	1010a54c <_gp+0xfffe8d78>
1010af78:	b005883a 	mov	r2,r22
1010af7c:	003f4506 	br	1010ac94 <_gp+0xfffe94c0>
1010af80:	dc000915 	stw	r16,36(sp)
1010af84:	d9800a17 	ldw	r6,40(sp)
1010af88:	d9400917 	ldw	r5,36(sp)
1010af8c:	e009883a 	mov	r4,fp
1010af90:	010ca400 	call	1010ca40 <__pow5mult>
1010af94:	1021883a 	mov	r16,r2
1010af98:	003f5a06 	br	1010ad04 <_gp+0xfffe9530>
1010af9c:	01c00044 	movi	r7,1
1010afa0:	d9c00b15 	stw	r7,44(sp)
1010afa4:	d8802217 	ldw	r2,136(sp)
1010afa8:	0081280e 	bge	zero,r2,1010b44c <_dtoa_r+0x11b0>
1010afac:	100d883a 	mov	r6,r2
1010afb0:	1021883a 	mov	r16,r2
1010afb4:	d8800c15 	stw	r2,48(sp)
1010afb8:	d8800615 	stw	r2,24(sp)
1010afbc:	003d8806 	br	1010a5e0 <_gp+0xfffe8e0c>
1010afc0:	d8800617 	ldw	r2,24(sp)
1010afc4:	00be9b16 	blt	zero,r2,1010aa34 <_gp+0xfffe9260>
1010afc8:	10010f1e 	bne	r2,zero,1010b408 <_dtoa_r+0x116c>
1010afcc:	880b883a 	mov	r5,r17
1010afd0:	000d883a 	mov	r6,zero
1010afd4:	01d00534 	movhi	r7,16404
1010afd8:	8009883a 	mov	r4,r16
1010afdc:	0112ed80 	call	10112ed8 <__muldf3>
1010afe0:	900d883a 	mov	r6,r18
1010afe4:	980f883a 	mov	r7,r19
1010afe8:	1009883a 	mov	r4,r2
1010afec:	180b883a 	mov	r5,r3
1010aff0:	0112d080 	call	10112d08 <__gedf2>
1010aff4:	002b883a 	mov	r21,zero
1010aff8:	0023883a 	mov	r17,zero
1010affc:	1000bf16 	blt	r2,zero,1010b2fc <_dtoa_r+0x1060>
1010b000:	d9802217 	ldw	r6,136(sp)
1010b004:	ddc00717 	ldw	r23,28(sp)
1010b008:	018c303a 	nor	r6,zero,r6
1010b00c:	d9800515 	stw	r6,20(sp)
1010b010:	a80b883a 	mov	r5,r21
1010b014:	e009883a 	mov	r4,fp
1010b018:	010c4a80 	call	1010c4a8 <_Bfree>
1010b01c:	883e4926 	beq	r17,zero,1010a944 <_gp+0xfffe9170>
1010b020:	003fad06 	br	1010aed8 <_gp+0xfffe9704>
1010b024:	d9c01117 	ldw	r7,68(sp)
1010b028:	3801bc26 	beq	r7,zero,1010b71c <_dtoa_r+0x1480>
1010b02c:	10810cc4 	addi	r2,r2,1075
1010b030:	dd400a17 	ldw	r21,40(sp)
1010b034:	dd000817 	ldw	r20,32(sp)
1010b038:	003f0a06 	br	1010ac64 <_gp+0xfffe9490>
1010b03c:	00800704 	movi	r2,28
1010b040:	d9000817 	ldw	r4,32(sp)
1010b044:	a0a9883a 	add	r20,r20,r2
1010b048:	b0ad883a 	add	r22,r22,r2
1010b04c:	2089883a 	add	r4,r4,r2
1010b050:	d9000815 	stw	r4,32(sp)
1010b054:	003f5106 	br	1010ad9c <_gp+0xfffe95c8>
1010b058:	d8c00317 	ldw	r3,12(sp)
1010b05c:	b8c1fc0e 	bge	r23,r3,1010b850 <_dtoa_r+0x15b4>
1010b060:	0027883a 	mov	r19,zero
1010b064:	b805883a 	mov	r2,r23
1010b068:	003f3e06 	br	1010ad64 <_gp+0xfffe9590>
1010b06c:	880b883a 	mov	r5,r17
1010b070:	e009883a 	mov	r4,fp
1010b074:	000f883a 	mov	r7,zero
1010b078:	01800284 	movi	r6,10
1010b07c:	010c4d00 	call	1010c4d0 <__multadd>
1010b080:	d9000c17 	ldw	r4,48(sp)
1010b084:	1023883a 	mov	r17,r2
1010b088:	0102040e 	bge	zero,r4,1010b89c <_dtoa_r+0x1600>
1010b08c:	d9000615 	stw	r4,24(sp)
1010b090:	0500050e 	bge	zero,r20,1010b0a8 <_dtoa_r+0xe0c>
1010b094:	880b883a 	mov	r5,r17
1010b098:	a00d883a 	mov	r6,r20
1010b09c:	e009883a 	mov	r4,fp
1010b0a0:	010cb800 	call	1010cb80 <__lshift>
1010b0a4:	1023883a 	mov	r17,r2
1010b0a8:	9801241e 	bne	r19,zero,1010b53c <_dtoa_r+0x12a0>
1010b0ac:	8829883a 	mov	r20,r17
1010b0b0:	d9000617 	ldw	r4,24(sp)
1010b0b4:	dcc00717 	ldw	r19,28(sp)
1010b0b8:	9480004c 	andi	r18,r18,1
1010b0bc:	20bfffc4 	addi	r2,r4,-1
1010b0c0:	9885883a 	add	r2,r19,r2
1010b0c4:	d8800415 	stw	r2,16(sp)
1010b0c8:	dc800615 	stw	r18,24(sp)
1010b0cc:	a80b883a 	mov	r5,r21
1010b0d0:	8009883a 	mov	r4,r16
1010b0d4:	010a09c0 	call	1010a09c <quorem>
1010b0d8:	880b883a 	mov	r5,r17
1010b0dc:	8009883a 	mov	r4,r16
1010b0e0:	102f883a 	mov	r23,r2
1010b0e4:	010ccc80 	call	1010ccc8 <__mcmp>
1010b0e8:	a80b883a 	mov	r5,r21
1010b0ec:	a00d883a 	mov	r6,r20
1010b0f0:	e009883a 	mov	r4,fp
1010b0f4:	102d883a 	mov	r22,r2
1010b0f8:	010cd280 	call	1010cd28 <__mdiff>
1010b0fc:	1007883a 	mov	r3,r2
1010b100:	10800317 	ldw	r2,12(r2)
1010b104:	bc800c04 	addi	r18,r23,48
1010b108:	180b883a 	mov	r5,r3
1010b10c:	10004e1e 	bne	r2,zero,1010b248 <_dtoa_r+0xfac>
1010b110:	8009883a 	mov	r4,r16
1010b114:	d8c01615 	stw	r3,88(sp)
1010b118:	010ccc80 	call	1010ccc8 <__mcmp>
1010b11c:	d8c01617 	ldw	r3,88(sp)
1010b120:	e009883a 	mov	r4,fp
1010b124:	d8801615 	stw	r2,88(sp)
1010b128:	180b883a 	mov	r5,r3
1010b12c:	010c4a80 	call	1010c4a8 <_Bfree>
1010b130:	d8801617 	ldw	r2,88(sp)
1010b134:	1000041e 	bne	r2,zero,1010b148 <_dtoa_r+0xeac>
1010b138:	d9800317 	ldw	r6,12(sp)
1010b13c:	3000021e 	bne	r6,zero,1010b148 <_dtoa_r+0xeac>
1010b140:	d8c00617 	ldw	r3,24(sp)
1010b144:	18003726 	beq	r3,zero,1010b224 <_dtoa_r+0xf88>
1010b148:	b0002016 	blt	r22,zero,1010b1cc <_dtoa_r+0xf30>
1010b14c:	b000041e 	bne	r22,zero,1010b160 <_dtoa_r+0xec4>
1010b150:	d9000317 	ldw	r4,12(sp)
1010b154:	2000021e 	bne	r4,zero,1010b160 <_dtoa_r+0xec4>
1010b158:	d8c00617 	ldw	r3,24(sp)
1010b15c:	18001b26 	beq	r3,zero,1010b1cc <_dtoa_r+0xf30>
1010b160:	00810716 	blt	zero,r2,1010b580 <_dtoa_r+0x12e4>
1010b164:	d8c00417 	ldw	r3,16(sp)
1010b168:	9d800044 	addi	r22,r19,1
1010b16c:	9c800005 	stb	r18,0(r19)
1010b170:	b02f883a 	mov	r23,r22
1010b174:	98c10626 	beq	r19,r3,1010b590 <_dtoa_r+0x12f4>
1010b178:	800b883a 	mov	r5,r16
1010b17c:	000f883a 	mov	r7,zero
1010b180:	01800284 	movi	r6,10
1010b184:	e009883a 	mov	r4,fp
1010b188:	010c4d00 	call	1010c4d0 <__multadd>
1010b18c:	1021883a 	mov	r16,r2
1010b190:	000f883a 	mov	r7,zero
1010b194:	01800284 	movi	r6,10
1010b198:	880b883a 	mov	r5,r17
1010b19c:	e009883a 	mov	r4,fp
1010b1a0:	8d002526 	beq	r17,r20,1010b238 <_dtoa_r+0xf9c>
1010b1a4:	010c4d00 	call	1010c4d0 <__multadd>
1010b1a8:	a00b883a 	mov	r5,r20
1010b1ac:	000f883a 	mov	r7,zero
1010b1b0:	01800284 	movi	r6,10
1010b1b4:	e009883a 	mov	r4,fp
1010b1b8:	1023883a 	mov	r17,r2
1010b1bc:	010c4d00 	call	1010c4d0 <__multadd>
1010b1c0:	1029883a 	mov	r20,r2
1010b1c4:	b027883a 	mov	r19,r22
1010b1c8:	003fc006 	br	1010b0cc <_gp+0xfffe98f8>
1010b1cc:	9011883a 	mov	r8,r18
1010b1d0:	00800e0e 	bge	zero,r2,1010b20c <_dtoa_r+0xf70>
1010b1d4:	800b883a 	mov	r5,r16
1010b1d8:	01800044 	movi	r6,1
1010b1dc:	e009883a 	mov	r4,fp
1010b1e0:	da001715 	stw	r8,92(sp)
1010b1e4:	010cb800 	call	1010cb80 <__lshift>
1010b1e8:	a80b883a 	mov	r5,r21
1010b1ec:	1009883a 	mov	r4,r2
1010b1f0:	1021883a 	mov	r16,r2
1010b1f4:	010ccc80 	call	1010ccc8 <__mcmp>
1010b1f8:	da001717 	ldw	r8,92(sp)
1010b1fc:	0081960e 	bge	zero,r2,1010b858 <_dtoa_r+0x15bc>
1010b200:	00800e44 	movi	r2,57
1010b204:	40817026 	beq	r8,r2,1010b7c8 <_dtoa_r+0x152c>
1010b208:	ba000c44 	addi	r8,r23,49
1010b20c:	8825883a 	mov	r18,r17
1010b210:	9dc00044 	addi	r23,r19,1
1010b214:	9a000005 	stb	r8,0(r19)
1010b218:	a023883a 	mov	r17,r20
1010b21c:	dc000915 	stw	r16,36(sp)
1010b220:	003f2406 	br	1010aeb4 <_gp+0xfffe96e0>
1010b224:	00800e44 	movi	r2,57
1010b228:	9011883a 	mov	r8,r18
1010b22c:	90816626 	beq	r18,r2,1010b7c8 <_dtoa_r+0x152c>
1010b230:	05bff516 	blt	zero,r22,1010b208 <_gp+0xfffe9a34>
1010b234:	003ff506 	br	1010b20c <_gp+0xfffe9a38>
1010b238:	010c4d00 	call	1010c4d0 <__multadd>
1010b23c:	1023883a 	mov	r17,r2
1010b240:	1029883a 	mov	r20,r2
1010b244:	003fdf06 	br	1010b1c4 <_gp+0xfffe99f0>
1010b248:	e009883a 	mov	r4,fp
1010b24c:	010c4a80 	call	1010c4a8 <_Bfree>
1010b250:	00800044 	movi	r2,1
1010b254:	003fbc06 	br	1010b148 <_gp+0xfffe9974>
1010b258:	a80b883a 	mov	r5,r21
1010b25c:	8009883a 	mov	r4,r16
1010b260:	010ccc80 	call	1010ccc8 <__mcmp>
1010b264:	103edb0e 	bge	r2,zero,1010add4 <_gp+0xfffe9600>
1010b268:	800b883a 	mov	r5,r16
1010b26c:	000f883a 	mov	r7,zero
1010b270:	01800284 	movi	r6,10
1010b274:	e009883a 	mov	r4,fp
1010b278:	010c4d00 	call	1010c4d0 <__multadd>
1010b27c:	1021883a 	mov	r16,r2
1010b280:	d8800517 	ldw	r2,20(sp)
1010b284:	d8c00b17 	ldw	r3,44(sp)
1010b288:	10bfffc4 	addi	r2,r2,-1
1010b28c:	d8800515 	stw	r2,20(sp)
1010b290:	183f761e 	bne	r3,zero,1010b06c <_gp+0xfffe9898>
1010b294:	d9000c17 	ldw	r4,48(sp)
1010b298:	0101730e 	bge	zero,r4,1010b868 <_dtoa_r+0x15cc>
1010b29c:	d9000615 	stw	r4,24(sp)
1010b2a0:	003ed006 	br	1010ade4 <_gp+0xfffe9610>
1010b2a4:	00800084 	movi	r2,2
1010b2a8:	3081861e 	bne	r6,r2,1010b8c4 <_dtoa_r+0x1628>
1010b2ac:	d8000b15 	stw	zero,44(sp)
1010b2b0:	003f3c06 	br	1010afa4 <_gp+0xfffe97d0>
1010b2b4:	dc000917 	ldw	r16,36(sp)
1010b2b8:	003e9206 	br	1010ad04 <_gp+0xfffe9530>
1010b2bc:	d9c00317 	ldw	r7,12(sp)
1010b2c0:	00800084 	movi	r2,2
1010b2c4:	11fec50e 	bge	r2,r7,1010addc <_gp+0xfffe9608>
1010b2c8:	d9000617 	ldw	r4,24(sp)
1010b2cc:	20013c1e 	bne	r4,zero,1010b7c0 <_dtoa_r+0x1524>
1010b2d0:	a80b883a 	mov	r5,r21
1010b2d4:	000f883a 	mov	r7,zero
1010b2d8:	01800144 	movi	r6,5
1010b2dc:	e009883a 	mov	r4,fp
1010b2e0:	010c4d00 	call	1010c4d0 <__multadd>
1010b2e4:	100b883a 	mov	r5,r2
1010b2e8:	8009883a 	mov	r4,r16
1010b2ec:	102b883a 	mov	r21,r2
1010b2f0:	010ccc80 	call	1010ccc8 <__mcmp>
1010b2f4:	dc000915 	stw	r16,36(sp)
1010b2f8:	00bf410e 	bge	zero,r2,1010b000 <_gp+0xfffe982c>
1010b2fc:	d9c00717 	ldw	r7,28(sp)
1010b300:	00800c44 	movi	r2,49
1010b304:	38800005 	stb	r2,0(r7)
1010b308:	d8800517 	ldw	r2,20(sp)
1010b30c:	3dc00044 	addi	r23,r7,1
1010b310:	10800044 	addi	r2,r2,1
1010b314:	d8800515 	stw	r2,20(sp)
1010b318:	003f3d06 	br	1010b010 <_gp+0xfffe983c>
1010b31c:	d9800517 	ldw	r6,20(sp)
1010b320:	d9c00717 	ldw	r7,28(sp)
1010b324:	00800c44 	movi	r2,49
1010b328:	31800044 	addi	r6,r6,1
1010b32c:	d9800515 	stw	r6,20(sp)
1010b330:	38800005 	stb	r2,0(r7)
1010b334:	003edf06 	br	1010aeb4 <_gp+0xfffe96e0>
1010b338:	d8000b15 	stw	zero,44(sp)
1010b33c:	003c9f06 	br	1010a5bc <_gp+0xfffe8de8>
1010b340:	903e7e1e 	bne	r18,zero,1010ad3c <_gp+0xfffe9568>
1010b344:	00800434 	movhi	r2,16
1010b348:	10bfffc4 	addi	r2,r2,-1
1010b34c:	9884703a 	and	r2,r19,r2
1010b350:	1000ea1e 	bne	r2,zero,1010b6fc <_dtoa_r+0x1460>
1010b354:	9cdffc2c 	andhi	r19,r19,32752
1010b358:	9800e826 	beq	r19,zero,1010b6fc <_dtoa_r+0x1460>
1010b35c:	d9c00817 	ldw	r7,32(sp)
1010b360:	b5800044 	addi	r22,r22,1
1010b364:	04c00044 	movi	r19,1
1010b368:	39c00044 	addi	r7,r7,1
1010b36c:	d9c00815 	stw	r7,32(sp)
1010b370:	d8800d17 	ldw	r2,52(sp)
1010b374:	103e721e 	bne	r2,zero,1010ad40 <_gp+0xfffe956c>
1010b378:	00800044 	movi	r2,1
1010b37c:	003e7906 	br	1010ad64 <_gp+0xfffe9590>
1010b380:	8009883a 	mov	r4,r16
1010b384:	0113f6c0 	call	10113f6c <__floatsidf>
1010b388:	d9800f17 	ldw	r6,60(sp)
1010b38c:	d9c01017 	ldw	r7,64(sp)
1010b390:	1009883a 	mov	r4,r2
1010b394:	180b883a 	mov	r5,r3
1010b398:	0112ed80 	call	10112ed8 <__muldf3>
1010b39c:	000d883a 	mov	r6,zero
1010b3a0:	01d00734 	movhi	r7,16412
1010b3a4:	1009883a 	mov	r4,r2
1010b3a8:	180b883a 	mov	r5,r3
1010b3ac:	0111aec0 	call	10111aec <__adddf3>
1010b3b0:	047f3034 	movhi	r17,64704
1010b3b4:	1021883a 	mov	r16,r2
1010b3b8:	1c63883a 	add	r17,r3,r17
1010b3bc:	d9000f17 	ldw	r4,60(sp)
1010b3c0:	d9401017 	ldw	r5,64(sp)
1010b3c4:	000d883a 	mov	r6,zero
1010b3c8:	01d00534 	movhi	r7,16404
1010b3cc:	01135f00 	call	101135f0 <__subdf3>
1010b3d0:	800d883a 	mov	r6,r16
1010b3d4:	880f883a 	mov	r7,r17
1010b3d8:	1009883a 	mov	r4,r2
1010b3dc:	180b883a 	mov	r5,r3
1010b3e0:	102b883a 	mov	r21,r2
1010b3e4:	1829883a 	mov	r20,r3
1010b3e8:	0112d080 	call	10112d08 <__gedf2>
1010b3ec:	00806c16 	blt	zero,r2,1010b5a0 <_dtoa_r+0x1304>
1010b3f0:	89e0003c 	xorhi	r7,r17,32768
1010b3f4:	800d883a 	mov	r6,r16
1010b3f8:	a809883a 	mov	r4,r21
1010b3fc:	a00b883a 	mov	r5,r20
1010b400:	0112de40 	call	10112de4 <__ledf2>
1010b404:	103d7e0e 	bge	r2,zero,1010aa00 <_gp+0xfffe922c>
1010b408:	002b883a 	mov	r21,zero
1010b40c:	0023883a 	mov	r17,zero
1010b410:	003efb06 	br	1010b000 <_gp+0xfffe982c>
1010b414:	d8800717 	ldw	r2,28(sp)
1010b418:	003bd006 	br	1010a35c <_gp+0xfffe8b88>
1010b41c:	d9000a17 	ldw	r4,40(sp)
1010b420:	d9800d17 	ldw	r6,52(sp)
1010b424:	dd400a15 	stw	r21,40(sp)
1010b428:	a905c83a 	sub	r2,r21,r4
1010b42c:	308d883a 	add	r6,r6,r2
1010b430:	d9800d15 	stw	r6,52(sp)
1010b434:	002b883a 	mov	r21,zero
1010b438:	003e0606 	br	1010ac54 <_gp+0xfffe9480>
1010b43c:	9023883a 	mov	r17,r18
1010b440:	9829883a 	mov	r20,r19
1010b444:	04000084 	movi	r16,2
1010b448:	003c9206 	br	1010a694 <_gp+0xfffe8ec0>
1010b44c:	04000044 	movi	r16,1
1010b450:	dc000c15 	stw	r16,48(sp)
1010b454:	dc000615 	stw	r16,24(sp)
1010b458:	dc002215 	stw	r16,136(sp)
1010b45c:	e0001115 	stw	zero,68(fp)
1010b460:	000b883a 	mov	r5,zero
1010b464:	003c6906 	br	1010a60c <_gp+0xfffe8e38>
1010b468:	3021883a 	mov	r16,r6
1010b46c:	003ffb06 	br	1010b45c <_gp+0xfffe9c88>
1010b470:	1000021e 	bne	r2,zero,1010b47c <_dtoa_r+0x11e0>
1010b474:	4200004c 	andi	r8,r8,1
1010b478:	403e7d1e 	bne	r8,zero,1010ae70 <_gp+0xfffe969c>
1010b47c:	01000c04 	movi	r4,48
1010b480:	00000106 	br	1010b488 <_dtoa_r+0x11ec>
1010b484:	102f883a 	mov	r23,r2
1010b488:	b8bfffc4 	addi	r2,r23,-1
1010b48c:	10c00007 	ldb	r3,0(r2)
1010b490:	193ffc26 	beq	r3,r4,1010b484 <_gp+0xfffe9cb0>
1010b494:	003e8706 	br	1010aeb4 <_gp+0xfffe96e0>
1010b498:	d8800517 	ldw	r2,20(sp)
1010b49c:	00a3c83a 	sub	r17,zero,r2
1010b4a0:	8800a426 	beq	r17,zero,1010b734 <_dtoa_r+0x1498>
1010b4a4:	888003cc 	andi	r2,r17,15
1010b4a8:	100490fa 	slli	r2,r2,3
1010b4ac:	00c40474 	movhi	r3,4113
1010b4b0:	18deae04 	addi	r3,r3,31416
1010b4b4:	1885883a 	add	r2,r3,r2
1010b4b8:	11800017 	ldw	r6,0(r2)
1010b4bc:	11c00117 	ldw	r7,4(r2)
1010b4c0:	9009883a 	mov	r4,r18
1010b4c4:	980b883a 	mov	r5,r19
1010b4c8:	8823d13a 	srai	r17,r17,4
1010b4cc:	0112ed80 	call	10112ed8 <__muldf3>
1010b4d0:	d8800f15 	stw	r2,60(sp)
1010b4d4:	d8c01015 	stw	r3,64(sp)
1010b4d8:	8800e826 	beq	r17,zero,1010b87c <_dtoa_r+0x15e0>
1010b4dc:	05040474 	movhi	r20,4113
1010b4e0:	a51ea404 	addi	r20,r20,31376
1010b4e4:	04000084 	movi	r16,2
1010b4e8:	8980004c 	andi	r6,r17,1
1010b4ec:	1009883a 	mov	r4,r2
1010b4f0:	8823d07a 	srai	r17,r17,1
1010b4f4:	180b883a 	mov	r5,r3
1010b4f8:	30000426 	beq	r6,zero,1010b50c <_dtoa_r+0x1270>
1010b4fc:	a1800017 	ldw	r6,0(r20)
1010b500:	a1c00117 	ldw	r7,4(r20)
1010b504:	84000044 	addi	r16,r16,1
1010b508:	0112ed80 	call	10112ed8 <__muldf3>
1010b50c:	a5000204 	addi	r20,r20,8
1010b510:	883ff51e 	bne	r17,zero,1010b4e8 <_gp+0xfffe9d14>
1010b514:	d8800f15 	stw	r2,60(sp)
1010b518:	d8c01015 	stw	r3,64(sp)
1010b51c:	003c7606 	br	1010a6f8 <_gp+0xfffe8f24>
1010b520:	00c00c04 	movi	r3,48
1010b524:	10c00005 	stb	r3,0(r2)
1010b528:	d8c00517 	ldw	r3,20(sp)
1010b52c:	bd3fffc3 	ldbu	r20,-1(r23)
1010b530:	18c00044 	addi	r3,r3,1
1010b534:	d8c00515 	stw	r3,20(sp)
1010b538:	003db906 	br	1010ac20 <_gp+0xfffe944c>
1010b53c:	89400117 	ldw	r5,4(r17)
1010b540:	e009883a 	mov	r4,fp
1010b544:	010c4000 	call	1010c400 <_Balloc>
1010b548:	89800417 	ldw	r6,16(r17)
1010b54c:	89400304 	addi	r5,r17,12
1010b550:	11000304 	addi	r4,r2,12
1010b554:	31800084 	addi	r6,r6,2
1010b558:	318d883a 	add	r6,r6,r6
1010b55c:	318d883a 	add	r6,r6,r6
1010b560:	1027883a 	mov	r19,r2
1010b564:	010c15c0 	call	1010c15c <memcpy>
1010b568:	01800044 	movi	r6,1
1010b56c:	980b883a 	mov	r5,r19
1010b570:	e009883a 	mov	r4,fp
1010b574:	010cb800 	call	1010cb80 <__lshift>
1010b578:	1029883a 	mov	r20,r2
1010b57c:	003ecc06 	br	1010b0b0 <_gp+0xfffe98dc>
1010b580:	00800e44 	movi	r2,57
1010b584:	90809026 	beq	r18,r2,1010b7c8 <_dtoa_r+0x152c>
1010b588:	92000044 	addi	r8,r18,1
1010b58c:	003f1f06 	br	1010b20c <_gp+0xfffe9a38>
1010b590:	9011883a 	mov	r8,r18
1010b594:	8825883a 	mov	r18,r17
1010b598:	a023883a 	mov	r17,r20
1010b59c:	003e2906 	br	1010ae44 <_gp+0xfffe9670>
1010b5a0:	002b883a 	mov	r21,zero
1010b5a4:	0023883a 	mov	r17,zero
1010b5a8:	003f5406 	br	1010b2fc <_gp+0xfffe9b28>
1010b5ac:	61bfffc4 	addi	r6,r12,-1
1010b5b0:	300490fa 	slli	r2,r6,3
1010b5b4:	00c40474 	movhi	r3,4113
1010b5b8:	18deae04 	addi	r3,r3,31416
1010b5bc:	1885883a 	add	r2,r3,r2
1010b5c0:	11000017 	ldw	r4,0(r2)
1010b5c4:	11400117 	ldw	r5,4(r2)
1010b5c8:	d8800717 	ldw	r2,28(sp)
1010b5cc:	880f883a 	mov	r7,r17
1010b5d0:	d9801215 	stw	r6,72(sp)
1010b5d4:	800d883a 	mov	r6,r16
1010b5d8:	db001615 	stw	r12,88(sp)
1010b5dc:	15c00044 	addi	r23,r2,1
1010b5e0:	0112ed80 	call	10112ed8 <__muldf3>
1010b5e4:	d9401017 	ldw	r5,64(sp)
1010b5e8:	d9000f17 	ldw	r4,60(sp)
1010b5ec:	d8c01515 	stw	r3,84(sp)
1010b5f0:	d8801415 	stw	r2,80(sp)
1010b5f4:	0113eec0 	call	10113eec <__fixdfsi>
1010b5f8:	1009883a 	mov	r4,r2
1010b5fc:	1021883a 	mov	r16,r2
1010b600:	0113f6c0 	call	10113f6c <__floatsidf>
1010b604:	d9000f17 	ldw	r4,60(sp)
1010b608:	d9401017 	ldw	r5,64(sp)
1010b60c:	100d883a 	mov	r6,r2
1010b610:	180f883a 	mov	r7,r3
1010b614:	01135f00 	call	101135f0 <__subdf3>
1010b618:	1829883a 	mov	r20,r3
1010b61c:	d8c00717 	ldw	r3,28(sp)
1010b620:	84000c04 	addi	r16,r16,48
1010b624:	1023883a 	mov	r17,r2
1010b628:	1c000005 	stb	r16,0(r3)
1010b62c:	db001617 	ldw	r12,88(sp)
1010b630:	00800044 	movi	r2,1
1010b634:	60802226 	beq	r12,r2,1010b6c0 <_dtoa_r+0x1424>
1010b638:	d9c00717 	ldw	r7,28(sp)
1010b63c:	8805883a 	mov	r2,r17
1010b640:	b82b883a 	mov	r21,r23
1010b644:	3b19883a 	add	r12,r7,r12
1010b648:	6023883a 	mov	r17,r12
1010b64c:	a007883a 	mov	r3,r20
1010b650:	dc800f15 	stw	r18,60(sp)
1010b654:	000d883a 	mov	r6,zero
1010b658:	01d00934 	movhi	r7,16420
1010b65c:	1009883a 	mov	r4,r2
1010b660:	180b883a 	mov	r5,r3
1010b664:	0112ed80 	call	10112ed8 <__muldf3>
1010b668:	180b883a 	mov	r5,r3
1010b66c:	1009883a 	mov	r4,r2
1010b670:	1829883a 	mov	r20,r3
1010b674:	1025883a 	mov	r18,r2
1010b678:	0113eec0 	call	10113eec <__fixdfsi>
1010b67c:	1009883a 	mov	r4,r2
1010b680:	1021883a 	mov	r16,r2
1010b684:	0113f6c0 	call	10113f6c <__floatsidf>
1010b688:	100d883a 	mov	r6,r2
1010b68c:	180f883a 	mov	r7,r3
1010b690:	9009883a 	mov	r4,r18
1010b694:	a00b883a 	mov	r5,r20
1010b698:	84000c04 	addi	r16,r16,48
1010b69c:	01135f00 	call	101135f0 <__subdf3>
1010b6a0:	ad400044 	addi	r21,r21,1
1010b6a4:	ac3fffc5 	stb	r16,-1(r21)
1010b6a8:	ac7fea1e 	bne	r21,r17,1010b654 <_gp+0xfffe9e80>
1010b6ac:	1023883a 	mov	r17,r2
1010b6b0:	d8801217 	ldw	r2,72(sp)
1010b6b4:	dc800f17 	ldw	r18,60(sp)
1010b6b8:	1829883a 	mov	r20,r3
1010b6bc:	b8af883a 	add	r23,r23,r2
1010b6c0:	d9001417 	ldw	r4,80(sp)
1010b6c4:	d9401517 	ldw	r5,84(sp)
1010b6c8:	000d883a 	mov	r6,zero
1010b6cc:	01cff834 	movhi	r7,16352
1010b6d0:	0111aec0 	call	10111aec <__adddf3>
1010b6d4:	880d883a 	mov	r6,r17
1010b6d8:	a00f883a 	mov	r7,r20
1010b6dc:	1009883a 	mov	r4,r2
1010b6e0:	180b883a 	mov	r5,r3
1010b6e4:	0112de40 	call	10112de4 <__ledf2>
1010b6e8:	10003e0e 	bge	r2,zero,1010b7e4 <_dtoa_r+0x1548>
1010b6ec:	d9001317 	ldw	r4,76(sp)
1010b6f0:	bd3fffc3 	ldbu	r20,-1(r23)
1010b6f4:	d9000515 	stw	r4,20(sp)
1010b6f8:	003d3b06 	br	1010abe8 <_gp+0xfffe9414>
1010b6fc:	0027883a 	mov	r19,zero
1010b700:	003f1b06 	br	1010b370 <_gp+0xfffe9b9c>
1010b704:	d8800817 	ldw	r2,32(sp)
1010b708:	11e9c83a 	sub	r20,r2,r7
1010b70c:	0005883a 	mov	r2,zero
1010b710:	003d5406 	br	1010ac64 <_gp+0xfffe9490>
1010b714:	00800044 	movi	r2,1
1010b718:	003dc706 	br	1010ae38 <_gp+0xfffe9664>
1010b71c:	d8c00217 	ldw	r3,8(sp)
1010b720:	00800d84 	movi	r2,54
1010b724:	dd400a17 	ldw	r21,40(sp)
1010b728:	10c5c83a 	sub	r2,r2,r3
1010b72c:	dd000817 	ldw	r20,32(sp)
1010b730:	003d4c06 	br	1010ac64 <_gp+0xfffe9490>
1010b734:	dc800f15 	stw	r18,60(sp)
1010b738:	dcc01015 	stw	r19,64(sp)
1010b73c:	04000084 	movi	r16,2
1010b740:	003bed06 	br	1010a6f8 <_gp+0xfffe8f24>
1010b744:	d9000617 	ldw	r4,24(sp)
1010b748:	203f0d26 	beq	r4,zero,1010b380 <_gp+0xfffe9bac>
1010b74c:	d9800c17 	ldw	r6,48(sp)
1010b750:	01bcab0e 	bge	zero,r6,1010aa00 <_gp+0xfffe922c>
1010b754:	d9401017 	ldw	r5,64(sp)
1010b758:	d9000f17 	ldw	r4,60(sp)
1010b75c:	000d883a 	mov	r6,zero
1010b760:	01d00934 	movhi	r7,16420
1010b764:	0112ed80 	call	10112ed8 <__muldf3>
1010b768:	81000044 	addi	r4,r16,1
1010b76c:	d8800f15 	stw	r2,60(sp)
1010b770:	d8c01015 	stw	r3,64(sp)
1010b774:	0113f6c0 	call	10113f6c <__floatsidf>
1010b778:	d9800f17 	ldw	r6,60(sp)
1010b77c:	d9c01017 	ldw	r7,64(sp)
1010b780:	1009883a 	mov	r4,r2
1010b784:	180b883a 	mov	r5,r3
1010b788:	0112ed80 	call	10112ed8 <__muldf3>
1010b78c:	01d00734 	movhi	r7,16412
1010b790:	000d883a 	mov	r6,zero
1010b794:	1009883a 	mov	r4,r2
1010b798:	180b883a 	mov	r5,r3
1010b79c:	0111aec0 	call	10111aec <__adddf3>
1010b7a0:	d9c00517 	ldw	r7,20(sp)
1010b7a4:	047f3034 	movhi	r17,64704
1010b7a8:	1021883a 	mov	r16,r2
1010b7ac:	39ffffc4 	addi	r7,r7,-1
1010b7b0:	d9c01315 	stw	r7,76(sp)
1010b7b4:	1c63883a 	add	r17,r3,r17
1010b7b8:	db000c17 	ldw	r12,48(sp)
1010b7bc:	003bea06 	br	1010a768 <_gp+0xfffe8f94>
1010b7c0:	dc000915 	stw	r16,36(sp)
1010b7c4:	003e0e06 	br	1010b000 <_gp+0xfffe982c>
1010b7c8:	01000e44 	movi	r4,57
1010b7cc:	8825883a 	mov	r18,r17
1010b7d0:	9dc00044 	addi	r23,r19,1
1010b7d4:	99000005 	stb	r4,0(r19)
1010b7d8:	a023883a 	mov	r17,r20
1010b7dc:	dc000915 	stw	r16,36(sp)
1010b7e0:	003da406 	br	1010ae74 <_gp+0xfffe96a0>
1010b7e4:	d9801417 	ldw	r6,80(sp)
1010b7e8:	d9c01517 	ldw	r7,84(sp)
1010b7ec:	0009883a 	mov	r4,zero
1010b7f0:	014ff834 	movhi	r5,16352
1010b7f4:	01135f00 	call	101135f0 <__subdf3>
1010b7f8:	880d883a 	mov	r6,r17
1010b7fc:	a00f883a 	mov	r7,r20
1010b800:	1009883a 	mov	r4,r2
1010b804:	180b883a 	mov	r5,r3
1010b808:	0112d080 	call	10112d08 <__gedf2>
1010b80c:	00bc7c0e 	bge	zero,r2,1010aa00 <_gp+0xfffe922c>
1010b810:	01000c04 	movi	r4,48
1010b814:	00000106 	br	1010b81c <_dtoa_r+0x1580>
1010b818:	102f883a 	mov	r23,r2
1010b81c:	b8bfffc4 	addi	r2,r23,-1
1010b820:	10c00007 	ldb	r3,0(r2)
1010b824:	193ffc26 	beq	r3,r4,1010b818 <_gp+0xfffea044>
1010b828:	d9801317 	ldw	r6,76(sp)
1010b82c:	d9800515 	stw	r6,20(sp)
1010b830:	003c4406 	br	1010a944 <_gp+0xfffe9170>
1010b834:	d9801317 	ldw	r6,76(sp)
1010b838:	d9800515 	stw	r6,20(sp)
1010b83c:	003cea06 	br	1010abe8 <_gp+0xfffe9414>
1010b840:	dd800f17 	ldw	r22,60(sp)
1010b844:	dcc01017 	ldw	r19,64(sp)
1010b848:	dc801217 	ldw	r18,72(sp)
1010b84c:	003c6c06 	br	1010aa00 <_gp+0xfffe922c>
1010b850:	903e031e 	bne	r18,zero,1010b060 <_gp+0xfffe988c>
1010b854:	003ebb06 	br	1010b344 <_gp+0xfffe9b70>
1010b858:	103e6c1e 	bne	r2,zero,1010b20c <_gp+0xfffe9a38>
1010b85c:	4080004c 	andi	r2,r8,1
1010b860:	103e6a26 	beq	r2,zero,1010b20c <_gp+0xfffe9a38>
1010b864:	003e6606 	br	1010b200 <_gp+0xfffe9a2c>
1010b868:	d8c00317 	ldw	r3,12(sp)
1010b86c:	00800084 	movi	r2,2
1010b870:	10c02916 	blt	r2,r3,1010b918 <_dtoa_r+0x167c>
1010b874:	d9000c17 	ldw	r4,48(sp)
1010b878:	003e8806 	br	1010b29c <_gp+0xfffe9ac8>
1010b87c:	04000084 	movi	r16,2
1010b880:	003b9d06 	br	1010a6f8 <_gp+0xfffe8f24>
1010b884:	d9001317 	ldw	r4,76(sp)
1010b888:	d9000515 	stw	r4,20(sp)
1010b88c:	003cd606 	br	1010abe8 <_gp+0xfffe9414>
1010b890:	d8801317 	ldw	r2,76(sp)
1010b894:	d8800515 	stw	r2,20(sp)
1010b898:	003c2a06 	br	1010a944 <_gp+0xfffe9170>
1010b89c:	d9800317 	ldw	r6,12(sp)
1010b8a0:	00800084 	movi	r2,2
1010b8a4:	11801516 	blt	r2,r6,1010b8fc <_dtoa_r+0x1660>
1010b8a8:	d9c00c17 	ldw	r7,48(sp)
1010b8ac:	d9c00615 	stw	r7,24(sp)
1010b8b0:	003df706 	br	1010b090 <_gp+0xfffe98bc>
1010b8b4:	193d3926 	beq	r3,r4,1010ad9c <_gp+0xfffe95c8>
1010b8b8:	00c00f04 	movi	r3,60
1010b8bc:	1885c83a 	sub	r2,r3,r2
1010b8c0:	003ddf06 	br	1010b040 <_gp+0xfffe986c>
1010b8c4:	e009883a 	mov	r4,fp
1010b8c8:	e0001115 	stw	zero,68(fp)
1010b8cc:	000b883a 	mov	r5,zero
1010b8d0:	010c4000 	call	1010c400 <_Balloc>
1010b8d4:	d8800715 	stw	r2,28(sp)
1010b8d8:	d8c00717 	ldw	r3,28(sp)
1010b8dc:	00bfffc4 	movi	r2,-1
1010b8e0:	01000044 	movi	r4,1
1010b8e4:	d8800c15 	stw	r2,48(sp)
1010b8e8:	e0c01015 	stw	r3,64(fp)
1010b8ec:	d9000b15 	stw	r4,44(sp)
1010b8f0:	d8800615 	stw	r2,24(sp)
1010b8f4:	d8002215 	stw	zero,136(sp)
1010b8f8:	003c4106 	br	1010aa00 <_gp+0xfffe922c>
1010b8fc:	d8c00c17 	ldw	r3,48(sp)
1010b900:	d8c00615 	stw	r3,24(sp)
1010b904:	003e7006 	br	1010b2c8 <_gp+0xfffe9af4>
1010b908:	04400044 	movi	r17,1
1010b90c:	003b2006 	br	1010a590 <_gp+0xfffe8dbc>
1010b910:	000b883a 	mov	r5,zero
1010b914:	003b3d06 	br	1010a60c <_gp+0xfffe8e38>
1010b918:	d8800c17 	ldw	r2,48(sp)
1010b91c:	d8800615 	stw	r2,24(sp)
1010b920:	003e6906 	br	1010b2c8 <_gp+0xfffe9af4>

1010b924 <__sflags>:
1010b924:	28800007 	ldb	r2,0(r5)
1010b928:	00c01c84 	movi	r3,114
1010b92c:	10c02426 	beq	r2,r3,1010b9c0 <__sflags+0x9c>
1010b930:	00c01dc4 	movi	r3,119
1010b934:	10c01e26 	beq	r2,r3,1010b9b0 <__sflags+0x8c>
1010b938:	00c01844 	movi	r3,97
1010b93c:	10c00426 	beq	r2,r3,1010b950 <__sflags+0x2c>
1010b940:	00800584 	movi	r2,22
1010b944:	20800015 	stw	r2,0(r4)
1010b948:	0005883a 	mov	r2,zero
1010b94c:	f800283a 	ret
1010b950:	02c08204 	movi	r11,520
1010b954:	01000044 	movi	r4,1
1010b958:	00804204 	movi	r2,264
1010b95c:	01c00ac4 	movi	r7,43
1010b960:	02bff8c4 	movi	r10,-29
1010b964:	027fff04 	movi	r9,-4
1010b968:	02001e04 	movi	r8,120
1010b96c:	29400044 	addi	r5,r5,1
1010b970:	28c00007 	ldb	r3,0(r5)
1010b974:	18000626 	beq	r3,zero,1010b990 <__sflags+0x6c>
1010b978:	19c00826 	beq	r3,r7,1010b99c <__sflags+0x78>
1010b97c:	1a3ffb1e 	bne	r3,r8,1010b96c <_gp+0xfffea198>
1010b980:	29400044 	addi	r5,r5,1
1010b984:	28c00007 	ldb	r3,0(r5)
1010b988:	21020014 	ori	r4,r4,2048
1010b98c:	183ffa1e 	bne	r3,zero,1010b978 <_gp+0xfffea1a4>
1010b990:	22c8b03a 	or	r4,r4,r11
1010b994:	31000015 	stw	r4,0(r6)
1010b998:	f800283a 	ret
1010b99c:	1284703a 	and	r2,r2,r10
1010b9a0:	2248703a 	and	r4,r4,r9
1010b9a4:	10800414 	ori	r2,r2,16
1010b9a8:	21000094 	ori	r4,r4,2
1010b9ac:	003fef06 	br	1010b96c <_gp+0xfffea198>
1010b9b0:	02c18004 	movi	r11,1536
1010b9b4:	01000044 	movi	r4,1
1010b9b8:	00800204 	movi	r2,8
1010b9bc:	003fe706 	br	1010b95c <_gp+0xfffea188>
1010b9c0:	0017883a 	mov	r11,zero
1010b9c4:	0009883a 	mov	r4,zero
1010b9c8:	00800104 	movi	r2,4
1010b9cc:	003fe306 	br	1010b95c <_gp+0xfffea188>

1010b9d0 <__sfvwrite_r>:
1010b9d0:	30800217 	ldw	r2,8(r6)
1010b9d4:	10006726 	beq	r2,zero,1010bb74 <__sfvwrite_r+0x1a4>
1010b9d8:	28c0030b 	ldhu	r3,12(r5)
1010b9dc:	defff404 	addi	sp,sp,-48
1010b9e0:	dd400715 	stw	r21,28(sp)
1010b9e4:	dd000615 	stw	r20,24(sp)
1010b9e8:	dc000215 	stw	r16,8(sp)
1010b9ec:	dfc00b15 	stw	ra,44(sp)
1010b9f0:	df000a15 	stw	fp,40(sp)
1010b9f4:	ddc00915 	stw	r23,36(sp)
1010b9f8:	dd800815 	stw	r22,32(sp)
1010b9fc:	dcc00515 	stw	r19,20(sp)
1010ba00:	dc800415 	stw	r18,16(sp)
1010ba04:	dc400315 	stw	r17,12(sp)
1010ba08:	1880020c 	andi	r2,r3,8
1010ba0c:	2821883a 	mov	r16,r5
1010ba10:	202b883a 	mov	r21,r4
1010ba14:	3029883a 	mov	r20,r6
1010ba18:	10002726 	beq	r2,zero,1010bab8 <__sfvwrite_r+0xe8>
1010ba1c:	28800417 	ldw	r2,16(r5)
1010ba20:	10002526 	beq	r2,zero,1010bab8 <__sfvwrite_r+0xe8>
1010ba24:	1880008c 	andi	r2,r3,2
1010ba28:	a4400017 	ldw	r17,0(r20)
1010ba2c:	10002a26 	beq	r2,zero,1010bad8 <__sfvwrite_r+0x108>
1010ba30:	05a00034 	movhi	r22,32768
1010ba34:	0027883a 	mov	r19,zero
1010ba38:	0025883a 	mov	r18,zero
1010ba3c:	b5bf0004 	addi	r22,r22,-1024
1010ba40:	980d883a 	mov	r6,r19
1010ba44:	a809883a 	mov	r4,r21
1010ba48:	90004626 	beq	r18,zero,1010bb64 <__sfvwrite_r+0x194>
1010ba4c:	900f883a 	mov	r7,r18
1010ba50:	b480022e 	bgeu	r22,r18,1010ba5c <__sfvwrite_r+0x8c>
1010ba54:	01e00034 	movhi	r7,32768
1010ba58:	39ff0004 	addi	r7,r7,-1024
1010ba5c:	80800917 	ldw	r2,36(r16)
1010ba60:	81400717 	ldw	r5,28(r16)
1010ba64:	103ee83a 	callr	r2
1010ba68:	0080570e 	bge	zero,r2,1010bbc8 <__sfvwrite_r+0x1f8>
1010ba6c:	a0c00217 	ldw	r3,8(r20)
1010ba70:	98a7883a 	add	r19,r19,r2
1010ba74:	90a5c83a 	sub	r18,r18,r2
1010ba78:	1885c83a 	sub	r2,r3,r2
1010ba7c:	a0800215 	stw	r2,8(r20)
1010ba80:	103fef1e 	bne	r2,zero,1010ba40 <_gp+0xfffea26c>
1010ba84:	0005883a 	mov	r2,zero
1010ba88:	dfc00b17 	ldw	ra,44(sp)
1010ba8c:	df000a17 	ldw	fp,40(sp)
1010ba90:	ddc00917 	ldw	r23,36(sp)
1010ba94:	dd800817 	ldw	r22,32(sp)
1010ba98:	dd400717 	ldw	r21,28(sp)
1010ba9c:	dd000617 	ldw	r20,24(sp)
1010baa0:	dcc00517 	ldw	r19,20(sp)
1010baa4:	dc800417 	ldw	r18,16(sp)
1010baa8:	dc400317 	ldw	r17,12(sp)
1010baac:	dc000217 	ldw	r16,8(sp)
1010bab0:	dec00c04 	addi	sp,sp,48
1010bab4:	f800283a 	ret
1010bab8:	800b883a 	mov	r5,r16
1010babc:	a809883a 	mov	r4,r21
1010bac0:	0109edc0 	call	10109edc <__swsetup_r>
1010bac4:	1000eb1e 	bne	r2,zero,1010be74 <__sfvwrite_r+0x4a4>
1010bac8:	80c0030b 	ldhu	r3,12(r16)
1010bacc:	a4400017 	ldw	r17,0(r20)
1010bad0:	1880008c 	andi	r2,r3,2
1010bad4:	103fd61e 	bne	r2,zero,1010ba30 <_gp+0xfffea25c>
1010bad8:	1880004c 	andi	r2,r3,1
1010badc:	10003f1e 	bne	r2,zero,1010bbdc <__sfvwrite_r+0x20c>
1010bae0:	0039883a 	mov	fp,zero
1010bae4:	0025883a 	mov	r18,zero
1010bae8:	90001a26 	beq	r18,zero,1010bb54 <__sfvwrite_r+0x184>
1010baec:	1880800c 	andi	r2,r3,512
1010baf0:	84c00217 	ldw	r19,8(r16)
1010baf4:	10002126 	beq	r2,zero,1010bb7c <__sfvwrite_r+0x1ac>
1010baf8:	982f883a 	mov	r23,r19
1010bafc:	94c09336 	bltu	r18,r19,1010bd4c <__sfvwrite_r+0x37c>
1010bb00:	1881200c 	andi	r2,r3,1152
1010bb04:	10009e1e 	bne	r2,zero,1010bd80 <__sfvwrite_r+0x3b0>
1010bb08:	81000017 	ldw	r4,0(r16)
1010bb0c:	b80d883a 	mov	r6,r23
1010bb10:	e00b883a 	mov	r5,fp
1010bb14:	010c2a40 	call	1010c2a4 <memmove>
1010bb18:	80c00217 	ldw	r3,8(r16)
1010bb1c:	81000017 	ldw	r4,0(r16)
1010bb20:	9005883a 	mov	r2,r18
1010bb24:	1ce7c83a 	sub	r19,r3,r19
1010bb28:	25cf883a 	add	r7,r4,r23
1010bb2c:	84c00215 	stw	r19,8(r16)
1010bb30:	81c00015 	stw	r7,0(r16)
1010bb34:	a0c00217 	ldw	r3,8(r20)
1010bb38:	e0b9883a 	add	fp,fp,r2
1010bb3c:	90a5c83a 	sub	r18,r18,r2
1010bb40:	18a7c83a 	sub	r19,r3,r2
1010bb44:	a4c00215 	stw	r19,8(r20)
1010bb48:	983fce26 	beq	r19,zero,1010ba84 <_gp+0xfffea2b0>
1010bb4c:	80c0030b 	ldhu	r3,12(r16)
1010bb50:	903fe61e 	bne	r18,zero,1010baec <_gp+0xfffea318>
1010bb54:	8f000017 	ldw	fp,0(r17)
1010bb58:	8c800117 	ldw	r18,4(r17)
1010bb5c:	8c400204 	addi	r17,r17,8
1010bb60:	003fe106 	br	1010bae8 <_gp+0xfffea314>
1010bb64:	8cc00017 	ldw	r19,0(r17)
1010bb68:	8c800117 	ldw	r18,4(r17)
1010bb6c:	8c400204 	addi	r17,r17,8
1010bb70:	003fb306 	br	1010ba40 <_gp+0xfffea26c>
1010bb74:	0005883a 	mov	r2,zero
1010bb78:	f800283a 	ret
1010bb7c:	81000017 	ldw	r4,0(r16)
1010bb80:	80800417 	ldw	r2,16(r16)
1010bb84:	11005736 	bltu	r2,r4,1010bce4 <__sfvwrite_r+0x314>
1010bb88:	85c00517 	ldw	r23,20(r16)
1010bb8c:	95c05536 	bltu	r18,r23,1010bce4 <__sfvwrite_r+0x314>
1010bb90:	00a00034 	movhi	r2,32768
1010bb94:	10bfffc4 	addi	r2,r2,-1
1010bb98:	9009883a 	mov	r4,r18
1010bb9c:	1480012e 	bgeu	r2,r18,1010bba4 <__sfvwrite_r+0x1d4>
1010bba0:	1009883a 	mov	r4,r2
1010bba4:	b80b883a 	mov	r5,r23
1010bba8:	010309c0 	call	1010309c <__divsi3>
1010bbac:	15cf383a 	mul	r7,r2,r23
1010bbb0:	81400717 	ldw	r5,28(r16)
1010bbb4:	80800917 	ldw	r2,36(r16)
1010bbb8:	e00d883a 	mov	r6,fp
1010bbbc:	a809883a 	mov	r4,r21
1010bbc0:	103ee83a 	callr	r2
1010bbc4:	00bfdb16 	blt	zero,r2,1010bb34 <_gp+0xfffea360>
1010bbc8:	8080030b 	ldhu	r2,12(r16)
1010bbcc:	10801014 	ori	r2,r2,64
1010bbd0:	8080030d 	sth	r2,12(r16)
1010bbd4:	00bfffc4 	movi	r2,-1
1010bbd8:	003fab06 	br	1010ba88 <_gp+0xfffea2b4>
1010bbdc:	0027883a 	mov	r19,zero
1010bbe0:	0011883a 	mov	r8,zero
1010bbe4:	0039883a 	mov	fp,zero
1010bbe8:	0025883a 	mov	r18,zero
1010bbec:	90001f26 	beq	r18,zero,1010bc6c <__sfvwrite_r+0x29c>
1010bbf0:	40005a26 	beq	r8,zero,1010bd5c <__sfvwrite_r+0x38c>
1010bbf4:	982d883a 	mov	r22,r19
1010bbf8:	94c0012e 	bgeu	r18,r19,1010bc00 <__sfvwrite_r+0x230>
1010bbfc:	902d883a 	mov	r22,r18
1010bc00:	81000017 	ldw	r4,0(r16)
1010bc04:	80800417 	ldw	r2,16(r16)
1010bc08:	b02f883a 	mov	r23,r22
1010bc0c:	81c00517 	ldw	r7,20(r16)
1010bc10:	1100032e 	bgeu	r2,r4,1010bc20 <__sfvwrite_r+0x250>
1010bc14:	80c00217 	ldw	r3,8(r16)
1010bc18:	38c7883a 	add	r3,r7,r3
1010bc1c:	1d801816 	blt	r3,r22,1010bc80 <__sfvwrite_r+0x2b0>
1010bc20:	b1c03e16 	blt	r22,r7,1010bd1c <__sfvwrite_r+0x34c>
1010bc24:	80800917 	ldw	r2,36(r16)
1010bc28:	81400717 	ldw	r5,28(r16)
1010bc2c:	e00d883a 	mov	r6,fp
1010bc30:	da000115 	stw	r8,4(sp)
1010bc34:	a809883a 	mov	r4,r21
1010bc38:	103ee83a 	callr	r2
1010bc3c:	102f883a 	mov	r23,r2
1010bc40:	da000117 	ldw	r8,4(sp)
1010bc44:	00bfe00e 	bge	zero,r2,1010bbc8 <_gp+0xfffea3f4>
1010bc48:	9de7c83a 	sub	r19,r19,r23
1010bc4c:	98001f26 	beq	r19,zero,1010bccc <__sfvwrite_r+0x2fc>
1010bc50:	a0800217 	ldw	r2,8(r20)
1010bc54:	e5f9883a 	add	fp,fp,r23
1010bc58:	95e5c83a 	sub	r18,r18,r23
1010bc5c:	15efc83a 	sub	r23,r2,r23
1010bc60:	a5c00215 	stw	r23,8(r20)
1010bc64:	b83f8726 	beq	r23,zero,1010ba84 <_gp+0xfffea2b0>
1010bc68:	903fe11e 	bne	r18,zero,1010bbf0 <_gp+0xfffea41c>
1010bc6c:	8f000017 	ldw	fp,0(r17)
1010bc70:	8c800117 	ldw	r18,4(r17)
1010bc74:	0011883a 	mov	r8,zero
1010bc78:	8c400204 	addi	r17,r17,8
1010bc7c:	003fdb06 	br	1010bbec <_gp+0xfffea418>
1010bc80:	180d883a 	mov	r6,r3
1010bc84:	e00b883a 	mov	r5,fp
1010bc88:	da000115 	stw	r8,4(sp)
1010bc8c:	d8c00015 	stw	r3,0(sp)
1010bc90:	010c2a40 	call	1010c2a4 <memmove>
1010bc94:	d8c00017 	ldw	r3,0(sp)
1010bc98:	80800017 	ldw	r2,0(r16)
1010bc9c:	800b883a 	mov	r5,r16
1010bca0:	a809883a 	mov	r4,r21
1010bca4:	10c5883a 	add	r2,r2,r3
1010bca8:	80800015 	stw	r2,0(r16)
1010bcac:	d8c00015 	stw	r3,0(sp)
1010bcb0:	01035ec0 	call	101035ec <_fflush_r>
1010bcb4:	d8c00017 	ldw	r3,0(sp)
1010bcb8:	da000117 	ldw	r8,4(sp)
1010bcbc:	103fc21e 	bne	r2,zero,1010bbc8 <_gp+0xfffea3f4>
1010bcc0:	182f883a 	mov	r23,r3
1010bcc4:	9de7c83a 	sub	r19,r19,r23
1010bcc8:	983fe11e 	bne	r19,zero,1010bc50 <_gp+0xfffea47c>
1010bccc:	800b883a 	mov	r5,r16
1010bcd0:	a809883a 	mov	r4,r21
1010bcd4:	01035ec0 	call	101035ec <_fflush_r>
1010bcd8:	103fbb1e 	bne	r2,zero,1010bbc8 <_gp+0xfffea3f4>
1010bcdc:	0011883a 	mov	r8,zero
1010bce0:	003fdb06 	br	1010bc50 <_gp+0xfffea47c>
1010bce4:	94c0012e 	bgeu	r18,r19,1010bcec <__sfvwrite_r+0x31c>
1010bce8:	9027883a 	mov	r19,r18
1010bcec:	980d883a 	mov	r6,r19
1010bcf0:	e00b883a 	mov	r5,fp
1010bcf4:	010c2a40 	call	1010c2a4 <memmove>
1010bcf8:	80800217 	ldw	r2,8(r16)
1010bcfc:	80c00017 	ldw	r3,0(r16)
1010bd00:	14c5c83a 	sub	r2,r2,r19
1010bd04:	1cc7883a 	add	r3,r3,r19
1010bd08:	80800215 	stw	r2,8(r16)
1010bd0c:	80c00015 	stw	r3,0(r16)
1010bd10:	10004326 	beq	r2,zero,1010be20 <__sfvwrite_r+0x450>
1010bd14:	9805883a 	mov	r2,r19
1010bd18:	003f8606 	br	1010bb34 <_gp+0xfffea360>
1010bd1c:	b00d883a 	mov	r6,r22
1010bd20:	e00b883a 	mov	r5,fp
1010bd24:	da000115 	stw	r8,4(sp)
1010bd28:	010c2a40 	call	1010c2a4 <memmove>
1010bd2c:	80800217 	ldw	r2,8(r16)
1010bd30:	80c00017 	ldw	r3,0(r16)
1010bd34:	da000117 	ldw	r8,4(sp)
1010bd38:	1585c83a 	sub	r2,r2,r22
1010bd3c:	1dad883a 	add	r22,r3,r22
1010bd40:	80800215 	stw	r2,8(r16)
1010bd44:	85800015 	stw	r22,0(r16)
1010bd48:	003fbf06 	br	1010bc48 <_gp+0xfffea474>
1010bd4c:	81000017 	ldw	r4,0(r16)
1010bd50:	9027883a 	mov	r19,r18
1010bd54:	902f883a 	mov	r23,r18
1010bd58:	003f6c06 	br	1010bb0c <_gp+0xfffea338>
1010bd5c:	900d883a 	mov	r6,r18
1010bd60:	01400284 	movi	r5,10
1010bd64:	e009883a 	mov	r4,fp
1010bd68:	010c0780 	call	1010c078 <memchr>
1010bd6c:	10003e26 	beq	r2,zero,1010be68 <__sfvwrite_r+0x498>
1010bd70:	10800044 	addi	r2,r2,1
1010bd74:	1727c83a 	sub	r19,r2,fp
1010bd78:	02000044 	movi	r8,1
1010bd7c:	003f9d06 	br	1010bbf4 <_gp+0xfffea420>
1010bd80:	80800517 	ldw	r2,20(r16)
1010bd84:	81400417 	ldw	r5,16(r16)
1010bd88:	81c00017 	ldw	r7,0(r16)
1010bd8c:	10a7883a 	add	r19,r2,r2
1010bd90:	9885883a 	add	r2,r19,r2
1010bd94:	1026d7fa 	srli	r19,r2,31
1010bd98:	396dc83a 	sub	r22,r7,r5
1010bd9c:	b1000044 	addi	r4,r22,1
1010bda0:	9885883a 	add	r2,r19,r2
1010bda4:	1027d07a 	srai	r19,r2,1
1010bda8:	2485883a 	add	r2,r4,r18
1010bdac:	980d883a 	mov	r6,r19
1010bdb0:	9880022e 	bgeu	r19,r2,1010bdbc <__sfvwrite_r+0x3ec>
1010bdb4:	1027883a 	mov	r19,r2
1010bdb8:	100d883a 	mov	r6,r2
1010bdbc:	18c1000c 	andi	r3,r3,1024
1010bdc0:	18001c26 	beq	r3,zero,1010be34 <__sfvwrite_r+0x464>
1010bdc4:	300b883a 	mov	r5,r6
1010bdc8:	a809883a 	mov	r4,r21
1010bdcc:	01049200 	call	10104920 <_malloc_r>
1010bdd0:	102f883a 	mov	r23,r2
1010bdd4:	10002926 	beq	r2,zero,1010be7c <__sfvwrite_r+0x4ac>
1010bdd8:	81400417 	ldw	r5,16(r16)
1010bddc:	b00d883a 	mov	r6,r22
1010bde0:	1009883a 	mov	r4,r2
1010bde4:	010c15c0 	call	1010c15c <memcpy>
1010bde8:	8080030b 	ldhu	r2,12(r16)
1010bdec:	00fedfc4 	movi	r3,-1153
1010bdf0:	10c4703a 	and	r2,r2,r3
1010bdf4:	10802014 	ori	r2,r2,128
1010bdf8:	8080030d 	sth	r2,12(r16)
1010bdfc:	bd89883a 	add	r4,r23,r22
1010be00:	9d8fc83a 	sub	r7,r19,r22
1010be04:	85c00415 	stw	r23,16(r16)
1010be08:	84c00515 	stw	r19,20(r16)
1010be0c:	81000015 	stw	r4,0(r16)
1010be10:	9027883a 	mov	r19,r18
1010be14:	81c00215 	stw	r7,8(r16)
1010be18:	902f883a 	mov	r23,r18
1010be1c:	003f3b06 	br	1010bb0c <_gp+0xfffea338>
1010be20:	800b883a 	mov	r5,r16
1010be24:	a809883a 	mov	r4,r21
1010be28:	01035ec0 	call	101035ec <_fflush_r>
1010be2c:	103fb926 	beq	r2,zero,1010bd14 <_gp+0xfffea540>
1010be30:	003f6506 	br	1010bbc8 <_gp+0xfffea3f4>
1010be34:	a809883a 	mov	r4,r21
1010be38:	010d5c40 	call	1010d5c4 <_realloc_r>
1010be3c:	102f883a 	mov	r23,r2
1010be40:	103fee1e 	bne	r2,zero,1010bdfc <_gp+0xfffea628>
1010be44:	81400417 	ldw	r5,16(r16)
1010be48:	a809883a 	mov	r4,r21
1010be4c:	0103cf00 	call	10103cf0 <_free_r>
1010be50:	8080030b 	ldhu	r2,12(r16)
1010be54:	00ffdfc4 	movi	r3,-129
1010be58:	1884703a 	and	r2,r3,r2
1010be5c:	00c00304 	movi	r3,12
1010be60:	a8c00015 	stw	r3,0(r21)
1010be64:	003f5906 	br	1010bbcc <_gp+0xfffea3f8>
1010be68:	94c00044 	addi	r19,r18,1
1010be6c:	02000044 	movi	r8,1
1010be70:	003f6006 	br	1010bbf4 <_gp+0xfffea420>
1010be74:	00bfffc4 	movi	r2,-1
1010be78:	003f0306 	br	1010ba88 <_gp+0xfffea2b4>
1010be7c:	00800304 	movi	r2,12
1010be80:	a8800015 	stw	r2,0(r21)
1010be84:	8080030b 	ldhu	r2,12(r16)
1010be88:	003f5006 	br	1010bbcc <_gp+0xfffea3f8>

1010be8c <_gettimeofday_r>:
1010be8c:	defffd04 	addi	sp,sp,-12
1010be90:	2805883a 	mov	r2,r5
1010be94:	dc000015 	stw	r16,0(sp)
1010be98:	040404b4 	movhi	r16,4114
1010be9c:	dc400115 	stw	r17,4(sp)
1010bea0:	842cef04 	addi	r16,r16,-19524
1010bea4:	2023883a 	mov	r17,r4
1010bea8:	300b883a 	mov	r5,r6
1010beac:	1009883a 	mov	r4,r2
1010beb0:	dfc00215 	stw	ra,8(sp)
1010beb4:	80000015 	stw	zero,0(r16)
1010beb8:	01143cc0 	call	101143cc <gettimeofday>
1010bebc:	00ffffc4 	movi	r3,-1
1010bec0:	10c00526 	beq	r2,r3,1010bed8 <_gettimeofday_r+0x4c>
1010bec4:	dfc00217 	ldw	ra,8(sp)
1010bec8:	dc400117 	ldw	r17,4(sp)
1010becc:	dc000017 	ldw	r16,0(sp)
1010bed0:	dec00304 	addi	sp,sp,12
1010bed4:	f800283a 	ret
1010bed8:	80c00017 	ldw	r3,0(r16)
1010bedc:	183ff926 	beq	r3,zero,1010bec4 <_gp+0xfffea6f0>
1010bee0:	88c00015 	stw	r3,0(r17)
1010bee4:	003ff706 	br	1010bec4 <_gp+0xfffea6f0>

1010bee8 <_isatty_r>:
1010bee8:	defffd04 	addi	sp,sp,-12
1010beec:	dc000015 	stw	r16,0(sp)
1010bef0:	040404b4 	movhi	r16,4114
1010bef4:	dc400115 	stw	r17,4(sp)
1010bef8:	842cef04 	addi	r16,r16,-19524
1010befc:	2023883a 	mov	r17,r4
1010bf00:	2809883a 	mov	r4,r5
1010bf04:	dfc00215 	stw	ra,8(sp)
1010bf08:	80000015 	stw	zero,0(r16)
1010bf0c:	01145fc0 	call	101145fc <isatty>
1010bf10:	00ffffc4 	movi	r3,-1
1010bf14:	10c00526 	beq	r2,r3,1010bf2c <_isatty_r+0x44>
1010bf18:	dfc00217 	ldw	ra,8(sp)
1010bf1c:	dc400117 	ldw	r17,4(sp)
1010bf20:	dc000017 	ldw	r16,0(sp)
1010bf24:	dec00304 	addi	sp,sp,12
1010bf28:	f800283a 	ret
1010bf2c:	80c00017 	ldw	r3,0(r16)
1010bf30:	183ff926 	beq	r3,zero,1010bf18 <_gp+0xfffea744>
1010bf34:	88c00015 	stw	r3,0(r17)
1010bf38:	003ff706 	br	1010bf18 <_gp+0xfffea744>

1010bf3c <_setlocale_r>:
1010bf3c:	30001b26 	beq	r6,zero,1010bfac <_setlocale_r+0x70>
1010bf40:	01440474 	movhi	r5,4113
1010bf44:	defffe04 	addi	sp,sp,-8
1010bf48:	295e9404 	addi	r5,r5,31312
1010bf4c:	3009883a 	mov	r4,r6
1010bf50:	dc000015 	stw	r16,0(sp)
1010bf54:	dfc00115 	stw	ra,4(sp)
1010bf58:	3021883a 	mov	r16,r6
1010bf5c:	010dea00 	call	1010dea0 <strcmp>
1010bf60:	1000061e 	bne	r2,zero,1010bf7c <_setlocale_r+0x40>
1010bf64:	00840474 	movhi	r2,4113
1010bf68:	109e6d04 	addi	r2,r2,31156
1010bf6c:	dfc00117 	ldw	ra,4(sp)
1010bf70:	dc000017 	ldw	r16,0(sp)
1010bf74:	dec00204 	addi	sp,sp,8
1010bf78:	f800283a 	ret
1010bf7c:	01440474 	movhi	r5,4113
1010bf80:	295e6d04 	addi	r5,r5,31156
1010bf84:	8009883a 	mov	r4,r16
1010bf88:	010dea00 	call	1010dea0 <strcmp>
1010bf8c:	103ff526 	beq	r2,zero,1010bf64 <_gp+0xfffea790>
1010bf90:	01440474 	movhi	r5,4113
1010bf94:	295e6004 	addi	r5,r5,31104
1010bf98:	8009883a 	mov	r4,r16
1010bf9c:	010dea00 	call	1010dea0 <strcmp>
1010bfa0:	103ff026 	beq	r2,zero,1010bf64 <_gp+0xfffea790>
1010bfa4:	0005883a 	mov	r2,zero
1010bfa8:	003ff006 	br	1010bf6c <_gp+0xfffea798>
1010bfac:	00840474 	movhi	r2,4113
1010bfb0:	109e6d04 	addi	r2,r2,31156
1010bfb4:	f800283a 	ret

1010bfb8 <__locale_charset>:
1010bfb8:	008404b4 	movhi	r2,4114
1010bfbc:	10a15304 	addi	r2,r2,-31412
1010bfc0:	f800283a 	ret

1010bfc4 <__locale_mb_cur_max>:
1010bfc4:	008404b4 	movhi	r2,4114
1010bfc8:	10a5f904 	addi	r2,r2,-26652
1010bfcc:	10800017 	ldw	r2,0(r2)
1010bfd0:	f800283a 	ret

1010bfd4 <__locale_msgcharset>:
1010bfd4:	008404b4 	movhi	r2,4114
1010bfd8:	10a14b04 	addi	r2,r2,-31444
1010bfdc:	f800283a 	ret

1010bfe0 <__locale_cjk_lang>:
1010bfe0:	0005883a 	mov	r2,zero
1010bfe4:	f800283a 	ret

1010bfe8 <_localeconv_r>:
1010bfe8:	008404b4 	movhi	r2,4114
1010bfec:	10a15b04 	addi	r2,r2,-31380
1010bff0:	f800283a 	ret

1010bff4 <setlocale>:
1010bff4:	008404b4 	movhi	r2,4114
1010bff8:	10a5f604 	addi	r2,r2,-26664
1010bffc:	280d883a 	mov	r6,r5
1010c000:	200b883a 	mov	r5,r4
1010c004:	11000017 	ldw	r4,0(r2)
1010c008:	010bf3c1 	jmpi	1010bf3c <_setlocale_r>

1010c00c <localeconv>:
1010c00c:	008404b4 	movhi	r2,4114
1010c010:	10a15b04 	addi	r2,r2,-31380
1010c014:	f800283a 	ret

1010c018 <_lseek_r>:
1010c018:	defffd04 	addi	sp,sp,-12
1010c01c:	2805883a 	mov	r2,r5
1010c020:	dc000015 	stw	r16,0(sp)
1010c024:	040404b4 	movhi	r16,4114
1010c028:	dc400115 	stw	r17,4(sp)
1010c02c:	300b883a 	mov	r5,r6
1010c030:	842cef04 	addi	r16,r16,-19524
1010c034:	2023883a 	mov	r17,r4
1010c038:	380d883a 	mov	r6,r7
1010c03c:	1009883a 	mov	r4,r2
1010c040:	dfc00215 	stw	ra,8(sp)
1010c044:	80000015 	stw	zero,0(r16)
1010c048:	01149340 	call	10114934 <lseek>
1010c04c:	00ffffc4 	movi	r3,-1
1010c050:	10c00526 	beq	r2,r3,1010c068 <_lseek_r+0x50>
1010c054:	dfc00217 	ldw	ra,8(sp)
1010c058:	dc400117 	ldw	r17,4(sp)
1010c05c:	dc000017 	ldw	r16,0(sp)
1010c060:	dec00304 	addi	sp,sp,12
1010c064:	f800283a 	ret
1010c068:	80c00017 	ldw	r3,0(r16)
1010c06c:	183ff926 	beq	r3,zero,1010c054 <_gp+0xfffea880>
1010c070:	88c00015 	stw	r3,0(r17)
1010c074:	003ff706 	br	1010c054 <_gp+0xfffea880>

1010c078 <memchr>:
1010c078:	208000cc 	andi	r2,r4,3
1010c07c:	280f883a 	mov	r7,r5
1010c080:	10003426 	beq	r2,zero,1010c154 <memchr+0xdc>
1010c084:	30bfffc4 	addi	r2,r6,-1
1010c088:	30001a26 	beq	r6,zero,1010c0f4 <memchr+0x7c>
1010c08c:	20c00003 	ldbu	r3,0(r4)
1010c090:	29803fcc 	andi	r6,r5,255
1010c094:	30c0051e 	bne	r6,r3,1010c0ac <memchr+0x34>
1010c098:	00001806 	br	1010c0fc <memchr+0x84>
1010c09c:	10001526 	beq	r2,zero,1010c0f4 <memchr+0x7c>
1010c0a0:	20c00003 	ldbu	r3,0(r4)
1010c0a4:	10bfffc4 	addi	r2,r2,-1
1010c0a8:	30c01426 	beq	r6,r3,1010c0fc <memchr+0x84>
1010c0ac:	21000044 	addi	r4,r4,1
1010c0b0:	20c000cc 	andi	r3,r4,3
1010c0b4:	183ff91e 	bne	r3,zero,1010c09c <_gp+0xfffea8c8>
1010c0b8:	020000c4 	movi	r8,3
1010c0bc:	40801136 	bltu	r8,r2,1010c104 <memchr+0x8c>
1010c0c0:	10000c26 	beq	r2,zero,1010c0f4 <memchr+0x7c>
1010c0c4:	20c00003 	ldbu	r3,0(r4)
1010c0c8:	29403fcc 	andi	r5,r5,255
1010c0cc:	28c00b26 	beq	r5,r3,1010c0fc <memchr+0x84>
1010c0d0:	20c00044 	addi	r3,r4,1
1010c0d4:	39803fcc 	andi	r6,r7,255
1010c0d8:	2089883a 	add	r4,r4,r2
1010c0dc:	00000306 	br	1010c0ec <memchr+0x74>
1010c0e0:	18c00044 	addi	r3,r3,1
1010c0e4:	197fffc3 	ldbu	r5,-1(r3)
1010c0e8:	31400526 	beq	r6,r5,1010c100 <memchr+0x88>
1010c0ec:	1805883a 	mov	r2,r3
1010c0f0:	20fffb1e 	bne	r4,r3,1010c0e0 <_gp+0xfffea90c>
1010c0f4:	0005883a 	mov	r2,zero
1010c0f8:	f800283a 	ret
1010c0fc:	2005883a 	mov	r2,r4
1010c100:	f800283a 	ret
1010c104:	28c03fcc 	andi	r3,r5,255
1010c108:	1812923a 	slli	r9,r3,8
1010c10c:	02ffbff4 	movhi	r11,65279
1010c110:	02a02074 	movhi	r10,32897
1010c114:	48d2b03a 	or	r9,r9,r3
1010c118:	4806943a 	slli	r3,r9,16
1010c11c:	5affbfc4 	addi	r11,r11,-257
1010c120:	52a02004 	addi	r10,r10,-32640
1010c124:	48d2b03a 	or	r9,r9,r3
1010c128:	20c00017 	ldw	r3,0(r4)
1010c12c:	48c6f03a 	xor	r3,r9,r3
1010c130:	1acd883a 	add	r6,r3,r11
1010c134:	00c6303a 	nor	r3,zero,r3
1010c138:	30c6703a 	and	r3,r6,r3
1010c13c:	1a86703a 	and	r3,r3,r10
1010c140:	183fe01e 	bne	r3,zero,1010c0c4 <_gp+0xfffea8f0>
1010c144:	10bfff04 	addi	r2,r2,-4
1010c148:	21000104 	addi	r4,r4,4
1010c14c:	40bff636 	bltu	r8,r2,1010c128 <_gp+0xfffea954>
1010c150:	003fdb06 	br	1010c0c0 <_gp+0xfffea8ec>
1010c154:	3005883a 	mov	r2,r6
1010c158:	003fd706 	br	1010c0b8 <_gp+0xfffea8e4>

1010c15c <memcpy>:
1010c15c:	defffd04 	addi	sp,sp,-12
1010c160:	dfc00215 	stw	ra,8(sp)
1010c164:	dc400115 	stw	r17,4(sp)
1010c168:	dc000015 	stw	r16,0(sp)
1010c16c:	00c003c4 	movi	r3,15
1010c170:	2005883a 	mov	r2,r4
1010c174:	1980452e 	bgeu	r3,r6,1010c28c <memcpy+0x130>
1010c178:	2906b03a 	or	r3,r5,r4
1010c17c:	18c000cc 	andi	r3,r3,3
1010c180:	1800441e 	bne	r3,zero,1010c294 <memcpy+0x138>
1010c184:	347ffc04 	addi	r17,r6,-16
1010c188:	8822d13a 	srli	r17,r17,4
1010c18c:	28c00104 	addi	r3,r5,4
1010c190:	23400104 	addi	r13,r4,4
1010c194:	8820913a 	slli	r16,r17,4
1010c198:	2b000204 	addi	r12,r5,8
1010c19c:	22c00204 	addi	r11,r4,8
1010c1a0:	84000504 	addi	r16,r16,20
1010c1a4:	2a800304 	addi	r10,r5,12
1010c1a8:	22400304 	addi	r9,r4,12
1010c1ac:	2c21883a 	add	r16,r5,r16
1010c1b0:	2811883a 	mov	r8,r5
1010c1b4:	200f883a 	mov	r7,r4
1010c1b8:	41000017 	ldw	r4,0(r8)
1010c1bc:	1fc00017 	ldw	ra,0(r3)
1010c1c0:	63c00017 	ldw	r15,0(r12)
1010c1c4:	39000015 	stw	r4,0(r7)
1010c1c8:	53800017 	ldw	r14,0(r10)
1010c1cc:	6fc00015 	stw	ra,0(r13)
1010c1d0:	5bc00015 	stw	r15,0(r11)
1010c1d4:	4b800015 	stw	r14,0(r9)
1010c1d8:	18c00404 	addi	r3,r3,16
1010c1dc:	39c00404 	addi	r7,r7,16
1010c1e0:	42000404 	addi	r8,r8,16
1010c1e4:	6b400404 	addi	r13,r13,16
1010c1e8:	63000404 	addi	r12,r12,16
1010c1ec:	5ac00404 	addi	r11,r11,16
1010c1f0:	52800404 	addi	r10,r10,16
1010c1f4:	4a400404 	addi	r9,r9,16
1010c1f8:	1c3fef1e 	bne	r3,r16,1010c1b8 <_gp+0xfffea9e4>
1010c1fc:	89c00044 	addi	r7,r17,1
1010c200:	380e913a 	slli	r7,r7,4
1010c204:	310003cc 	andi	r4,r6,15
1010c208:	02c000c4 	movi	r11,3
1010c20c:	11c7883a 	add	r3,r2,r7
1010c210:	29cb883a 	add	r5,r5,r7
1010c214:	5900212e 	bgeu	r11,r4,1010c29c <memcpy+0x140>
1010c218:	1813883a 	mov	r9,r3
1010c21c:	2811883a 	mov	r8,r5
1010c220:	200f883a 	mov	r7,r4
1010c224:	42800017 	ldw	r10,0(r8)
1010c228:	4a400104 	addi	r9,r9,4
1010c22c:	39ffff04 	addi	r7,r7,-4
1010c230:	4abfff15 	stw	r10,-4(r9)
1010c234:	42000104 	addi	r8,r8,4
1010c238:	59fffa36 	bltu	r11,r7,1010c224 <_gp+0xfffeaa50>
1010c23c:	213fff04 	addi	r4,r4,-4
1010c240:	2008d0ba 	srli	r4,r4,2
1010c244:	318000cc 	andi	r6,r6,3
1010c248:	21000044 	addi	r4,r4,1
1010c24c:	2109883a 	add	r4,r4,r4
1010c250:	2109883a 	add	r4,r4,r4
1010c254:	1907883a 	add	r3,r3,r4
1010c258:	290b883a 	add	r5,r5,r4
1010c25c:	30000626 	beq	r6,zero,1010c278 <memcpy+0x11c>
1010c260:	198d883a 	add	r6,r3,r6
1010c264:	29c00003 	ldbu	r7,0(r5)
1010c268:	18c00044 	addi	r3,r3,1
1010c26c:	29400044 	addi	r5,r5,1
1010c270:	19ffffc5 	stb	r7,-1(r3)
1010c274:	19bffb1e 	bne	r3,r6,1010c264 <_gp+0xfffeaa90>
1010c278:	dfc00217 	ldw	ra,8(sp)
1010c27c:	dc400117 	ldw	r17,4(sp)
1010c280:	dc000017 	ldw	r16,0(sp)
1010c284:	dec00304 	addi	sp,sp,12
1010c288:	f800283a 	ret
1010c28c:	2007883a 	mov	r3,r4
1010c290:	003ff206 	br	1010c25c <_gp+0xfffeaa88>
1010c294:	2007883a 	mov	r3,r4
1010c298:	003ff106 	br	1010c260 <_gp+0xfffeaa8c>
1010c29c:	200d883a 	mov	r6,r4
1010c2a0:	003fee06 	br	1010c25c <_gp+0xfffeaa88>

1010c2a4 <memmove>:
1010c2a4:	2005883a 	mov	r2,r4
1010c2a8:	29000b2e 	bgeu	r5,r4,1010c2d8 <memmove+0x34>
1010c2ac:	298f883a 	add	r7,r5,r6
1010c2b0:	21c0092e 	bgeu	r4,r7,1010c2d8 <memmove+0x34>
1010c2b4:	2187883a 	add	r3,r4,r6
1010c2b8:	198bc83a 	sub	r5,r3,r6
1010c2bc:	30004826 	beq	r6,zero,1010c3e0 <memmove+0x13c>
1010c2c0:	39ffffc4 	addi	r7,r7,-1
1010c2c4:	39000003 	ldbu	r4,0(r7)
1010c2c8:	18ffffc4 	addi	r3,r3,-1
1010c2cc:	19000005 	stb	r4,0(r3)
1010c2d0:	28fffb1e 	bne	r5,r3,1010c2c0 <_gp+0xfffeaaec>
1010c2d4:	f800283a 	ret
1010c2d8:	00c003c4 	movi	r3,15
1010c2dc:	1980412e 	bgeu	r3,r6,1010c3e4 <memmove+0x140>
1010c2e0:	2886b03a 	or	r3,r5,r2
1010c2e4:	18c000cc 	andi	r3,r3,3
1010c2e8:	1800401e 	bne	r3,zero,1010c3ec <memmove+0x148>
1010c2ec:	33fffc04 	addi	r15,r6,-16
1010c2f0:	781ed13a 	srli	r15,r15,4
1010c2f4:	28c00104 	addi	r3,r5,4
1010c2f8:	13400104 	addi	r13,r2,4
1010c2fc:	781c913a 	slli	r14,r15,4
1010c300:	2b000204 	addi	r12,r5,8
1010c304:	12c00204 	addi	r11,r2,8
1010c308:	73800504 	addi	r14,r14,20
1010c30c:	2a800304 	addi	r10,r5,12
1010c310:	12400304 	addi	r9,r2,12
1010c314:	2b9d883a 	add	r14,r5,r14
1010c318:	2811883a 	mov	r8,r5
1010c31c:	100f883a 	mov	r7,r2
1010c320:	41000017 	ldw	r4,0(r8)
1010c324:	39c00404 	addi	r7,r7,16
1010c328:	18c00404 	addi	r3,r3,16
1010c32c:	393ffc15 	stw	r4,-16(r7)
1010c330:	193ffc17 	ldw	r4,-16(r3)
1010c334:	6b400404 	addi	r13,r13,16
1010c338:	5ac00404 	addi	r11,r11,16
1010c33c:	693ffc15 	stw	r4,-16(r13)
1010c340:	61000017 	ldw	r4,0(r12)
1010c344:	4a400404 	addi	r9,r9,16
1010c348:	42000404 	addi	r8,r8,16
1010c34c:	593ffc15 	stw	r4,-16(r11)
1010c350:	51000017 	ldw	r4,0(r10)
1010c354:	63000404 	addi	r12,r12,16
1010c358:	52800404 	addi	r10,r10,16
1010c35c:	493ffc15 	stw	r4,-16(r9)
1010c360:	1bbfef1e 	bne	r3,r14,1010c320 <_gp+0xfffeab4c>
1010c364:	79000044 	addi	r4,r15,1
1010c368:	2008913a 	slli	r4,r4,4
1010c36c:	328003cc 	andi	r10,r6,15
1010c370:	02c000c4 	movi	r11,3
1010c374:	1107883a 	add	r3,r2,r4
1010c378:	290b883a 	add	r5,r5,r4
1010c37c:	5a801e2e 	bgeu	r11,r10,1010c3f8 <memmove+0x154>
1010c380:	1813883a 	mov	r9,r3
1010c384:	2811883a 	mov	r8,r5
1010c388:	500f883a 	mov	r7,r10
1010c38c:	41000017 	ldw	r4,0(r8)
1010c390:	4a400104 	addi	r9,r9,4
1010c394:	39ffff04 	addi	r7,r7,-4
1010c398:	493fff15 	stw	r4,-4(r9)
1010c39c:	42000104 	addi	r8,r8,4
1010c3a0:	59fffa36 	bltu	r11,r7,1010c38c <_gp+0xfffeabb8>
1010c3a4:	513fff04 	addi	r4,r10,-4
1010c3a8:	2008d0ba 	srli	r4,r4,2
1010c3ac:	318000cc 	andi	r6,r6,3
1010c3b0:	21000044 	addi	r4,r4,1
1010c3b4:	2109883a 	add	r4,r4,r4
1010c3b8:	2109883a 	add	r4,r4,r4
1010c3bc:	1907883a 	add	r3,r3,r4
1010c3c0:	290b883a 	add	r5,r5,r4
1010c3c4:	30000b26 	beq	r6,zero,1010c3f4 <memmove+0x150>
1010c3c8:	198d883a 	add	r6,r3,r6
1010c3cc:	29c00003 	ldbu	r7,0(r5)
1010c3d0:	18c00044 	addi	r3,r3,1
1010c3d4:	29400044 	addi	r5,r5,1
1010c3d8:	19ffffc5 	stb	r7,-1(r3)
1010c3dc:	19bffb1e 	bne	r3,r6,1010c3cc <_gp+0xfffeabf8>
1010c3e0:	f800283a 	ret
1010c3e4:	1007883a 	mov	r3,r2
1010c3e8:	003ff606 	br	1010c3c4 <_gp+0xfffeabf0>
1010c3ec:	1007883a 	mov	r3,r2
1010c3f0:	003ff506 	br	1010c3c8 <_gp+0xfffeabf4>
1010c3f4:	f800283a 	ret
1010c3f8:	500d883a 	mov	r6,r10
1010c3fc:	003ff106 	br	1010c3c4 <_gp+0xfffeabf0>

1010c400 <_Balloc>:
1010c400:	20801317 	ldw	r2,76(r4)
1010c404:	defffc04 	addi	sp,sp,-16
1010c408:	dc400115 	stw	r17,4(sp)
1010c40c:	dc000015 	stw	r16,0(sp)
1010c410:	dfc00315 	stw	ra,12(sp)
1010c414:	dc800215 	stw	r18,8(sp)
1010c418:	2023883a 	mov	r17,r4
1010c41c:	2821883a 	mov	r16,r5
1010c420:	10000f26 	beq	r2,zero,1010c460 <_Balloc+0x60>
1010c424:	8407883a 	add	r3,r16,r16
1010c428:	18c7883a 	add	r3,r3,r3
1010c42c:	10c7883a 	add	r3,r2,r3
1010c430:	18800017 	ldw	r2,0(r3)
1010c434:	10001126 	beq	r2,zero,1010c47c <_Balloc+0x7c>
1010c438:	11000017 	ldw	r4,0(r2)
1010c43c:	19000015 	stw	r4,0(r3)
1010c440:	10000415 	stw	zero,16(r2)
1010c444:	10000315 	stw	zero,12(r2)
1010c448:	dfc00317 	ldw	ra,12(sp)
1010c44c:	dc800217 	ldw	r18,8(sp)
1010c450:	dc400117 	ldw	r17,4(sp)
1010c454:	dc000017 	ldw	r16,0(sp)
1010c458:	dec00404 	addi	sp,sp,16
1010c45c:	f800283a 	ret
1010c460:	01800844 	movi	r6,33
1010c464:	01400104 	movi	r5,4
1010c468:	0110b280 	call	10110b28 <_calloc_r>
1010c46c:	88801315 	stw	r2,76(r17)
1010c470:	103fec1e 	bne	r2,zero,1010c424 <_gp+0xfffeac50>
1010c474:	0005883a 	mov	r2,zero
1010c478:	003ff306 	br	1010c448 <_gp+0xfffeac74>
1010c47c:	01400044 	movi	r5,1
1010c480:	2c24983a 	sll	r18,r5,r16
1010c484:	8809883a 	mov	r4,r17
1010c488:	91800144 	addi	r6,r18,5
1010c48c:	318d883a 	add	r6,r6,r6
1010c490:	318d883a 	add	r6,r6,r6
1010c494:	0110b280 	call	10110b28 <_calloc_r>
1010c498:	103ff626 	beq	r2,zero,1010c474 <_gp+0xfffeaca0>
1010c49c:	14000115 	stw	r16,4(r2)
1010c4a0:	14800215 	stw	r18,8(r2)
1010c4a4:	003fe606 	br	1010c440 <_gp+0xfffeac6c>

1010c4a8 <_Bfree>:
1010c4a8:	28000826 	beq	r5,zero,1010c4cc <_Bfree+0x24>
1010c4ac:	28c00117 	ldw	r3,4(r5)
1010c4b0:	20801317 	ldw	r2,76(r4)
1010c4b4:	18c7883a 	add	r3,r3,r3
1010c4b8:	18c7883a 	add	r3,r3,r3
1010c4bc:	10c5883a 	add	r2,r2,r3
1010c4c0:	10c00017 	ldw	r3,0(r2)
1010c4c4:	28c00015 	stw	r3,0(r5)
1010c4c8:	11400015 	stw	r5,0(r2)
1010c4cc:	f800283a 	ret

1010c4d0 <__multadd>:
1010c4d0:	defffa04 	addi	sp,sp,-24
1010c4d4:	dc800315 	stw	r18,12(sp)
1010c4d8:	dc400215 	stw	r17,8(sp)
1010c4dc:	dc000115 	stw	r16,4(sp)
1010c4e0:	2823883a 	mov	r17,r5
1010c4e4:	2c000417 	ldw	r16,16(r5)
1010c4e8:	dfc00515 	stw	ra,20(sp)
1010c4ec:	dcc00415 	stw	r19,16(sp)
1010c4f0:	2025883a 	mov	r18,r4
1010c4f4:	29400504 	addi	r5,r5,20
1010c4f8:	0011883a 	mov	r8,zero
1010c4fc:	28c00017 	ldw	r3,0(r5)
1010c500:	29400104 	addi	r5,r5,4
1010c504:	42000044 	addi	r8,r8,1
1010c508:	18bfffcc 	andi	r2,r3,65535
1010c50c:	1185383a 	mul	r2,r2,r6
1010c510:	1806d43a 	srli	r3,r3,16
1010c514:	11cf883a 	add	r7,r2,r7
1010c518:	3808d43a 	srli	r4,r7,16
1010c51c:	1987383a 	mul	r3,r3,r6
1010c520:	38bfffcc 	andi	r2,r7,65535
1010c524:	1907883a 	add	r3,r3,r4
1010c528:	1808943a 	slli	r4,r3,16
1010c52c:	180ed43a 	srli	r7,r3,16
1010c530:	2085883a 	add	r2,r4,r2
1010c534:	28bfff15 	stw	r2,-4(r5)
1010c538:	443ff016 	blt	r8,r16,1010c4fc <_gp+0xfffead28>
1010c53c:	38000926 	beq	r7,zero,1010c564 <__multadd+0x94>
1010c540:	88800217 	ldw	r2,8(r17)
1010c544:	80800f0e 	bge	r16,r2,1010c584 <__multadd+0xb4>
1010c548:	80800144 	addi	r2,r16,5
1010c54c:	1085883a 	add	r2,r2,r2
1010c550:	1085883a 	add	r2,r2,r2
1010c554:	8885883a 	add	r2,r17,r2
1010c558:	11c00015 	stw	r7,0(r2)
1010c55c:	84000044 	addi	r16,r16,1
1010c560:	8c000415 	stw	r16,16(r17)
1010c564:	8805883a 	mov	r2,r17
1010c568:	dfc00517 	ldw	ra,20(sp)
1010c56c:	dcc00417 	ldw	r19,16(sp)
1010c570:	dc800317 	ldw	r18,12(sp)
1010c574:	dc400217 	ldw	r17,8(sp)
1010c578:	dc000117 	ldw	r16,4(sp)
1010c57c:	dec00604 	addi	sp,sp,24
1010c580:	f800283a 	ret
1010c584:	89400117 	ldw	r5,4(r17)
1010c588:	9009883a 	mov	r4,r18
1010c58c:	d9c00015 	stw	r7,0(sp)
1010c590:	29400044 	addi	r5,r5,1
1010c594:	010c4000 	call	1010c400 <_Balloc>
1010c598:	89800417 	ldw	r6,16(r17)
1010c59c:	89400304 	addi	r5,r17,12
1010c5a0:	11000304 	addi	r4,r2,12
1010c5a4:	31800084 	addi	r6,r6,2
1010c5a8:	318d883a 	add	r6,r6,r6
1010c5ac:	318d883a 	add	r6,r6,r6
1010c5b0:	1027883a 	mov	r19,r2
1010c5b4:	010c15c0 	call	1010c15c <memcpy>
1010c5b8:	d9c00017 	ldw	r7,0(sp)
1010c5bc:	88000a26 	beq	r17,zero,1010c5e8 <__multadd+0x118>
1010c5c0:	88c00117 	ldw	r3,4(r17)
1010c5c4:	90801317 	ldw	r2,76(r18)
1010c5c8:	18c7883a 	add	r3,r3,r3
1010c5cc:	18c7883a 	add	r3,r3,r3
1010c5d0:	10c5883a 	add	r2,r2,r3
1010c5d4:	10c00017 	ldw	r3,0(r2)
1010c5d8:	88c00015 	stw	r3,0(r17)
1010c5dc:	14400015 	stw	r17,0(r2)
1010c5e0:	9823883a 	mov	r17,r19
1010c5e4:	003fd806 	br	1010c548 <_gp+0xfffead74>
1010c5e8:	9823883a 	mov	r17,r19
1010c5ec:	003fd606 	br	1010c548 <_gp+0xfffead74>

1010c5f0 <__s2b>:
1010c5f0:	defff904 	addi	sp,sp,-28
1010c5f4:	dc400115 	stw	r17,4(sp)
1010c5f8:	dc000015 	stw	r16,0(sp)
1010c5fc:	2023883a 	mov	r17,r4
1010c600:	2821883a 	mov	r16,r5
1010c604:	39000204 	addi	r4,r7,8
1010c608:	01400244 	movi	r5,9
1010c60c:	dcc00315 	stw	r19,12(sp)
1010c610:	dc800215 	stw	r18,8(sp)
1010c614:	dfc00615 	stw	ra,24(sp)
1010c618:	dd400515 	stw	r21,20(sp)
1010c61c:	dd000415 	stw	r20,16(sp)
1010c620:	3825883a 	mov	r18,r7
1010c624:	3027883a 	mov	r19,r6
1010c628:	010309c0 	call	1010309c <__divsi3>
1010c62c:	00c00044 	movi	r3,1
1010c630:	000b883a 	mov	r5,zero
1010c634:	1880030e 	bge	r3,r2,1010c644 <__s2b+0x54>
1010c638:	18c7883a 	add	r3,r3,r3
1010c63c:	29400044 	addi	r5,r5,1
1010c640:	18bffd16 	blt	r3,r2,1010c638 <_gp+0xfffeae64>
1010c644:	8809883a 	mov	r4,r17
1010c648:	010c4000 	call	1010c400 <_Balloc>
1010c64c:	d8c00717 	ldw	r3,28(sp)
1010c650:	10c00515 	stw	r3,20(r2)
1010c654:	00c00044 	movi	r3,1
1010c658:	10c00415 	stw	r3,16(r2)
1010c65c:	00c00244 	movi	r3,9
1010c660:	1cc0210e 	bge	r3,r19,1010c6e8 <__s2b+0xf8>
1010c664:	80eb883a 	add	r21,r16,r3
1010c668:	a829883a 	mov	r20,r21
1010c66c:	84e1883a 	add	r16,r16,r19
1010c670:	a1c00007 	ldb	r7,0(r20)
1010c674:	01800284 	movi	r6,10
1010c678:	a5000044 	addi	r20,r20,1
1010c67c:	100b883a 	mov	r5,r2
1010c680:	39fff404 	addi	r7,r7,-48
1010c684:	8809883a 	mov	r4,r17
1010c688:	010c4d00 	call	1010c4d0 <__multadd>
1010c68c:	a43ff81e 	bne	r20,r16,1010c670 <_gp+0xfffeae9c>
1010c690:	ace1883a 	add	r16,r21,r19
1010c694:	843ffe04 	addi	r16,r16,-8
1010c698:	9c800a0e 	bge	r19,r18,1010c6c4 <__s2b+0xd4>
1010c69c:	94e5c83a 	sub	r18,r18,r19
1010c6a0:	84a5883a 	add	r18,r16,r18
1010c6a4:	81c00007 	ldb	r7,0(r16)
1010c6a8:	01800284 	movi	r6,10
1010c6ac:	84000044 	addi	r16,r16,1
1010c6b0:	100b883a 	mov	r5,r2
1010c6b4:	39fff404 	addi	r7,r7,-48
1010c6b8:	8809883a 	mov	r4,r17
1010c6bc:	010c4d00 	call	1010c4d0 <__multadd>
1010c6c0:	84bff81e 	bne	r16,r18,1010c6a4 <_gp+0xfffeaed0>
1010c6c4:	dfc00617 	ldw	ra,24(sp)
1010c6c8:	dd400517 	ldw	r21,20(sp)
1010c6cc:	dd000417 	ldw	r20,16(sp)
1010c6d0:	dcc00317 	ldw	r19,12(sp)
1010c6d4:	dc800217 	ldw	r18,8(sp)
1010c6d8:	dc400117 	ldw	r17,4(sp)
1010c6dc:	dc000017 	ldw	r16,0(sp)
1010c6e0:	dec00704 	addi	sp,sp,28
1010c6e4:	f800283a 	ret
1010c6e8:	84000284 	addi	r16,r16,10
1010c6ec:	1827883a 	mov	r19,r3
1010c6f0:	003fe906 	br	1010c698 <_gp+0xfffeaec4>

1010c6f4 <__hi0bits>:
1010c6f4:	20bfffec 	andhi	r2,r4,65535
1010c6f8:	1000141e 	bne	r2,zero,1010c74c <__hi0bits+0x58>
1010c6fc:	2008943a 	slli	r4,r4,16
1010c700:	00800404 	movi	r2,16
1010c704:	20ffc02c 	andhi	r3,r4,65280
1010c708:	1800021e 	bne	r3,zero,1010c714 <__hi0bits+0x20>
1010c70c:	2008923a 	slli	r4,r4,8
1010c710:	10800204 	addi	r2,r2,8
1010c714:	20fc002c 	andhi	r3,r4,61440
1010c718:	1800021e 	bne	r3,zero,1010c724 <__hi0bits+0x30>
1010c71c:	2008913a 	slli	r4,r4,4
1010c720:	10800104 	addi	r2,r2,4
1010c724:	20f0002c 	andhi	r3,r4,49152
1010c728:	1800031e 	bne	r3,zero,1010c738 <__hi0bits+0x44>
1010c72c:	2109883a 	add	r4,r4,r4
1010c730:	10800084 	addi	r2,r2,2
1010c734:	2109883a 	add	r4,r4,r4
1010c738:	20000316 	blt	r4,zero,1010c748 <__hi0bits+0x54>
1010c73c:	2110002c 	andhi	r4,r4,16384
1010c740:	2000041e 	bne	r4,zero,1010c754 <__hi0bits+0x60>
1010c744:	00800804 	movi	r2,32
1010c748:	f800283a 	ret
1010c74c:	0005883a 	mov	r2,zero
1010c750:	003fec06 	br	1010c704 <_gp+0xfffeaf30>
1010c754:	10800044 	addi	r2,r2,1
1010c758:	f800283a 	ret

1010c75c <__lo0bits>:
1010c75c:	20c00017 	ldw	r3,0(r4)
1010c760:	188001cc 	andi	r2,r3,7
1010c764:	10000826 	beq	r2,zero,1010c788 <__lo0bits+0x2c>
1010c768:	1880004c 	andi	r2,r3,1
1010c76c:	1000211e 	bne	r2,zero,1010c7f4 <__lo0bits+0x98>
1010c770:	1880008c 	andi	r2,r3,2
1010c774:	1000211e 	bne	r2,zero,1010c7fc <__lo0bits+0xa0>
1010c778:	1806d0ba 	srli	r3,r3,2
1010c77c:	00800084 	movi	r2,2
1010c780:	20c00015 	stw	r3,0(r4)
1010c784:	f800283a 	ret
1010c788:	18bfffcc 	andi	r2,r3,65535
1010c78c:	10001326 	beq	r2,zero,1010c7dc <__lo0bits+0x80>
1010c790:	0005883a 	mov	r2,zero
1010c794:	19403fcc 	andi	r5,r3,255
1010c798:	2800021e 	bne	r5,zero,1010c7a4 <__lo0bits+0x48>
1010c79c:	1806d23a 	srli	r3,r3,8
1010c7a0:	10800204 	addi	r2,r2,8
1010c7a4:	194003cc 	andi	r5,r3,15
1010c7a8:	2800021e 	bne	r5,zero,1010c7b4 <__lo0bits+0x58>
1010c7ac:	1806d13a 	srli	r3,r3,4
1010c7b0:	10800104 	addi	r2,r2,4
1010c7b4:	194000cc 	andi	r5,r3,3
1010c7b8:	2800021e 	bne	r5,zero,1010c7c4 <__lo0bits+0x68>
1010c7bc:	1806d0ba 	srli	r3,r3,2
1010c7c0:	10800084 	addi	r2,r2,2
1010c7c4:	1940004c 	andi	r5,r3,1
1010c7c8:	2800081e 	bne	r5,zero,1010c7ec <__lo0bits+0x90>
1010c7cc:	1806d07a 	srli	r3,r3,1
1010c7d0:	1800051e 	bne	r3,zero,1010c7e8 <__lo0bits+0x8c>
1010c7d4:	00800804 	movi	r2,32
1010c7d8:	f800283a 	ret
1010c7dc:	1806d43a 	srli	r3,r3,16
1010c7e0:	00800404 	movi	r2,16
1010c7e4:	003feb06 	br	1010c794 <_gp+0xfffeafc0>
1010c7e8:	10800044 	addi	r2,r2,1
1010c7ec:	20c00015 	stw	r3,0(r4)
1010c7f0:	f800283a 	ret
1010c7f4:	0005883a 	mov	r2,zero
1010c7f8:	f800283a 	ret
1010c7fc:	1806d07a 	srli	r3,r3,1
1010c800:	00800044 	movi	r2,1
1010c804:	20c00015 	stw	r3,0(r4)
1010c808:	f800283a 	ret

1010c80c <__i2b>:
1010c80c:	defffd04 	addi	sp,sp,-12
1010c810:	dc000015 	stw	r16,0(sp)
1010c814:	04000044 	movi	r16,1
1010c818:	dc400115 	stw	r17,4(sp)
1010c81c:	2823883a 	mov	r17,r5
1010c820:	800b883a 	mov	r5,r16
1010c824:	dfc00215 	stw	ra,8(sp)
1010c828:	010c4000 	call	1010c400 <_Balloc>
1010c82c:	14400515 	stw	r17,20(r2)
1010c830:	14000415 	stw	r16,16(r2)
1010c834:	dfc00217 	ldw	ra,8(sp)
1010c838:	dc400117 	ldw	r17,4(sp)
1010c83c:	dc000017 	ldw	r16,0(sp)
1010c840:	dec00304 	addi	sp,sp,12
1010c844:	f800283a 	ret

1010c848 <__multiply>:
1010c848:	defffa04 	addi	sp,sp,-24
1010c84c:	dcc00315 	stw	r19,12(sp)
1010c850:	dc800215 	stw	r18,8(sp)
1010c854:	34c00417 	ldw	r19,16(r6)
1010c858:	2c800417 	ldw	r18,16(r5)
1010c85c:	dd000415 	stw	r20,16(sp)
1010c860:	dc400115 	stw	r17,4(sp)
1010c864:	dfc00515 	stw	ra,20(sp)
1010c868:	dc000015 	stw	r16,0(sp)
1010c86c:	2829883a 	mov	r20,r5
1010c870:	3023883a 	mov	r17,r6
1010c874:	94c0050e 	bge	r18,r19,1010c88c <__multiply+0x44>
1010c878:	9007883a 	mov	r3,r18
1010c87c:	3029883a 	mov	r20,r6
1010c880:	9825883a 	mov	r18,r19
1010c884:	2823883a 	mov	r17,r5
1010c888:	1827883a 	mov	r19,r3
1010c88c:	a0800217 	ldw	r2,8(r20)
1010c890:	94e1883a 	add	r16,r18,r19
1010c894:	a1400117 	ldw	r5,4(r20)
1010c898:	1400010e 	bge	r2,r16,1010c8a0 <__multiply+0x58>
1010c89c:	29400044 	addi	r5,r5,1
1010c8a0:	010c4000 	call	1010c400 <_Balloc>
1010c8a4:	8415883a 	add	r10,r16,r16
1010c8a8:	12c00504 	addi	r11,r2,20
1010c8ac:	5295883a 	add	r10,r10,r10
1010c8b0:	5a95883a 	add	r10,r11,r10
1010c8b4:	5807883a 	mov	r3,r11
1010c8b8:	5a80032e 	bgeu	r11,r10,1010c8c8 <__multiply+0x80>
1010c8bc:	18000015 	stw	zero,0(r3)
1010c8c0:	18c00104 	addi	r3,r3,4
1010c8c4:	1abffd36 	bltu	r3,r10,1010c8bc <_gp+0xfffeb0e8>
1010c8c8:	9ce7883a 	add	r19,r19,r19
1010c8cc:	94a5883a 	add	r18,r18,r18
1010c8d0:	89800504 	addi	r6,r17,20
1010c8d4:	9ce7883a 	add	r19,r19,r19
1010c8d8:	a3400504 	addi	r13,r20,20
1010c8dc:	94a5883a 	add	r18,r18,r18
1010c8e0:	34d9883a 	add	r12,r6,r19
1010c8e4:	6c93883a 	add	r9,r13,r18
1010c8e8:	3300422e 	bgeu	r6,r12,1010c9f4 <__multiply+0x1ac>
1010c8ec:	37c00017 	ldw	ra,0(r6)
1010c8f0:	fbffffcc 	andi	r15,ra,65535
1010c8f4:	78001b26 	beq	r15,zero,1010c964 <__multiply+0x11c>
1010c8f8:	5811883a 	mov	r8,r11
1010c8fc:	681d883a 	mov	r14,r13
1010c900:	000f883a 	mov	r7,zero
1010c904:	71000017 	ldw	r4,0(r14)
1010c908:	40c00017 	ldw	r3,0(r8)
1010c90c:	73800104 	addi	r14,r14,4
1010c910:	217fffcc 	andi	r5,r4,65535
1010c914:	2bcb383a 	mul	r5,r5,r15
1010c918:	2008d43a 	srli	r4,r4,16
1010c91c:	1c7fffcc 	andi	r17,r3,65535
1010c920:	2c4b883a 	add	r5,r5,r17
1010c924:	29cb883a 	add	r5,r5,r7
1010c928:	23c9383a 	mul	r4,r4,r15
1010c92c:	1806d43a 	srli	r3,r3,16
1010c930:	280ed43a 	srli	r7,r5,16
1010c934:	297fffcc 	andi	r5,r5,65535
1010c938:	20c7883a 	add	r3,r4,r3
1010c93c:	19c7883a 	add	r3,r3,r7
1010c940:	1808943a 	slli	r4,r3,16
1010c944:	4023883a 	mov	r17,r8
1010c948:	180ed43a 	srli	r7,r3,16
1010c94c:	214ab03a 	or	r5,r4,r5
1010c950:	41400015 	stw	r5,0(r8)
1010c954:	42000104 	addi	r8,r8,4
1010c958:	727fea36 	bltu	r14,r9,1010c904 <_gp+0xfffeb130>
1010c95c:	89c00115 	stw	r7,4(r17)
1010c960:	37c00017 	ldw	ra,0(r6)
1010c964:	f83ed43a 	srli	ra,ra,16
1010c968:	f8001f26 	beq	ra,zero,1010c9e8 <__multiply+0x1a0>
1010c96c:	58c00017 	ldw	r3,0(r11)
1010c970:	681d883a 	mov	r14,r13
1010c974:	581f883a 	mov	r15,r11
1010c978:	1811883a 	mov	r8,r3
1010c97c:	5825883a 	mov	r18,r11
1010c980:	000f883a 	mov	r7,zero
1010c984:	00000106 	br	1010c98c <__multiply+0x144>
1010c988:	8825883a 	mov	r18,r17
1010c98c:	7140000b 	ldhu	r5,0(r14)
1010c990:	4010d43a 	srli	r8,r8,16
1010c994:	193fffcc 	andi	r4,r3,65535
1010c998:	2fcb383a 	mul	r5,r5,ra
1010c99c:	7bc00104 	addi	r15,r15,4
1010c9a0:	73800104 	addi	r14,r14,4
1010c9a4:	2a0b883a 	add	r5,r5,r8
1010c9a8:	29cb883a 	add	r5,r5,r7
1010c9ac:	2806943a 	slli	r3,r5,16
1010c9b0:	94400104 	addi	r17,r18,4
1010c9b4:	280ad43a 	srli	r5,r5,16
1010c9b8:	1908b03a 	or	r4,r3,r4
1010c9bc:	793fff15 	stw	r4,-4(r15)
1010c9c0:	70ffff17 	ldw	r3,-4(r14)
1010c9c4:	8a000017 	ldw	r8,0(r17)
1010c9c8:	1806d43a 	srli	r3,r3,16
1010c9cc:	413fffcc 	andi	r4,r8,65535
1010c9d0:	1fc7383a 	mul	r3,r3,ra
1010c9d4:	1907883a 	add	r3,r3,r4
1010c9d8:	1947883a 	add	r3,r3,r5
1010c9dc:	180ed43a 	srli	r7,r3,16
1010c9e0:	727fe936 	bltu	r14,r9,1010c988 <_gp+0xfffeb1b4>
1010c9e4:	90c00115 	stw	r3,4(r18)
1010c9e8:	31800104 	addi	r6,r6,4
1010c9ec:	5ac00104 	addi	r11,r11,4
1010c9f0:	333fbe36 	bltu	r6,r12,1010c8ec <_gp+0xfffeb118>
1010c9f4:	0400090e 	bge	zero,r16,1010ca1c <__multiply+0x1d4>
1010c9f8:	50ffff17 	ldw	r3,-4(r10)
1010c9fc:	52bfff04 	addi	r10,r10,-4
1010ca00:	18000326 	beq	r3,zero,1010ca10 <__multiply+0x1c8>
1010ca04:	00000506 	br	1010ca1c <__multiply+0x1d4>
1010ca08:	50c00017 	ldw	r3,0(r10)
1010ca0c:	1800031e 	bne	r3,zero,1010ca1c <__multiply+0x1d4>
1010ca10:	843fffc4 	addi	r16,r16,-1
1010ca14:	52bfff04 	addi	r10,r10,-4
1010ca18:	803ffb1e 	bne	r16,zero,1010ca08 <_gp+0xfffeb234>
1010ca1c:	14000415 	stw	r16,16(r2)
1010ca20:	dfc00517 	ldw	ra,20(sp)
1010ca24:	dd000417 	ldw	r20,16(sp)
1010ca28:	dcc00317 	ldw	r19,12(sp)
1010ca2c:	dc800217 	ldw	r18,8(sp)
1010ca30:	dc400117 	ldw	r17,4(sp)
1010ca34:	dc000017 	ldw	r16,0(sp)
1010ca38:	dec00604 	addi	sp,sp,24
1010ca3c:	f800283a 	ret

1010ca40 <__pow5mult>:
1010ca40:	defffa04 	addi	sp,sp,-24
1010ca44:	dcc00315 	stw	r19,12(sp)
1010ca48:	dc000015 	stw	r16,0(sp)
1010ca4c:	dfc00515 	stw	ra,20(sp)
1010ca50:	dd000415 	stw	r20,16(sp)
1010ca54:	dc800215 	stw	r18,8(sp)
1010ca58:	dc400115 	stw	r17,4(sp)
1010ca5c:	308000cc 	andi	r2,r6,3
1010ca60:	3021883a 	mov	r16,r6
1010ca64:	2027883a 	mov	r19,r4
1010ca68:	10002f1e 	bne	r2,zero,1010cb28 <__pow5mult+0xe8>
1010ca6c:	2825883a 	mov	r18,r5
1010ca70:	8021d0ba 	srai	r16,r16,2
1010ca74:	80001a26 	beq	r16,zero,1010cae0 <__pow5mult+0xa0>
1010ca78:	9c401217 	ldw	r17,72(r19)
1010ca7c:	8800061e 	bne	r17,zero,1010ca98 <__pow5mult+0x58>
1010ca80:	00003406 	br	1010cb54 <__pow5mult+0x114>
1010ca84:	8021d07a 	srai	r16,r16,1
1010ca88:	80001526 	beq	r16,zero,1010cae0 <__pow5mult+0xa0>
1010ca8c:	88800017 	ldw	r2,0(r17)
1010ca90:	10001c26 	beq	r2,zero,1010cb04 <__pow5mult+0xc4>
1010ca94:	1023883a 	mov	r17,r2
1010ca98:	8080004c 	andi	r2,r16,1
1010ca9c:	103ff926 	beq	r2,zero,1010ca84 <_gp+0xfffeb2b0>
1010caa0:	880d883a 	mov	r6,r17
1010caa4:	900b883a 	mov	r5,r18
1010caa8:	9809883a 	mov	r4,r19
1010caac:	010c8480 	call	1010c848 <__multiply>
1010cab0:	90001b26 	beq	r18,zero,1010cb20 <__pow5mult+0xe0>
1010cab4:	91000117 	ldw	r4,4(r18)
1010cab8:	98c01317 	ldw	r3,76(r19)
1010cabc:	8021d07a 	srai	r16,r16,1
1010cac0:	2109883a 	add	r4,r4,r4
1010cac4:	2109883a 	add	r4,r4,r4
1010cac8:	1907883a 	add	r3,r3,r4
1010cacc:	19000017 	ldw	r4,0(r3)
1010cad0:	91000015 	stw	r4,0(r18)
1010cad4:	1c800015 	stw	r18,0(r3)
1010cad8:	1025883a 	mov	r18,r2
1010cadc:	803feb1e 	bne	r16,zero,1010ca8c <_gp+0xfffeb2b8>
1010cae0:	9005883a 	mov	r2,r18
1010cae4:	dfc00517 	ldw	ra,20(sp)
1010cae8:	dd000417 	ldw	r20,16(sp)
1010caec:	dcc00317 	ldw	r19,12(sp)
1010caf0:	dc800217 	ldw	r18,8(sp)
1010caf4:	dc400117 	ldw	r17,4(sp)
1010caf8:	dc000017 	ldw	r16,0(sp)
1010cafc:	dec00604 	addi	sp,sp,24
1010cb00:	f800283a 	ret
1010cb04:	880d883a 	mov	r6,r17
1010cb08:	880b883a 	mov	r5,r17
1010cb0c:	9809883a 	mov	r4,r19
1010cb10:	010c8480 	call	1010c848 <__multiply>
1010cb14:	88800015 	stw	r2,0(r17)
1010cb18:	10000015 	stw	zero,0(r2)
1010cb1c:	003fdd06 	br	1010ca94 <_gp+0xfffeb2c0>
1010cb20:	1025883a 	mov	r18,r2
1010cb24:	003fd706 	br	1010ca84 <_gp+0xfffeb2b0>
1010cb28:	10bfffc4 	addi	r2,r2,-1
1010cb2c:	1085883a 	add	r2,r2,r2
1010cb30:	00c40474 	movhi	r3,4113
1010cb34:	18de9704 	addi	r3,r3,31324
1010cb38:	1085883a 	add	r2,r2,r2
1010cb3c:	1885883a 	add	r2,r3,r2
1010cb40:	11800017 	ldw	r6,0(r2)
1010cb44:	000f883a 	mov	r7,zero
1010cb48:	010c4d00 	call	1010c4d0 <__multadd>
1010cb4c:	1025883a 	mov	r18,r2
1010cb50:	003fc706 	br	1010ca70 <_gp+0xfffeb29c>
1010cb54:	05000044 	movi	r20,1
1010cb58:	a00b883a 	mov	r5,r20
1010cb5c:	9809883a 	mov	r4,r19
1010cb60:	010c4000 	call	1010c400 <_Balloc>
1010cb64:	1023883a 	mov	r17,r2
1010cb68:	00809c44 	movi	r2,625
1010cb6c:	88800515 	stw	r2,20(r17)
1010cb70:	8d000415 	stw	r20,16(r17)
1010cb74:	9c401215 	stw	r17,72(r19)
1010cb78:	88000015 	stw	zero,0(r17)
1010cb7c:	003fc606 	br	1010ca98 <_gp+0xfffeb2c4>

1010cb80 <__lshift>:
1010cb80:	defff904 	addi	sp,sp,-28
1010cb84:	dd400515 	stw	r21,20(sp)
1010cb88:	dcc00315 	stw	r19,12(sp)
1010cb8c:	302bd17a 	srai	r21,r6,5
1010cb90:	2cc00417 	ldw	r19,16(r5)
1010cb94:	28800217 	ldw	r2,8(r5)
1010cb98:	dd000415 	stw	r20,16(sp)
1010cb9c:	ace7883a 	add	r19,r21,r19
1010cba0:	dc800215 	stw	r18,8(sp)
1010cba4:	dc400115 	stw	r17,4(sp)
1010cba8:	dc000015 	stw	r16,0(sp)
1010cbac:	dfc00615 	stw	ra,24(sp)
1010cbb0:	9c000044 	addi	r16,r19,1
1010cbb4:	2823883a 	mov	r17,r5
1010cbb8:	3029883a 	mov	r20,r6
1010cbbc:	2025883a 	mov	r18,r4
1010cbc0:	29400117 	ldw	r5,4(r5)
1010cbc4:	1400030e 	bge	r2,r16,1010cbd4 <__lshift+0x54>
1010cbc8:	1085883a 	add	r2,r2,r2
1010cbcc:	29400044 	addi	r5,r5,1
1010cbd0:	143ffd16 	blt	r2,r16,1010cbc8 <_gp+0xfffeb3f4>
1010cbd4:	9009883a 	mov	r4,r18
1010cbd8:	010c4000 	call	1010c400 <_Balloc>
1010cbdc:	10c00504 	addi	r3,r2,20
1010cbe0:	0540070e 	bge	zero,r21,1010cc00 <__lshift+0x80>
1010cbe4:	ad6b883a 	add	r21,r21,r21
1010cbe8:	ad6b883a 	add	r21,r21,r21
1010cbec:	1809883a 	mov	r4,r3
1010cbf0:	1d47883a 	add	r3,r3,r21
1010cbf4:	20000015 	stw	zero,0(r4)
1010cbf8:	21000104 	addi	r4,r4,4
1010cbfc:	193ffd1e 	bne	r3,r4,1010cbf4 <_gp+0xfffeb420>
1010cc00:	8a000417 	ldw	r8,16(r17)
1010cc04:	89000504 	addi	r4,r17,20
1010cc08:	a18007cc 	andi	r6,r20,31
1010cc0c:	4211883a 	add	r8,r8,r8
1010cc10:	4211883a 	add	r8,r8,r8
1010cc14:	2211883a 	add	r8,r4,r8
1010cc18:	30002326 	beq	r6,zero,1010cca8 <__lshift+0x128>
1010cc1c:	02400804 	movi	r9,32
1010cc20:	4993c83a 	sub	r9,r9,r6
1010cc24:	000b883a 	mov	r5,zero
1010cc28:	21c00017 	ldw	r7,0(r4)
1010cc2c:	1815883a 	mov	r10,r3
1010cc30:	18c00104 	addi	r3,r3,4
1010cc34:	398e983a 	sll	r7,r7,r6
1010cc38:	21000104 	addi	r4,r4,4
1010cc3c:	394ab03a 	or	r5,r7,r5
1010cc40:	197fff15 	stw	r5,-4(r3)
1010cc44:	217fff17 	ldw	r5,-4(r4)
1010cc48:	2a4ad83a 	srl	r5,r5,r9
1010cc4c:	223ff636 	bltu	r4,r8,1010cc28 <_gp+0xfffeb454>
1010cc50:	51400115 	stw	r5,4(r10)
1010cc54:	28001a1e 	bne	r5,zero,1010ccc0 <__lshift+0x140>
1010cc58:	843fffc4 	addi	r16,r16,-1
1010cc5c:	14000415 	stw	r16,16(r2)
1010cc60:	88000826 	beq	r17,zero,1010cc84 <__lshift+0x104>
1010cc64:	89000117 	ldw	r4,4(r17)
1010cc68:	90c01317 	ldw	r3,76(r18)
1010cc6c:	2109883a 	add	r4,r4,r4
1010cc70:	2109883a 	add	r4,r4,r4
1010cc74:	1907883a 	add	r3,r3,r4
1010cc78:	19000017 	ldw	r4,0(r3)
1010cc7c:	89000015 	stw	r4,0(r17)
1010cc80:	1c400015 	stw	r17,0(r3)
1010cc84:	dfc00617 	ldw	ra,24(sp)
1010cc88:	dd400517 	ldw	r21,20(sp)
1010cc8c:	dd000417 	ldw	r20,16(sp)
1010cc90:	dcc00317 	ldw	r19,12(sp)
1010cc94:	dc800217 	ldw	r18,8(sp)
1010cc98:	dc400117 	ldw	r17,4(sp)
1010cc9c:	dc000017 	ldw	r16,0(sp)
1010cca0:	dec00704 	addi	sp,sp,28
1010cca4:	f800283a 	ret
1010cca8:	21400017 	ldw	r5,0(r4)
1010ccac:	18c00104 	addi	r3,r3,4
1010ccb0:	21000104 	addi	r4,r4,4
1010ccb4:	197fff15 	stw	r5,-4(r3)
1010ccb8:	223ffb36 	bltu	r4,r8,1010cca8 <_gp+0xfffeb4d4>
1010ccbc:	003fe606 	br	1010cc58 <_gp+0xfffeb484>
1010ccc0:	9c000084 	addi	r16,r19,2
1010ccc4:	003fe406 	br	1010cc58 <_gp+0xfffeb484>

1010ccc8 <__mcmp>:
1010ccc8:	20800417 	ldw	r2,16(r4)
1010cccc:	28c00417 	ldw	r3,16(r5)
1010ccd0:	10c5c83a 	sub	r2,r2,r3
1010ccd4:	1000111e 	bne	r2,zero,1010cd1c <__mcmp+0x54>
1010ccd8:	18c7883a 	add	r3,r3,r3
1010ccdc:	18c7883a 	add	r3,r3,r3
1010cce0:	21000504 	addi	r4,r4,20
1010cce4:	29400504 	addi	r5,r5,20
1010cce8:	20c5883a 	add	r2,r4,r3
1010ccec:	28cb883a 	add	r5,r5,r3
1010ccf0:	00000106 	br	1010ccf8 <__mcmp+0x30>
1010ccf4:	20800a2e 	bgeu	r4,r2,1010cd20 <__mcmp+0x58>
1010ccf8:	10bfff04 	addi	r2,r2,-4
1010ccfc:	297fff04 	addi	r5,r5,-4
1010cd00:	11800017 	ldw	r6,0(r2)
1010cd04:	28c00017 	ldw	r3,0(r5)
1010cd08:	30fffa26 	beq	r6,r3,1010ccf4 <_gp+0xfffeb520>
1010cd0c:	30c00236 	bltu	r6,r3,1010cd18 <__mcmp+0x50>
1010cd10:	00800044 	movi	r2,1
1010cd14:	f800283a 	ret
1010cd18:	00bfffc4 	movi	r2,-1
1010cd1c:	f800283a 	ret
1010cd20:	0005883a 	mov	r2,zero
1010cd24:	f800283a 	ret

1010cd28 <__mdiff>:
1010cd28:	28c00417 	ldw	r3,16(r5)
1010cd2c:	30800417 	ldw	r2,16(r6)
1010cd30:	defffa04 	addi	sp,sp,-24
1010cd34:	dcc00315 	stw	r19,12(sp)
1010cd38:	dc800215 	stw	r18,8(sp)
1010cd3c:	dfc00515 	stw	ra,20(sp)
1010cd40:	dd000415 	stw	r20,16(sp)
1010cd44:	dc400115 	stw	r17,4(sp)
1010cd48:	dc000015 	stw	r16,0(sp)
1010cd4c:	1887c83a 	sub	r3,r3,r2
1010cd50:	2825883a 	mov	r18,r5
1010cd54:	3027883a 	mov	r19,r6
1010cd58:	1800141e 	bne	r3,zero,1010cdac <__mdiff+0x84>
1010cd5c:	1085883a 	add	r2,r2,r2
1010cd60:	1085883a 	add	r2,r2,r2
1010cd64:	2a000504 	addi	r8,r5,20
1010cd68:	34000504 	addi	r16,r6,20
1010cd6c:	4087883a 	add	r3,r8,r2
1010cd70:	8085883a 	add	r2,r16,r2
1010cd74:	00000106 	br	1010cd7c <__mdiff+0x54>
1010cd78:	40c0592e 	bgeu	r8,r3,1010cee0 <__mdiff+0x1b8>
1010cd7c:	18ffff04 	addi	r3,r3,-4
1010cd80:	10bfff04 	addi	r2,r2,-4
1010cd84:	19c00017 	ldw	r7,0(r3)
1010cd88:	11400017 	ldw	r5,0(r2)
1010cd8c:	397ffa26 	beq	r7,r5,1010cd78 <_gp+0xfffeb5a4>
1010cd90:	3940592e 	bgeu	r7,r5,1010cef8 <__mdiff+0x1d0>
1010cd94:	9005883a 	mov	r2,r18
1010cd98:	4023883a 	mov	r17,r8
1010cd9c:	9825883a 	mov	r18,r19
1010cda0:	05000044 	movi	r20,1
1010cda4:	1027883a 	mov	r19,r2
1010cda8:	00000406 	br	1010cdbc <__mdiff+0x94>
1010cdac:	18005616 	blt	r3,zero,1010cf08 <__mdiff+0x1e0>
1010cdb0:	34400504 	addi	r17,r6,20
1010cdb4:	2c000504 	addi	r16,r5,20
1010cdb8:	0029883a 	mov	r20,zero
1010cdbc:	91400117 	ldw	r5,4(r18)
1010cdc0:	010c4000 	call	1010c400 <_Balloc>
1010cdc4:	92400417 	ldw	r9,16(r18)
1010cdc8:	9b000417 	ldw	r12,16(r19)
1010cdcc:	12c00504 	addi	r11,r2,20
1010cdd0:	4a51883a 	add	r8,r9,r9
1010cdd4:	6319883a 	add	r12,r12,r12
1010cdd8:	4211883a 	add	r8,r8,r8
1010cddc:	6319883a 	add	r12,r12,r12
1010cde0:	15000315 	stw	r20,12(r2)
1010cde4:	8211883a 	add	r8,r16,r8
1010cde8:	8b19883a 	add	r12,r17,r12
1010cdec:	0007883a 	mov	r3,zero
1010cdf0:	81400017 	ldw	r5,0(r16)
1010cdf4:	89c00017 	ldw	r7,0(r17)
1010cdf8:	59800104 	addi	r6,r11,4
1010cdfc:	293fffcc 	andi	r4,r5,65535
1010ce00:	20c7883a 	add	r3,r4,r3
1010ce04:	393fffcc 	andi	r4,r7,65535
1010ce08:	1909c83a 	sub	r4,r3,r4
1010ce0c:	280ad43a 	srli	r5,r5,16
1010ce10:	380ed43a 	srli	r7,r7,16
1010ce14:	2007d43a 	srai	r3,r4,16
1010ce18:	213fffcc 	andi	r4,r4,65535
1010ce1c:	29cbc83a 	sub	r5,r5,r7
1010ce20:	28c7883a 	add	r3,r5,r3
1010ce24:	180a943a 	slli	r5,r3,16
1010ce28:	8c400104 	addi	r17,r17,4
1010ce2c:	84000104 	addi	r16,r16,4
1010ce30:	2908b03a 	or	r4,r5,r4
1010ce34:	59000015 	stw	r4,0(r11)
1010ce38:	1807d43a 	srai	r3,r3,16
1010ce3c:	3015883a 	mov	r10,r6
1010ce40:	3017883a 	mov	r11,r6
1010ce44:	8b3fea36 	bltu	r17,r12,1010cdf0 <_gp+0xfffeb61c>
1010ce48:	8200162e 	bgeu	r16,r8,1010cea4 <__mdiff+0x17c>
1010ce4c:	8017883a 	mov	r11,r16
1010ce50:	59400017 	ldw	r5,0(r11)
1010ce54:	31800104 	addi	r6,r6,4
1010ce58:	5ac00104 	addi	r11,r11,4
1010ce5c:	293fffcc 	andi	r4,r5,65535
1010ce60:	20c7883a 	add	r3,r4,r3
1010ce64:	280ed43a 	srli	r7,r5,16
1010ce68:	180bd43a 	srai	r5,r3,16
1010ce6c:	193fffcc 	andi	r4,r3,65535
1010ce70:	3947883a 	add	r3,r7,r5
1010ce74:	180a943a 	slli	r5,r3,16
1010ce78:	1807d43a 	srai	r3,r3,16
1010ce7c:	2908b03a 	or	r4,r5,r4
1010ce80:	313fff15 	stw	r4,-4(r6)
1010ce84:	5a3ff236 	bltu	r11,r8,1010ce50 <_gp+0xfffeb67c>
1010ce88:	0406303a 	nor	r3,zero,r16
1010ce8c:	1a07883a 	add	r3,r3,r8
1010ce90:	1806d0ba 	srli	r3,r3,2
1010ce94:	18c00044 	addi	r3,r3,1
1010ce98:	18c7883a 	add	r3,r3,r3
1010ce9c:	18c7883a 	add	r3,r3,r3
1010cea0:	50d5883a 	add	r10,r10,r3
1010cea4:	50ffff04 	addi	r3,r10,-4
1010cea8:	2000041e 	bne	r4,zero,1010cebc <__mdiff+0x194>
1010ceac:	18ffff04 	addi	r3,r3,-4
1010ceb0:	19000017 	ldw	r4,0(r3)
1010ceb4:	4a7fffc4 	addi	r9,r9,-1
1010ceb8:	203ffc26 	beq	r4,zero,1010ceac <_gp+0xfffeb6d8>
1010cebc:	12400415 	stw	r9,16(r2)
1010cec0:	dfc00517 	ldw	ra,20(sp)
1010cec4:	dd000417 	ldw	r20,16(sp)
1010cec8:	dcc00317 	ldw	r19,12(sp)
1010cecc:	dc800217 	ldw	r18,8(sp)
1010ced0:	dc400117 	ldw	r17,4(sp)
1010ced4:	dc000017 	ldw	r16,0(sp)
1010ced8:	dec00604 	addi	sp,sp,24
1010cedc:	f800283a 	ret
1010cee0:	000b883a 	mov	r5,zero
1010cee4:	010c4000 	call	1010c400 <_Balloc>
1010cee8:	00c00044 	movi	r3,1
1010ceec:	10c00415 	stw	r3,16(r2)
1010cef0:	10000515 	stw	zero,20(r2)
1010cef4:	003ff206 	br	1010cec0 <_gp+0xfffeb6ec>
1010cef8:	8023883a 	mov	r17,r16
1010cefc:	0029883a 	mov	r20,zero
1010cf00:	4021883a 	mov	r16,r8
1010cf04:	003fad06 	br	1010cdbc <_gp+0xfffeb5e8>
1010cf08:	9005883a 	mov	r2,r18
1010cf0c:	94400504 	addi	r17,r18,20
1010cf10:	9c000504 	addi	r16,r19,20
1010cf14:	9825883a 	mov	r18,r19
1010cf18:	05000044 	movi	r20,1
1010cf1c:	1027883a 	mov	r19,r2
1010cf20:	003fa606 	br	1010cdbc <_gp+0xfffeb5e8>

1010cf24 <__ulp>:
1010cf24:	295ffc2c 	andhi	r5,r5,32752
1010cf28:	00bf3034 	movhi	r2,64704
1010cf2c:	2887883a 	add	r3,r5,r2
1010cf30:	00c0020e 	bge	zero,r3,1010cf3c <__ulp+0x18>
1010cf34:	0005883a 	mov	r2,zero
1010cf38:	f800283a 	ret
1010cf3c:	00c7c83a 	sub	r3,zero,r3
1010cf40:	1807d53a 	srai	r3,r3,20
1010cf44:	008004c4 	movi	r2,19
1010cf48:	10c00b0e 	bge	r2,r3,1010cf78 <__ulp+0x54>
1010cf4c:	18bffb04 	addi	r2,r3,-20
1010cf50:	01000784 	movi	r4,30
1010cf54:	0007883a 	mov	r3,zero
1010cf58:	20800516 	blt	r4,r2,1010cf70 <__ulp+0x4c>
1010cf5c:	010007c4 	movi	r4,31
1010cf60:	2089c83a 	sub	r4,r4,r2
1010cf64:	00800044 	movi	r2,1
1010cf68:	1104983a 	sll	r2,r2,r4
1010cf6c:	f800283a 	ret
1010cf70:	00800044 	movi	r2,1
1010cf74:	f800283a 	ret
1010cf78:	01400234 	movhi	r5,8
1010cf7c:	28c7d83a 	sra	r3,r5,r3
1010cf80:	0005883a 	mov	r2,zero
1010cf84:	f800283a 	ret

1010cf88 <__b2d>:
1010cf88:	defffa04 	addi	sp,sp,-24
1010cf8c:	dc000015 	stw	r16,0(sp)
1010cf90:	24000417 	ldw	r16,16(r4)
1010cf94:	dc400115 	stw	r17,4(sp)
1010cf98:	24400504 	addi	r17,r4,20
1010cf9c:	8421883a 	add	r16,r16,r16
1010cfa0:	8421883a 	add	r16,r16,r16
1010cfa4:	8c21883a 	add	r16,r17,r16
1010cfa8:	dc800215 	stw	r18,8(sp)
1010cfac:	84bfff17 	ldw	r18,-4(r16)
1010cfb0:	dd000415 	stw	r20,16(sp)
1010cfb4:	dcc00315 	stw	r19,12(sp)
1010cfb8:	9009883a 	mov	r4,r18
1010cfbc:	2829883a 	mov	r20,r5
1010cfc0:	dfc00515 	stw	ra,20(sp)
1010cfc4:	010c6f40 	call	1010c6f4 <__hi0bits>
1010cfc8:	00c00804 	movi	r3,32
1010cfcc:	1889c83a 	sub	r4,r3,r2
1010cfd0:	a1000015 	stw	r4,0(r20)
1010cfd4:	01000284 	movi	r4,10
1010cfd8:	84ffff04 	addi	r19,r16,-4
1010cfdc:	20801216 	blt	r4,r2,1010d028 <__b2d+0xa0>
1010cfe0:	018002c4 	movi	r6,11
1010cfe4:	308dc83a 	sub	r6,r6,r2
1010cfe8:	9186d83a 	srl	r3,r18,r6
1010cfec:	18cffc34 	orhi	r3,r3,16368
1010cff0:	8cc0212e 	bgeu	r17,r19,1010d078 <__b2d+0xf0>
1010cff4:	813ffe17 	ldw	r4,-8(r16)
1010cff8:	218cd83a 	srl	r6,r4,r6
1010cffc:	10800544 	addi	r2,r2,21
1010d000:	9084983a 	sll	r2,r18,r2
1010d004:	1184b03a 	or	r2,r2,r6
1010d008:	dfc00517 	ldw	ra,20(sp)
1010d00c:	dd000417 	ldw	r20,16(sp)
1010d010:	dcc00317 	ldw	r19,12(sp)
1010d014:	dc800217 	ldw	r18,8(sp)
1010d018:	dc400117 	ldw	r17,4(sp)
1010d01c:	dc000017 	ldw	r16,0(sp)
1010d020:	dec00604 	addi	sp,sp,24
1010d024:	f800283a 	ret
1010d028:	8cc00f2e 	bgeu	r17,r19,1010d068 <__b2d+0xe0>
1010d02c:	117ffd44 	addi	r5,r2,-11
1010d030:	80bffe17 	ldw	r2,-8(r16)
1010d034:	28000e26 	beq	r5,zero,1010d070 <__b2d+0xe8>
1010d038:	1949c83a 	sub	r4,r3,r5
1010d03c:	9164983a 	sll	r18,r18,r5
1010d040:	1106d83a 	srl	r3,r2,r4
1010d044:	81bffe04 	addi	r6,r16,-8
1010d048:	948ffc34 	orhi	r18,r18,16368
1010d04c:	90c6b03a 	or	r3,r18,r3
1010d050:	89800e2e 	bgeu	r17,r6,1010d08c <__b2d+0x104>
1010d054:	81bffd17 	ldw	r6,-12(r16)
1010d058:	1144983a 	sll	r2,r2,r5
1010d05c:	310ad83a 	srl	r5,r6,r4
1010d060:	2884b03a 	or	r2,r5,r2
1010d064:	003fe806 	br	1010d008 <_gp+0xfffeb834>
1010d068:	10bffd44 	addi	r2,r2,-11
1010d06c:	1000041e 	bne	r2,zero,1010d080 <__b2d+0xf8>
1010d070:	90cffc34 	orhi	r3,r18,16368
1010d074:	003fe406 	br	1010d008 <_gp+0xfffeb834>
1010d078:	000d883a 	mov	r6,zero
1010d07c:	003fdf06 	br	1010cffc <_gp+0xfffeb828>
1010d080:	90a4983a 	sll	r18,r18,r2
1010d084:	0005883a 	mov	r2,zero
1010d088:	003ff906 	br	1010d070 <_gp+0xfffeb89c>
1010d08c:	1144983a 	sll	r2,r2,r5
1010d090:	003fdd06 	br	1010d008 <_gp+0xfffeb834>

1010d094 <__d2b>:
1010d094:	defff804 	addi	sp,sp,-32
1010d098:	dc000215 	stw	r16,8(sp)
1010d09c:	3021883a 	mov	r16,r6
1010d0a0:	dc400315 	stw	r17,12(sp)
1010d0a4:	8022907a 	slli	r17,r16,1
1010d0a8:	dd000615 	stw	r20,24(sp)
1010d0ac:	2829883a 	mov	r20,r5
1010d0b0:	01400044 	movi	r5,1
1010d0b4:	dcc00515 	stw	r19,20(sp)
1010d0b8:	dc800415 	stw	r18,16(sp)
1010d0bc:	dfc00715 	stw	ra,28(sp)
1010d0c0:	3825883a 	mov	r18,r7
1010d0c4:	8822d57a 	srli	r17,r17,21
1010d0c8:	010c4000 	call	1010c400 <_Balloc>
1010d0cc:	1027883a 	mov	r19,r2
1010d0d0:	00800434 	movhi	r2,16
1010d0d4:	10bfffc4 	addi	r2,r2,-1
1010d0d8:	808c703a 	and	r6,r16,r2
1010d0dc:	88000126 	beq	r17,zero,1010d0e4 <__d2b+0x50>
1010d0e0:	31800434 	orhi	r6,r6,16
1010d0e4:	d9800015 	stw	r6,0(sp)
1010d0e8:	a0002426 	beq	r20,zero,1010d17c <__d2b+0xe8>
1010d0ec:	d9000104 	addi	r4,sp,4
1010d0f0:	dd000115 	stw	r20,4(sp)
1010d0f4:	010c75c0 	call	1010c75c <__lo0bits>
1010d0f8:	d8c00017 	ldw	r3,0(sp)
1010d0fc:	10002f1e 	bne	r2,zero,1010d1bc <__d2b+0x128>
1010d100:	d9000117 	ldw	r4,4(sp)
1010d104:	99000515 	stw	r4,20(r19)
1010d108:	1821003a 	cmpeq	r16,r3,zero
1010d10c:	01000084 	movi	r4,2
1010d110:	2421c83a 	sub	r16,r4,r16
1010d114:	98c00615 	stw	r3,24(r19)
1010d118:	9c000415 	stw	r16,16(r19)
1010d11c:	88001f1e 	bne	r17,zero,1010d19c <__d2b+0x108>
1010d120:	10bef384 	addi	r2,r2,-1074
1010d124:	90800015 	stw	r2,0(r18)
1010d128:	00900034 	movhi	r2,16384
1010d12c:	10bfffc4 	addi	r2,r2,-1
1010d130:	8085883a 	add	r2,r16,r2
1010d134:	1085883a 	add	r2,r2,r2
1010d138:	1085883a 	add	r2,r2,r2
1010d13c:	9885883a 	add	r2,r19,r2
1010d140:	11000517 	ldw	r4,20(r2)
1010d144:	8020917a 	slli	r16,r16,5
1010d148:	010c6f40 	call	1010c6f4 <__hi0bits>
1010d14c:	d8c00817 	ldw	r3,32(sp)
1010d150:	8085c83a 	sub	r2,r16,r2
1010d154:	18800015 	stw	r2,0(r3)
1010d158:	9805883a 	mov	r2,r19
1010d15c:	dfc00717 	ldw	ra,28(sp)
1010d160:	dd000617 	ldw	r20,24(sp)
1010d164:	dcc00517 	ldw	r19,20(sp)
1010d168:	dc800417 	ldw	r18,16(sp)
1010d16c:	dc400317 	ldw	r17,12(sp)
1010d170:	dc000217 	ldw	r16,8(sp)
1010d174:	dec00804 	addi	sp,sp,32
1010d178:	f800283a 	ret
1010d17c:	d809883a 	mov	r4,sp
1010d180:	010c75c0 	call	1010c75c <__lo0bits>
1010d184:	d8c00017 	ldw	r3,0(sp)
1010d188:	04000044 	movi	r16,1
1010d18c:	9c000415 	stw	r16,16(r19)
1010d190:	98c00515 	stw	r3,20(r19)
1010d194:	10800804 	addi	r2,r2,32
1010d198:	883fe126 	beq	r17,zero,1010d120 <_gp+0xfffeb94c>
1010d19c:	00c00d44 	movi	r3,53
1010d1a0:	8c7ef344 	addi	r17,r17,-1075
1010d1a4:	88a3883a 	add	r17,r17,r2
1010d1a8:	1885c83a 	sub	r2,r3,r2
1010d1ac:	d8c00817 	ldw	r3,32(sp)
1010d1b0:	94400015 	stw	r17,0(r18)
1010d1b4:	18800015 	stw	r2,0(r3)
1010d1b8:	003fe706 	br	1010d158 <_gp+0xfffeb984>
1010d1bc:	01000804 	movi	r4,32
1010d1c0:	2089c83a 	sub	r4,r4,r2
1010d1c4:	1908983a 	sll	r4,r3,r4
1010d1c8:	d9400117 	ldw	r5,4(sp)
1010d1cc:	1886d83a 	srl	r3,r3,r2
1010d1d0:	2148b03a 	or	r4,r4,r5
1010d1d4:	99000515 	stw	r4,20(r19)
1010d1d8:	d8c00015 	stw	r3,0(sp)
1010d1dc:	003fca06 	br	1010d108 <_gp+0xfffeb934>

1010d1e0 <__ratio>:
1010d1e0:	defff904 	addi	sp,sp,-28
1010d1e4:	dc400315 	stw	r17,12(sp)
1010d1e8:	2823883a 	mov	r17,r5
1010d1ec:	d9400104 	addi	r5,sp,4
1010d1f0:	dfc00615 	stw	ra,24(sp)
1010d1f4:	dcc00515 	stw	r19,20(sp)
1010d1f8:	dc800415 	stw	r18,16(sp)
1010d1fc:	2027883a 	mov	r19,r4
1010d200:	dc000215 	stw	r16,8(sp)
1010d204:	010cf880 	call	1010cf88 <__b2d>
1010d208:	d80b883a 	mov	r5,sp
1010d20c:	8809883a 	mov	r4,r17
1010d210:	1025883a 	mov	r18,r2
1010d214:	1821883a 	mov	r16,r3
1010d218:	010cf880 	call	1010cf88 <__b2d>
1010d21c:	8a000417 	ldw	r8,16(r17)
1010d220:	99000417 	ldw	r4,16(r19)
1010d224:	d9400117 	ldw	r5,4(sp)
1010d228:	2209c83a 	sub	r4,r4,r8
1010d22c:	2010917a 	slli	r8,r4,5
1010d230:	d9000017 	ldw	r4,0(sp)
1010d234:	2909c83a 	sub	r4,r5,r4
1010d238:	4109883a 	add	r4,r8,r4
1010d23c:	01000e0e 	bge	zero,r4,1010d278 <__ratio+0x98>
1010d240:	2008953a 	slli	r4,r4,20
1010d244:	2421883a 	add	r16,r4,r16
1010d248:	100d883a 	mov	r6,r2
1010d24c:	180f883a 	mov	r7,r3
1010d250:	9009883a 	mov	r4,r18
1010d254:	800b883a 	mov	r5,r16
1010d258:	01123980 	call	10112398 <__divdf3>
1010d25c:	dfc00617 	ldw	ra,24(sp)
1010d260:	dcc00517 	ldw	r19,20(sp)
1010d264:	dc800417 	ldw	r18,16(sp)
1010d268:	dc400317 	ldw	r17,12(sp)
1010d26c:	dc000217 	ldw	r16,8(sp)
1010d270:	dec00704 	addi	sp,sp,28
1010d274:	f800283a 	ret
1010d278:	2008953a 	slli	r4,r4,20
1010d27c:	1907c83a 	sub	r3,r3,r4
1010d280:	003ff106 	br	1010d248 <_gp+0xfffeba74>

1010d284 <_mprec_log10>:
1010d284:	defffe04 	addi	sp,sp,-8
1010d288:	dc000015 	stw	r16,0(sp)
1010d28c:	dfc00115 	stw	ra,4(sp)
1010d290:	008005c4 	movi	r2,23
1010d294:	2021883a 	mov	r16,r4
1010d298:	11000d0e 	bge	r2,r4,1010d2d0 <_mprec_log10+0x4c>
1010d29c:	0005883a 	mov	r2,zero
1010d2a0:	00cffc34 	movhi	r3,16368
1010d2a4:	843fffc4 	addi	r16,r16,-1
1010d2a8:	000d883a 	mov	r6,zero
1010d2ac:	01d00934 	movhi	r7,16420
1010d2b0:	1009883a 	mov	r4,r2
1010d2b4:	180b883a 	mov	r5,r3
1010d2b8:	0112ed80 	call	10112ed8 <__muldf3>
1010d2bc:	803ff91e 	bne	r16,zero,1010d2a4 <_gp+0xfffebad0>
1010d2c0:	dfc00117 	ldw	ra,4(sp)
1010d2c4:	dc000017 	ldw	r16,0(sp)
1010d2c8:	dec00204 	addi	sp,sp,8
1010d2cc:	f800283a 	ret
1010d2d0:	202090fa 	slli	r16,r4,3
1010d2d4:	00840474 	movhi	r2,4113
1010d2d8:	109eae04 	addi	r2,r2,31416
1010d2dc:	1421883a 	add	r16,r2,r16
1010d2e0:	80800017 	ldw	r2,0(r16)
1010d2e4:	80c00117 	ldw	r3,4(r16)
1010d2e8:	dfc00117 	ldw	ra,4(sp)
1010d2ec:	dc000017 	ldw	r16,0(sp)
1010d2f0:	dec00204 	addi	sp,sp,8
1010d2f4:	f800283a 	ret

1010d2f8 <__copybits>:
1010d2f8:	297fffc4 	addi	r5,r5,-1
1010d2fc:	280fd17a 	srai	r7,r5,5
1010d300:	30c00417 	ldw	r3,16(r6)
1010d304:	30800504 	addi	r2,r6,20
1010d308:	39c00044 	addi	r7,r7,1
1010d30c:	18c7883a 	add	r3,r3,r3
1010d310:	39cf883a 	add	r7,r7,r7
1010d314:	18c7883a 	add	r3,r3,r3
1010d318:	39cf883a 	add	r7,r7,r7
1010d31c:	10c7883a 	add	r3,r2,r3
1010d320:	21cf883a 	add	r7,r4,r7
1010d324:	10c00d2e 	bgeu	r2,r3,1010d35c <__copybits+0x64>
1010d328:	200b883a 	mov	r5,r4
1010d32c:	12000017 	ldw	r8,0(r2)
1010d330:	29400104 	addi	r5,r5,4
1010d334:	10800104 	addi	r2,r2,4
1010d338:	2a3fff15 	stw	r8,-4(r5)
1010d33c:	10fffb36 	bltu	r2,r3,1010d32c <_gp+0xfffebb58>
1010d340:	1985c83a 	sub	r2,r3,r6
1010d344:	10bffac4 	addi	r2,r2,-21
1010d348:	1004d0ba 	srli	r2,r2,2
1010d34c:	10800044 	addi	r2,r2,1
1010d350:	1085883a 	add	r2,r2,r2
1010d354:	1085883a 	add	r2,r2,r2
1010d358:	2089883a 	add	r4,r4,r2
1010d35c:	21c0032e 	bgeu	r4,r7,1010d36c <__copybits+0x74>
1010d360:	20000015 	stw	zero,0(r4)
1010d364:	21000104 	addi	r4,r4,4
1010d368:	21fffd36 	bltu	r4,r7,1010d360 <_gp+0xfffebb8c>
1010d36c:	f800283a 	ret

1010d370 <__any_on>:
1010d370:	20c00417 	ldw	r3,16(r4)
1010d374:	2805d17a 	srai	r2,r5,5
1010d378:	21000504 	addi	r4,r4,20
1010d37c:	18800d0e 	bge	r3,r2,1010d3b4 <__any_on+0x44>
1010d380:	18c7883a 	add	r3,r3,r3
1010d384:	18c7883a 	add	r3,r3,r3
1010d388:	20c7883a 	add	r3,r4,r3
1010d38c:	20c0192e 	bgeu	r4,r3,1010d3f4 <__any_on+0x84>
1010d390:	18bfff17 	ldw	r2,-4(r3)
1010d394:	18ffff04 	addi	r3,r3,-4
1010d398:	1000041e 	bne	r2,zero,1010d3ac <__any_on+0x3c>
1010d39c:	20c0142e 	bgeu	r4,r3,1010d3f0 <__any_on+0x80>
1010d3a0:	18ffff04 	addi	r3,r3,-4
1010d3a4:	19400017 	ldw	r5,0(r3)
1010d3a8:	283ffc26 	beq	r5,zero,1010d39c <_gp+0xfffebbc8>
1010d3ac:	00800044 	movi	r2,1
1010d3b0:	f800283a 	ret
1010d3b4:	10c00a0e 	bge	r2,r3,1010d3e0 <__any_on+0x70>
1010d3b8:	1085883a 	add	r2,r2,r2
1010d3bc:	1085883a 	add	r2,r2,r2
1010d3c0:	294007cc 	andi	r5,r5,31
1010d3c4:	2087883a 	add	r3,r4,r2
1010d3c8:	283ff026 	beq	r5,zero,1010d38c <_gp+0xfffebbb8>
1010d3cc:	19800017 	ldw	r6,0(r3)
1010d3d0:	3144d83a 	srl	r2,r6,r5
1010d3d4:	114a983a 	sll	r5,r2,r5
1010d3d8:	317ff41e 	bne	r6,r5,1010d3ac <_gp+0xfffebbd8>
1010d3dc:	003feb06 	br	1010d38c <_gp+0xfffebbb8>
1010d3e0:	1085883a 	add	r2,r2,r2
1010d3e4:	1085883a 	add	r2,r2,r2
1010d3e8:	2087883a 	add	r3,r4,r2
1010d3ec:	003fe706 	br	1010d38c <_gp+0xfffebbb8>
1010d3f0:	f800283a 	ret
1010d3f4:	0005883a 	mov	r2,zero
1010d3f8:	f800283a 	ret

1010d3fc <_putc_r>:
1010d3fc:	defffc04 	addi	sp,sp,-16
1010d400:	dc000215 	stw	r16,8(sp)
1010d404:	dfc00315 	stw	ra,12(sp)
1010d408:	2021883a 	mov	r16,r4
1010d40c:	20000226 	beq	r4,zero,1010d418 <_putc_r+0x1c>
1010d410:	20800e17 	ldw	r2,56(r4)
1010d414:	10001b26 	beq	r2,zero,1010d484 <_putc_r+0x88>
1010d418:	30800217 	ldw	r2,8(r6)
1010d41c:	10bfffc4 	addi	r2,r2,-1
1010d420:	30800215 	stw	r2,8(r6)
1010d424:	10000a16 	blt	r2,zero,1010d450 <_putc_r+0x54>
1010d428:	30800017 	ldw	r2,0(r6)
1010d42c:	11400005 	stb	r5,0(r2)
1010d430:	30800017 	ldw	r2,0(r6)
1010d434:	10c00044 	addi	r3,r2,1
1010d438:	30c00015 	stw	r3,0(r6)
1010d43c:	10800003 	ldbu	r2,0(r2)
1010d440:	dfc00317 	ldw	ra,12(sp)
1010d444:	dc000217 	ldw	r16,8(sp)
1010d448:	dec00404 	addi	sp,sp,16
1010d44c:	f800283a 	ret
1010d450:	30c00617 	ldw	r3,24(r6)
1010d454:	10c00616 	blt	r2,r3,1010d470 <_putc_r+0x74>
1010d458:	30800017 	ldw	r2,0(r6)
1010d45c:	00c00284 	movi	r3,10
1010d460:	11400005 	stb	r5,0(r2)
1010d464:	30800017 	ldw	r2,0(r6)
1010d468:	11400003 	ldbu	r5,0(r2)
1010d46c:	28fff11e 	bne	r5,r3,1010d434 <_gp+0xfffebc60>
1010d470:	8009883a 	mov	r4,r16
1010d474:	dfc00317 	ldw	ra,12(sp)
1010d478:	dc000217 	ldw	r16,8(sp)
1010d47c:	dec00404 	addi	sp,sp,16
1010d480:	01109d01 	jmpi	101109d0 <__swbuf_r>
1010d484:	d9400015 	stw	r5,0(sp)
1010d488:	d9800115 	stw	r6,4(sp)
1010d48c:	01039c80 	call	101039c8 <__sinit>
1010d490:	d9800117 	ldw	r6,4(sp)
1010d494:	d9400017 	ldw	r5,0(sp)
1010d498:	003fdf06 	br	1010d418 <_gp+0xfffebc44>

1010d49c <putc>:
1010d49c:	008404b4 	movhi	r2,4114
1010d4a0:	defffc04 	addi	sp,sp,-16
1010d4a4:	10a5f604 	addi	r2,r2,-26664
1010d4a8:	dc000115 	stw	r16,4(sp)
1010d4ac:	14000017 	ldw	r16,0(r2)
1010d4b0:	dc400215 	stw	r17,8(sp)
1010d4b4:	dfc00315 	stw	ra,12(sp)
1010d4b8:	2023883a 	mov	r17,r4
1010d4bc:	80000226 	beq	r16,zero,1010d4c8 <putc+0x2c>
1010d4c0:	80800e17 	ldw	r2,56(r16)
1010d4c4:	10001a26 	beq	r2,zero,1010d530 <putc+0x94>
1010d4c8:	28800217 	ldw	r2,8(r5)
1010d4cc:	10bfffc4 	addi	r2,r2,-1
1010d4d0:	28800215 	stw	r2,8(r5)
1010d4d4:	10000b16 	blt	r2,zero,1010d504 <putc+0x68>
1010d4d8:	28800017 	ldw	r2,0(r5)
1010d4dc:	14400005 	stb	r17,0(r2)
1010d4e0:	28800017 	ldw	r2,0(r5)
1010d4e4:	10c00044 	addi	r3,r2,1
1010d4e8:	28c00015 	stw	r3,0(r5)
1010d4ec:	10800003 	ldbu	r2,0(r2)
1010d4f0:	dfc00317 	ldw	ra,12(sp)
1010d4f4:	dc400217 	ldw	r17,8(sp)
1010d4f8:	dc000117 	ldw	r16,4(sp)
1010d4fc:	dec00404 	addi	sp,sp,16
1010d500:	f800283a 	ret
1010d504:	28c00617 	ldw	r3,24(r5)
1010d508:	10c00e16 	blt	r2,r3,1010d544 <putc+0xa8>
1010d50c:	28800017 	ldw	r2,0(r5)
1010d510:	01000284 	movi	r4,10
1010d514:	14400005 	stb	r17,0(r2)
1010d518:	28800017 	ldw	r2,0(r5)
1010d51c:	10c00003 	ldbu	r3,0(r2)
1010d520:	193ff01e 	bne	r3,r4,1010d4e4 <_gp+0xfffebd10>
1010d524:	280d883a 	mov	r6,r5
1010d528:	180b883a 	mov	r5,r3
1010d52c:	00000706 	br	1010d54c <putc+0xb0>
1010d530:	8009883a 	mov	r4,r16
1010d534:	d9400015 	stw	r5,0(sp)
1010d538:	01039c80 	call	101039c8 <__sinit>
1010d53c:	d9400017 	ldw	r5,0(sp)
1010d540:	003fe106 	br	1010d4c8 <_gp+0xfffebcf4>
1010d544:	280d883a 	mov	r6,r5
1010d548:	880b883a 	mov	r5,r17
1010d54c:	8009883a 	mov	r4,r16
1010d550:	dfc00317 	ldw	ra,12(sp)
1010d554:	dc400217 	ldw	r17,8(sp)
1010d558:	dc000117 	ldw	r16,4(sp)
1010d55c:	dec00404 	addi	sp,sp,16
1010d560:	01109d01 	jmpi	101109d0 <__swbuf_r>

1010d564 <_read_r>:
1010d564:	defffd04 	addi	sp,sp,-12
1010d568:	2805883a 	mov	r2,r5
1010d56c:	dc000015 	stw	r16,0(sp)
1010d570:	040404b4 	movhi	r16,4114
1010d574:	dc400115 	stw	r17,4(sp)
1010d578:	300b883a 	mov	r5,r6
1010d57c:	842cef04 	addi	r16,r16,-19524
1010d580:	2023883a 	mov	r17,r4
1010d584:	380d883a 	mov	r6,r7
1010d588:	1009883a 	mov	r4,r2
1010d58c:	dfc00215 	stw	ra,8(sp)
1010d590:	80000015 	stw	zero,0(r16)
1010d594:	0114fc40 	call	10114fc4 <read>
1010d598:	00ffffc4 	movi	r3,-1
1010d59c:	10c00526 	beq	r2,r3,1010d5b4 <_read_r+0x50>
1010d5a0:	dfc00217 	ldw	ra,8(sp)
1010d5a4:	dc400117 	ldw	r17,4(sp)
1010d5a8:	dc000017 	ldw	r16,0(sp)
1010d5ac:	dec00304 	addi	sp,sp,12
1010d5b0:	f800283a 	ret
1010d5b4:	80c00017 	ldw	r3,0(r16)
1010d5b8:	183ff926 	beq	r3,zero,1010d5a0 <_gp+0xfffebdcc>
1010d5bc:	88c00015 	stw	r3,0(r17)
1010d5c0:	003ff706 	br	1010d5a0 <_gp+0xfffebdcc>

1010d5c4 <_realloc_r>:
1010d5c4:	defff604 	addi	sp,sp,-40
1010d5c8:	dc800215 	stw	r18,8(sp)
1010d5cc:	dfc00915 	stw	ra,36(sp)
1010d5d0:	df000815 	stw	fp,32(sp)
1010d5d4:	ddc00715 	stw	r23,28(sp)
1010d5d8:	dd800615 	stw	r22,24(sp)
1010d5dc:	dd400515 	stw	r21,20(sp)
1010d5e0:	dd000415 	stw	r20,16(sp)
1010d5e4:	dcc00315 	stw	r19,12(sp)
1010d5e8:	dc400115 	stw	r17,4(sp)
1010d5ec:	dc000015 	stw	r16,0(sp)
1010d5f0:	3025883a 	mov	r18,r6
1010d5f4:	2800b726 	beq	r5,zero,1010d8d4 <_realloc_r+0x310>
1010d5f8:	282b883a 	mov	r21,r5
1010d5fc:	2029883a 	mov	r20,r4
1010d600:	0114a840 	call	10114a84 <__malloc_lock>
1010d604:	a8bfff17 	ldw	r2,-4(r21)
1010d608:	043fff04 	movi	r16,-4
1010d60c:	90c002c4 	addi	r3,r18,11
1010d610:	01000584 	movi	r4,22
1010d614:	acfffe04 	addi	r19,r21,-8
1010d618:	1420703a 	and	r16,r2,r16
1010d61c:	20c0332e 	bgeu	r4,r3,1010d6ec <_realloc_r+0x128>
1010d620:	047ffe04 	movi	r17,-8
1010d624:	1c62703a 	and	r17,r3,r17
1010d628:	8807883a 	mov	r3,r17
1010d62c:	88005816 	blt	r17,zero,1010d790 <_realloc_r+0x1cc>
1010d630:	8c805736 	bltu	r17,r18,1010d790 <_realloc_r+0x1cc>
1010d634:	80c0300e 	bge	r16,r3,1010d6f8 <_realloc_r+0x134>
1010d638:	070404b4 	movhi	fp,4114
1010d63c:	e7204904 	addi	fp,fp,-32476
1010d640:	e1c00217 	ldw	r7,8(fp)
1010d644:	9c09883a 	add	r4,r19,r16
1010d648:	22000117 	ldw	r8,4(r4)
1010d64c:	21c06326 	beq	r4,r7,1010d7dc <_realloc_r+0x218>
1010d650:	017fff84 	movi	r5,-2
1010d654:	414a703a 	and	r5,r8,r5
1010d658:	214b883a 	add	r5,r4,r5
1010d65c:	29800117 	ldw	r6,4(r5)
1010d660:	3180004c 	andi	r6,r6,1
1010d664:	30003f26 	beq	r6,zero,1010d764 <_realloc_r+0x1a0>
1010d668:	1080004c 	andi	r2,r2,1
1010d66c:	10008326 	beq	r2,zero,1010d87c <_realloc_r+0x2b8>
1010d670:	900b883a 	mov	r5,r18
1010d674:	a009883a 	mov	r4,r20
1010d678:	01049200 	call	10104920 <_malloc_r>
1010d67c:	1025883a 	mov	r18,r2
1010d680:	10011e26 	beq	r2,zero,1010dafc <_realloc_r+0x538>
1010d684:	a93fff17 	ldw	r4,-4(r21)
1010d688:	10fffe04 	addi	r3,r2,-8
1010d68c:	00bfff84 	movi	r2,-2
1010d690:	2084703a 	and	r2,r4,r2
1010d694:	9885883a 	add	r2,r19,r2
1010d698:	1880ee26 	beq	r3,r2,1010da54 <_realloc_r+0x490>
1010d69c:	81bfff04 	addi	r6,r16,-4
1010d6a0:	00800904 	movi	r2,36
1010d6a4:	1180b836 	bltu	r2,r6,1010d988 <_realloc_r+0x3c4>
1010d6a8:	00c004c4 	movi	r3,19
1010d6ac:	19809636 	bltu	r3,r6,1010d908 <_realloc_r+0x344>
1010d6b0:	9005883a 	mov	r2,r18
1010d6b4:	a807883a 	mov	r3,r21
1010d6b8:	19000017 	ldw	r4,0(r3)
1010d6bc:	11000015 	stw	r4,0(r2)
1010d6c0:	19000117 	ldw	r4,4(r3)
1010d6c4:	11000115 	stw	r4,4(r2)
1010d6c8:	18c00217 	ldw	r3,8(r3)
1010d6cc:	10c00215 	stw	r3,8(r2)
1010d6d0:	a80b883a 	mov	r5,r21
1010d6d4:	a009883a 	mov	r4,r20
1010d6d8:	0103cf00 	call	10103cf0 <_free_r>
1010d6dc:	a009883a 	mov	r4,r20
1010d6e0:	0114aa80 	call	10114aa8 <__malloc_unlock>
1010d6e4:	9005883a 	mov	r2,r18
1010d6e8:	00001206 	br	1010d734 <_realloc_r+0x170>
1010d6ec:	00c00404 	movi	r3,16
1010d6f0:	1823883a 	mov	r17,r3
1010d6f4:	003fce06 	br	1010d630 <_gp+0xfffebe5c>
1010d6f8:	a825883a 	mov	r18,r21
1010d6fc:	8445c83a 	sub	r2,r16,r17
1010d700:	00c003c4 	movi	r3,15
1010d704:	18802636 	bltu	r3,r2,1010d7a0 <_realloc_r+0x1dc>
1010d708:	99800117 	ldw	r6,4(r19)
1010d70c:	9c07883a 	add	r3,r19,r16
1010d710:	3180004c 	andi	r6,r6,1
1010d714:	3420b03a 	or	r16,r6,r16
1010d718:	9c000115 	stw	r16,4(r19)
1010d71c:	18800117 	ldw	r2,4(r3)
1010d720:	10800054 	ori	r2,r2,1
1010d724:	18800115 	stw	r2,4(r3)
1010d728:	a009883a 	mov	r4,r20
1010d72c:	0114aa80 	call	10114aa8 <__malloc_unlock>
1010d730:	9005883a 	mov	r2,r18
1010d734:	dfc00917 	ldw	ra,36(sp)
1010d738:	df000817 	ldw	fp,32(sp)
1010d73c:	ddc00717 	ldw	r23,28(sp)
1010d740:	dd800617 	ldw	r22,24(sp)
1010d744:	dd400517 	ldw	r21,20(sp)
1010d748:	dd000417 	ldw	r20,16(sp)
1010d74c:	dcc00317 	ldw	r19,12(sp)
1010d750:	dc800217 	ldw	r18,8(sp)
1010d754:	dc400117 	ldw	r17,4(sp)
1010d758:	dc000017 	ldw	r16,0(sp)
1010d75c:	dec00a04 	addi	sp,sp,40
1010d760:	f800283a 	ret
1010d764:	017fff04 	movi	r5,-4
1010d768:	414a703a 	and	r5,r8,r5
1010d76c:	814d883a 	add	r6,r16,r5
1010d770:	30c01f16 	blt	r6,r3,1010d7f0 <_realloc_r+0x22c>
1010d774:	20800317 	ldw	r2,12(r4)
1010d778:	20c00217 	ldw	r3,8(r4)
1010d77c:	a825883a 	mov	r18,r21
1010d780:	3021883a 	mov	r16,r6
1010d784:	18800315 	stw	r2,12(r3)
1010d788:	10c00215 	stw	r3,8(r2)
1010d78c:	003fdb06 	br	1010d6fc <_gp+0xfffebf28>
1010d790:	00800304 	movi	r2,12
1010d794:	a0800015 	stw	r2,0(r20)
1010d798:	0005883a 	mov	r2,zero
1010d79c:	003fe506 	br	1010d734 <_gp+0xfffebf60>
1010d7a0:	98c00117 	ldw	r3,4(r19)
1010d7a4:	9c4b883a 	add	r5,r19,r17
1010d7a8:	11000054 	ori	r4,r2,1
1010d7ac:	18c0004c 	andi	r3,r3,1
1010d7b0:	1c62b03a 	or	r17,r3,r17
1010d7b4:	9c400115 	stw	r17,4(r19)
1010d7b8:	29000115 	stw	r4,4(r5)
1010d7bc:	2885883a 	add	r2,r5,r2
1010d7c0:	10c00117 	ldw	r3,4(r2)
1010d7c4:	29400204 	addi	r5,r5,8
1010d7c8:	a009883a 	mov	r4,r20
1010d7cc:	18c00054 	ori	r3,r3,1
1010d7d0:	10c00115 	stw	r3,4(r2)
1010d7d4:	0103cf00 	call	10103cf0 <_free_r>
1010d7d8:	003fd306 	br	1010d728 <_gp+0xfffebf54>
1010d7dc:	017fff04 	movi	r5,-4
1010d7e0:	414a703a 	and	r5,r8,r5
1010d7e4:	89800404 	addi	r6,r17,16
1010d7e8:	8151883a 	add	r8,r16,r5
1010d7ec:	4180590e 	bge	r8,r6,1010d954 <_realloc_r+0x390>
1010d7f0:	1080004c 	andi	r2,r2,1
1010d7f4:	103f9e1e 	bne	r2,zero,1010d670 <_gp+0xfffebe9c>
1010d7f8:	adbffe17 	ldw	r22,-8(r21)
1010d7fc:	00bfff04 	movi	r2,-4
1010d800:	9dadc83a 	sub	r22,r19,r22
1010d804:	b1800117 	ldw	r6,4(r22)
1010d808:	3084703a 	and	r2,r6,r2
1010d80c:	20002026 	beq	r4,zero,1010d890 <_realloc_r+0x2cc>
1010d810:	80af883a 	add	r23,r16,r2
1010d814:	b96f883a 	add	r23,r23,r5
1010d818:	21c05f26 	beq	r4,r7,1010d998 <_realloc_r+0x3d4>
1010d81c:	b8c01c16 	blt	r23,r3,1010d890 <_realloc_r+0x2cc>
1010d820:	20800317 	ldw	r2,12(r4)
1010d824:	20c00217 	ldw	r3,8(r4)
1010d828:	81bfff04 	addi	r6,r16,-4
1010d82c:	01000904 	movi	r4,36
1010d830:	18800315 	stw	r2,12(r3)
1010d834:	10c00215 	stw	r3,8(r2)
1010d838:	b0c00217 	ldw	r3,8(r22)
1010d83c:	b0800317 	ldw	r2,12(r22)
1010d840:	b4800204 	addi	r18,r22,8
1010d844:	18800315 	stw	r2,12(r3)
1010d848:	10c00215 	stw	r3,8(r2)
1010d84c:	21801b36 	bltu	r4,r6,1010d8bc <_realloc_r+0x2f8>
1010d850:	008004c4 	movi	r2,19
1010d854:	1180352e 	bgeu	r2,r6,1010d92c <_realloc_r+0x368>
1010d858:	a8800017 	ldw	r2,0(r21)
1010d85c:	b0800215 	stw	r2,8(r22)
1010d860:	a8800117 	ldw	r2,4(r21)
1010d864:	b0800315 	stw	r2,12(r22)
1010d868:	008006c4 	movi	r2,27
1010d86c:	11807f36 	bltu	r2,r6,1010da6c <_realloc_r+0x4a8>
1010d870:	b0800404 	addi	r2,r22,16
1010d874:	ad400204 	addi	r21,r21,8
1010d878:	00002d06 	br	1010d930 <_realloc_r+0x36c>
1010d87c:	adbffe17 	ldw	r22,-8(r21)
1010d880:	00bfff04 	movi	r2,-4
1010d884:	9dadc83a 	sub	r22,r19,r22
1010d888:	b1000117 	ldw	r4,4(r22)
1010d88c:	2084703a 	and	r2,r4,r2
1010d890:	b03f7726 	beq	r22,zero,1010d670 <_gp+0xfffebe9c>
1010d894:	80af883a 	add	r23,r16,r2
1010d898:	b8ff7516 	blt	r23,r3,1010d670 <_gp+0xfffebe9c>
1010d89c:	b0800317 	ldw	r2,12(r22)
1010d8a0:	b0c00217 	ldw	r3,8(r22)
1010d8a4:	81bfff04 	addi	r6,r16,-4
1010d8a8:	01000904 	movi	r4,36
1010d8ac:	18800315 	stw	r2,12(r3)
1010d8b0:	10c00215 	stw	r3,8(r2)
1010d8b4:	b4800204 	addi	r18,r22,8
1010d8b8:	21bfe52e 	bgeu	r4,r6,1010d850 <_gp+0xfffec07c>
1010d8bc:	a80b883a 	mov	r5,r21
1010d8c0:	9009883a 	mov	r4,r18
1010d8c4:	010c2a40 	call	1010c2a4 <memmove>
1010d8c8:	b821883a 	mov	r16,r23
1010d8cc:	b027883a 	mov	r19,r22
1010d8d0:	003f8a06 	br	1010d6fc <_gp+0xfffebf28>
1010d8d4:	300b883a 	mov	r5,r6
1010d8d8:	dfc00917 	ldw	ra,36(sp)
1010d8dc:	df000817 	ldw	fp,32(sp)
1010d8e0:	ddc00717 	ldw	r23,28(sp)
1010d8e4:	dd800617 	ldw	r22,24(sp)
1010d8e8:	dd400517 	ldw	r21,20(sp)
1010d8ec:	dd000417 	ldw	r20,16(sp)
1010d8f0:	dcc00317 	ldw	r19,12(sp)
1010d8f4:	dc800217 	ldw	r18,8(sp)
1010d8f8:	dc400117 	ldw	r17,4(sp)
1010d8fc:	dc000017 	ldw	r16,0(sp)
1010d900:	dec00a04 	addi	sp,sp,40
1010d904:	01049201 	jmpi	10104920 <_malloc_r>
1010d908:	a8c00017 	ldw	r3,0(r21)
1010d90c:	90c00015 	stw	r3,0(r18)
1010d910:	a8c00117 	ldw	r3,4(r21)
1010d914:	90c00115 	stw	r3,4(r18)
1010d918:	00c006c4 	movi	r3,27
1010d91c:	19804536 	bltu	r3,r6,1010da34 <_realloc_r+0x470>
1010d920:	90800204 	addi	r2,r18,8
1010d924:	a8c00204 	addi	r3,r21,8
1010d928:	003f6306 	br	1010d6b8 <_gp+0xfffebee4>
1010d92c:	9005883a 	mov	r2,r18
1010d930:	a8c00017 	ldw	r3,0(r21)
1010d934:	b821883a 	mov	r16,r23
1010d938:	b027883a 	mov	r19,r22
1010d93c:	10c00015 	stw	r3,0(r2)
1010d940:	a8c00117 	ldw	r3,4(r21)
1010d944:	10c00115 	stw	r3,4(r2)
1010d948:	a8c00217 	ldw	r3,8(r21)
1010d94c:	10c00215 	stw	r3,8(r2)
1010d950:	003f6a06 	br	1010d6fc <_gp+0xfffebf28>
1010d954:	9c67883a 	add	r19,r19,r17
1010d958:	4445c83a 	sub	r2,r8,r17
1010d95c:	e4c00215 	stw	r19,8(fp)
1010d960:	10800054 	ori	r2,r2,1
1010d964:	98800115 	stw	r2,4(r19)
1010d968:	a8bfff17 	ldw	r2,-4(r21)
1010d96c:	a009883a 	mov	r4,r20
1010d970:	1080004c 	andi	r2,r2,1
1010d974:	1462b03a 	or	r17,r2,r17
1010d978:	ac7fff15 	stw	r17,-4(r21)
1010d97c:	0114aa80 	call	10114aa8 <__malloc_unlock>
1010d980:	a805883a 	mov	r2,r21
1010d984:	003f6b06 	br	1010d734 <_gp+0xfffebf60>
1010d988:	a80b883a 	mov	r5,r21
1010d98c:	9009883a 	mov	r4,r18
1010d990:	010c2a40 	call	1010c2a4 <memmove>
1010d994:	003f4e06 	br	1010d6d0 <_gp+0xfffebefc>
1010d998:	89000404 	addi	r4,r17,16
1010d99c:	b93fbc16 	blt	r23,r4,1010d890 <_gp+0xfffec0bc>
1010d9a0:	b0800317 	ldw	r2,12(r22)
1010d9a4:	b0c00217 	ldw	r3,8(r22)
1010d9a8:	81bfff04 	addi	r6,r16,-4
1010d9ac:	01000904 	movi	r4,36
1010d9b0:	18800315 	stw	r2,12(r3)
1010d9b4:	10c00215 	stw	r3,8(r2)
1010d9b8:	b4800204 	addi	r18,r22,8
1010d9bc:	21804336 	bltu	r4,r6,1010dacc <_realloc_r+0x508>
1010d9c0:	008004c4 	movi	r2,19
1010d9c4:	11803f2e 	bgeu	r2,r6,1010dac4 <_realloc_r+0x500>
1010d9c8:	a8800017 	ldw	r2,0(r21)
1010d9cc:	b0800215 	stw	r2,8(r22)
1010d9d0:	a8800117 	ldw	r2,4(r21)
1010d9d4:	b0800315 	stw	r2,12(r22)
1010d9d8:	008006c4 	movi	r2,27
1010d9dc:	11803f36 	bltu	r2,r6,1010dadc <_realloc_r+0x518>
1010d9e0:	b0800404 	addi	r2,r22,16
1010d9e4:	ad400204 	addi	r21,r21,8
1010d9e8:	a8c00017 	ldw	r3,0(r21)
1010d9ec:	10c00015 	stw	r3,0(r2)
1010d9f0:	a8c00117 	ldw	r3,4(r21)
1010d9f4:	10c00115 	stw	r3,4(r2)
1010d9f8:	a8c00217 	ldw	r3,8(r21)
1010d9fc:	10c00215 	stw	r3,8(r2)
1010da00:	b447883a 	add	r3,r22,r17
1010da04:	bc45c83a 	sub	r2,r23,r17
1010da08:	e0c00215 	stw	r3,8(fp)
1010da0c:	10800054 	ori	r2,r2,1
1010da10:	18800115 	stw	r2,4(r3)
1010da14:	b0800117 	ldw	r2,4(r22)
1010da18:	a009883a 	mov	r4,r20
1010da1c:	1080004c 	andi	r2,r2,1
1010da20:	1462b03a 	or	r17,r2,r17
1010da24:	b4400115 	stw	r17,4(r22)
1010da28:	0114aa80 	call	10114aa8 <__malloc_unlock>
1010da2c:	9005883a 	mov	r2,r18
1010da30:	003f4006 	br	1010d734 <_gp+0xfffebf60>
1010da34:	a8c00217 	ldw	r3,8(r21)
1010da38:	90c00215 	stw	r3,8(r18)
1010da3c:	a8c00317 	ldw	r3,12(r21)
1010da40:	90c00315 	stw	r3,12(r18)
1010da44:	30801126 	beq	r6,r2,1010da8c <_realloc_r+0x4c8>
1010da48:	90800404 	addi	r2,r18,16
1010da4c:	a8c00404 	addi	r3,r21,16
1010da50:	003f1906 	br	1010d6b8 <_gp+0xfffebee4>
1010da54:	90ffff17 	ldw	r3,-4(r18)
1010da58:	00bfff04 	movi	r2,-4
1010da5c:	a825883a 	mov	r18,r21
1010da60:	1884703a 	and	r2,r3,r2
1010da64:	80a1883a 	add	r16,r16,r2
1010da68:	003f2406 	br	1010d6fc <_gp+0xfffebf28>
1010da6c:	a8800217 	ldw	r2,8(r21)
1010da70:	b0800415 	stw	r2,16(r22)
1010da74:	a8800317 	ldw	r2,12(r21)
1010da78:	b0800515 	stw	r2,20(r22)
1010da7c:	31000a26 	beq	r6,r4,1010daa8 <_realloc_r+0x4e4>
1010da80:	b0800604 	addi	r2,r22,24
1010da84:	ad400404 	addi	r21,r21,16
1010da88:	003fa906 	br	1010d930 <_gp+0xfffec15c>
1010da8c:	a9000417 	ldw	r4,16(r21)
1010da90:	90800604 	addi	r2,r18,24
1010da94:	a8c00604 	addi	r3,r21,24
1010da98:	91000415 	stw	r4,16(r18)
1010da9c:	a9000517 	ldw	r4,20(r21)
1010daa0:	91000515 	stw	r4,20(r18)
1010daa4:	003f0406 	br	1010d6b8 <_gp+0xfffebee4>
1010daa8:	a8c00417 	ldw	r3,16(r21)
1010daac:	ad400604 	addi	r21,r21,24
1010dab0:	b0800804 	addi	r2,r22,32
1010dab4:	b0c00615 	stw	r3,24(r22)
1010dab8:	a8ffff17 	ldw	r3,-4(r21)
1010dabc:	b0c00715 	stw	r3,28(r22)
1010dac0:	003f9b06 	br	1010d930 <_gp+0xfffec15c>
1010dac4:	9005883a 	mov	r2,r18
1010dac8:	003fc706 	br	1010d9e8 <_gp+0xfffec214>
1010dacc:	a80b883a 	mov	r5,r21
1010dad0:	9009883a 	mov	r4,r18
1010dad4:	010c2a40 	call	1010c2a4 <memmove>
1010dad8:	003fc906 	br	1010da00 <_gp+0xfffec22c>
1010dadc:	a8800217 	ldw	r2,8(r21)
1010dae0:	b0800415 	stw	r2,16(r22)
1010dae4:	a8800317 	ldw	r2,12(r21)
1010dae8:	b0800515 	stw	r2,20(r22)
1010daec:	31000726 	beq	r6,r4,1010db0c <_realloc_r+0x548>
1010daf0:	b0800604 	addi	r2,r22,24
1010daf4:	ad400404 	addi	r21,r21,16
1010daf8:	003fbb06 	br	1010d9e8 <_gp+0xfffec214>
1010dafc:	a009883a 	mov	r4,r20
1010db00:	0114aa80 	call	10114aa8 <__malloc_unlock>
1010db04:	0005883a 	mov	r2,zero
1010db08:	003f0a06 	br	1010d734 <_gp+0xfffebf60>
1010db0c:	a8c00417 	ldw	r3,16(r21)
1010db10:	ad400604 	addi	r21,r21,24
1010db14:	b0800804 	addi	r2,r22,32
1010db18:	b0c00615 	stw	r3,24(r22)
1010db1c:	a8ffff17 	ldw	r3,-4(r21)
1010db20:	b0c00715 	stw	r3,28(r22)
1010db24:	003fb006 	br	1010d9e8 <_gp+0xfffec214>

1010db28 <__fpclassifyd>:
1010db28:	00a00034 	movhi	r2,32768
1010db2c:	10bfffc4 	addi	r2,r2,-1
1010db30:	2884703a 	and	r2,r5,r2
1010db34:	10000726 	beq	r2,zero,1010db54 <__fpclassifyd+0x2c>
1010db38:	00fffc34 	movhi	r3,65520
1010db3c:	019ff834 	movhi	r6,32736
1010db40:	28c7883a 	add	r3,r5,r3
1010db44:	31bfffc4 	addi	r6,r6,-1
1010db48:	30c00536 	bltu	r6,r3,1010db60 <__fpclassifyd+0x38>
1010db4c:	00800104 	movi	r2,4
1010db50:	f800283a 	ret
1010db54:	2000021e 	bne	r4,zero,1010db60 <__fpclassifyd+0x38>
1010db58:	00800084 	movi	r2,2
1010db5c:	f800283a 	ret
1010db60:	00dffc34 	movhi	r3,32752
1010db64:	019ff834 	movhi	r6,32736
1010db68:	28cb883a 	add	r5,r5,r3
1010db6c:	31bfffc4 	addi	r6,r6,-1
1010db70:	317ff62e 	bgeu	r6,r5,1010db4c <_gp+0xfffec378>
1010db74:	01400434 	movhi	r5,16
1010db78:	297fffc4 	addi	r5,r5,-1
1010db7c:	28800236 	bltu	r5,r2,1010db88 <__fpclassifyd+0x60>
1010db80:	008000c4 	movi	r2,3
1010db84:	f800283a 	ret
1010db88:	10c00226 	beq	r2,r3,1010db94 <__fpclassifyd+0x6c>
1010db8c:	0005883a 	mov	r2,zero
1010db90:	f800283a 	ret
1010db94:	2005003a 	cmpeq	r2,r4,zero
1010db98:	f800283a 	ret

1010db9c <_init_signal_r>:
1010db9c:	2080b717 	ldw	r2,732(r4)
1010dba0:	10000226 	beq	r2,zero,1010dbac <_init_signal_r+0x10>
1010dba4:	0005883a 	mov	r2,zero
1010dba8:	f800283a 	ret
1010dbac:	defffe04 	addi	sp,sp,-8
1010dbb0:	01402004 	movi	r5,128
1010dbb4:	dc000015 	stw	r16,0(sp)
1010dbb8:	dfc00115 	stw	ra,4(sp)
1010dbbc:	2021883a 	mov	r16,r4
1010dbc0:	01049200 	call	10104920 <_malloc_r>
1010dbc4:	8080b715 	stw	r2,732(r16)
1010dbc8:	10000d26 	beq	r2,zero,1010dc00 <_init_signal_r+0x64>
1010dbcc:	0007883a 	mov	r3,zero
1010dbd0:	01002004 	movi	r4,128
1010dbd4:	00000106 	br	1010dbdc <_init_signal_r+0x40>
1010dbd8:	8080b717 	ldw	r2,732(r16)
1010dbdc:	10c5883a 	add	r2,r2,r3
1010dbe0:	10000015 	stw	zero,0(r2)
1010dbe4:	18c00104 	addi	r3,r3,4
1010dbe8:	193ffb1e 	bne	r3,r4,1010dbd8 <_gp+0xfffec404>
1010dbec:	0005883a 	mov	r2,zero
1010dbf0:	dfc00117 	ldw	ra,4(sp)
1010dbf4:	dc000017 	ldw	r16,0(sp)
1010dbf8:	dec00204 	addi	sp,sp,8
1010dbfc:	f800283a 	ret
1010dc00:	00bfffc4 	movi	r2,-1
1010dc04:	003ffa06 	br	1010dbf0 <_gp+0xfffec41c>

1010dc08 <_signal_r>:
1010dc08:	00c007c4 	movi	r3,31
1010dc0c:	19401536 	bltu	r3,r5,1010dc64 <_signal_r+0x5c>
1010dc10:	2080b717 	ldw	r2,732(r4)
1010dc14:	defffc04 	addi	sp,sp,-16
1010dc18:	dc800215 	stw	r18,8(sp)
1010dc1c:	dc400115 	stw	r17,4(sp)
1010dc20:	dc000015 	stw	r16,0(sp)
1010dc24:	dfc00315 	stw	ra,12(sp)
1010dc28:	3023883a 	mov	r17,r6
1010dc2c:	2021883a 	mov	r16,r4
1010dc30:	2825883a 	mov	r18,r5
1010dc34:	10000f26 	beq	r2,zero,1010dc74 <_signal_r+0x6c>
1010dc38:	948b883a 	add	r5,r18,r18
1010dc3c:	294b883a 	add	r5,r5,r5
1010dc40:	114b883a 	add	r5,r2,r5
1010dc44:	28800017 	ldw	r2,0(r5)
1010dc48:	2c400015 	stw	r17,0(r5)
1010dc4c:	dfc00317 	ldw	ra,12(sp)
1010dc50:	dc800217 	ldw	r18,8(sp)
1010dc54:	dc400117 	ldw	r17,4(sp)
1010dc58:	dc000017 	ldw	r16,0(sp)
1010dc5c:	dec00404 	addi	sp,sp,16
1010dc60:	f800283a 	ret
1010dc64:	00c00584 	movi	r3,22
1010dc68:	20c00015 	stw	r3,0(r4)
1010dc6c:	00bfffc4 	movi	r2,-1
1010dc70:	f800283a 	ret
1010dc74:	010db9c0 	call	1010db9c <_init_signal_r>
1010dc78:	1000021e 	bne	r2,zero,1010dc84 <_signal_r+0x7c>
1010dc7c:	8080b717 	ldw	r2,732(r16)
1010dc80:	003fed06 	br	1010dc38 <_gp+0xfffec464>
1010dc84:	00bfffc4 	movi	r2,-1
1010dc88:	003ff006 	br	1010dc4c <_gp+0xfffec478>

1010dc8c <_raise_r>:
1010dc8c:	008007c4 	movi	r2,31
1010dc90:	11402936 	bltu	r2,r5,1010dd38 <_raise_r+0xac>
1010dc94:	20c0b717 	ldw	r3,732(r4)
1010dc98:	defffd04 	addi	sp,sp,-12
1010dc9c:	dc400115 	stw	r17,4(sp)
1010dca0:	dc000015 	stw	r16,0(sp)
1010dca4:	dfc00215 	stw	ra,8(sp)
1010dca8:	2021883a 	mov	r16,r4
1010dcac:	2823883a 	mov	r17,r5
1010dcb0:	18001726 	beq	r3,zero,1010dd10 <_raise_r+0x84>
1010dcb4:	2945883a 	add	r2,r5,r5
1010dcb8:	1085883a 	add	r2,r2,r2
1010dcbc:	1887883a 	add	r3,r3,r2
1010dcc0:	19800017 	ldw	r6,0(r3)
1010dcc4:	30001226 	beq	r6,zero,1010dd10 <_raise_r+0x84>
1010dcc8:	00800044 	movi	r2,1
1010dccc:	30800e26 	beq	r6,r2,1010dd08 <_raise_r+0x7c>
1010dcd0:	013fffc4 	movi	r4,-1
1010dcd4:	31000926 	beq	r6,r4,1010dcfc <_raise_r+0x70>
1010dcd8:	18000015 	stw	zero,0(r3)
1010dcdc:	2809883a 	mov	r4,r5
1010dce0:	303ee83a 	callr	r6
1010dce4:	0005883a 	mov	r2,zero
1010dce8:	dfc00217 	ldw	ra,8(sp)
1010dcec:	dc400117 	ldw	r17,4(sp)
1010dcf0:	dc000017 	ldw	r16,0(sp)
1010dcf4:	dec00304 	addi	sp,sp,12
1010dcf8:	f800283a 	ret
1010dcfc:	00c00584 	movi	r3,22
1010dd00:	80c00015 	stw	r3,0(r16)
1010dd04:	003ff806 	br	1010dce8 <_gp+0xfffec514>
1010dd08:	0005883a 	mov	r2,zero
1010dd0c:	003ff606 	br	1010dce8 <_gp+0xfffec514>
1010dd10:	8009883a 	mov	r4,r16
1010dd14:	010de9c0 	call	1010de9c <_getpid_r>
1010dd18:	880d883a 	mov	r6,r17
1010dd1c:	100b883a 	mov	r5,r2
1010dd20:	8009883a 	mov	r4,r16
1010dd24:	dfc00217 	ldw	ra,8(sp)
1010dd28:	dc400117 	ldw	r17,4(sp)
1010dd2c:	dc000017 	ldw	r16,0(sp)
1010dd30:	dec00304 	addi	sp,sp,12
1010dd34:	010de401 	jmpi	1010de40 <_kill_r>
1010dd38:	00800584 	movi	r2,22
1010dd3c:	20800015 	stw	r2,0(r4)
1010dd40:	00bfffc4 	movi	r2,-1
1010dd44:	f800283a 	ret

1010dd48 <__sigtramp_r>:
1010dd48:	008007c4 	movi	r2,31
1010dd4c:	11402436 	bltu	r2,r5,1010dde0 <__sigtramp_r+0x98>
1010dd50:	20c0b717 	ldw	r3,732(r4)
1010dd54:	defffd04 	addi	sp,sp,-12
1010dd58:	dc400115 	stw	r17,4(sp)
1010dd5c:	dc000015 	stw	r16,0(sp)
1010dd60:	dfc00215 	stw	ra,8(sp)
1010dd64:	2021883a 	mov	r16,r4
1010dd68:	2823883a 	mov	r17,r5
1010dd6c:	18001826 	beq	r3,zero,1010ddd0 <__sigtramp_r+0x88>
1010dd70:	8c45883a 	add	r2,r17,r17
1010dd74:	1085883a 	add	r2,r2,r2
1010dd78:	1885883a 	add	r2,r3,r2
1010dd7c:	10c00017 	ldw	r3,0(r2)
1010dd80:	18001126 	beq	r3,zero,1010ddc8 <__sigtramp_r+0x80>
1010dd84:	013fffc4 	movi	r4,-1
1010dd88:	19000d26 	beq	r3,r4,1010ddc0 <__sigtramp_r+0x78>
1010dd8c:	01000044 	movi	r4,1
1010dd90:	19000926 	beq	r3,r4,1010ddb8 <__sigtramp_r+0x70>
1010dd94:	10000015 	stw	zero,0(r2)
1010dd98:	8809883a 	mov	r4,r17
1010dd9c:	183ee83a 	callr	r3
1010dda0:	0005883a 	mov	r2,zero
1010dda4:	dfc00217 	ldw	ra,8(sp)
1010dda8:	dc400117 	ldw	r17,4(sp)
1010ddac:	dc000017 	ldw	r16,0(sp)
1010ddb0:	dec00304 	addi	sp,sp,12
1010ddb4:	f800283a 	ret
1010ddb8:	008000c4 	movi	r2,3
1010ddbc:	003ff906 	br	1010dda4 <_gp+0xfffec5d0>
1010ddc0:	00800084 	movi	r2,2
1010ddc4:	003ff706 	br	1010dda4 <_gp+0xfffec5d0>
1010ddc8:	00800044 	movi	r2,1
1010ddcc:	003ff506 	br	1010dda4 <_gp+0xfffec5d0>
1010ddd0:	010db9c0 	call	1010db9c <_init_signal_r>
1010ddd4:	1000041e 	bne	r2,zero,1010dde8 <__sigtramp_r+0xa0>
1010ddd8:	80c0b717 	ldw	r3,732(r16)
1010dddc:	003fe406 	br	1010dd70 <_gp+0xfffec59c>
1010dde0:	00bfffc4 	movi	r2,-1
1010dde4:	f800283a 	ret
1010dde8:	00bfffc4 	movi	r2,-1
1010ddec:	003fed06 	br	1010dda4 <_gp+0xfffec5d0>

1010ddf0 <raise>:
1010ddf0:	008404b4 	movhi	r2,4114
1010ddf4:	10a5f604 	addi	r2,r2,-26664
1010ddf8:	200b883a 	mov	r5,r4
1010ddfc:	11000017 	ldw	r4,0(r2)
1010de00:	010dc8c1 	jmpi	1010dc8c <_raise_r>

1010de04 <signal>:
1010de04:	008404b4 	movhi	r2,4114
1010de08:	10a5f604 	addi	r2,r2,-26664
1010de0c:	280d883a 	mov	r6,r5
1010de10:	200b883a 	mov	r5,r4
1010de14:	11000017 	ldw	r4,0(r2)
1010de18:	010dc081 	jmpi	1010dc08 <_signal_r>

1010de1c <_init_signal>:
1010de1c:	008404b4 	movhi	r2,4114
1010de20:	10a5f604 	addi	r2,r2,-26664
1010de24:	11000017 	ldw	r4,0(r2)
1010de28:	010db9c1 	jmpi	1010db9c <_init_signal_r>

1010de2c <__sigtramp>:
1010de2c:	008404b4 	movhi	r2,4114
1010de30:	10a5f604 	addi	r2,r2,-26664
1010de34:	200b883a 	mov	r5,r4
1010de38:	11000017 	ldw	r4,0(r2)
1010de3c:	010dd481 	jmpi	1010dd48 <__sigtramp_r>

1010de40 <_kill_r>:
1010de40:	defffd04 	addi	sp,sp,-12
1010de44:	2805883a 	mov	r2,r5
1010de48:	dc000015 	stw	r16,0(sp)
1010de4c:	040404b4 	movhi	r16,4114
1010de50:	dc400115 	stw	r17,4(sp)
1010de54:	842cef04 	addi	r16,r16,-19524
1010de58:	2023883a 	mov	r17,r4
1010de5c:	300b883a 	mov	r5,r6
1010de60:	1009883a 	mov	r4,r2
1010de64:	dfc00215 	stw	ra,8(sp)
1010de68:	80000015 	stw	zero,0(r16)
1010de6c:	01146dc0 	call	101146dc <kill>
1010de70:	00ffffc4 	movi	r3,-1
1010de74:	10c00526 	beq	r2,r3,1010de8c <_kill_r+0x4c>
1010de78:	dfc00217 	ldw	ra,8(sp)
1010de7c:	dc400117 	ldw	r17,4(sp)
1010de80:	dc000017 	ldw	r16,0(sp)
1010de84:	dec00304 	addi	sp,sp,12
1010de88:	f800283a 	ret
1010de8c:	80c00017 	ldw	r3,0(r16)
1010de90:	183ff926 	beq	r3,zero,1010de78 <_gp+0xfffec6a4>
1010de94:	88c00015 	stw	r3,0(r17)
1010de98:	003ff706 	br	1010de78 <_gp+0xfffec6a4>

1010de9c <_getpid_r>:
1010de9c:	01143ac1 	jmpi	101143ac <getpid>

1010dea0 <strcmp>:
1010dea0:	2144b03a 	or	r2,r4,r5
1010dea4:	108000cc 	andi	r2,r2,3
1010dea8:	1000171e 	bne	r2,zero,1010df08 <strcmp+0x68>
1010deac:	20800017 	ldw	r2,0(r4)
1010deb0:	28c00017 	ldw	r3,0(r5)
1010deb4:	10c0141e 	bne	r2,r3,1010df08 <strcmp+0x68>
1010deb8:	027fbff4 	movhi	r9,65279
1010debc:	4a7fbfc4 	addi	r9,r9,-257
1010dec0:	0086303a 	nor	r3,zero,r2
1010dec4:	02202074 	movhi	r8,32897
1010dec8:	1245883a 	add	r2,r2,r9
1010decc:	42202004 	addi	r8,r8,-32640
1010ded0:	10c4703a 	and	r2,r2,r3
1010ded4:	1204703a 	and	r2,r2,r8
1010ded8:	10000226 	beq	r2,zero,1010dee4 <strcmp+0x44>
1010dedc:	00002306 	br	1010df6c <strcmp+0xcc>
1010dee0:	1000221e 	bne	r2,zero,1010df6c <strcmp+0xcc>
1010dee4:	21000104 	addi	r4,r4,4
1010dee8:	20c00017 	ldw	r3,0(r4)
1010deec:	29400104 	addi	r5,r5,4
1010def0:	29800017 	ldw	r6,0(r5)
1010def4:	1a4f883a 	add	r7,r3,r9
1010def8:	00c4303a 	nor	r2,zero,r3
1010defc:	3884703a 	and	r2,r7,r2
1010df00:	1204703a 	and	r2,r2,r8
1010df04:	19bff626 	beq	r3,r6,1010dee0 <_gp+0xfffec70c>
1010df08:	20800003 	ldbu	r2,0(r4)
1010df0c:	10c03fcc 	andi	r3,r2,255
1010df10:	18c0201c 	xori	r3,r3,128
1010df14:	18ffe004 	addi	r3,r3,-128
1010df18:	18000c26 	beq	r3,zero,1010df4c <strcmp+0xac>
1010df1c:	29800007 	ldb	r6,0(r5)
1010df20:	19800326 	beq	r3,r6,1010df30 <strcmp+0x90>
1010df24:	00001306 	br	1010df74 <strcmp+0xd4>
1010df28:	29800007 	ldb	r6,0(r5)
1010df2c:	11800b1e 	bne	r2,r6,1010df5c <strcmp+0xbc>
1010df30:	21000044 	addi	r4,r4,1
1010df34:	20c00003 	ldbu	r3,0(r4)
1010df38:	29400044 	addi	r5,r5,1
1010df3c:	18803fcc 	andi	r2,r3,255
1010df40:	1080201c 	xori	r2,r2,128
1010df44:	10bfe004 	addi	r2,r2,-128
1010df48:	103ff71e 	bne	r2,zero,1010df28 <_gp+0xfffec754>
1010df4c:	0007883a 	mov	r3,zero
1010df50:	28800003 	ldbu	r2,0(r5)
1010df54:	1885c83a 	sub	r2,r3,r2
1010df58:	f800283a 	ret
1010df5c:	28800003 	ldbu	r2,0(r5)
1010df60:	18c03fcc 	andi	r3,r3,255
1010df64:	1885c83a 	sub	r2,r3,r2
1010df68:	f800283a 	ret
1010df6c:	0005883a 	mov	r2,zero
1010df70:	f800283a 	ret
1010df74:	10c03fcc 	andi	r3,r2,255
1010df78:	003ff506 	br	1010df50 <_gp+0xfffec77c>

1010df7c <__ssprint_r>:
1010df7c:	30800217 	ldw	r2,8(r6)
1010df80:	defff604 	addi	sp,sp,-40
1010df84:	dc800215 	stw	r18,8(sp)
1010df88:	dfc00915 	stw	ra,36(sp)
1010df8c:	df000815 	stw	fp,32(sp)
1010df90:	ddc00715 	stw	r23,28(sp)
1010df94:	dd800615 	stw	r22,24(sp)
1010df98:	dd400515 	stw	r21,20(sp)
1010df9c:	dd000415 	stw	r20,16(sp)
1010dfa0:	dcc00315 	stw	r19,12(sp)
1010dfa4:	dc400115 	stw	r17,4(sp)
1010dfa8:	dc000015 	stw	r16,0(sp)
1010dfac:	3025883a 	mov	r18,r6
1010dfb0:	10005826 	beq	r2,zero,1010e114 <__ssprint_r+0x198>
1010dfb4:	2027883a 	mov	r19,r4
1010dfb8:	35c00017 	ldw	r23,0(r6)
1010dfbc:	29000017 	ldw	r4,0(r5)
1010dfc0:	28800217 	ldw	r2,8(r5)
1010dfc4:	2823883a 	mov	r17,r5
1010dfc8:	0039883a 	mov	fp,zero
1010dfcc:	0021883a 	mov	r16,zero
1010dfd0:	80003926 	beq	r16,zero,1010e0b8 <__ssprint_r+0x13c>
1010dfd4:	102b883a 	mov	r21,r2
1010dfd8:	102d883a 	mov	r22,r2
1010dfdc:	80803a36 	bltu	r16,r2,1010e0c8 <__ssprint_r+0x14c>
1010dfe0:	88c0030b 	ldhu	r3,12(r17)
1010dfe4:	1881200c 	andi	r2,r3,1152
1010dfe8:	10002626 	beq	r2,zero,1010e084 <__ssprint_r+0x108>
1010dfec:	88800517 	ldw	r2,20(r17)
1010dff0:	89400417 	ldw	r5,16(r17)
1010dff4:	81800044 	addi	r6,r16,1
1010dff8:	108f883a 	add	r7,r2,r2
1010dffc:	3885883a 	add	r2,r7,r2
1010e000:	100ed7fa 	srli	r7,r2,31
1010e004:	216dc83a 	sub	r22,r4,r5
1010e008:	3589883a 	add	r4,r6,r22
1010e00c:	3885883a 	add	r2,r7,r2
1010e010:	102bd07a 	srai	r21,r2,1
1010e014:	a80d883a 	mov	r6,r21
1010e018:	a900022e 	bgeu	r21,r4,1010e024 <__ssprint_r+0xa8>
1010e01c:	202b883a 	mov	r21,r4
1010e020:	200d883a 	mov	r6,r4
1010e024:	18c1000c 	andi	r3,r3,1024
1010e028:	18002a26 	beq	r3,zero,1010e0d4 <__ssprint_r+0x158>
1010e02c:	300b883a 	mov	r5,r6
1010e030:	9809883a 	mov	r4,r19
1010e034:	01049200 	call	10104920 <_malloc_r>
1010e038:	1029883a 	mov	r20,r2
1010e03c:	10002c26 	beq	r2,zero,1010e0f0 <__ssprint_r+0x174>
1010e040:	89400417 	ldw	r5,16(r17)
1010e044:	b00d883a 	mov	r6,r22
1010e048:	1009883a 	mov	r4,r2
1010e04c:	010c15c0 	call	1010c15c <memcpy>
1010e050:	8880030b 	ldhu	r2,12(r17)
1010e054:	00fedfc4 	movi	r3,-1153
1010e058:	10c4703a 	and	r2,r2,r3
1010e05c:	10802014 	ori	r2,r2,128
1010e060:	8880030d 	sth	r2,12(r17)
1010e064:	a589883a 	add	r4,r20,r22
1010e068:	adadc83a 	sub	r22,r21,r22
1010e06c:	8d400515 	stw	r21,20(r17)
1010e070:	8d800215 	stw	r22,8(r17)
1010e074:	8d000415 	stw	r20,16(r17)
1010e078:	89000015 	stw	r4,0(r17)
1010e07c:	802b883a 	mov	r21,r16
1010e080:	802d883a 	mov	r22,r16
1010e084:	b00d883a 	mov	r6,r22
1010e088:	e00b883a 	mov	r5,fp
1010e08c:	010c2a40 	call	1010c2a4 <memmove>
1010e090:	88800217 	ldw	r2,8(r17)
1010e094:	89000017 	ldw	r4,0(r17)
1010e098:	90c00217 	ldw	r3,8(r18)
1010e09c:	1545c83a 	sub	r2,r2,r21
1010e0a0:	2589883a 	add	r4,r4,r22
1010e0a4:	88800215 	stw	r2,8(r17)
1010e0a8:	89000015 	stw	r4,0(r17)
1010e0ac:	1c21c83a 	sub	r16,r3,r16
1010e0b0:	94000215 	stw	r16,8(r18)
1010e0b4:	80001726 	beq	r16,zero,1010e114 <__ssprint_r+0x198>
1010e0b8:	bf000017 	ldw	fp,0(r23)
1010e0bc:	bc000117 	ldw	r16,4(r23)
1010e0c0:	bdc00204 	addi	r23,r23,8
1010e0c4:	003fc206 	br	1010dfd0 <_gp+0xfffec7fc>
1010e0c8:	802b883a 	mov	r21,r16
1010e0cc:	802d883a 	mov	r22,r16
1010e0d0:	003fec06 	br	1010e084 <_gp+0xfffec8b0>
1010e0d4:	9809883a 	mov	r4,r19
1010e0d8:	010d5c40 	call	1010d5c4 <_realloc_r>
1010e0dc:	1029883a 	mov	r20,r2
1010e0e0:	103fe01e 	bne	r2,zero,1010e064 <_gp+0xfffec890>
1010e0e4:	89400417 	ldw	r5,16(r17)
1010e0e8:	9809883a 	mov	r4,r19
1010e0ec:	0103cf00 	call	10103cf0 <_free_r>
1010e0f0:	88c0030b 	ldhu	r3,12(r17)
1010e0f4:	00800304 	movi	r2,12
1010e0f8:	98800015 	stw	r2,0(r19)
1010e0fc:	18c01014 	ori	r3,r3,64
1010e100:	88c0030d 	sth	r3,12(r17)
1010e104:	00bfffc4 	movi	r2,-1
1010e108:	90000215 	stw	zero,8(r18)
1010e10c:	90000115 	stw	zero,4(r18)
1010e110:	00000206 	br	1010e11c <__ssprint_r+0x1a0>
1010e114:	90000115 	stw	zero,4(r18)
1010e118:	0005883a 	mov	r2,zero
1010e11c:	dfc00917 	ldw	ra,36(sp)
1010e120:	df000817 	ldw	fp,32(sp)
1010e124:	ddc00717 	ldw	r23,28(sp)
1010e128:	dd800617 	ldw	r22,24(sp)
1010e12c:	dd400517 	ldw	r21,20(sp)
1010e130:	dd000417 	ldw	r20,16(sp)
1010e134:	dcc00317 	ldw	r19,12(sp)
1010e138:	dc800217 	ldw	r18,8(sp)
1010e13c:	dc400117 	ldw	r17,4(sp)
1010e140:	dc000017 	ldw	r16,0(sp)
1010e144:	dec00a04 	addi	sp,sp,40
1010e148:	f800283a 	ret

1010e14c <___svfiprintf_internal_r>:
1010e14c:	2880030b 	ldhu	r2,12(r5)
1010e150:	deffc804 	addi	sp,sp,-224
1010e154:	dcc03115 	stw	r19,196(sp)
1010e158:	dfc03715 	stw	ra,220(sp)
1010e15c:	df003615 	stw	fp,216(sp)
1010e160:	ddc03515 	stw	r23,212(sp)
1010e164:	dd803415 	stw	r22,208(sp)
1010e168:	dd403315 	stw	r21,204(sp)
1010e16c:	dd003215 	stw	r20,200(sp)
1010e170:	dc803015 	stw	r18,192(sp)
1010e174:	dc402f15 	stw	r17,188(sp)
1010e178:	dc002e15 	stw	r16,184(sp)
1010e17c:	d9402715 	stw	r5,156(sp)
1010e180:	d9002a15 	stw	r4,168(sp)
1010e184:	1080200c 	andi	r2,r2,128
1010e188:	d9c02315 	stw	r7,140(sp)
1010e18c:	3027883a 	mov	r19,r6
1010e190:	10000226 	beq	r2,zero,1010e19c <___svfiprintf_internal_r+0x50>
1010e194:	28800417 	ldw	r2,16(r5)
1010e198:	10041d26 	beq	r2,zero,1010f210 <___svfiprintf_internal_r+0x10c4>
1010e19c:	dac01a04 	addi	r11,sp,104
1010e1a0:	dac01e15 	stw	r11,120(sp)
1010e1a4:	d8801e17 	ldw	r2,120(sp)
1010e1a8:	dac019c4 	addi	r11,sp,103
1010e1ac:	dd402a17 	ldw	r21,168(sp)
1010e1b0:	ddc02717 	ldw	r23,156(sp)
1010e1b4:	05840474 	movhi	r22,4113
1010e1b8:	05040474 	movhi	r20,4113
1010e1bc:	dac01f15 	stw	r11,124(sp)
1010e1c0:	12d7c83a 	sub	r11,r2,r11
1010e1c4:	b59ee404 	addi	r22,r22,31632
1010e1c8:	a51ee004 	addi	r20,r20,31616
1010e1cc:	dec01a15 	stw	sp,104(sp)
1010e1d0:	d8001c15 	stw	zero,112(sp)
1010e1d4:	d8001b15 	stw	zero,108(sp)
1010e1d8:	d811883a 	mov	r8,sp
1010e1dc:	d8002915 	stw	zero,164(sp)
1010e1e0:	d8002515 	stw	zero,148(sp)
1010e1e4:	dac02b15 	stw	r11,172(sp)
1010e1e8:	98800007 	ldb	r2,0(r19)
1010e1ec:	1002dd26 	beq	r2,zero,1010ed64 <___svfiprintf_internal_r+0xc18>
1010e1f0:	00c00944 	movi	r3,37
1010e1f4:	9823883a 	mov	r17,r19
1010e1f8:	10c0021e 	bne	r2,r3,1010e204 <___svfiprintf_internal_r+0xb8>
1010e1fc:	00001406 	br	1010e250 <___svfiprintf_internal_r+0x104>
1010e200:	10c00326 	beq	r2,r3,1010e210 <___svfiprintf_internal_r+0xc4>
1010e204:	8c400044 	addi	r17,r17,1
1010e208:	88800007 	ldb	r2,0(r17)
1010e20c:	103ffc1e 	bne	r2,zero,1010e200 <_gp+0xfffeca2c>
1010e210:	8ce1c83a 	sub	r16,r17,r19
1010e214:	80000e26 	beq	r16,zero,1010e250 <___svfiprintf_internal_r+0x104>
1010e218:	d8c01c17 	ldw	r3,112(sp)
1010e21c:	d8801b17 	ldw	r2,108(sp)
1010e220:	44c00015 	stw	r19,0(r8)
1010e224:	1c07883a 	add	r3,r3,r16
1010e228:	10800044 	addi	r2,r2,1
1010e22c:	d8c01c15 	stw	r3,112(sp)
1010e230:	44000115 	stw	r16,4(r8)
1010e234:	d8801b15 	stw	r2,108(sp)
1010e238:	00c001c4 	movi	r3,7
1010e23c:	18831e16 	blt	r3,r2,1010eeb8 <___svfiprintf_internal_r+0xd6c>
1010e240:	42000204 	addi	r8,r8,8
1010e244:	dac02517 	ldw	r11,148(sp)
1010e248:	5c17883a 	add	r11,r11,r16
1010e24c:	dac02515 	stw	r11,148(sp)
1010e250:	88800007 	ldb	r2,0(r17)
1010e254:	1002c526 	beq	r2,zero,1010ed6c <___svfiprintf_internal_r+0xc20>
1010e258:	88c00047 	ldb	r3,1(r17)
1010e25c:	8cc00044 	addi	r19,r17,1
1010e260:	d8001d85 	stb	zero,118(sp)
1010e264:	0009883a 	mov	r4,zero
1010e268:	000f883a 	mov	r7,zero
1010e26c:	043fffc4 	movi	r16,-1
1010e270:	d8002415 	stw	zero,144(sp)
1010e274:	0025883a 	mov	r18,zero
1010e278:	01401604 	movi	r5,88
1010e27c:	01800244 	movi	r6,9
1010e280:	02800a84 	movi	r10,42
1010e284:	02401b04 	movi	r9,108
1010e288:	9cc00044 	addi	r19,r19,1
1010e28c:	18bff804 	addi	r2,r3,-32
1010e290:	2881dd36 	bltu	r5,r2,1010ea08 <___svfiprintf_internal_r+0x8bc>
1010e294:	100490ba 	slli	r2,r2,2
1010e298:	02c40474 	movhi	r11,4113
1010e29c:	5af8ab04 	addi	r11,r11,-7508
1010e2a0:	12c5883a 	add	r2,r2,r11
1010e2a4:	10800017 	ldw	r2,0(r2)
1010e2a8:	1000683a 	jmp	r2
1010e2ac:	1010e4a8 	cmpgeui	zero,r2,17298
1010e2b0:	1010ea08 	cmpgei	zero,r2,17320
1010e2b4:	1010ea08 	cmpgei	zero,r2,17320
1010e2b8:	1010e49c 	xori	zero,r2,17298
1010e2bc:	1010ea08 	cmpgei	zero,r2,17320
1010e2c0:	1010ea08 	cmpgei	zero,r2,17320
1010e2c4:	1010ea08 	cmpgei	zero,r2,17320
1010e2c8:	1010ea08 	cmpgei	zero,r2,17320
1010e2cc:	1010ea08 	cmpgei	zero,r2,17320
1010e2d0:	1010ea08 	cmpgei	zero,r2,17320
1010e2d4:	1010e410 	cmplti	zero,r2,17296
1010e2d8:	1010e5ec 	andhi	zero,r2,17303
1010e2dc:	1010ea08 	cmpgei	zero,r2,17320
1010e2e0:	1010e43c 	xorhi	zero,r2,17296
1010e2e4:	1010ea3c 	xorhi	zero,r2,17320
1010e2e8:	1010ea08 	cmpgei	zero,r2,17320
1010e2ec:	1010ea30 	cmpltui	zero,r2,17320
1010e2f0:	1010e9d0 	cmplti	zero,r2,17319
1010e2f4:	1010e9d0 	cmplti	zero,r2,17319
1010e2f8:	1010e9d0 	cmplti	zero,r2,17319
1010e2fc:	1010e9d0 	cmplti	zero,r2,17319
1010e300:	1010e9d0 	cmplti	zero,r2,17319
1010e304:	1010e9d0 	cmplti	zero,r2,17319
1010e308:	1010e9d0 	cmplti	zero,r2,17319
1010e30c:	1010e9d0 	cmplti	zero,r2,17319
1010e310:	1010e9d0 	cmplti	zero,r2,17319
1010e314:	1010ea08 	cmpgei	zero,r2,17320
1010e318:	1010ea08 	cmpgei	zero,r2,17320
1010e31c:	1010ea08 	cmpgei	zero,r2,17320
1010e320:	1010ea08 	cmpgei	zero,r2,17320
1010e324:	1010ea08 	cmpgei	zero,r2,17320
1010e328:	1010ea08 	cmpgei	zero,r2,17320
1010e32c:	1010ea08 	cmpgei	zero,r2,17320
1010e330:	1010ea08 	cmpgei	zero,r2,17320
1010e334:	1010ea08 	cmpgei	zero,r2,17320
1010e338:	1010ea08 	cmpgei	zero,r2,17320
1010e33c:	1010e96c 	andhi	zero,r2,17317
1010e340:	1010ea08 	cmpgei	zero,r2,17320
1010e344:	1010ea08 	cmpgei	zero,r2,17320
1010e348:	1010ea08 	cmpgei	zero,r2,17320
1010e34c:	1010ea08 	cmpgei	zero,r2,17320
1010e350:	1010ea08 	cmpgei	zero,r2,17320
1010e354:	1010ea08 	cmpgei	zero,r2,17320
1010e358:	1010ea08 	cmpgei	zero,r2,17320
1010e35c:	1010ea08 	cmpgei	zero,r2,17320
1010e360:	1010ea08 	cmpgei	zero,r2,17320
1010e364:	1010ea08 	cmpgei	zero,r2,17320
1010e368:	1010eae4 	muli	zero,r2,17323
1010e36c:	1010ea08 	cmpgei	zero,r2,17320
1010e370:	1010ea08 	cmpgei	zero,r2,17320
1010e374:	1010ea08 	cmpgei	zero,r2,17320
1010e378:	1010ea08 	cmpgei	zero,r2,17320
1010e37c:	1010ea08 	cmpgei	zero,r2,17320
1010e380:	1010ea7c 	xorhi	zero,r2,17321
1010e384:	1010ea08 	cmpgei	zero,r2,17320
1010e388:	1010ea08 	cmpgei	zero,r2,17320
1010e38c:	1010e7b0 	cmpltui	zero,r2,17310
1010e390:	1010ea08 	cmpgei	zero,r2,17320
1010e394:	1010ea08 	cmpgei	zero,r2,17320
1010e398:	1010ea08 	cmpgei	zero,r2,17320
1010e39c:	1010ea08 	cmpgei	zero,r2,17320
1010e3a0:	1010ea08 	cmpgei	zero,r2,17320
1010e3a4:	1010ea08 	cmpgei	zero,r2,17320
1010e3a8:	1010ea08 	cmpgei	zero,r2,17320
1010e3ac:	1010ea08 	cmpgei	zero,r2,17320
1010e3b0:	1010ea08 	cmpgei	zero,r2,17320
1010e3b4:	1010ea08 	cmpgei	zero,r2,17320
1010e3b8:	1010e6a0 	cmpeqi	zero,r2,17306
1010e3bc:	1010e84c 	andi	zero,r2,17313
1010e3c0:	1010ea08 	cmpgei	zero,r2,17320
1010e3c4:	1010ea08 	cmpgei	zero,r2,17320
1010e3c8:	1010ea08 	cmpgei	zero,r2,17320
1010e3cc:	1010e840 	call	11010e84 <_gp+0xeef6b0>
1010e3d0:	1010e84c 	andi	zero,r2,17313
1010e3d4:	1010ea08 	cmpgei	zero,r2,17320
1010e3d8:	1010ea08 	cmpgei	zero,r2,17320
1010e3dc:	1010e830 	cmpltui	zero,r2,17312
1010e3e0:	1010ea08 	cmpgei	zero,r2,17320
1010e3e4:	1010e7f4 	orhi	zero,r2,17311
1010e3e8:	1010e5fc 	xorhi	zero,r2,17303
1010e3ec:	1010e448 	cmpgei	zero,r2,17297
1010e3f0:	1010e960 	cmpeqi	zero,r2,17317
1010e3f4:	1010ea08 	cmpgei	zero,r2,17320
1010e3f8:	1010e914 	ori	zero,r2,17316
1010e3fc:	1010ea08 	cmpgei	zero,r2,17320
1010e400:	1010e56c 	andhi	zero,r2,17301
1010e404:	1010ea08 	cmpgei	zero,r2,17320
1010e408:	1010ea08 	cmpgei	zero,r2,17320
1010e40c:	1010e4c8 	cmpgei	zero,r2,17299
1010e410:	dac02317 	ldw	r11,140(sp)
1010e414:	5ac00017 	ldw	r11,0(r11)
1010e418:	dac02415 	stw	r11,144(sp)
1010e41c:	dac02317 	ldw	r11,140(sp)
1010e420:	58800104 	addi	r2,r11,4
1010e424:	dac02417 	ldw	r11,144(sp)
1010e428:	5802e90e 	bge	r11,zero,1010efd0 <___svfiprintf_internal_r+0xe84>
1010e42c:	dac02417 	ldw	r11,144(sp)
1010e430:	d8802315 	stw	r2,140(sp)
1010e434:	02d7c83a 	sub	r11,zero,r11
1010e438:	dac02415 	stw	r11,144(sp)
1010e43c:	94800114 	ori	r18,r18,4
1010e440:	98c00007 	ldb	r3,0(r19)
1010e444:	003f9006 	br	1010e288 <_gp+0xfffecab4>
1010e448:	00800c04 	movi	r2,48
1010e44c:	dac02317 	ldw	r11,140(sp)
1010e450:	d8801d05 	stb	r2,116(sp)
1010e454:	00801e04 	movi	r2,120
1010e458:	d8801d45 	stb	r2,117(sp)
1010e45c:	d8001d85 	stb	zero,118(sp)
1010e460:	58c00104 	addi	r3,r11,4
1010e464:	5f000017 	ldw	fp,0(r11)
1010e468:	0013883a 	mov	r9,zero
1010e46c:	90800094 	ori	r2,r18,2
1010e470:	80032b16 	blt	r16,zero,1010f120 <___svfiprintf_internal_r+0xfd4>
1010e474:	00bfdfc4 	movi	r2,-129
1010e478:	90a4703a 	and	r18,r18,r2
1010e47c:	d8c02315 	stw	r3,140(sp)
1010e480:	94800094 	ori	r18,r18,2
1010e484:	e002dc26 	beq	fp,zero,1010eff8 <___svfiprintf_internal_r+0xeac>
1010e488:	01040474 	movhi	r4,4113
1010e48c:	211e7804 	addi	r4,r4,31200
1010e490:	0015883a 	mov	r10,zero
1010e494:	d9002915 	stw	r4,164(sp)
1010e498:	00002306 	br	1010e528 <___svfiprintf_internal_r+0x3dc>
1010e49c:	94800054 	ori	r18,r18,1
1010e4a0:	98c00007 	ldb	r3,0(r19)
1010e4a4:	003f7806 	br	1010e288 <_gp+0xfffecab4>
1010e4a8:	38803fcc 	andi	r2,r7,255
1010e4ac:	1080201c 	xori	r2,r2,128
1010e4b0:	10bfe004 	addi	r2,r2,-128
1010e4b4:	1002f31e 	bne	r2,zero,1010f084 <___svfiprintf_internal_r+0xf38>
1010e4b8:	01000044 	movi	r4,1
1010e4bc:	01c00804 	movi	r7,32
1010e4c0:	98c00007 	ldb	r3,0(r19)
1010e4c4:	003f7006 	br	1010e288 <_gp+0xfffecab4>
1010e4c8:	21003fcc 	andi	r4,r4,255
1010e4cc:	2003aa1e 	bne	r4,zero,1010f378 <___svfiprintf_internal_r+0x122c>
1010e4d0:	00840474 	movhi	r2,4113
1010e4d4:	109e7804 	addi	r2,r2,31200
1010e4d8:	d8802915 	stw	r2,164(sp)
1010e4dc:	9080080c 	andi	r2,r18,32
1010e4e0:	1000ba26 	beq	r2,zero,1010e7cc <___svfiprintf_internal_r+0x680>
1010e4e4:	dac02317 	ldw	r11,140(sp)
1010e4e8:	5f000017 	ldw	fp,0(r11)
1010e4ec:	5a400117 	ldw	r9,4(r11)
1010e4f0:	5ac00204 	addi	r11,r11,8
1010e4f4:	dac02315 	stw	r11,140(sp)
1010e4f8:	9080004c 	andi	r2,r18,1
1010e4fc:	10029026 	beq	r2,zero,1010ef40 <___svfiprintf_internal_r+0xdf4>
1010e500:	e244b03a 	or	r2,fp,r9
1010e504:	1002d41e 	bne	r2,zero,1010f058 <___svfiprintf_internal_r+0xf0c>
1010e508:	d8001d85 	stb	zero,118(sp)
1010e50c:	80030b16 	blt	r16,zero,1010f13c <___svfiprintf_internal_r+0xff0>
1010e510:	00bfdfc4 	movi	r2,-129
1010e514:	90a4703a 	and	r18,r18,r2
1010e518:	0015883a 	mov	r10,zero
1010e51c:	80002426 	beq	r16,zero,1010e5b0 <___svfiprintf_internal_r+0x464>
1010e520:	0039883a 	mov	fp,zero
1010e524:	0013883a 	mov	r9,zero
1010e528:	d9002917 	ldw	r4,164(sp)
1010e52c:	dc401a04 	addi	r17,sp,104
1010e530:	e08003cc 	andi	r2,fp,15
1010e534:	4806973a 	slli	r3,r9,28
1010e538:	2085883a 	add	r2,r4,r2
1010e53c:	e038d13a 	srli	fp,fp,4
1010e540:	10800003 	ldbu	r2,0(r2)
1010e544:	4812d13a 	srli	r9,r9,4
1010e548:	8c7fffc4 	addi	r17,r17,-1
1010e54c:	1f38b03a 	or	fp,r3,fp
1010e550:	88800005 	stb	r2,0(r17)
1010e554:	e244b03a 	or	r2,fp,r9
1010e558:	103ff51e 	bne	r2,zero,1010e530 <_gp+0xfffecd5c>
1010e55c:	dac01e17 	ldw	r11,120(sp)
1010e560:	5c57c83a 	sub	r11,r11,r17
1010e564:	dac02115 	stw	r11,132(sp)
1010e568:	00001406 	br	1010e5bc <___svfiprintf_internal_r+0x470>
1010e56c:	21003fcc 	andi	r4,r4,255
1010e570:	2003741e 	bne	r4,zero,1010f344 <___svfiprintf_internal_r+0x11f8>
1010e574:	9080080c 	andi	r2,r18,32
1010e578:	10014526 	beq	r2,zero,1010ea90 <___svfiprintf_internal_r+0x944>
1010e57c:	dac02317 	ldw	r11,140(sp)
1010e580:	d8001d85 	stb	zero,118(sp)
1010e584:	58c00204 	addi	r3,r11,8
1010e588:	5f000017 	ldw	fp,0(r11)
1010e58c:	5a400117 	ldw	r9,4(r11)
1010e590:	8002d916 	blt	r16,zero,1010f0f8 <___svfiprintf_internal_r+0xfac>
1010e594:	013fdfc4 	movi	r4,-129
1010e598:	e244b03a 	or	r2,fp,r9
1010e59c:	d8c02315 	stw	r3,140(sp)
1010e5a0:	9124703a 	and	r18,r18,r4
1010e5a4:	0015883a 	mov	r10,zero
1010e5a8:	1000b91e 	bne	r2,zero,1010e890 <___svfiprintf_internal_r+0x744>
1010e5ac:	8002e61e 	bne	r16,zero,1010f148 <___svfiprintf_internal_r+0xffc>
1010e5b0:	0021883a 	mov	r16,zero
1010e5b4:	d8002115 	stw	zero,132(sp)
1010e5b8:	dc401a04 	addi	r17,sp,104
1010e5bc:	d8c02117 	ldw	r3,132(sp)
1010e5c0:	dc002015 	stw	r16,128(sp)
1010e5c4:	80c0010e 	bge	r16,r3,1010e5cc <___svfiprintf_internal_r+0x480>
1010e5c8:	d8c02015 	stw	r3,128(sp)
1010e5cc:	52803fcc 	andi	r10,r10,255
1010e5d0:	5280201c 	xori	r10,r10,128
1010e5d4:	52bfe004 	addi	r10,r10,-128
1010e5d8:	50003c26 	beq	r10,zero,1010e6cc <___svfiprintf_internal_r+0x580>
1010e5dc:	dac02017 	ldw	r11,128(sp)
1010e5e0:	5ac00044 	addi	r11,r11,1
1010e5e4:	dac02015 	stw	r11,128(sp)
1010e5e8:	00003806 	br	1010e6cc <___svfiprintf_internal_r+0x580>
1010e5ec:	01000044 	movi	r4,1
1010e5f0:	01c00ac4 	movi	r7,43
1010e5f4:	98c00007 	ldb	r3,0(r19)
1010e5f8:	003f2306 	br	1010e288 <_gp+0xfffecab4>
1010e5fc:	21003fcc 	andi	r4,r4,255
1010e600:	2003481e 	bne	r4,zero,1010f324 <___svfiprintf_internal_r+0x11d8>
1010e604:	9080080c 	andi	r2,r18,32
1010e608:	10013b26 	beq	r2,zero,1010eaf8 <___svfiprintf_internal_r+0x9ac>
1010e60c:	dac02317 	ldw	r11,140(sp)
1010e610:	d8001d85 	stb	zero,118(sp)
1010e614:	58800204 	addi	r2,r11,8
1010e618:	5f000017 	ldw	fp,0(r11)
1010e61c:	5a400117 	ldw	r9,4(r11)
1010e620:	8002a816 	blt	r16,zero,1010f0c4 <___svfiprintf_internal_r+0xf78>
1010e624:	013fdfc4 	movi	r4,-129
1010e628:	e246b03a 	or	r3,fp,r9
1010e62c:	d8802315 	stw	r2,140(sp)
1010e630:	9124703a 	and	r18,r18,r4
1010e634:	18013c26 	beq	r3,zero,1010eb28 <___svfiprintf_internal_r+0x9dc>
1010e638:	0015883a 	mov	r10,zero
1010e63c:	dc401a04 	addi	r17,sp,104
1010e640:	e006d0fa 	srli	r3,fp,3
1010e644:	4808977a 	slli	r4,r9,29
1010e648:	4812d0fa 	srli	r9,r9,3
1010e64c:	e70001cc 	andi	fp,fp,7
1010e650:	e0800c04 	addi	r2,fp,48
1010e654:	8c7fffc4 	addi	r17,r17,-1
1010e658:	20f8b03a 	or	fp,r4,r3
1010e65c:	88800005 	stb	r2,0(r17)
1010e660:	e246b03a 	or	r3,fp,r9
1010e664:	183ff61e 	bne	r3,zero,1010e640 <_gp+0xfffece6c>
1010e668:	90c0004c 	andi	r3,r18,1
1010e66c:	1800a526 	beq	r3,zero,1010e904 <___svfiprintf_internal_r+0x7b8>
1010e670:	10803fcc 	andi	r2,r2,255
1010e674:	1080201c 	xori	r2,r2,128
1010e678:	10bfe004 	addi	r2,r2,-128
1010e67c:	00c00c04 	movi	r3,48
1010e680:	10ffb626 	beq	r2,r3,1010e55c <_gp+0xfffecd88>
1010e684:	88ffffc5 	stb	r3,-1(r17)
1010e688:	d8c01e17 	ldw	r3,120(sp)
1010e68c:	88bfffc4 	addi	r2,r17,-1
1010e690:	1023883a 	mov	r17,r2
1010e694:	1887c83a 	sub	r3,r3,r2
1010e698:	d8c02115 	stw	r3,132(sp)
1010e69c:	003fc706 	br	1010e5bc <_gp+0xfffecde8>
1010e6a0:	dac02317 	ldw	r11,140(sp)
1010e6a4:	00c00044 	movi	r3,1
1010e6a8:	d8c02015 	stw	r3,128(sp)
1010e6ac:	58800017 	ldw	r2,0(r11)
1010e6b0:	5ac00104 	addi	r11,r11,4
1010e6b4:	d8001d85 	stb	zero,118(sp)
1010e6b8:	d8801005 	stb	r2,64(sp)
1010e6bc:	dac02315 	stw	r11,140(sp)
1010e6c0:	d8c02115 	stw	r3,132(sp)
1010e6c4:	dc401004 	addi	r17,sp,64
1010e6c8:	0021883a 	mov	r16,zero
1010e6cc:	90c0008c 	andi	r3,r18,2
1010e6d0:	d8c02215 	stw	r3,136(sp)
1010e6d4:	18000326 	beq	r3,zero,1010e6e4 <___svfiprintf_internal_r+0x598>
1010e6d8:	dac02017 	ldw	r11,128(sp)
1010e6dc:	5ac00084 	addi	r11,r11,2
1010e6e0:	dac02015 	stw	r11,128(sp)
1010e6e4:	90c0210c 	andi	r3,r18,132
1010e6e8:	d8c02615 	stw	r3,152(sp)
1010e6ec:	1801131e 	bne	r3,zero,1010eb3c <___svfiprintf_internal_r+0x9f0>
1010e6f0:	dac02417 	ldw	r11,144(sp)
1010e6f4:	d8c02017 	ldw	r3,128(sp)
1010e6f8:	58f9c83a 	sub	fp,r11,r3
1010e6fc:	07010f0e 	bge	zero,fp,1010eb3c <___svfiprintf_internal_r+0x9f0>
1010e700:	02400404 	movi	r9,16
1010e704:	d8c01c17 	ldw	r3,112(sp)
1010e708:	d8801b17 	ldw	r2,108(sp)
1010e70c:	4f02d60e 	bge	r9,fp,1010f268 <___svfiprintf_internal_r+0x111c>
1010e710:	01440474 	movhi	r5,4113
1010e714:	295ee404 	addi	r5,r5,31632
1010e718:	d9402815 	stw	r5,160(sp)
1010e71c:	028001c4 	movi	r10,7
1010e720:	00000306 	br	1010e730 <___svfiprintf_internal_r+0x5e4>
1010e724:	e73ffc04 	addi	fp,fp,-16
1010e728:	42000204 	addi	r8,r8,8
1010e72c:	4f00150e 	bge	r9,fp,1010e784 <___svfiprintf_internal_r+0x638>
1010e730:	18c00404 	addi	r3,r3,16
1010e734:	10800044 	addi	r2,r2,1
1010e738:	45800015 	stw	r22,0(r8)
1010e73c:	42400115 	stw	r9,4(r8)
1010e740:	d8c01c15 	stw	r3,112(sp)
1010e744:	d8801b15 	stw	r2,108(sp)
1010e748:	50bff60e 	bge	r10,r2,1010e724 <_gp+0xfffecf50>
1010e74c:	d9801a04 	addi	r6,sp,104
1010e750:	b80b883a 	mov	r5,r23
1010e754:	a809883a 	mov	r4,r21
1010e758:	da402c15 	stw	r9,176(sp)
1010e75c:	da802d15 	stw	r10,180(sp)
1010e760:	010df7c0 	call	1010df7c <__ssprint_r>
1010e764:	da402c17 	ldw	r9,176(sp)
1010e768:	da802d17 	ldw	r10,180(sp)
1010e76c:	1001851e 	bne	r2,zero,1010ed84 <___svfiprintf_internal_r+0xc38>
1010e770:	e73ffc04 	addi	fp,fp,-16
1010e774:	d8c01c17 	ldw	r3,112(sp)
1010e778:	d8801b17 	ldw	r2,108(sp)
1010e77c:	d811883a 	mov	r8,sp
1010e780:	4f3feb16 	blt	r9,fp,1010e730 <_gp+0xfffecf5c>
1010e784:	dac02817 	ldw	r11,160(sp)
1010e788:	e0c7883a 	add	r3,fp,r3
1010e78c:	10800044 	addi	r2,r2,1
1010e790:	42c00015 	stw	r11,0(r8)
1010e794:	47000115 	stw	fp,4(r8)
1010e798:	d8c01c15 	stw	r3,112(sp)
1010e79c:	d8801b15 	stw	r2,108(sp)
1010e7a0:	010001c4 	movi	r4,7
1010e7a4:	2081ee16 	blt	r4,r2,1010ef60 <___svfiprintf_internal_r+0xe14>
1010e7a8:	42000204 	addi	r8,r8,8
1010e7ac:	0000e506 	br	1010eb44 <___svfiprintf_internal_r+0x9f8>
1010e7b0:	21003fcc 	andi	r4,r4,255
1010e7b4:	2002dd1e 	bne	r4,zero,1010f32c <___svfiprintf_internal_r+0x11e0>
1010e7b8:	00840474 	movhi	r2,4113
1010e7bc:	109e7304 	addi	r2,r2,31180
1010e7c0:	d8802915 	stw	r2,164(sp)
1010e7c4:	9080080c 	andi	r2,r18,32
1010e7c8:	103f461e 	bne	r2,zero,1010e4e4 <_gp+0xfffecd10>
1010e7cc:	9080040c 	andi	r2,r18,16
1010e7d0:	10022e1e 	bne	r2,zero,1010f08c <___svfiprintf_internal_r+0xf40>
1010e7d4:	9080100c 	andi	r2,r18,64
1010e7d8:	dac02317 	ldw	r11,140(sp)
1010e7dc:	10027326 	beq	r2,zero,1010f1ac <___svfiprintf_internal_r+0x1060>
1010e7e0:	5f00000b 	ldhu	fp,0(r11)
1010e7e4:	5ac00104 	addi	r11,r11,4
1010e7e8:	0013883a 	mov	r9,zero
1010e7ec:	dac02315 	stw	r11,140(sp)
1010e7f0:	003f4106 	br	1010e4f8 <_gp+0xfffecd24>
1010e7f4:	21003fcc 	andi	r4,r4,255
1010e7f8:	2002e11e 	bne	r4,zero,1010f380 <___svfiprintf_internal_r+0x1234>
1010e7fc:	9080080c 	andi	r2,r18,32
1010e800:	1002011e 	bne	r2,zero,1010f008 <___svfiprintf_internal_r+0xebc>
1010e804:	9080040c 	andi	r2,r18,16
1010e808:	10023e1e 	bne	r2,zero,1010f104 <___svfiprintf_internal_r+0xfb8>
1010e80c:	9480100c 	andi	r18,r18,64
1010e810:	90023c26 	beq	r18,zero,1010f104 <___svfiprintf_internal_r+0xfb8>
1010e814:	dac02317 	ldw	r11,140(sp)
1010e818:	58800017 	ldw	r2,0(r11)
1010e81c:	5ac00104 	addi	r11,r11,4
1010e820:	dac02315 	stw	r11,140(sp)
1010e824:	dac02517 	ldw	r11,148(sp)
1010e828:	12c0000d 	sth	r11,0(r2)
1010e82c:	003e6e06 	br	1010e1e8 <_gp+0xfffeca14>
1010e830:	98c00007 	ldb	r3,0(r19)
1010e834:	1a422926 	beq	r3,r9,1010f0dc <___svfiprintf_internal_r+0xf90>
1010e838:	94800414 	ori	r18,r18,16
1010e83c:	003e9206 	br	1010e288 <_gp+0xfffecab4>
1010e840:	94801014 	ori	r18,r18,64
1010e844:	98c00007 	ldb	r3,0(r19)
1010e848:	003e8f06 	br	1010e288 <_gp+0xfffecab4>
1010e84c:	21003fcc 	andi	r4,r4,255
1010e850:	2002c71e 	bne	r4,zero,1010f370 <___svfiprintf_internal_r+0x1224>
1010e854:	9080080c 	andi	r2,r18,32
1010e858:	10004926 	beq	r2,zero,1010e980 <___svfiprintf_internal_r+0x834>
1010e85c:	dac02317 	ldw	r11,140(sp)
1010e860:	58800117 	ldw	r2,4(r11)
1010e864:	5f000017 	ldw	fp,0(r11)
1010e868:	5ac00204 	addi	r11,r11,8
1010e86c:	dac02315 	stw	r11,140(sp)
1010e870:	1013883a 	mov	r9,r2
1010e874:	10004b16 	blt	r2,zero,1010e9a4 <___svfiprintf_internal_r+0x858>
1010e878:	da801d83 	ldbu	r10,118(sp)
1010e87c:	8001cb16 	blt	r16,zero,1010efac <___svfiprintf_internal_r+0xe60>
1010e880:	00ffdfc4 	movi	r3,-129
1010e884:	e244b03a 	or	r2,fp,r9
1010e888:	90e4703a 	and	r18,r18,r3
1010e88c:	103f4726 	beq	r2,zero,1010e5ac <_gp+0xfffecdd8>
1010e890:	48008c26 	beq	r9,zero,1010eac4 <___svfiprintf_internal_r+0x978>
1010e894:	dc802015 	stw	r18,128(sp)
1010e898:	dc002115 	stw	r16,132(sp)
1010e89c:	dc401a04 	addi	r17,sp,104
1010e8a0:	e021883a 	mov	r16,fp
1010e8a4:	da002215 	stw	r8,136(sp)
1010e8a8:	5039883a 	mov	fp,r10
1010e8ac:	4825883a 	mov	r18,r9
1010e8b0:	8009883a 	mov	r4,r16
1010e8b4:	900b883a 	mov	r5,r18
1010e8b8:	01800284 	movi	r6,10
1010e8bc:	000f883a 	mov	r7,zero
1010e8c0:	01115b40 	call	101115b4 <__umoddi3>
1010e8c4:	10800c04 	addi	r2,r2,48
1010e8c8:	8c7fffc4 	addi	r17,r17,-1
1010e8cc:	8009883a 	mov	r4,r16
1010e8d0:	900b883a 	mov	r5,r18
1010e8d4:	88800005 	stb	r2,0(r17)
1010e8d8:	01800284 	movi	r6,10
1010e8dc:	000f883a 	mov	r7,zero
1010e8e0:	011103c0 	call	1011103c <__udivdi3>
1010e8e4:	1021883a 	mov	r16,r2
1010e8e8:	10c4b03a 	or	r2,r2,r3
1010e8ec:	1825883a 	mov	r18,r3
1010e8f0:	103fef1e 	bne	r2,zero,1010e8b0 <_gp+0xfffed0dc>
1010e8f4:	dc802017 	ldw	r18,128(sp)
1010e8f8:	dc002117 	ldw	r16,132(sp)
1010e8fc:	da002217 	ldw	r8,136(sp)
1010e900:	e015883a 	mov	r10,fp
1010e904:	d8c01e17 	ldw	r3,120(sp)
1010e908:	1c47c83a 	sub	r3,r3,r17
1010e90c:	d8c02115 	stw	r3,132(sp)
1010e910:	003f2a06 	br	1010e5bc <_gp+0xfffecde8>
1010e914:	dac02317 	ldw	r11,140(sp)
1010e918:	d8001d85 	stb	zero,118(sp)
1010e91c:	5c400017 	ldw	r17,0(r11)
1010e920:	5f000104 	addi	fp,r11,4
1010e924:	88022f26 	beq	r17,zero,1010f1e4 <___svfiprintf_internal_r+0x1098>
1010e928:	80022516 	blt	r16,zero,1010f1c0 <___svfiprintf_internal_r+0x1074>
1010e92c:	800d883a 	mov	r6,r16
1010e930:	000b883a 	mov	r5,zero
1010e934:	8809883a 	mov	r4,r17
1010e938:	da002c15 	stw	r8,176(sp)
1010e93c:	010c0780 	call	1010c078 <memchr>
1010e940:	da002c17 	ldw	r8,176(sp)
1010e944:	10026426 	beq	r2,zero,1010f2d8 <___svfiprintf_internal_r+0x118c>
1010e948:	1445c83a 	sub	r2,r2,r17
1010e94c:	d8802115 	stw	r2,132(sp)
1010e950:	da801d83 	ldbu	r10,118(sp)
1010e954:	df002315 	stw	fp,140(sp)
1010e958:	0021883a 	mov	r16,zero
1010e95c:	003f1706 	br	1010e5bc <_gp+0xfffecde8>
1010e960:	94800814 	ori	r18,r18,32
1010e964:	98c00007 	ldb	r3,0(r19)
1010e968:	003e4706 	br	1010e288 <_gp+0xfffecab4>
1010e96c:	21003fcc 	andi	r4,r4,255
1010e970:	2002701e 	bne	r4,zero,1010f334 <___svfiprintf_internal_r+0x11e8>
1010e974:	94800414 	ori	r18,r18,16
1010e978:	9080080c 	andi	r2,r18,32
1010e97c:	103fb71e 	bne	r2,zero,1010e85c <_gp+0xfffed088>
1010e980:	9080040c 	andi	r2,r18,16
1010e984:	1001ab26 	beq	r2,zero,1010f034 <___svfiprintf_internal_r+0xee8>
1010e988:	dac02317 	ldw	r11,140(sp)
1010e98c:	5f000017 	ldw	fp,0(r11)
1010e990:	5ac00104 	addi	r11,r11,4
1010e994:	dac02315 	stw	r11,140(sp)
1010e998:	e013d7fa 	srai	r9,fp,31
1010e99c:	4805883a 	mov	r2,r9
1010e9a0:	103fb50e 	bge	r2,zero,1010e878 <_gp+0xfffed0a4>
1010e9a4:	0739c83a 	sub	fp,zero,fp
1010e9a8:	02800b44 	movi	r10,45
1010e9ac:	e004c03a 	cmpne	r2,fp,zero
1010e9b0:	0253c83a 	sub	r9,zero,r9
1010e9b4:	da801d85 	stb	r10,118(sp)
1010e9b8:	4893c83a 	sub	r9,r9,r2
1010e9bc:	80023016 	blt	r16,zero,1010f280 <___svfiprintf_internal_r+0x1134>
1010e9c0:	00bfdfc4 	movi	r2,-129
1010e9c4:	90a4703a 	and	r18,r18,r2
1010e9c8:	483fb21e 	bne	r9,zero,1010e894 <_gp+0xfffed0c0>
1010e9cc:	00003d06 	br	1010eac4 <___svfiprintf_internal_r+0x978>
1010e9d0:	9817883a 	mov	r11,r19
1010e9d4:	d8002415 	stw	zero,144(sp)
1010e9d8:	18bff404 	addi	r2,r3,-48
1010e9dc:	0019883a 	mov	r12,zero
1010e9e0:	58c00007 	ldb	r3,0(r11)
1010e9e4:	630002a4 	muli	r12,r12,10
1010e9e8:	9cc00044 	addi	r19,r19,1
1010e9ec:	9817883a 	mov	r11,r19
1010e9f0:	1319883a 	add	r12,r2,r12
1010e9f4:	18bff404 	addi	r2,r3,-48
1010e9f8:	30bff92e 	bgeu	r6,r2,1010e9e0 <_gp+0xfffed20c>
1010e9fc:	db002415 	stw	r12,144(sp)
1010ea00:	18bff804 	addi	r2,r3,-32
1010ea04:	28be232e 	bgeu	r5,r2,1010e294 <_gp+0xfffecac0>
1010ea08:	21003fcc 	andi	r4,r4,255
1010ea0c:	20024b1e 	bne	r4,zero,1010f33c <___svfiprintf_internal_r+0x11f0>
1010ea10:	1800d626 	beq	r3,zero,1010ed6c <___svfiprintf_internal_r+0xc20>
1010ea14:	02c00044 	movi	r11,1
1010ea18:	dac02015 	stw	r11,128(sp)
1010ea1c:	d8c01005 	stb	r3,64(sp)
1010ea20:	d8001d85 	stb	zero,118(sp)
1010ea24:	dac02115 	stw	r11,132(sp)
1010ea28:	dc401004 	addi	r17,sp,64
1010ea2c:	003f2606 	br	1010e6c8 <_gp+0xfffecef4>
1010ea30:	94802014 	ori	r18,r18,128
1010ea34:	98c00007 	ldb	r3,0(r19)
1010ea38:	003e1306 	br	1010e288 <_gp+0xfffecab4>
1010ea3c:	98c00007 	ldb	r3,0(r19)
1010ea40:	9ac00044 	addi	r11,r19,1
1010ea44:	1a822b26 	beq	r3,r10,1010f2f4 <___svfiprintf_internal_r+0x11a8>
1010ea48:	18bff404 	addi	r2,r3,-48
1010ea4c:	0021883a 	mov	r16,zero
1010ea50:	30821e36 	bltu	r6,r2,1010f2cc <___svfiprintf_internal_r+0x1180>
1010ea54:	58c00007 	ldb	r3,0(r11)
1010ea58:	840002a4 	muli	r16,r16,10
1010ea5c:	5cc00044 	addi	r19,r11,1
1010ea60:	9817883a 	mov	r11,r19
1010ea64:	80a1883a 	add	r16,r16,r2
1010ea68:	18bff404 	addi	r2,r3,-48
1010ea6c:	30bff92e 	bgeu	r6,r2,1010ea54 <_gp+0xfffed280>
1010ea70:	803e060e 	bge	r16,zero,1010e28c <_gp+0xfffecab8>
1010ea74:	043fffc4 	movi	r16,-1
1010ea78:	003e0406 	br	1010e28c <_gp+0xfffecab8>
1010ea7c:	21003fcc 	andi	r4,r4,255
1010ea80:	2002371e 	bne	r4,zero,1010f360 <___svfiprintf_internal_r+0x1214>
1010ea84:	94800414 	ori	r18,r18,16
1010ea88:	9080080c 	andi	r2,r18,32
1010ea8c:	103ebb1e 	bne	r2,zero,1010e57c <_gp+0xfffecda8>
1010ea90:	9080040c 	andi	r2,r18,16
1010ea94:	10013b26 	beq	r2,zero,1010ef84 <___svfiprintf_internal_r+0xe38>
1010ea98:	dac02317 	ldw	r11,140(sp)
1010ea9c:	d8001d85 	stb	zero,118(sp)
1010eaa0:	0013883a 	mov	r9,zero
1010eaa4:	58800104 	addi	r2,r11,4
1010eaa8:	5f000017 	ldw	fp,0(r11)
1010eaac:	80013d16 	blt	r16,zero,1010efa4 <___svfiprintf_internal_r+0xe58>
1010eab0:	00ffdfc4 	movi	r3,-129
1010eab4:	d8802315 	stw	r2,140(sp)
1010eab8:	90e4703a 	and	r18,r18,r3
1010eabc:	0015883a 	mov	r10,zero
1010eac0:	e03eba26 	beq	fp,zero,1010e5ac <_gp+0xfffecdd8>
1010eac4:	00800244 	movi	r2,9
1010eac8:	173f7236 	bltu	r2,fp,1010e894 <_gp+0xfffed0c0>
1010eacc:	dac02b17 	ldw	r11,172(sp)
1010ead0:	e7000c04 	addi	fp,fp,48
1010ead4:	df0019c5 	stb	fp,103(sp)
1010ead8:	dac02115 	stw	r11,132(sp)
1010eadc:	dc4019c4 	addi	r17,sp,103
1010eae0:	003eb606 	br	1010e5bc <_gp+0xfffecde8>
1010eae4:	21003fcc 	andi	r4,r4,255
1010eae8:	20021f1e 	bne	r4,zero,1010f368 <___svfiprintf_internal_r+0x121c>
1010eaec:	94800414 	ori	r18,r18,16
1010eaf0:	9080080c 	andi	r2,r18,32
1010eaf4:	103ec51e 	bne	r2,zero,1010e60c <_gp+0xfffece38>
1010eaf8:	9080040c 	andi	r2,r18,16
1010eafc:	10016926 	beq	r2,zero,1010f0a4 <___svfiprintf_internal_r+0xf58>
1010eb00:	dac02317 	ldw	r11,140(sp)
1010eb04:	d8001d85 	stb	zero,118(sp)
1010eb08:	0013883a 	mov	r9,zero
1010eb0c:	58800104 	addi	r2,r11,4
1010eb10:	5f000017 	ldw	fp,0(r11)
1010eb14:	80016b16 	blt	r16,zero,1010f0c4 <___svfiprintf_internal_r+0xf78>
1010eb18:	00ffdfc4 	movi	r3,-129
1010eb1c:	d8802315 	stw	r2,140(sp)
1010eb20:	90e4703a 	and	r18,r18,r3
1010eb24:	e03ec41e 	bne	fp,zero,1010e638 <_gp+0xfffece64>
1010eb28:	0015883a 	mov	r10,zero
1010eb2c:	8001c226 	beq	r16,zero,1010f238 <___svfiprintf_internal_r+0x10ec>
1010eb30:	0039883a 	mov	fp,zero
1010eb34:	0013883a 	mov	r9,zero
1010eb38:	003ec006 	br	1010e63c <_gp+0xfffece68>
1010eb3c:	d8c01c17 	ldw	r3,112(sp)
1010eb40:	d8801b17 	ldw	r2,108(sp)
1010eb44:	d9001d87 	ldb	r4,118(sp)
1010eb48:	20000b26 	beq	r4,zero,1010eb78 <___svfiprintf_internal_r+0xa2c>
1010eb4c:	d9001d84 	addi	r4,sp,118
1010eb50:	18c00044 	addi	r3,r3,1
1010eb54:	10800044 	addi	r2,r2,1
1010eb58:	41000015 	stw	r4,0(r8)
1010eb5c:	01000044 	movi	r4,1
1010eb60:	41000115 	stw	r4,4(r8)
1010eb64:	d8c01c15 	stw	r3,112(sp)
1010eb68:	d8801b15 	stw	r2,108(sp)
1010eb6c:	010001c4 	movi	r4,7
1010eb70:	2080e116 	blt	r4,r2,1010eef8 <___svfiprintf_internal_r+0xdac>
1010eb74:	42000204 	addi	r8,r8,8
1010eb78:	dac02217 	ldw	r11,136(sp)
1010eb7c:	58000b26 	beq	r11,zero,1010ebac <___svfiprintf_internal_r+0xa60>
1010eb80:	d9001d04 	addi	r4,sp,116
1010eb84:	18c00084 	addi	r3,r3,2
1010eb88:	10800044 	addi	r2,r2,1
1010eb8c:	41000015 	stw	r4,0(r8)
1010eb90:	01000084 	movi	r4,2
1010eb94:	41000115 	stw	r4,4(r8)
1010eb98:	d8c01c15 	stw	r3,112(sp)
1010eb9c:	d8801b15 	stw	r2,108(sp)
1010eba0:	010001c4 	movi	r4,7
1010eba4:	2080dd16 	blt	r4,r2,1010ef1c <___svfiprintf_internal_r+0xdd0>
1010eba8:	42000204 	addi	r8,r8,8
1010ebac:	dac02617 	ldw	r11,152(sp)
1010ebb0:	01002004 	movi	r4,128
1010ebb4:	59008426 	beq	r11,r4,1010edc8 <___svfiprintf_internal_r+0xc7c>
1010ebb8:	dac02117 	ldw	r11,132(sp)
1010ebbc:	82e1c83a 	sub	r16,r16,r11
1010ebc0:	0400270e 	bge	zero,r16,1010ec60 <___svfiprintf_internal_r+0xb14>
1010ebc4:	01c00404 	movi	r7,16
1010ebc8:	3c016a0e 	bge	r7,r16,1010f174 <___svfiprintf_internal_r+0x1028>
1010ebcc:	01440474 	movhi	r5,4113
1010ebd0:	295ee004 	addi	r5,r5,31616
1010ebd4:	d9402215 	stw	r5,136(sp)
1010ebd8:	070001c4 	movi	fp,7
1010ebdc:	00000306 	br	1010ebec <___svfiprintf_internal_r+0xaa0>
1010ebe0:	843ffc04 	addi	r16,r16,-16
1010ebe4:	42000204 	addi	r8,r8,8
1010ebe8:	3c00130e 	bge	r7,r16,1010ec38 <___svfiprintf_internal_r+0xaec>
1010ebec:	18c00404 	addi	r3,r3,16
1010ebf0:	10800044 	addi	r2,r2,1
1010ebf4:	45000015 	stw	r20,0(r8)
1010ebf8:	41c00115 	stw	r7,4(r8)
1010ebfc:	d8c01c15 	stw	r3,112(sp)
1010ec00:	d8801b15 	stw	r2,108(sp)
1010ec04:	e0bff60e 	bge	fp,r2,1010ebe0 <_gp+0xfffed40c>
1010ec08:	d9801a04 	addi	r6,sp,104
1010ec0c:	b80b883a 	mov	r5,r23
1010ec10:	a809883a 	mov	r4,r21
1010ec14:	d9c02c15 	stw	r7,176(sp)
1010ec18:	010df7c0 	call	1010df7c <__ssprint_r>
1010ec1c:	d9c02c17 	ldw	r7,176(sp)
1010ec20:	1000581e 	bne	r2,zero,1010ed84 <___svfiprintf_internal_r+0xc38>
1010ec24:	843ffc04 	addi	r16,r16,-16
1010ec28:	d8c01c17 	ldw	r3,112(sp)
1010ec2c:	d8801b17 	ldw	r2,108(sp)
1010ec30:	d811883a 	mov	r8,sp
1010ec34:	3c3fed16 	blt	r7,r16,1010ebec <_gp+0xfffed418>
1010ec38:	dac02217 	ldw	r11,136(sp)
1010ec3c:	1c07883a 	add	r3,r3,r16
1010ec40:	10800044 	addi	r2,r2,1
1010ec44:	42c00015 	stw	r11,0(r8)
1010ec48:	44000115 	stw	r16,4(r8)
1010ec4c:	d8c01c15 	stw	r3,112(sp)
1010ec50:	d8801b15 	stw	r2,108(sp)
1010ec54:	010001c4 	movi	r4,7
1010ec58:	20809e16 	blt	r4,r2,1010eed4 <___svfiprintf_internal_r+0xd88>
1010ec5c:	42000204 	addi	r8,r8,8
1010ec60:	dac02117 	ldw	r11,132(sp)
1010ec64:	10800044 	addi	r2,r2,1
1010ec68:	44400015 	stw	r17,0(r8)
1010ec6c:	58c7883a 	add	r3,r11,r3
1010ec70:	42c00115 	stw	r11,4(r8)
1010ec74:	d8c01c15 	stw	r3,112(sp)
1010ec78:	d8801b15 	stw	r2,108(sp)
1010ec7c:	010001c4 	movi	r4,7
1010ec80:	20807f16 	blt	r4,r2,1010ee80 <___svfiprintf_internal_r+0xd34>
1010ec84:	42000204 	addi	r8,r8,8
1010ec88:	9480010c 	andi	r18,r18,4
1010ec8c:	90002926 	beq	r18,zero,1010ed34 <___svfiprintf_internal_r+0xbe8>
1010ec90:	dac02417 	ldw	r11,144(sp)
1010ec94:	d8802017 	ldw	r2,128(sp)
1010ec98:	58a1c83a 	sub	r16,r11,r2
1010ec9c:	0400250e 	bge	zero,r16,1010ed34 <___svfiprintf_internal_r+0xbe8>
1010eca0:	04400404 	movi	r17,16
1010eca4:	d8801b17 	ldw	r2,108(sp)
1010eca8:	8c017c0e 	bge	r17,r16,1010f29c <___svfiprintf_internal_r+0x1150>
1010ecac:	01440474 	movhi	r5,4113
1010ecb0:	295ee404 	addi	r5,r5,31632
1010ecb4:	d9402815 	stw	r5,160(sp)
1010ecb8:	048001c4 	movi	r18,7
1010ecbc:	00000306 	br	1010eccc <___svfiprintf_internal_r+0xb80>
1010ecc0:	843ffc04 	addi	r16,r16,-16
1010ecc4:	42000204 	addi	r8,r8,8
1010ecc8:	8c00110e 	bge	r17,r16,1010ed10 <___svfiprintf_internal_r+0xbc4>
1010eccc:	18c00404 	addi	r3,r3,16
1010ecd0:	10800044 	addi	r2,r2,1
1010ecd4:	45800015 	stw	r22,0(r8)
1010ecd8:	44400115 	stw	r17,4(r8)
1010ecdc:	d8c01c15 	stw	r3,112(sp)
1010ece0:	d8801b15 	stw	r2,108(sp)
1010ece4:	90bff60e 	bge	r18,r2,1010ecc0 <_gp+0xfffed4ec>
1010ece8:	d9801a04 	addi	r6,sp,104
1010ecec:	b80b883a 	mov	r5,r23
1010ecf0:	a809883a 	mov	r4,r21
1010ecf4:	010df7c0 	call	1010df7c <__ssprint_r>
1010ecf8:	1000221e 	bne	r2,zero,1010ed84 <___svfiprintf_internal_r+0xc38>
1010ecfc:	843ffc04 	addi	r16,r16,-16
1010ed00:	d8c01c17 	ldw	r3,112(sp)
1010ed04:	d8801b17 	ldw	r2,108(sp)
1010ed08:	d811883a 	mov	r8,sp
1010ed0c:	8c3fef16 	blt	r17,r16,1010eccc <_gp+0xfffed4f8>
1010ed10:	dac02817 	ldw	r11,160(sp)
1010ed14:	1c07883a 	add	r3,r3,r16
1010ed18:	10800044 	addi	r2,r2,1
1010ed1c:	42c00015 	stw	r11,0(r8)
1010ed20:	44000115 	stw	r16,4(r8)
1010ed24:	d8c01c15 	stw	r3,112(sp)
1010ed28:	d8801b15 	stw	r2,108(sp)
1010ed2c:	010001c4 	movi	r4,7
1010ed30:	2080aa16 	blt	r4,r2,1010efdc <___svfiprintf_internal_r+0xe90>
1010ed34:	d8802417 	ldw	r2,144(sp)
1010ed38:	dac02017 	ldw	r11,128(sp)
1010ed3c:	12c0010e 	bge	r2,r11,1010ed44 <___svfiprintf_internal_r+0xbf8>
1010ed40:	5805883a 	mov	r2,r11
1010ed44:	dac02517 	ldw	r11,148(sp)
1010ed48:	5897883a 	add	r11,r11,r2
1010ed4c:	dac02515 	stw	r11,148(sp)
1010ed50:	1800531e 	bne	r3,zero,1010eea0 <___svfiprintf_internal_r+0xd54>
1010ed54:	98800007 	ldb	r2,0(r19)
1010ed58:	d8001b15 	stw	zero,108(sp)
1010ed5c:	d811883a 	mov	r8,sp
1010ed60:	103d231e 	bne	r2,zero,1010e1f0 <_gp+0xfffeca1c>
1010ed64:	9823883a 	mov	r17,r19
1010ed68:	003d3906 	br	1010e250 <_gp+0xfffeca7c>
1010ed6c:	d8801c17 	ldw	r2,112(sp)
1010ed70:	10000426 	beq	r2,zero,1010ed84 <___svfiprintf_internal_r+0xc38>
1010ed74:	d9402717 	ldw	r5,156(sp)
1010ed78:	d9002a17 	ldw	r4,168(sp)
1010ed7c:	d9801a04 	addi	r6,sp,104
1010ed80:	010df7c0 	call	1010df7c <__ssprint_r>
1010ed84:	dac02717 	ldw	r11,156(sp)
1010ed88:	d8802517 	ldw	r2,148(sp)
1010ed8c:	58c0030b 	ldhu	r3,12(r11)
1010ed90:	18c0100c 	andi	r3,r3,64
1010ed94:	1801381e 	bne	r3,zero,1010f278 <___svfiprintf_internal_r+0x112c>
1010ed98:	dfc03717 	ldw	ra,220(sp)
1010ed9c:	df003617 	ldw	fp,216(sp)
1010eda0:	ddc03517 	ldw	r23,212(sp)
1010eda4:	dd803417 	ldw	r22,208(sp)
1010eda8:	dd403317 	ldw	r21,204(sp)
1010edac:	dd003217 	ldw	r20,200(sp)
1010edb0:	dcc03117 	ldw	r19,196(sp)
1010edb4:	dc803017 	ldw	r18,192(sp)
1010edb8:	dc402f17 	ldw	r17,188(sp)
1010edbc:	dc002e17 	ldw	r16,184(sp)
1010edc0:	dec03804 	addi	sp,sp,224
1010edc4:	f800283a 	ret
1010edc8:	dac02417 	ldw	r11,144(sp)
1010edcc:	d9002017 	ldw	r4,128(sp)
1010edd0:	5939c83a 	sub	fp,r11,r4
1010edd4:	073f780e 	bge	zero,fp,1010ebb8 <_gp+0xfffed3e4>
1010edd8:	02400404 	movi	r9,16
1010eddc:	4f01370e 	bge	r9,fp,1010f2bc <___svfiprintf_internal_r+0x1170>
1010ede0:	02c40474 	movhi	r11,4113
1010ede4:	5adee004 	addi	r11,r11,31616
1010ede8:	dac02215 	stw	r11,136(sp)
1010edec:	028001c4 	movi	r10,7
1010edf0:	00000306 	br	1010ee00 <___svfiprintf_internal_r+0xcb4>
1010edf4:	e73ffc04 	addi	fp,fp,-16
1010edf8:	42000204 	addi	r8,r8,8
1010edfc:	4f00150e 	bge	r9,fp,1010ee54 <___svfiprintf_internal_r+0xd08>
1010ee00:	18c00404 	addi	r3,r3,16
1010ee04:	10800044 	addi	r2,r2,1
1010ee08:	45000015 	stw	r20,0(r8)
1010ee0c:	42400115 	stw	r9,4(r8)
1010ee10:	d8c01c15 	stw	r3,112(sp)
1010ee14:	d8801b15 	stw	r2,108(sp)
1010ee18:	50bff60e 	bge	r10,r2,1010edf4 <_gp+0xfffed620>
1010ee1c:	d9801a04 	addi	r6,sp,104
1010ee20:	b80b883a 	mov	r5,r23
1010ee24:	a809883a 	mov	r4,r21
1010ee28:	da402c15 	stw	r9,176(sp)
1010ee2c:	da802d15 	stw	r10,180(sp)
1010ee30:	010df7c0 	call	1010df7c <__ssprint_r>
1010ee34:	da402c17 	ldw	r9,176(sp)
1010ee38:	da802d17 	ldw	r10,180(sp)
1010ee3c:	103fd11e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010ee40:	e73ffc04 	addi	fp,fp,-16
1010ee44:	d8c01c17 	ldw	r3,112(sp)
1010ee48:	d8801b17 	ldw	r2,108(sp)
1010ee4c:	d811883a 	mov	r8,sp
1010ee50:	4f3feb16 	blt	r9,fp,1010ee00 <_gp+0xfffed62c>
1010ee54:	dac02217 	ldw	r11,136(sp)
1010ee58:	1f07883a 	add	r3,r3,fp
1010ee5c:	10800044 	addi	r2,r2,1
1010ee60:	42c00015 	stw	r11,0(r8)
1010ee64:	47000115 	stw	fp,4(r8)
1010ee68:	d8c01c15 	stw	r3,112(sp)
1010ee6c:	d8801b15 	stw	r2,108(sp)
1010ee70:	010001c4 	movi	r4,7
1010ee74:	2080b616 	blt	r4,r2,1010f150 <___svfiprintf_internal_r+0x1004>
1010ee78:	42000204 	addi	r8,r8,8
1010ee7c:	003f4e06 	br	1010ebb8 <_gp+0xfffed3e4>
1010ee80:	d9801a04 	addi	r6,sp,104
1010ee84:	b80b883a 	mov	r5,r23
1010ee88:	a809883a 	mov	r4,r21
1010ee8c:	010df7c0 	call	1010df7c <__ssprint_r>
1010ee90:	103fbc1e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010ee94:	d8c01c17 	ldw	r3,112(sp)
1010ee98:	d811883a 	mov	r8,sp
1010ee9c:	003f7a06 	br	1010ec88 <_gp+0xfffed4b4>
1010eea0:	d9801a04 	addi	r6,sp,104
1010eea4:	b80b883a 	mov	r5,r23
1010eea8:	a809883a 	mov	r4,r21
1010eeac:	010df7c0 	call	1010df7c <__ssprint_r>
1010eeb0:	103fa826 	beq	r2,zero,1010ed54 <_gp+0xfffed580>
1010eeb4:	003fb306 	br	1010ed84 <_gp+0xfffed5b0>
1010eeb8:	d9801a04 	addi	r6,sp,104
1010eebc:	b80b883a 	mov	r5,r23
1010eec0:	a809883a 	mov	r4,r21
1010eec4:	010df7c0 	call	1010df7c <__ssprint_r>
1010eec8:	103fae1e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010eecc:	d811883a 	mov	r8,sp
1010eed0:	003cdc06 	br	1010e244 <_gp+0xfffeca70>
1010eed4:	d9801a04 	addi	r6,sp,104
1010eed8:	b80b883a 	mov	r5,r23
1010eedc:	a809883a 	mov	r4,r21
1010eee0:	010df7c0 	call	1010df7c <__ssprint_r>
1010eee4:	103fa71e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010eee8:	d8c01c17 	ldw	r3,112(sp)
1010eeec:	d8801b17 	ldw	r2,108(sp)
1010eef0:	d811883a 	mov	r8,sp
1010eef4:	003f5a06 	br	1010ec60 <_gp+0xfffed48c>
1010eef8:	d9801a04 	addi	r6,sp,104
1010eefc:	b80b883a 	mov	r5,r23
1010ef00:	a809883a 	mov	r4,r21
1010ef04:	010df7c0 	call	1010df7c <__ssprint_r>
1010ef08:	103f9e1e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010ef0c:	d8c01c17 	ldw	r3,112(sp)
1010ef10:	d8801b17 	ldw	r2,108(sp)
1010ef14:	d811883a 	mov	r8,sp
1010ef18:	003f1706 	br	1010eb78 <_gp+0xfffed3a4>
1010ef1c:	d9801a04 	addi	r6,sp,104
1010ef20:	b80b883a 	mov	r5,r23
1010ef24:	a809883a 	mov	r4,r21
1010ef28:	010df7c0 	call	1010df7c <__ssprint_r>
1010ef2c:	103f951e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010ef30:	d8c01c17 	ldw	r3,112(sp)
1010ef34:	d8801b17 	ldw	r2,108(sp)
1010ef38:	d811883a 	mov	r8,sp
1010ef3c:	003f1b06 	br	1010ebac <_gp+0xfffed3d8>
1010ef40:	d8001d85 	stb	zero,118(sp)
1010ef44:	80007b16 	blt	r16,zero,1010f134 <___svfiprintf_internal_r+0xfe8>
1010ef48:	00ffdfc4 	movi	r3,-129
1010ef4c:	e244b03a 	or	r2,fp,r9
1010ef50:	90e4703a 	and	r18,r18,r3
1010ef54:	103d7026 	beq	r2,zero,1010e518 <_gp+0xfffecd44>
1010ef58:	0015883a 	mov	r10,zero
1010ef5c:	003d7206 	br	1010e528 <_gp+0xfffecd54>
1010ef60:	d9801a04 	addi	r6,sp,104
1010ef64:	b80b883a 	mov	r5,r23
1010ef68:	a809883a 	mov	r4,r21
1010ef6c:	010df7c0 	call	1010df7c <__ssprint_r>
1010ef70:	103f841e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010ef74:	d8c01c17 	ldw	r3,112(sp)
1010ef78:	d8801b17 	ldw	r2,108(sp)
1010ef7c:	d811883a 	mov	r8,sp
1010ef80:	003ef006 	br	1010eb44 <_gp+0xfffed370>
1010ef84:	9080100c 	andi	r2,r18,64
1010ef88:	d8001d85 	stb	zero,118(sp)
1010ef8c:	dac02317 	ldw	r11,140(sp)
1010ef90:	10008126 	beq	r2,zero,1010f198 <___svfiprintf_internal_r+0x104c>
1010ef94:	58800104 	addi	r2,r11,4
1010ef98:	5f00000b 	ldhu	fp,0(r11)
1010ef9c:	0013883a 	mov	r9,zero
1010efa0:	803ec30e 	bge	r16,zero,1010eab0 <_gp+0xfffed2dc>
1010efa4:	d8802315 	stw	r2,140(sp)
1010efa8:	0015883a 	mov	r10,zero
1010efac:	e244b03a 	or	r2,fp,r9
1010efb0:	103e371e 	bne	r2,zero,1010e890 <_gp+0xfffed0bc>
1010efb4:	00800044 	movi	r2,1
1010efb8:	10803fcc 	andi	r2,r2,255
1010efbc:	00c00044 	movi	r3,1
1010efc0:	10c06126 	beq	r2,r3,1010f148 <___svfiprintf_internal_r+0xffc>
1010efc4:	00c00084 	movi	r3,2
1010efc8:	10fd5526 	beq	r2,r3,1010e520 <_gp+0xfffecd4c>
1010efcc:	003ed806 	br	1010eb30 <_gp+0xfffed35c>
1010efd0:	d8802315 	stw	r2,140(sp)
1010efd4:	98c00007 	ldb	r3,0(r19)
1010efd8:	003cab06 	br	1010e288 <_gp+0xfffecab4>
1010efdc:	d9801a04 	addi	r6,sp,104
1010efe0:	b80b883a 	mov	r5,r23
1010efe4:	a809883a 	mov	r4,r21
1010efe8:	010df7c0 	call	1010df7c <__ssprint_r>
1010efec:	103f651e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010eff0:	d8c01c17 	ldw	r3,112(sp)
1010eff4:	003f4f06 	br	1010ed34 <_gp+0xfffed560>
1010eff8:	00840474 	movhi	r2,4113
1010effc:	109e7804 	addi	r2,r2,31200
1010f000:	d8802915 	stw	r2,164(sp)
1010f004:	003d4406 	br	1010e518 <_gp+0xfffecd44>
1010f008:	dac02317 	ldw	r11,140(sp)
1010f00c:	58800017 	ldw	r2,0(r11)
1010f010:	dac02517 	ldw	r11,148(sp)
1010f014:	5807d7fa 	srai	r3,r11,31
1010f018:	dac02317 	ldw	r11,140(sp)
1010f01c:	10c00115 	stw	r3,4(r2)
1010f020:	5ac00104 	addi	r11,r11,4
1010f024:	dac02315 	stw	r11,140(sp)
1010f028:	dac02517 	ldw	r11,148(sp)
1010f02c:	12c00015 	stw	r11,0(r2)
1010f030:	003c6d06 	br	1010e1e8 <_gp+0xfffeca14>
1010f034:	9080100c 	andi	r2,r18,64
1010f038:	dac02317 	ldw	r11,140(sp)
1010f03c:	103e5326 	beq	r2,zero,1010e98c <_gp+0xfffed1b8>
1010f040:	5f00000f 	ldh	fp,0(r11)
1010f044:	5ac00104 	addi	r11,r11,4
1010f048:	dac02315 	stw	r11,140(sp)
1010f04c:	e013d7fa 	srai	r9,fp,31
1010f050:	4805883a 	mov	r2,r9
1010f054:	003e0706 	br	1010e874 <_gp+0xfffed0a0>
1010f058:	00800c04 	movi	r2,48
1010f05c:	d8801d05 	stb	r2,116(sp)
1010f060:	d8c01d45 	stb	r3,117(sp)
1010f064:	d8001d85 	stb	zero,118(sp)
1010f068:	90800094 	ori	r2,r18,2
1010f06c:	80008f16 	blt	r16,zero,1010f2ac <___svfiprintf_internal_r+0x1160>
1010f070:	00bfdfc4 	movi	r2,-129
1010f074:	90a4703a 	and	r18,r18,r2
1010f078:	94800094 	ori	r18,r18,2
1010f07c:	0015883a 	mov	r10,zero
1010f080:	003d2906 	br	1010e528 <_gp+0xfffecd54>
1010f084:	98c00007 	ldb	r3,0(r19)
1010f088:	003c7f06 	br	1010e288 <_gp+0xfffecab4>
1010f08c:	dac02317 	ldw	r11,140(sp)
1010f090:	0013883a 	mov	r9,zero
1010f094:	5f000017 	ldw	fp,0(r11)
1010f098:	5ac00104 	addi	r11,r11,4
1010f09c:	dac02315 	stw	r11,140(sp)
1010f0a0:	003d1506 	br	1010e4f8 <_gp+0xfffecd24>
1010f0a4:	9080100c 	andi	r2,r18,64
1010f0a8:	d8001d85 	stb	zero,118(sp)
1010f0ac:	dac02317 	ldw	r11,140(sp)
1010f0b0:	10003426 	beq	r2,zero,1010f184 <___svfiprintf_internal_r+0x1038>
1010f0b4:	58800104 	addi	r2,r11,4
1010f0b8:	5f00000b 	ldhu	fp,0(r11)
1010f0bc:	0013883a 	mov	r9,zero
1010f0c0:	803e950e 	bge	r16,zero,1010eb18 <_gp+0xfffed344>
1010f0c4:	e246b03a 	or	r3,fp,r9
1010f0c8:	d8802315 	stw	r2,140(sp)
1010f0cc:	183d5a1e 	bne	r3,zero,1010e638 <_gp+0xfffece64>
1010f0d0:	0015883a 	mov	r10,zero
1010f0d4:	0005883a 	mov	r2,zero
1010f0d8:	003fb706 	br	1010efb8 <_gp+0xfffed7e4>
1010f0dc:	98c00043 	ldbu	r3,1(r19)
1010f0e0:	94800814 	ori	r18,r18,32
1010f0e4:	9cc00044 	addi	r19,r19,1
1010f0e8:	18c03fcc 	andi	r3,r3,255
1010f0ec:	18c0201c 	xori	r3,r3,128
1010f0f0:	18ffe004 	addi	r3,r3,-128
1010f0f4:	003c6406 	br	1010e288 <_gp+0xfffecab4>
1010f0f8:	d8c02315 	stw	r3,140(sp)
1010f0fc:	0015883a 	mov	r10,zero
1010f100:	003faa06 	br	1010efac <_gp+0xfffed7d8>
1010f104:	dac02317 	ldw	r11,140(sp)
1010f108:	58800017 	ldw	r2,0(r11)
1010f10c:	5ac00104 	addi	r11,r11,4
1010f110:	dac02315 	stw	r11,140(sp)
1010f114:	dac02517 	ldw	r11,148(sp)
1010f118:	12c00015 	stw	r11,0(r2)
1010f11c:	003c3206 	br	1010e1e8 <_gp+0xfffeca14>
1010f120:	01040474 	movhi	r4,4113
1010f124:	211e7804 	addi	r4,r4,31200
1010f128:	d9002915 	stw	r4,164(sp)
1010f12c:	d8c02315 	stw	r3,140(sp)
1010f130:	1025883a 	mov	r18,r2
1010f134:	e244b03a 	or	r2,fp,r9
1010f138:	103f871e 	bne	r2,zero,1010ef58 <_gp+0xfffed784>
1010f13c:	0015883a 	mov	r10,zero
1010f140:	00800084 	movi	r2,2
1010f144:	003f9c06 	br	1010efb8 <_gp+0xfffed7e4>
1010f148:	0039883a 	mov	fp,zero
1010f14c:	003e5f06 	br	1010eacc <_gp+0xfffed2f8>
1010f150:	d9801a04 	addi	r6,sp,104
1010f154:	b80b883a 	mov	r5,r23
1010f158:	a809883a 	mov	r4,r21
1010f15c:	010df7c0 	call	1010df7c <__ssprint_r>
1010f160:	103f081e 	bne	r2,zero,1010ed84 <_gp+0xfffed5b0>
1010f164:	d8c01c17 	ldw	r3,112(sp)
1010f168:	d8801b17 	ldw	r2,108(sp)
1010f16c:	d811883a 	mov	r8,sp
1010f170:	003e9106 	br	1010ebb8 <_gp+0xfffed3e4>
1010f174:	01040474 	movhi	r4,4113
1010f178:	211ee004 	addi	r4,r4,31616
1010f17c:	d9002215 	stw	r4,136(sp)
1010f180:	003ead06 	br	1010ec38 <_gp+0xfffed464>
1010f184:	58800104 	addi	r2,r11,4
1010f188:	5f000017 	ldw	fp,0(r11)
1010f18c:	0013883a 	mov	r9,zero
1010f190:	803e610e 	bge	r16,zero,1010eb18 <_gp+0xfffed344>
1010f194:	003fcb06 	br	1010f0c4 <_gp+0xfffed8f0>
1010f198:	58800104 	addi	r2,r11,4
1010f19c:	5f000017 	ldw	fp,0(r11)
1010f1a0:	0013883a 	mov	r9,zero
1010f1a4:	803e420e 	bge	r16,zero,1010eab0 <_gp+0xfffed2dc>
1010f1a8:	003f7e06 	br	1010efa4 <_gp+0xfffed7d0>
1010f1ac:	5f000017 	ldw	fp,0(r11)
1010f1b0:	5ac00104 	addi	r11,r11,4
1010f1b4:	0013883a 	mov	r9,zero
1010f1b8:	dac02315 	stw	r11,140(sp)
1010f1bc:	003cce06 	br	1010e4f8 <_gp+0xfffecd24>
1010f1c0:	8809883a 	mov	r4,r17
1010f1c4:	da002c15 	stw	r8,176(sp)
1010f1c8:	01058d40 	call	101058d4 <strlen>
1010f1cc:	d8802115 	stw	r2,132(sp)
1010f1d0:	da801d83 	ldbu	r10,118(sp)
1010f1d4:	df002315 	stw	fp,140(sp)
1010f1d8:	0021883a 	mov	r16,zero
1010f1dc:	da002c17 	ldw	r8,176(sp)
1010f1e0:	003cf606 	br	1010e5bc <_gp+0xfffecde8>
1010f1e4:	00800184 	movi	r2,6
1010f1e8:	1400012e 	bgeu	r2,r16,1010f1f0 <___svfiprintf_internal_r+0x10a4>
1010f1ec:	1021883a 	mov	r16,r2
1010f1f0:	dc002115 	stw	r16,132(sp)
1010f1f4:	8005883a 	mov	r2,r16
1010f1f8:	80003c16 	blt	r16,zero,1010f2ec <___svfiprintf_internal_r+0x11a0>
1010f1fc:	04440474 	movhi	r17,4113
1010f200:	d8802015 	stw	r2,128(sp)
1010f204:	df002315 	stw	fp,140(sp)
1010f208:	8c5e7d04 	addi	r17,r17,31220
1010f20c:	003d2e06 	br	1010e6c8 <_gp+0xfffecef4>
1010f210:	04001004 	movi	r16,64
1010f214:	800b883a 	mov	r5,r16
1010f218:	01049200 	call	10104920 <_malloc_r>
1010f21c:	dac02717 	ldw	r11,156(sp)
1010f220:	58800015 	stw	r2,0(r11)
1010f224:	58800415 	stw	r2,16(r11)
1010f228:	10004826 	beq	r2,zero,1010f34c <___svfiprintf_internal_r+0x1200>
1010f22c:	dac02717 	ldw	r11,156(sp)
1010f230:	5c000515 	stw	r16,20(r11)
1010f234:	003bd906 	br	1010e19c <_gp+0xfffec9c8>
1010f238:	9080004c 	andi	r2,r18,1
1010f23c:	0015883a 	mov	r10,zero
1010f240:	10000626 	beq	r2,zero,1010f25c <___svfiprintf_internal_r+0x1110>
1010f244:	dac02b17 	ldw	r11,172(sp)
1010f248:	00800c04 	movi	r2,48
1010f24c:	d88019c5 	stb	r2,103(sp)
1010f250:	dac02115 	stw	r11,132(sp)
1010f254:	dc4019c4 	addi	r17,sp,103
1010f258:	003cd806 	br	1010e5bc <_gp+0xfffecde8>
1010f25c:	d8002115 	stw	zero,132(sp)
1010f260:	dc401a04 	addi	r17,sp,104
1010f264:	003cd506 	br	1010e5bc <_gp+0xfffecde8>
1010f268:	01040474 	movhi	r4,4113
1010f26c:	211ee404 	addi	r4,r4,31632
1010f270:	d9002815 	stw	r4,160(sp)
1010f274:	003d4306 	br	1010e784 <_gp+0xfffecfb0>
1010f278:	00bfffc4 	movi	r2,-1
1010f27c:	003ec606 	br	1010ed98 <_gp+0xfffed5c4>
1010f280:	00800044 	movi	r2,1
1010f284:	10803fcc 	andi	r2,r2,255
1010f288:	00c00044 	movi	r3,1
1010f28c:	10fd8026 	beq	r2,r3,1010e890 <_gp+0xfffed0bc>
1010f290:	00c00084 	movi	r3,2
1010f294:	10fca426 	beq	r2,r3,1010e528 <_gp+0xfffecd54>
1010f298:	003ce806 	br	1010e63c <_gp+0xfffece68>
1010f29c:	01040474 	movhi	r4,4113
1010f2a0:	211ee404 	addi	r4,r4,31632
1010f2a4:	d9002815 	stw	r4,160(sp)
1010f2a8:	003e9906 	br	1010ed10 <_gp+0xfffed53c>
1010f2ac:	1025883a 	mov	r18,r2
1010f2b0:	0015883a 	mov	r10,zero
1010f2b4:	00800084 	movi	r2,2
1010f2b8:	003ff206 	br	1010f284 <_gp+0xfffedab0>
1010f2bc:	01440474 	movhi	r5,4113
1010f2c0:	295ee004 	addi	r5,r5,31616
1010f2c4:	d9402215 	stw	r5,136(sp)
1010f2c8:	003ee206 	br	1010ee54 <_gp+0xfffed680>
1010f2cc:	5827883a 	mov	r19,r11
1010f2d0:	0021883a 	mov	r16,zero
1010f2d4:	003bed06 	br	1010e28c <_gp+0xfffecab8>
1010f2d8:	dc002115 	stw	r16,132(sp)
1010f2dc:	da801d83 	ldbu	r10,118(sp)
1010f2e0:	df002315 	stw	fp,140(sp)
1010f2e4:	0021883a 	mov	r16,zero
1010f2e8:	003cb406 	br	1010e5bc <_gp+0xfffecde8>
1010f2ec:	0005883a 	mov	r2,zero
1010f2f0:	003fc206 	br	1010f1fc <_gp+0xfffeda28>
1010f2f4:	d8802317 	ldw	r2,140(sp)
1010f2f8:	98c00043 	ldbu	r3,1(r19)
1010f2fc:	5827883a 	mov	r19,r11
1010f300:	14000017 	ldw	r16,0(r2)
1010f304:	10800104 	addi	r2,r2,4
1010f308:	d8802315 	stw	r2,140(sp)
1010f30c:	803f760e 	bge	r16,zero,1010f0e8 <_gp+0xfffed914>
1010f310:	18c03fcc 	andi	r3,r3,255
1010f314:	18c0201c 	xori	r3,r3,128
1010f318:	043fffc4 	movi	r16,-1
1010f31c:	18ffe004 	addi	r3,r3,-128
1010f320:	003bd906 	br	1010e288 <_gp+0xfffecab4>
1010f324:	d9c01d85 	stb	r7,118(sp)
1010f328:	003cb606 	br	1010e604 <_gp+0xfffece30>
1010f32c:	d9c01d85 	stb	r7,118(sp)
1010f330:	003d2106 	br	1010e7b8 <_gp+0xfffecfe4>
1010f334:	d9c01d85 	stb	r7,118(sp)
1010f338:	003d8e06 	br	1010e974 <_gp+0xfffed1a0>
1010f33c:	d9c01d85 	stb	r7,118(sp)
1010f340:	003db306 	br	1010ea10 <_gp+0xfffed23c>
1010f344:	d9c01d85 	stb	r7,118(sp)
1010f348:	003c8a06 	br	1010e574 <_gp+0xfffecda0>
1010f34c:	dac02a17 	ldw	r11,168(sp)
1010f350:	00800304 	movi	r2,12
1010f354:	58800015 	stw	r2,0(r11)
1010f358:	00bfffc4 	movi	r2,-1
1010f35c:	003e8e06 	br	1010ed98 <_gp+0xfffed5c4>
1010f360:	d9c01d85 	stb	r7,118(sp)
1010f364:	003dc706 	br	1010ea84 <_gp+0xfffed2b0>
1010f368:	d9c01d85 	stb	r7,118(sp)
1010f36c:	003ddf06 	br	1010eaec <_gp+0xfffed318>
1010f370:	d9c01d85 	stb	r7,118(sp)
1010f374:	003d3706 	br	1010e854 <_gp+0xfffed080>
1010f378:	d9c01d85 	stb	r7,118(sp)
1010f37c:	003c5406 	br	1010e4d0 <_gp+0xfffeccfc>
1010f380:	d9c01d85 	stb	r7,118(sp)
1010f384:	003d1d06 	br	1010e7fc <_gp+0xfffed028>

1010f388 <__sprint_r.part.0>:
1010f388:	28801917 	ldw	r2,100(r5)
1010f38c:	defff604 	addi	sp,sp,-40
1010f390:	dd400515 	stw	r21,20(sp)
1010f394:	dfc00915 	stw	ra,36(sp)
1010f398:	df000815 	stw	fp,32(sp)
1010f39c:	ddc00715 	stw	r23,28(sp)
1010f3a0:	dd800615 	stw	r22,24(sp)
1010f3a4:	dd000415 	stw	r20,16(sp)
1010f3a8:	dcc00315 	stw	r19,12(sp)
1010f3ac:	dc800215 	stw	r18,8(sp)
1010f3b0:	dc400115 	stw	r17,4(sp)
1010f3b4:	dc000015 	stw	r16,0(sp)
1010f3b8:	1088000c 	andi	r2,r2,8192
1010f3bc:	302b883a 	mov	r21,r6
1010f3c0:	10002e26 	beq	r2,zero,1010f47c <__sprint_r.part.0+0xf4>
1010f3c4:	30800217 	ldw	r2,8(r6)
1010f3c8:	35800017 	ldw	r22,0(r6)
1010f3cc:	10002926 	beq	r2,zero,1010f474 <__sprint_r.part.0+0xec>
1010f3d0:	2827883a 	mov	r19,r5
1010f3d4:	2029883a 	mov	r20,r4
1010f3d8:	b5c00104 	addi	r23,r22,4
1010f3dc:	04bfffc4 	movi	r18,-1
1010f3e0:	bc400017 	ldw	r17,0(r23)
1010f3e4:	b4000017 	ldw	r16,0(r22)
1010f3e8:	0039883a 	mov	fp,zero
1010f3ec:	8822d0ba 	srli	r17,r17,2
1010f3f0:	8800031e 	bne	r17,zero,1010f400 <__sprint_r.part.0+0x78>
1010f3f4:	00001806 	br	1010f458 <__sprint_r.part.0+0xd0>
1010f3f8:	84000104 	addi	r16,r16,4
1010f3fc:	8f001526 	beq	r17,fp,1010f454 <__sprint_r.part.0+0xcc>
1010f400:	81400017 	ldw	r5,0(r16)
1010f404:	980d883a 	mov	r6,r19
1010f408:	a009883a 	mov	r4,r20
1010f40c:	0110d500 	call	10110d50 <_fputwc_r>
1010f410:	e7000044 	addi	fp,fp,1
1010f414:	14bff81e 	bne	r2,r18,1010f3f8 <_gp+0xfffedc24>
1010f418:	9005883a 	mov	r2,r18
1010f41c:	a8000215 	stw	zero,8(r21)
1010f420:	a8000115 	stw	zero,4(r21)
1010f424:	dfc00917 	ldw	ra,36(sp)
1010f428:	df000817 	ldw	fp,32(sp)
1010f42c:	ddc00717 	ldw	r23,28(sp)
1010f430:	dd800617 	ldw	r22,24(sp)
1010f434:	dd400517 	ldw	r21,20(sp)
1010f438:	dd000417 	ldw	r20,16(sp)
1010f43c:	dcc00317 	ldw	r19,12(sp)
1010f440:	dc800217 	ldw	r18,8(sp)
1010f444:	dc400117 	ldw	r17,4(sp)
1010f448:	dc000017 	ldw	r16,0(sp)
1010f44c:	dec00a04 	addi	sp,sp,40
1010f450:	f800283a 	ret
1010f454:	a8800217 	ldw	r2,8(r21)
1010f458:	8c63883a 	add	r17,r17,r17
1010f45c:	8c63883a 	add	r17,r17,r17
1010f460:	1445c83a 	sub	r2,r2,r17
1010f464:	a8800215 	stw	r2,8(r21)
1010f468:	b5800204 	addi	r22,r22,8
1010f46c:	bdc00204 	addi	r23,r23,8
1010f470:	103fdb1e 	bne	r2,zero,1010f3e0 <_gp+0xfffedc0c>
1010f474:	0005883a 	mov	r2,zero
1010f478:	003fe806 	br	1010f41c <_gp+0xfffedc48>
1010f47c:	010b9d00 	call	1010b9d0 <__sfvwrite_r>
1010f480:	003fe606 	br	1010f41c <_gp+0xfffedc48>

1010f484 <__sprint_r>:
1010f484:	30c00217 	ldw	r3,8(r6)
1010f488:	18000126 	beq	r3,zero,1010f490 <__sprint_r+0xc>
1010f48c:	010f3881 	jmpi	1010f388 <__sprint_r.part.0>
1010f490:	30000115 	stw	zero,4(r6)
1010f494:	0005883a 	mov	r2,zero
1010f498:	f800283a 	ret

1010f49c <___vfiprintf_internal_r>:
1010f49c:	deffc904 	addi	sp,sp,-220
1010f4a0:	df003515 	stw	fp,212(sp)
1010f4a4:	dd003115 	stw	r20,196(sp)
1010f4a8:	dfc03615 	stw	ra,216(sp)
1010f4ac:	ddc03415 	stw	r23,208(sp)
1010f4b0:	dd803315 	stw	r22,204(sp)
1010f4b4:	dd403215 	stw	r21,200(sp)
1010f4b8:	dcc03015 	stw	r19,192(sp)
1010f4bc:	dc802f15 	stw	r18,188(sp)
1010f4c0:	dc402e15 	stw	r17,184(sp)
1010f4c4:	dc002d15 	stw	r16,180(sp)
1010f4c8:	d9002015 	stw	r4,128(sp)
1010f4cc:	d9c02215 	stw	r7,136(sp)
1010f4d0:	2829883a 	mov	r20,r5
1010f4d4:	3039883a 	mov	fp,r6
1010f4d8:	20000226 	beq	r4,zero,1010f4e4 <___vfiprintf_internal_r+0x48>
1010f4dc:	20800e17 	ldw	r2,56(r4)
1010f4e0:	1000cf26 	beq	r2,zero,1010f820 <___vfiprintf_internal_r+0x384>
1010f4e4:	a080030b 	ldhu	r2,12(r20)
1010f4e8:	10c8000c 	andi	r3,r2,8192
1010f4ec:	1800061e 	bne	r3,zero,1010f508 <___vfiprintf_internal_r+0x6c>
1010f4f0:	a1001917 	ldw	r4,100(r20)
1010f4f4:	00f7ffc4 	movi	r3,-8193
1010f4f8:	10880014 	ori	r2,r2,8192
1010f4fc:	20c6703a 	and	r3,r4,r3
1010f500:	a080030d 	sth	r2,12(r20)
1010f504:	a0c01915 	stw	r3,100(r20)
1010f508:	10c0020c 	andi	r3,r2,8
1010f50c:	1800a926 	beq	r3,zero,1010f7b4 <___vfiprintf_internal_r+0x318>
1010f510:	a0c00417 	ldw	r3,16(r20)
1010f514:	1800a726 	beq	r3,zero,1010f7b4 <___vfiprintf_internal_r+0x318>
1010f518:	1080068c 	andi	r2,r2,26
1010f51c:	00c00284 	movi	r3,10
1010f520:	10c0ac26 	beq	r2,r3,1010f7d4 <___vfiprintf_internal_r+0x338>
1010f524:	da801a04 	addi	r10,sp,104
1010f528:	da801e15 	stw	r10,120(sp)
1010f52c:	d8801e17 	ldw	r2,120(sp)
1010f530:	da8019c4 	addi	r10,sp,103
1010f534:	05840474 	movhi	r22,4113
1010f538:	05c40474 	movhi	r23,4113
1010f53c:	da801f15 	stw	r10,124(sp)
1010f540:	1295c83a 	sub	r10,r2,r10
1010f544:	b59eec04 	addi	r22,r22,31664
1010f548:	bddee804 	addi	r23,r23,31648
1010f54c:	dec01a15 	stw	sp,104(sp)
1010f550:	d8001c15 	stw	zero,112(sp)
1010f554:	d8001b15 	stw	zero,108(sp)
1010f558:	d8002615 	stw	zero,152(sp)
1010f55c:	d8002315 	stw	zero,140(sp)
1010f560:	da802715 	stw	r10,156(sp)
1010f564:	d811883a 	mov	r8,sp
1010f568:	dd002115 	stw	r20,132(sp)
1010f56c:	e021883a 	mov	r16,fp
1010f570:	80800007 	ldb	r2,0(r16)
1010f574:	1003ea26 	beq	r2,zero,10110520 <___vfiprintf_internal_r+0x1084>
1010f578:	00c00944 	movi	r3,37
1010f57c:	8025883a 	mov	r18,r16
1010f580:	10c0021e 	bne	r2,r3,1010f58c <___vfiprintf_internal_r+0xf0>
1010f584:	00001606 	br	1010f5e0 <___vfiprintf_internal_r+0x144>
1010f588:	10c00326 	beq	r2,r3,1010f598 <___vfiprintf_internal_r+0xfc>
1010f58c:	94800044 	addi	r18,r18,1
1010f590:	90800007 	ldb	r2,0(r18)
1010f594:	103ffc1e 	bne	r2,zero,1010f588 <_gp+0xfffeddb4>
1010f598:	9423c83a 	sub	r17,r18,r16
1010f59c:	88001026 	beq	r17,zero,1010f5e0 <___vfiprintf_internal_r+0x144>
1010f5a0:	d8c01c17 	ldw	r3,112(sp)
1010f5a4:	d8801b17 	ldw	r2,108(sp)
1010f5a8:	44000015 	stw	r16,0(r8)
1010f5ac:	88c7883a 	add	r3,r17,r3
1010f5b0:	10800044 	addi	r2,r2,1
1010f5b4:	44400115 	stw	r17,4(r8)
1010f5b8:	d8c01c15 	stw	r3,112(sp)
1010f5bc:	d8801b15 	stw	r2,108(sp)
1010f5c0:	010001c4 	movi	r4,7
1010f5c4:	2080760e 	bge	r4,r2,1010f7a0 <___vfiprintf_internal_r+0x304>
1010f5c8:	1803821e 	bne	r3,zero,101103d4 <___vfiprintf_internal_r+0xf38>
1010f5cc:	da802317 	ldw	r10,140(sp)
1010f5d0:	d8001b15 	stw	zero,108(sp)
1010f5d4:	d811883a 	mov	r8,sp
1010f5d8:	5455883a 	add	r10,r10,r17
1010f5dc:	da802315 	stw	r10,140(sp)
1010f5e0:	90800007 	ldb	r2,0(r18)
1010f5e4:	10044626 	beq	r2,zero,10110700 <___vfiprintf_internal_r+0x1264>
1010f5e8:	90c00047 	ldb	r3,1(r18)
1010f5ec:	94000044 	addi	r16,r18,1
1010f5f0:	d8001d85 	stb	zero,118(sp)
1010f5f4:	0009883a 	mov	r4,zero
1010f5f8:	000f883a 	mov	r7,zero
1010f5fc:	027fffc4 	movi	r9,-1
1010f600:	0023883a 	mov	r17,zero
1010f604:	0029883a 	mov	r20,zero
1010f608:	01401604 	movi	r5,88
1010f60c:	01800244 	movi	r6,9
1010f610:	03400a84 	movi	r13,42
1010f614:	03001b04 	movi	r12,108
1010f618:	84000044 	addi	r16,r16,1
1010f61c:	18bff804 	addi	r2,r3,-32
1010f620:	28827336 	bltu	r5,r2,1010fff0 <___vfiprintf_internal_r+0xb54>
1010f624:	100490ba 	slli	r2,r2,2
1010f628:	02840474 	movhi	r10,4113
1010f62c:	52bd8f04 	addi	r10,r10,-2500
1010f630:	1285883a 	add	r2,r2,r10
1010f634:	10800017 	ldw	r2,0(r2)
1010f638:	1000683a 	jmp	r2
1010f63c:	1010fd24 	muli	zero,r2,17396
1010f640:	1010fff0 	cmpltui	zero,r2,17407
1010f644:	1010fff0 	cmpltui	zero,r2,17407
1010f648:	1010fd44 	addi	zero,r2,17397
1010f64c:	1010fff0 	cmpltui	zero,r2,17407
1010f650:	1010fff0 	cmpltui	zero,r2,17407
1010f654:	1010fff0 	cmpltui	zero,r2,17407
1010f658:	1010fff0 	cmpltui	zero,r2,17407
1010f65c:	1010fff0 	cmpltui	zero,r2,17407
1010f660:	1010fff0 	cmpltui	zero,r2,17407
1010f664:	1010ff2c 	andhi	zero,r2,17404
1010f668:	1010ff48 	cmpgei	zero,r2,17405
1010f66c:	1010fff0 	cmpltui	zero,r2,17407
1010f670:	1010f830 	cmpltui	zero,r2,17376
1010f674:	1010ff58 	cmpnei	zero,r2,17405
1010f678:	1010fff0 	cmpltui	zero,r2,17407
1010f67c:	1010fd50 	cmplti	zero,r2,17397
1010f680:	1010fd5c 	xori	zero,r2,17397
1010f684:	1010fd5c 	xori	zero,r2,17397
1010f688:	1010fd5c 	xori	zero,r2,17397
1010f68c:	1010fd5c 	xori	zero,r2,17397
1010f690:	1010fd5c 	xori	zero,r2,17397
1010f694:	1010fd5c 	xori	zero,r2,17397
1010f698:	1010fd5c 	xori	zero,r2,17397
1010f69c:	1010fd5c 	xori	zero,r2,17397
1010f6a0:	1010fd5c 	xori	zero,r2,17397
1010f6a4:	1010fff0 	cmpltui	zero,r2,17407
1010f6a8:	1010fff0 	cmpltui	zero,r2,17407
1010f6ac:	1010fff0 	cmpltui	zero,r2,17407
1010f6b0:	1010fff0 	cmpltui	zero,r2,17407
1010f6b4:	1010fff0 	cmpltui	zero,r2,17407
1010f6b8:	1010fff0 	cmpltui	zero,r2,17407
1010f6bc:	1010fff0 	cmpltui	zero,r2,17407
1010f6c0:	1010fff0 	cmpltui	zero,r2,17407
1010f6c4:	1010fff0 	cmpltui	zero,r2,17407
1010f6c8:	1010fff0 	cmpltui	zero,r2,17407
1010f6cc:	1010fd88 	cmpgei	zero,r2,17398
1010f6d0:	1010fff0 	cmpltui	zero,r2,17407
1010f6d4:	1010fff0 	cmpltui	zero,r2,17407
1010f6d8:	1010fff0 	cmpltui	zero,r2,17407
1010f6dc:	1010fff0 	cmpltui	zero,r2,17407
1010f6e0:	1010fff0 	cmpltui	zero,r2,17407
1010f6e4:	1010fff0 	cmpltui	zero,r2,17407
1010f6e8:	1010fff0 	cmpltui	zero,r2,17407
1010f6ec:	1010fff0 	cmpltui	zero,r2,17407
1010f6f0:	1010fff0 	cmpltui	zero,r2,17407
1010f6f4:	1010fff0 	cmpltui	zero,r2,17407
1010f6f8:	1010fdc0 	call	11010fdc <_gp+0xeef808>
1010f6fc:	1010fff0 	cmpltui	zero,r2,17407
1010f700:	1010fff0 	cmpltui	zero,r2,17407
1010f704:	1010fff0 	cmpltui	zero,r2,17407
1010f708:	1010fff0 	cmpltui	zero,r2,17407
1010f70c:	1010fff0 	cmpltui	zero,r2,17407
1010f710:	1010fe18 	cmpnei	zero,r2,17400
1010f714:	1010fff0 	cmpltui	zero,r2,17407
1010f718:	1010fff0 	cmpltui	zero,r2,17407
1010f71c:	1010fe88 	cmpgei	zero,r2,17402
1010f720:	1010fff0 	cmpltui	zero,r2,17407
1010f724:	1010fff0 	cmpltui	zero,r2,17407
1010f728:	1010fff0 	cmpltui	zero,r2,17407
1010f72c:	1010fff0 	cmpltui	zero,r2,17407
1010f730:	1010fff0 	cmpltui	zero,r2,17407
1010f734:	1010fff0 	cmpltui	zero,r2,17407
1010f738:	1010fff0 	cmpltui	zero,r2,17407
1010f73c:	1010fff0 	cmpltui	zero,r2,17407
1010f740:	1010fff0 	cmpltui	zero,r2,17407
1010f744:	1010fff0 	cmpltui	zero,r2,17407
1010f748:	1010fc34 	orhi	zero,r2,17392
1010f74c:	1010fc60 	cmpeqi	zero,r2,17393
1010f750:	1010fff0 	cmpltui	zero,r2,17407
1010f754:	1010fff0 	cmpltui	zero,r2,17407
1010f758:	1010fff0 	cmpltui	zero,r2,17407
1010f75c:	1010ff98 	cmpnei	zero,r2,17406
1010f760:	1010fc60 	cmpeqi	zero,r2,17393
1010f764:	1010fff0 	cmpltui	zero,r2,17407
1010f768:	1010fff0 	cmpltui	zero,r2,17407
1010f76c:	1010faf4 	orhi	zero,r2,17387
1010f770:	1010fff0 	cmpltui	zero,r2,17407
1010f774:	1010fb04 	addi	zero,r2,17388
1010f778:	1010fb40 	call	11010fb4 <_gp+0xeef7e0>
1010f77c:	1010f83c 	xorhi	zero,r2,17376
1010f780:	1010fae8 	cmpgeui	zero,r2,17387
1010f784:	1010fff0 	cmpltui	zero,r2,17407
1010f788:	1010fec4 	addi	zero,r2,17403
1010f78c:	1010fff0 	cmpltui	zero,r2,17407
1010f790:	1010ff1c 	xori	zero,r2,17404
1010f794:	1010fff0 	cmpltui	zero,r2,17407
1010f798:	1010fff0 	cmpltui	zero,r2,17407
1010f79c:	1010fbe0 	cmpeqi	zero,r2,17391
1010f7a0:	42000204 	addi	r8,r8,8
1010f7a4:	da802317 	ldw	r10,140(sp)
1010f7a8:	5455883a 	add	r10,r10,r17
1010f7ac:	da802315 	stw	r10,140(sp)
1010f7b0:	003f8b06 	br	1010f5e0 <_gp+0xfffede0c>
1010f7b4:	d9002017 	ldw	r4,128(sp)
1010f7b8:	a00b883a 	mov	r5,r20
1010f7bc:	0109edc0 	call	10109edc <__swsetup_r>
1010f7c0:	1003b11e 	bne	r2,zero,10110688 <___vfiprintf_internal_r+0x11ec>
1010f7c4:	a080030b 	ldhu	r2,12(r20)
1010f7c8:	00c00284 	movi	r3,10
1010f7cc:	1080068c 	andi	r2,r2,26
1010f7d0:	10ff541e 	bne	r2,r3,1010f524 <_gp+0xfffedd50>
1010f7d4:	a080038f 	ldh	r2,14(r20)
1010f7d8:	103f5216 	blt	r2,zero,1010f524 <_gp+0xfffedd50>
1010f7dc:	d9c02217 	ldw	r7,136(sp)
1010f7e0:	d9002017 	ldw	r4,128(sp)
1010f7e4:	e00d883a 	mov	r6,fp
1010f7e8:	a00b883a 	mov	r5,r20
1010f7ec:	01109140 	call	10110914 <__sbprintf>
1010f7f0:	dfc03617 	ldw	ra,216(sp)
1010f7f4:	df003517 	ldw	fp,212(sp)
1010f7f8:	ddc03417 	ldw	r23,208(sp)
1010f7fc:	dd803317 	ldw	r22,204(sp)
1010f800:	dd403217 	ldw	r21,200(sp)
1010f804:	dd003117 	ldw	r20,196(sp)
1010f808:	dcc03017 	ldw	r19,192(sp)
1010f80c:	dc802f17 	ldw	r18,188(sp)
1010f810:	dc402e17 	ldw	r17,184(sp)
1010f814:	dc002d17 	ldw	r16,180(sp)
1010f818:	dec03704 	addi	sp,sp,220
1010f81c:	f800283a 	ret
1010f820:	01039c80 	call	101039c8 <__sinit>
1010f824:	003f2f06 	br	1010f4e4 <_gp+0xfffedd10>
1010f828:	0463c83a 	sub	r17,zero,r17
1010f82c:	d8802215 	stw	r2,136(sp)
1010f830:	a5000114 	ori	r20,r20,4
1010f834:	80c00007 	ldb	r3,0(r16)
1010f838:	003f7706 	br	1010f618 <_gp+0xfffede44>
1010f83c:	00800c04 	movi	r2,48
1010f840:	da802217 	ldw	r10,136(sp)
1010f844:	d8801d05 	stb	r2,116(sp)
1010f848:	00801e04 	movi	r2,120
1010f84c:	d8801d45 	stb	r2,117(sp)
1010f850:	d8001d85 	stb	zero,118(sp)
1010f854:	50c00104 	addi	r3,r10,4
1010f858:	54800017 	ldw	r18,0(r10)
1010f85c:	0027883a 	mov	r19,zero
1010f860:	a0800094 	ori	r2,r20,2
1010f864:	48030b16 	blt	r9,zero,10110494 <___vfiprintf_internal_r+0xff8>
1010f868:	00bfdfc4 	movi	r2,-129
1010f86c:	a096703a 	and	r11,r20,r2
1010f870:	d8c02215 	stw	r3,136(sp)
1010f874:	5d000094 	ori	r20,r11,2
1010f878:	90032b1e 	bne	r18,zero,10110528 <___vfiprintf_internal_r+0x108c>
1010f87c:	00840474 	movhi	r2,4113
1010f880:	109e7804 	addi	r2,r2,31200
1010f884:	d8802615 	stw	r2,152(sp)
1010f888:	0039883a 	mov	fp,zero
1010f88c:	48017b1e 	bne	r9,zero,1010fe7c <___vfiprintf_internal_r+0x9e0>
1010f890:	0013883a 	mov	r9,zero
1010f894:	0027883a 	mov	r19,zero
1010f898:	dd401a04 	addi	r21,sp,104
1010f89c:	4825883a 	mov	r18,r9
1010f8a0:	4cc0010e 	bge	r9,r19,1010f8a8 <___vfiprintf_internal_r+0x40c>
1010f8a4:	9825883a 	mov	r18,r19
1010f8a8:	e7003fcc 	andi	fp,fp,255
1010f8ac:	e700201c 	xori	fp,fp,128
1010f8b0:	e73fe004 	addi	fp,fp,-128
1010f8b4:	e0000126 	beq	fp,zero,1010f8bc <___vfiprintf_internal_r+0x420>
1010f8b8:	94800044 	addi	r18,r18,1
1010f8bc:	a380008c 	andi	r14,r20,2
1010f8c0:	70000126 	beq	r14,zero,1010f8c8 <___vfiprintf_internal_r+0x42c>
1010f8c4:	94800084 	addi	r18,r18,2
1010f8c8:	a700210c 	andi	fp,r20,132
1010f8cc:	e001df1e 	bne	fp,zero,1011004c <___vfiprintf_internal_r+0xbb0>
1010f8d0:	8c87c83a 	sub	r3,r17,r18
1010f8d4:	00c1dd0e 	bge	zero,r3,1011004c <___vfiprintf_internal_r+0xbb0>
1010f8d8:	01c00404 	movi	r7,16
1010f8dc:	d8801c17 	ldw	r2,112(sp)
1010f8e0:	38c3ad0e 	bge	r7,r3,10110798 <___vfiprintf_internal_r+0x12fc>
1010f8e4:	02840474 	movhi	r10,4113
1010f8e8:	529eec04 	addi	r10,r10,31664
1010f8ec:	dc002915 	stw	r16,164(sp)
1010f8f0:	d9801b17 	ldw	r6,108(sp)
1010f8f4:	da802415 	stw	r10,144(sp)
1010f8f8:	03c001c4 	movi	r15,7
1010f8fc:	da402515 	stw	r9,148(sp)
1010f900:	db802815 	stw	r14,160(sp)
1010f904:	1821883a 	mov	r16,r3
1010f908:	00000506 	br	1010f920 <___vfiprintf_internal_r+0x484>
1010f90c:	31400084 	addi	r5,r6,2
1010f910:	42000204 	addi	r8,r8,8
1010f914:	200d883a 	mov	r6,r4
1010f918:	843ffc04 	addi	r16,r16,-16
1010f91c:	3c000d0e 	bge	r7,r16,1010f954 <___vfiprintf_internal_r+0x4b8>
1010f920:	10800404 	addi	r2,r2,16
1010f924:	31000044 	addi	r4,r6,1
1010f928:	45800015 	stw	r22,0(r8)
1010f92c:	41c00115 	stw	r7,4(r8)
1010f930:	d8801c15 	stw	r2,112(sp)
1010f934:	d9001b15 	stw	r4,108(sp)
1010f938:	793ff40e 	bge	r15,r4,1010f90c <_gp+0xfffee138>
1010f93c:	1001b51e 	bne	r2,zero,10110014 <___vfiprintf_internal_r+0xb78>
1010f940:	843ffc04 	addi	r16,r16,-16
1010f944:	000d883a 	mov	r6,zero
1010f948:	01400044 	movi	r5,1
1010f94c:	d811883a 	mov	r8,sp
1010f950:	3c3ff316 	blt	r7,r16,1010f920 <_gp+0xfffee14c>
1010f954:	8007883a 	mov	r3,r16
1010f958:	da402517 	ldw	r9,148(sp)
1010f95c:	db802817 	ldw	r14,160(sp)
1010f960:	dc002917 	ldw	r16,164(sp)
1010f964:	da802417 	ldw	r10,144(sp)
1010f968:	1885883a 	add	r2,r3,r2
1010f96c:	40c00115 	stw	r3,4(r8)
1010f970:	42800015 	stw	r10,0(r8)
1010f974:	d8801c15 	stw	r2,112(sp)
1010f978:	d9401b15 	stw	r5,108(sp)
1010f97c:	00c001c4 	movi	r3,7
1010f980:	19426016 	blt	r3,r5,10110304 <___vfiprintf_internal_r+0xe68>
1010f984:	d8c01d87 	ldb	r3,118(sp)
1010f988:	42000204 	addi	r8,r8,8
1010f98c:	29000044 	addi	r4,r5,1
1010f990:	1801b31e 	bne	r3,zero,10110060 <___vfiprintf_internal_r+0xbc4>
1010f994:	7001c026 	beq	r14,zero,10110098 <___vfiprintf_internal_r+0xbfc>
1010f998:	d8c01d04 	addi	r3,sp,116
1010f99c:	10800084 	addi	r2,r2,2
1010f9a0:	40c00015 	stw	r3,0(r8)
1010f9a4:	00c00084 	movi	r3,2
1010f9a8:	40c00115 	stw	r3,4(r8)
1010f9ac:	d8801c15 	stw	r2,112(sp)
1010f9b0:	d9001b15 	stw	r4,108(sp)
1010f9b4:	00c001c4 	movi	r3,7
1010f9b8:	1902650e 	bge	r3,r4,10110350 <___vfiprintf_internal_r+0xeb4>
1010f9bc:	10029a1e 	bne	r2,zero,10110428 <___vfiprintf_internal_r+0xf8c>
1010f9c0:	00c02004 	movi	r3,128
1010f9c4:	01000044 	movi	r4,1
1010f9c8:	000b883a 	mov	r5,zero
1010f9cc:	d811883a 	mov	r8,sp
1010f9d0:	e0c1b31e 	bne	fp,r3,101100a0 <___vfiprintf_internal_r+0xc04>
1010f9d4:	8cb9c83a 	sub	fp,r17,r18
1010f9d8:	0701b10e 	bge	zero,fp,101100a0 <___vfiprintf_internal_r+0xc04>
1010f9dc:	01c00404 	movi	r7,16
1010f9e0:	3f03890e 	bge	r7,fp,10110808 <___vfiprintf_internal_r+0x136c>
1010f9e4:	00c40474 	movhi	r3,4113
1010f9e8:	18dee804 	addi	r3,r3,31648
1010f9ec:	d8c02415 	stw	r3,144(sp)
1010f9f0:	8007883a 	mov	r3,r16
1010f9f4:	034001c4 	movi	r13,7
1010f9f8:	e021883a 	mov	r16,fp
1010f9fc:	da402515 	stw	r9,148(sp)
1010fa00:	1839883a 	mov	fp,r3
1010fa04:	00000506 	br	1010fa1c <___vfiprintf_internal_r+0x580>
1010fa08:	29800084 	addi	r6,r5,2
1010fa0c:	42000204 	addi	r8,r8,8
1010fa10:	180b883a 	mov	r5,r3
1010fa14:	843ffc04 	addi	r16,r16,-16
1010fa18:	3c000d0e 	bge	r7,r16,1010fa50 <___vfiprintf_internal_r+0x5b4>
1010fa1c:	10800404 	addi	r2,r2,16
1010fa20:	28c00044 	addi	r3,r5,1
1010fa24:	45c00015 	stw	r23,0(r8)
1010fa28:	41c00115 	stw	r7,4(r8)
1010fa2c:	d8801c15 	stw	r2,112(sp)
1010fa30:	d8c01b15 	stw	r3,108(sp)
1010fa34:	68fff40e 	bge	r13,r3,1010fa08 <_gp+0xfffee234>
1010fa38:	1002241e 	bne	r2,zero,101102cc <___vfiprintf_internal_r+0xe30>
1010fa3c:	843ffc04 	addi	r16,r16,-16
1010fa40:	01800044 	movi	r6,1
1010fa44:	000b883a 	mov	r5,zero
1010fa48:	d811883a 	mov	r8,sp
1010fa4c:	3c3ff316 	blt	r7,r16,1010fa1c <_gp+0xfffee248>
1010fa50:	da402517 	ldw	r9,148(sp)
1010fa54:	e007883a 	mov	r3,fp
1010fa58:	8039883a 	mov	fp,r16
1010fa5c:	1821883a 	mov	r16,r3
1010fa60:	d8c02417 	ldw	r3,144(sp)
1010fa64:	1705883a 	add	r2,r2,fp
1010fa68:	47000115 	stw	fp,4(r8)
1010fa6c:	40c00015 	stw	r3,0(r8)
1010fa70:	d8801c15 	stw	r2,112(sp)
1010fa74:	d9801b15 	stw	r6,108(sp)
1010fa78:	00c001c4 	movi	r3,7
1010fa7c:	19827616 	blt	r3,r6,10110458 <___vfiprintf_internal_r+0xfbc>
1010fa80:	4cf9c83a 	sub	fp,r9,r19
1010fa84:	42000204 	addi	r8,r8,8
1010fa88:	31000044 	addi	r4,r6,1
1010fa8c:	300b883a 	mov	r5,r6
1010fa90:	07018516 	blt	zero,fp,101100a8 <___vfiprintf_internal_r+0xc0c>
1010fa94:	9885883a 	add	r2,r19,r2
1010fa98:	45400015 	stw	r21,0(r8)
1010fa9c:	44c00115 	stw	r19,4(r8)
1010faa0:	d8801c15 	stw	r2,112(sp)
1010faa4:	d9001b15 	stw	r4,108(sp)
1010faa8:	00c001c4 	movi	r3,7
1010faac:	1901dd0e 	bge	r3,r4,10110224 <___vfiprintf_internal_r+0xd88>
1010fab0:	1002401e 	bne	r2,zero,101103b4 <___vfiprintf_internal_r+0xf18>
1010fab4:	d8001b15 	stw	zero,108(sp)
1010fab8:	a2c0010c 	andi	r11,r20,4
1010fabc:	58000226 	beq	r11,zero,1010fac8 <___vfiprintf_internal_r+0x62c>
1010fac0:	8ca7c83a 	sub	r19,r17,r18
1010fac4:	04c2f216 	blt	zero,r19,10110690 <___vfiprintf_internal_r+0x11f4>
1010fac8:	8c80010e 	bge	r17,r18,1010fad0 <___vfiprintf_internal_r+0x634>
1010facc:	9023883a 	mov	r17,r18
1010fad0:	da802317 	ldw	r10,140(sp)
1010fad4:	5455883a 	add	r10,r10,r17
1010fad8:	da802315 	stw	r10,140(sp)
1010fadc:	d8001b15 	stw	zero,108(sp)
1010fae0:	d811883a 	mov	r8,sp
1010fae4:	003ea206 	br	1010f570 <_gp+0xfffedd9c>
1010fae8:	a5000814 	ori	r20,r20,32
1010faec:	80c00007 	ldb	r3,0(r16)
1010faf0:	003ec906 	br	1010f618 <_gp+0xfffede44>
1010faf4:	80c00007 	ldb	r3,0(r16)
1010faf8:	1b030926 	beq	r3,r12,10110720 <___vfiprintf_internal_r+0x1284>
1010fafc:	a5000414 	ori	r20,r20,16
1010fb00:	003ec506 	br	1010f618 <_gp+0xfffede44>
1010fb04:	21003fcc 	andi	r4,r4,255
1010fb08:	20035e1e 	bne	r4,zero,10110884 <___vfiprintf_internal_r+0x13e8>
1010fb0c:	a080080c 	andi	r2,r20,32
1010fb10:	1002a526 	beq	r2,zero,101105a8 <___vfiprintf_internal_r+0x110c>
1010fb14:	da802217 	ldw	r10,136(sp)
1010fb18:	50800017 	ldw	r2,0(r10)
1010fb1c:	da802317 	ldw	r10,140(sp)
1010fb20:	5007d7fa 	srai	r3,r10,31
1010fb24:	da802217 	ldw	r10,136(sp)
1010fb28:	10c00115 	stw	r3,4(r2)
1010fb2c:	52800104 	addi	r10,r10,4
1010fb30:	da802215 	stw	r10,136(sp)
1010fb34:	da802317 	ldw	r10,140(sp)
1010fb38:	12800015 	stw	r10,0(r2)
1010fb3c:	003e8c06 	br	1010f570 <_gp+0xfffedd9c>
1010fb40:	21003fcc 	andi	r4,r4,255
1010fb44:	2003511e 	bne	r4,zero,1011088c <___vfiprintf_internal_r+0x13f0>
1010fb48:	a080080c 	andi	r2,r20,32
1010fb4c:	1000a126 	beq	r2,zero,1010fdd4 <___vfiprintf_internal_r+0x938>
1010fb50:	da802217 	ldw	r10,136(sp)
1010fb54:	d8001d85 	stb	zero,118(sp)
1010fb58:	50800204 	addi	r2,r10,8
1010fb5c:	54800017 	ldw	r18,0(r10)
1010fb60:	54c00117 	ldw	r19,4(r10)
1010fb64:	4802b416 	blt	r9,zero,10110638 <___vfiprintf_internal_r+0x119c>
1010fb68:	013fdfc4 	movi	r4,-129
1010fb6c:	94c6b03a 	or	r3,r18,r19
1010fb70:	d8802215 	stw	r2,136(sp)
1010fb74:	a128703a 	and	r20,r20,r4
1010fb78:	1800a226 	beq	r3,zero,1010fe04 <___vfiprintf_internal_r+0x968>
1010fb7c:	0039883a 	mov	fp,zero
1010fb80:	dd401a04 	addi	r21,sp,104
1010fb84:	9006d0fa 	srli	r3,r18,3
1010fb88:	9808977a 	slli	r4,r19,29
1010fb8c:	9826d0fa 	srli	r19,r19,3
1010fb90:	948001cc 	andi	r18,r18,7
1010fb94:	90800c04 	addi	r2,r18,48
1010fb98:	ad7fffc4 	addi	r21,r21,-1
1010fb9c:	20e4b03a 	or	r18,r4,r3
1010fba0:	a8800005 	stb	r2,0(r21)
1010fba4:	94c6b03a 	or	r3,r18,r19
1010fba8:	183ff61e 	bne	r3,zero,1010fb84 <_gp+0xfffee3b0>
1010fbac:	a0c0004c 	andi	r3,r20,1
1010fbb0:	18005926 	beq	r3,zero,1010fd18 <___vfiprintf_internal_r+0x87c>
1010fbb4:	10803fcc 	andi	r2,r2,255
1010fbb8:	1080201c 	xori	r2,r2,128
1010fbbc:	10bfe004 	addi	r2,r2,-128
1010fbc0:	00c00c04 	movi	r3,48
1010fbc4:	10c05426 	beq	r2,r3,1010fd18 <___vfiprintf_internal_r+0x87c>
1010fbc8:	da801e17 	ldw	r10,120(sp)
1010fbcc:	a8bfffc4 	addi	r2,r21,-1
1010fbd0:	a8ffffc5 	stb	r3,-1(r21)
1010fbd4:	50a7c83a 	sub	r19,r10,r2
1010fbd8:	102b883a 	mov	r21,r2
1010fbdc:	003f2f06 	br	1010f89c <_gp+0xfffee0c8>
1010fbe0:	21003fcc 	andi	r4,r4,255
1010fbe4:	2003421e 	bne	r4,zero,101108f0 <___vfiprintf_internal_r+0x1454>
1010fbe8:	00840474 	movhi	r2,4113
1010fbec:	109e7804 	addi	r2,r2,31200
1010fbf0:	d8802615 	stw	r2,152(sp)
1010fbf4:	a080080c 	andi	r2,r20,32
1010fbf8:	1000aa26 	beq	r2,zero,1010fea4 <___vfiprintf_internal_r+0xa08>
1010fbfc:	da802217 	ldw	r10,136(sp)
1010fc00:	54800017 	ldw	r18,0(r10)
1010fc04:	54c00117 	ldw	r19,4(r10)
1010fc08:	52800204 	addi	r10,r10,8
1010fc0c:	da802215 	stw	r10,136(sp)
1010fc10:	a080004c 	andi	r2,r20,1
1010fc14:	1001d226 	beq	r2,zero,10110360 <___vfiprintf_internal_r+0xec4>
1010fc18:	94c4b03a 	or	r2,r18,r19
1010fc1c:	1002351e 	bne	r2,zero,101104f4 <___vfiprintf_internal_r+0x1058>
1010fc20:	d8001d85 	stb	zero,118(sp)
1010fc24:	48022216 	blt	r9,zero,101104b0 <___vfiprintf_internal_r+0x1014>
1010fc28:	00bfdfc4 	movi	r2,-129
1010fc2c:	a0a8703a 	and	r20,r20,r2
1010fc30:	003f1506 	br	1010f888 <_gp+0xfffee0b4>
1010fc34:	da802217 	ldw	r10,136(sp)
1010fc38:	04800044 	movi	r18,1
1010fc3c:	d8001d85 	stb	zero,118(sp)
1010fc40:	50800017 	ldw	r2,0(r10)
1010fc44:	52800104 	addi	r10,r10,4
1010fc48:	da802215 	stw	r10,136(sp)
1010fc4c:	d8801005 	stb	r2,64(sp)
1010fc50:	9027883a 	mov	r19,r18
1010fc54:	dd401004 	addi	r21,sp,64
1010fc58:	0013883a 	mov	r9,zero
1010fc5c:	003f1706 	br	1010f8bc <_gp+0xfffee0e8>
1010fc60:	21003fcc 	andi	r4,r4,255
1010fc64:	2003201e 	bne	r4,zero,101108e8 <___vfiprintf_internal_r+0x144c>
1010fc68:	a080080c 	andi	r2,r20,32
1010fc6c:	10004b26 	beq	r2,zero,1010fd9c <___vfiprintf_internal_r+0x900>
1010fc70:	da802217 	ldw	r10,136(sp)
1010fc74:	50800117 	ldw	r2,4(r10)
1010fc78:	54800017 	ldw	r18,0(r10)
1010fc7c:	52800204 	addi	r10,r10,8
1010fc80:	da802215 	stw	r10,136(sp)
1010fc84:	1027883a 	mov	r19,r2
1010fc88:	10022c16 	blt	r2,zero,1011053c <___vfiprintf_internal_r+0x10a0>
1010fc8c:	df001d83 	ldbu	fp,118(sp)
1010fc90:	48007216 	blt	r9,zero,1010fe5c <___vfiprintf_internal_r+0x9c0>
1010fc94:	00ffdfc4 	movi	r3,-129
1010fc98:	94c4b03a 	or	r2,r18,r19
1010fc9c:	a0e8703a 	and	r20,r20,r3
1010fca0:	1000cc26 	beq	r2,zero,1010ffd4 <___vfiprintf_internal_r+0xb38>
1010fca4:	98021026 	beq	r19,zero,101104e8 <___vfiprintf_internal_r+0x104c>
1010fca8:	dc402415 	stw	r17,144(sp)
1010fcac:	dc002515 	stw	r16,148(sp)
1010fcb0:	9823883a 	mov	r17,r19
1010fcb4:	9021883a 	mov	r16,r18
1010fcb8:	dd401a04 	addi	r21,sp,104
1010fcbc:	4825883a 	mov	r18,r9
1010fcc0:	4027883a 	mov	r19,r8
1010fcc4:	8009883a 	mov	r4,r16
1010fcc8:	880b883a 	mov	r5,r17
1010fccc:	01800284 	movi	r6,10
1010fcd0:	000f883a 	mov	r7,zero
1010fcd4:	01115b40 	call	101115b4 <__umoddi3>
1010fcd8:	10800c04 	addi	r2,r2,48
1010fcdc:	ad7fffc4 	addi	r21,r21,-1
1010fce0:	8009883a 	mov	r4,r16
1010fce4:	880b883a 	mov	r5,r17
1010fce8:	a8800005 	stb	r2,0(r21)
1010fcec:	01800284 	movi	r6,10
1010fcf0:	000f883a 	mov	r7,zero
1010fcf4:	011103c0 	call	1011103c <__udivdi3>
1010fcf8:	1021883a 	mov	r16,r2
1010fcfc:	10c4b03a 	or	r2,r2,r3
1010fd00:	1823883a 	mov	r17,r3
1010fd04:	103fef1e 	bne	r2,zero,1010fcc4 <_gp+0xfffee4f0>
1010fd08:	dc402417 	ldw	r17,144(sp)
1010fd0c:	dc002517 	ldw	r16,148(sp)
1010fd10:	9013883a 	mov	r9,r18
1010fd14:	9811883a 	mov	r8,r19
1010fd18:	da801e17 	ldw	r10,120(sp)
1010fd1c:	5567c83a 	sub	r19,r10,r21
1010fd20:	003ede06 	br	1010f89c <_gp+0xfffee0c8>
1010fd24:	38803fcc 	andi	r2,r7,255
1010fd28:	1080201c 	xori	r2,r2,128
1010fd2c:	10bfe004 	addi	r2,r2,-128
1010fd30:	1002371e 	bne	r2,zero,10110610 <___vfiprintf_internal_r+0x1174>
1010fd34:	01000044 	movi	r4,1
1010fd38:	01c00804 	movi	r7,32
1010fd3c:	80c00007 	ldb	r3,0(r16)
1010fd40:	003e3506 	br	1010f618 <_gp+0xfffede44>
1010fd44:	a5000054 	ori	r20,r20,1
1010fd48:	80c00007 	ldb	r3,0(r16)
1010fd4c:	003e3206 	br	1010f618 <_gp+0xfffede44>
1010fd50:	a5002014 	ori	r20,r20,128
1010fd54:	80c00007 	ldb	r3,0(r16)
1010fd58:	003e2f06 	br	1010f618 <_gp+0xfffede44>
1010fd5c:	8015883a 	mov	r10,r16
1010fd60:	0023883a 	mov	r17,zero
1010fd64:	18bff404 	addi	r2,r3,-48
1010fd68:	50c00007 	ldb	r3,0(r10)
1010fd6c:	8c4002a4 	muli	r17,r17,10
1010fd70:	84000044 	addi	r16,r16,1
1010fd74:	8015883a 	mov	r10,r16
1010fd78:	1463883a 	add	r17,r2,r17
1010fd7c:	18bff404 	addi	r2,r3,-48
1010fd80:	30bff92e 	bgeu	r6,r2,1010fd68 <_gp+0xfffee594>
1010fd84:	003e2506 	br	1010f61c <_gp+0xfffede48>
1010fd88:	21003fcc 	andi	r4,r4,255
1010fd8c:	2002d41e 	bne	r4,zero,101108e0 <___vfiprintf_internal_r+0x1444>
1010fd90:	a5000414 	ori	r20,r20,16
1010fd94:	a080080c 	andi	r2,r20,32
1010fd98:	103fb51e 	bne	r2,zero,1010fc70 <_gp+0xfffee49c>
1010fd9c:	a080040c 	andi	r2,r20,16
1010fda0:	1001f826 	beq	r2,zero,10110584 <___vfiprintf_internal_r+0x10e8>
1010fda4:	da802217 	ldw	r10,136(sp)
1010fda8:	54800017 	ldw	r18,0(r10)
1010fdac:	52800104 	addi	r10,r10,4
1010fdb0:	da802215 	stw	r10,136(sp)
1010fdb4:	9027d7fa 	srai	r19,r18,31
1010fdb8:	9805883a 	mov	r2,r19
1010fdbc:	003fb206 	br	1010fc88 <_gp+0xfffee4b4>
1010fdc0:	21003fcc 	andi	r4,r4,255
1010fdc4:	2002c41e 	bne	r4,zero,101108d8 <___vfiprintf_internal_r+0x143c>
1010fdc8:	a5000414 	ori	r20,r20,16
1010fdcc:	a080080c 	andi	r2,r20,32
1010fdd0:	103f5f1e 	bne	r2,zero,1010fb50 <_gp+0xfffee37c>
1010fdd4:	a080040c 	andi	r2,r20,16
1010fdd8:	10020f26 	beq	r2,zero,10110618 <___vfiprintf_internal_r+0x117c>
1010fddc:	da802217 	ldw	r10,136(sp)
1010fde0:	d8001d85 	stb	zero,118(sp)
1010fde4:	0027883a 	mov	r19,zero
1010fde8:	50800104 	addi	r2,r10,4
1010fdec:	54800017 	ldw	r18,0(r10)
1010fdf0:	48021116 	blt	r9,zero,10110638 <___vfiprintf_internal_r+0x119c>
1010fdf4:	00ffdfc4 	movi	r3,-129
1010fdf8:	d8802215 	stw	r2,136(sp)
1010fdfc:	a0e8703a 	and	r20,r20,r3
1010fe00:	903f5e1e 	bne	r18,zero,1010fb7c <_gp+0xfffee3a8>
1010fe04:	0039883a 	mov	fp,zero
1010fe08:	4802a626 	beq	r9,zero,101108a4 <___vfiprintf_internal_r+0x1408>
1010fe0c:	0025883a 	mov	r18,zero
1010fe10:	0027883a 	mov	r19,zero
1010fe14:	003f5a06 	br	1010fb80 <_gp+0xfffee3ac>
1010fe18:	21003fcc 	andi	r4,r4,255
1010fe1c:	20029f1e 	bne	r4,zero,1011089c <___vfiprintf_internal_r+0x1400>
1010fe20:	a5000414 	ori	r20,r20,16
1010fe24:	a080080c 	andi	r2,r20,32
1010fe28:	10005e1e 	bne	r2,zero,1010ffa4 <___vfiprintf_internal_r+0xb08>
1010fe2c:	a080040c 	andi	r2,r20,16
1010fe30:	1001a21e 	bne	r2,zero,101104bc <___vfiprintf_internal_r+0x1020>
1010fe34:	a080100c 	andi	r2,r20,64
1010fe38:	d8001d85 	stb	zero,118(sp)
1010fe3c:	da802217 	ldw	r10,136(sp)
1010fe40:	1002231e 	bne	r2,zero,101106d0 <___vfiprintf_internal_r+0x1234>
1010fe44:	50800104 	addi	r2,r10,4
1010fe48:	54800017 	ldw	r18,0(r10)
1010fe4c:	0027883a 	mov	r19,zero
1010fe50:	4801a00e 	bge	r9,zero,101104d4 <___vfiprintf_internal_r+0x1038>
1010fe54:	d8802215 	stw	r2,136(sp)
1010fe58:	0039883a 	mov	fp,zero
1010fe5c:	94c4b03a 	or	r2,r18,r19
1010fe60:	103f901e 	bne	r2,zero,1010fca4 <_gp+0xfffee4d0>
1010fe64:	00800044 	movi	r2,1
1010fe68:	10803fcc 	andi	r2,r2,255
1010fe6c:	00c00044 	movi	r3,1
1010fe70:	10c05926 	beq	r2,r3,1010ffd8 <___vfiprintf_internal_r+0xb3c>
1010fe74:	00c00084 	movi	r3,2
1010fe78:	10ffe41e 	bne	r2,r3,1010fe0c <_gp+0xfffee638>
1010fe7c:	0025883a 	mov	r18,zero
1010fe80:	0027883a 	mov	r19,zero
1010fe84:	00013d06 	br	1011037c <___vfiprintf_internal_r+0xee0>
1010fe88:	21003fcc 	andi	r4,r4,255
1010fe8c:	2002811e 	bne	r4,zero,10110894 <___vfiprintf_internal_r+0x13f8>
1010fe90:	00840474 	movhi	r2,4113
1010fe94:	109e7304 	addi	r2,r2,31180
1010fe98:	d8802615 	stw	r2,152(sp)
1010fe9c:	a080080c 	andi	r2,r20,32
1010fea0:	103f561e 	bne	r2,zero,1010fbfc <_gp+0xfffee428>
1010fea4:	a080040c 	andi	r2,r20,16
1010fea8:	1001d126 	beq	r2,zero,101105f0 <___vfiprintf_internal_r+0x1154>
1010feac:	da802217 	ldw	r10,136(sp)
1010feb0:	0027883a 	mov	r19,zero
1010feb4:	54800017 	ldw	r18,0(r10)
1010feb8:	52800104 	addi	r10,r10,4
1010febc:	da802215 	stw	r10,136(sp)
1010fec0:	003f5306 	br	1010fc10 <_gp+0xfffee43c>
1010fec4:	da802217 	ldw	r10,136(sp)
1010fec8:	d8001d85 	stb	zero,118(sp)
1010fecc:	55400017 	ldw	r21,0(r10)
1010fed0:	50c00104 	addi	r3,r10,4
1010fed4:	a8024226 	beq	r21,zero,101107e0 <___vfiprintf_internal_r+0x1344>
1010fed8:	48021816 	blt	r9,zero,1011073c <___vfiprintf_internal_r+0x12a0>
1010fedc:	480d883a 	mov	r6,r9
1010fee0:	000b883a 	mov	r5,zero
1010fee4:	a809883a 	mov	r4,r21
1010fee8:	d8c02a15 	stw	r3,168(sp)
1010feec:	da002b15 	stw	r8,172(sp)
1010fef0:	da402c15 	stw	r9,176(sp)
1010fef4:	010c0780 	call	1010c078 <memchr>
1010fef8:	d8c02a17 	ldw	r3,168(sp)
1010fefc:	da002b17 	ldw	r8,172(sp)
1010ff00:	da402c17 	ldw	r9,176(sp)
1010ff04:	10024826 	beq	r2,zero,10110828 <___vfiprintf_internal_r+0x138c>
1010ff08:	1567c83a 	sub	r19,r2,r21
1010ff0c:	df001d83 	ldbu	fp,118(sp)
1010ff10:	d8c02215 	stw	r3,136(sp)
1010ff14:	0013883a 	mov	r9,zero
1010ff18:	003e6006 	br	1010f89c <_gp+0xfffee0c8>
1010ff1c:	21003fcc 	andi	r4,r4,255
1010ff20:	203fc026 	beq	r4,zero,1010fe24 <_gp+0xfffee650>
1010ff24:	d9c01d85 	stb	r7,118(sp)
1010ff28:	003fbe06 	br	1010fe24 <_gp+0xfffee650>
1010ff2c:	da802217 	ldw	r10,136(sp)
1010ff30:	54400017 	ldw	r17,0(r10)
1010ff34:	50800104 	addi	r2,r10,4
1010ff38:	883e3b16 	blt	r17,zero,1010f828 <_gp+0xfffee054>
1010ff3c:	d8802215 	stw	r2,136(sp)
1010ff40:	80c00007 	ldb	r3,0(r16)
1010ff44:	003db406 	br	1010f618 <_gp+0xfffede44>
1010ff48:	01000044 	movi	r4,1
1010ff4c:	01c00ac4 	movi	r7,43
1010ff50:	80c00007 	ldb	r3,0(r16)
1010ff54:	003db006 	br	1010f618 <_gp+0xfffede44>
1010ff58:	80c00007 	ldb	r3,0(r16)
1010ff5c:	82800044 	addi	r10,r16,1
1010ff60:	1b423c26 	beq	r3,r13,10110854 <___vfiprintf_internal_r+0x13b8>
1010ff64:	18bff404 	addi	r2,r3,-48
1010ff68:	0013883a 	mov	r9,zero
1010ff6c:	30822b36 	bltu	r6,r2,1011081c <___vfiprintf_internal_r+0x1380>
1010ff70:	50c00007 	ldb	r3,0(r10)
1010ff74:	4a4002a4 	muli	r9,r9,10
1010ff78:	54000044 	addi	r16,r10,1
1010ff7c:	8015883a 	mov	r10,r16
1010ff80:	4893883a 	add	r9,r9,r2
1010ff84:	18bff404 	addi	r2,r3,-48
1010ff88:	30bff92e 	bgeu	r6,r2,1010ff70 <_gp+0xfffee79c>
1010ff8c:	483da30e 	bge	r9,zero,1010f61c <_gp+0xfffede48>
1010ff90:	027fffc4 	movi	r9,-1
1010ff94:	003da106 	br	1010f61c <_gp+0xfffede48>
1010ff98:	a5001014 	ori	r20,r20,64
1010ff9c:	80c00007 	ldb	r3,0(r16)
1010ffa0:	003d9d06 	br	1010f618 <_gp+0xfffede44>
1010ffa4:	da802217 	ldw	r10,136(sp)
1010ffa8:	d8001d85 	stb	zero,118(sp)
1010ffac:	50c00204 	addi	r3,r10,8
1010ffb0:	54800017 	ldw	r18,0(r10)
1010ffb4:	54c00117 	ldw	r19,4(r10)
1010ffb8:	4801ca16 	blt	r9,zero,101106e4 <___vfiprintf_internal_r+0x1248>
1010ffbc:	013fdfc4 	movi	r4,-129
1010ffc0:	94c4b03a 	or	r2,r18,r19
1010ffc4:	d8c02215 	stw	r3,136(sp)
1010ffc8:	a128703a 	and	r20,r20,r4
1010ffcc:	0039883a 	mov	fp,zero
1010ffd0:	103f341e 	bne	r2,zero,1010fca4 <_gp+0xfffee4d0>
1010ffd4:	483e2e26 	beq	r9,zero,1010f890 <_gp+0xfffee0bc>
1010ffd8:	0025883a 	mov	r18,zero
1010ffdc:	94800c04 	addi	r18,r18,48
1010ffe0:	dc8019c5 	stb	r18,103(sp)
1010ffe4:	dcc02717 	ldw	r19,156(sp)
1010ffe8:	dd4019c4 	addi	r21,sp,103
1010ffec:	003e2b06 	br	1010f89c <_gp+0xfffee0c8>
1010fff0:	21003fcc 	andi	r4,r4,255
1010fff4:	2002361e 	bne	r4,zero,101108d0 <___vfiprintf_internal_r+0x1434>
1010fff8:	1801c126 	beq	r3,zero,10110700 <___vfiprintf_internal_r+0x1264>
1010fffc:	04800044 	movi	r18,1
10110000:	d8c01005 	stb	r3,64(sp)
10110004:	d8001d85 	stb	zero,118(sp)
10110008:	9027883a 	mov	r19,r18
1011000c:	dd401004 	addi	r21,sp,64
10110010:	003f1106 	br	1010fc58 <_gp+0xfffee484>
10110014:	d9402117 	ldw	r5,132(sp)
10110018:	d9002017 	ldw	r4,128(sp)
1011001c:	d9801a04 	addi	r6,sp,104
10110020:	d9c02b15 	stw	r7,172(sp)
10110024:	dbc02a15 	stw	r15,168(sp)
10110028:	010f3880 	call	1010f388 <__sprint_r.part.0>
1011002c:	d9c02b17 	ldw	r7,172(sp)
10110030:	dbc02a17 	ldw	r15,168(sp)
10110034:	10006d1e 	bne	r2,zero,101101ec <___vfiprintf_internal_r+0xd50>
10110038:	d9801b17 	ldw	r6,108(sp)
1011003c:	d8801c17 	ldw	r2,112(sp)
10110040:	d811883a 	mov	r8,sp
10110044:	31400044 	addi	r5,r6,1
10110048:	003e3306 	br	1010f918 <_gp+0xfffee144>
1011004c:	d9401b17 	ldw	r5,108(sp)
10110050:	d8801c17 	ldw	r2,112(sp)
10110054:	29000044 	addi	r4,r5,1
10110058:	d8c01d87 	ldb	r3,118(sp)
1011005c:	183e4d26 	beq	r3,zero,1010f994 <_gp+0xfffee1c0>
10110060:	00c00044 	movi	r3,1
10110064:	d9401d84 	addi	r5,sp,118
10110068:	10c5883a 	add	r2,r2,r3
1011006c:	41400015 	stw	r5,0(r8)
10110070:	40c00115 	stw	r3,4(r8)
10110074:	d8801c15 	stw	r2,112(sp)
10110078:	d9001b15 	stw	r4,108(sp)
1011007c:	014001c4 	movi	r5,7
10110080:	2900a90e 	bge	r5,r4,10110328 <___vfiprintf_internal_r+0xe8c>
10110084:	1000da1e 	bne	r2,zero,101103f0 <___vfiprintf_internal_r+0xf54>
10110088:	7000ab1e 	bne	r14,zero,10110338 <___vfiprintf_internal_r+0xe9c>
1011008c:	000b883a 	mov	r5,zero
10110090:	1809883a 	mov	r4,r3
10110094:	d811883a 	mov	r8,sp
10110098:	00c02004 	movi	r3,128
1011009c:	e0fe4d26 	beq	fp,r3,1010f9d4 <_gp+0xfffee200>
101100a0:	4cf9c83a 	sub	fp,r9,r19
101100a4:	073e7b0e 	bge	zero,fp,1010fa94 <_gp+0xfffee2c0>
101100a8:	01c00404 	movi	r7,16
101100ac:	3f01900e 	bge	r7,fp,101106f0 <___vfiprintf_internal_r+0x1254>
101100b0:	00c40474 	movhi	r3,4113
101100b4:	18dee804 	addi	r3,r3,31648
101100b8:	d8c02415 	stw	r3,144(sp)
101100bc:	034001c4 	movi	r13,7
101100c0:	00000506 	br	101100d8 <___vfiprintf_internal_r+0xc3c>
101100c4:	29000084 	addi	r4,r5,2
101100c8:	42000204 	addi	r8,r8,8
101100cc:	180b883a 	mov	r5,r3
101100d0:	e73ffc04 	addi	fp,fp,-16
101100d4:	3f000d0e 	bge	r7,fp,1011010c <___vfiprintf_internal_r+0xc70>
101100d8:	10800404 	addi	r2,r2,16
101100dc:	28c00044 	addi	r3,r5,1
101100e0:	45c00015 	stw	r23,0(r8)
101100e4:	41c00115 	stw	r7,4(r8)
101100e8:	d8801c15 	stw	r2,112(sp)
101100ec:	d8c01b15 	stw	r3,108(sp)
101100f0:	68fff40e 	bge	r13,r3,101100c4 <_gp+0xfffee8f0>
101100f4:	1000101e 	bne	r2,zero,10110138 <___vfiprintf_internal_r+0xc9c>
101100f8:	e73ffc04 	addi	fp,fp,-16
101100fc:	01000044 	movi	r4,1
10110100:	000b883a 	mov	r5,zero
10110104:	d811883a 	mov	r8,sp
10110108:	3f3ff316 	blt	r7,fp,101100d8 <_gp+0xfffee904>
1011010c:	da802417 	ldw	r10,144(sp)
10110110:	1705883a 	add	r2,r2,fp
10110114:	47000115 	stw	fp,4(r8)
10110118:	42800015 	stw	r10,0(r8)
1011011c:	d8801c15 	stw	r2,112(sp)
10110120:	d9001b15 	stw	r4,108(sp)
10110124:	00c001c4 	movi	r3,7
10110128:	19003616 	blt	r3,r4,10110204 <___vfiprintf_internal_r+0xd68>
1011012c:	42000204 	addi	r8,r8,8
10110130:	21000044 	addi	r4,r4,1
10110134:	003e5706 	br	1010fa94 <_gp+0xfffee2c0>
10110138:	d9402117 	ldw	r5,132(sp)
1011013c:	d9002017 	ldw	r4,128(sp)
10110140:	d9801a04 	addi	r6,sp,104
10110144:	d9c02b15 	stw	r7,172(sp)
10110148:	db402a15 	stw	r13,168(sp)
1011014c:	010f3880 	call	1010f388 <__sprint_r.part.0>
10110150:	d9c02b17 	ldw	r7,172(sp)
10110154:	db402a17 	ldw	r13,168(sp)
10110158:	1000241e 	bne	r2,zero,101101ec <___vfiprintf_internal_r+0xd50>
1011015c:	d9401b17 	ldw	r5,108(sp)
10110160:	d8801c17 	ldw	r2,112(sp)
10110164:	d811883a 	mov	r8,sp
10110168:	29000044 	addi	r4,r5,1
1011016c:	003fd806 	br	101100d0 <_gp+0xfffee8fc>
10110170:	d9401b17 	ldw	r5,108(sp)
10110174:	00c40474 	movhi	r3,4113
10110178:	18deec04 	addi	r3,r3,31664
1011017c:	d8c02415 	stw	r3,144(sp)
10110180:	29400044 	addi	r5,r5,1
10110184:	d8c02417 	ldw	r3,144(sp)
10110188:	14c5883a 	add	r2,r2,r19
1011018c:	44c00115 	stw	r19,4(r8)
10110190:	40c00015 	stw	r3,0(r8)
10110194:	d8801c15 	stw	r2,112(sp)
10110198:	d9401b15 	stw	r5,108(sp)
1011019c:	00c001c4 	movi	r3,7
101101a0:	1940070e 	bge	r3,r5,101101c0 <___vfiprintf_internal_r+0xd24>
101101a4:	103e4826 	beq	r2,zero,1010fac8 <_gp+0xfffee2f4>
101101a8:	d9402117 	ldw	r5,132(sp)
101101ac:	d9002017 	ldw	r4,128(sp)
101101b0:	d9801a04 	addi	r6,sp,104
101101b4:	010f3880 	call	1010f388 <__sprint_r.part.0>
101101b8:	10000c1e 	bne	r2,zero,101101ec <___vfiprintf_internal_r+0xd50>
101101bc:	d8801c17 	ldw	r2,112(sp)
101101c0:	8c80010e 	bge	r17,r18,101101c8 <___vfiprintf_internal_r+0xd2c>
101101c4:	9023883a 	mov	r17,r18
101101c8:	da802317 	ldw	r10,140(sp)
101101cc:	5455883a 	add	r10,r10,r17
101101d0:	da802315 	stw	r10,140(sp)
101101d4:	103e4126 	beq	r2,zero,1010fadc <_gp+0xfffee308>
101101d8:	d9402117 	ldw	r5,132(sp)
101101dc:	d9002017 	ldw	r4,128(sp)
101101e0:	d9801a04 	addi	r6,sp,104
101101e4:	010f3880 	call	1010f388 <__sprint_r.part.0>
101101e8:	103e3c26 	beq	r2,zero,1010fadc <_gp+0xfffee308>
101101ec:	dd002117 	ldw	r20,132(sp)
101101f0:	a080030b 	ldhu	r2,12(r20)
101101f4:	1080100c 	andi	r2,r2,64
101101f8:	1001231e 	bne	r2,zero,10110688 <___vfiprintf_internal_r+0x11ec>
101101fc:	d8802317 	ldw	r2,140(sp)
10110200:	003d7b06 	br	1010f7f0 <_gp+0xfffee01c>
10110204:	1000991e 	bne	r2,zero,1011046c <___vfiprintf_internal_r+0xfd0>
10110208:	00c00044 	movi	r3,1
1011020c:	9805883a 	mov	r2,r19
10110210:	dd400015 	stw	r21,0(sp)
10110214:	dcc00115 	stw	r19,4(sp)
10110218:	dcc01c15 	stw	r19,112(sp)
1011021c:	d8c01b15 	stw	r3,108(sp)
10110220:	d811883a 	mov	r8,sp
10110224:	42000204 	addi	r8,r8,8
10110228:	a2c0010c 	andi	r11,r20,4
1011022c:	583fe426 	beq	r11,zero,101101c0 <_gp+0xfffee9ec>
10110230:	8ca7c83a 	sub	r19,r17,r18
10110234:	04ffe20e 	bge	zero,r19,101101c0 <_gp+0xfffee9ec>
10110238:	01c00404 	movi	r7,16
1011023c:	3cffcc0e 	bge	r7,r19,10110170 <_gp+0xfffee99c>
10110240:	02840474 	movhi	r10,4113
10110244:	529eec04 	addi	r10,r10,31664
10110248:	d9001b17 	ldw	r4,108(sp)
1011024c:	da802415 	stw	r10,144(sp)
10110250:	382b883a 	mov	r21,r7
10110254:	050001c4 	movi	r20,7
10110258:	df002017 	ldw	fp,128(sp)
1011025c:	00000506 	br	10110274 <___vfiprintf_internal_r+0xdd8>
10110260:	21400084 	addi	r5,r4,2
10110264:	42000204 	addi	r8,r8,8
10110268:	1809883a 	mov	r4,r3
1011026c:	9cfffc04 	addi	r19,r19,-16
10110270:	acffc40e 	bge	r21,r19,10110184 <_gp+0xfffee9b0>
10110274:	10800404 	addi	r2,r2,16
10110278:	20c00044 	addi	r3,r4,1
1011027c:	45800015 	stw	r22,0(r8)
10110280:	45400115 	stw	r21,4(r8)
10110284:	d8801c15 	stw	r2,112(sp)
10110288:	d8c01b15 	stw	r3,108(sp)
1011028c:	a0fff40e 	bge	r20,r3,10110260 <_gp+0xfffeea8c>
10110290:	1000041e 	bne	r2,zero,101102a4 <___vfiprintf_internal_r+0xe08>
10110294:	01400044 	movi	r5,1
10110298:	0009883a 	mov	r4,zero
1011029c:	d811883a 	mov	r8,sp
101102a0:	003ff206 	br	1011026c <_gp+0xfffeea98>
101102a4:	d9402117 	ldw	r5,132(sp)
101102a8:	d9801a04 	addi	r6,sp,104
101102ac:	e009883a 	mov	r4,fp
101102b0:	010f3880 	call	1010f388 <__sprint_r.part.0>
101102b4:	103fcd1e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
101102b8:	d9001b17 	ldw	r4,108(sp)
101102bc:	d8801c17 	ldw	r2,112(sp)
101102c0:	d811883a 	mov	r8,sp
101102c4:	21400044 	addi	r5,r4,1
101102c8:	003fe806 	br	1011026c <_gp+0xfffeea98>
101102cc:	d9402117 	ldw	r5,132(sp)
101102d0:	d9002017 	ldw	r4,128(sp)
101102d4:	d9801a04 	addi	r6,sp,104
101102d8:	d9c02b15 	stw	r7,172(sp)
101102dc:	db402a15 	stw	r13,168(sp)
101102e0:	010f3880 	call	1010f388 <__sprint_r.part.0>
101102e4:	d9c02b17 	ldw	r7,172(sp)
101102e8:	db402a17 	ldw	r13,168(sp)
101102ec:	103fbf1e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
101102f0:	d9401b17 	ldw	r5,108(sp)
101102f4:	d8801c17 	ldw	r2,112(sp)
101102f8:	d811883a 	mov	r8,sp
101102fc:	29800044 	addi	r6,r5,1
10110300:	003dc406 	br	1010fa14 <_gp+0xfffee240>
10110304:	1000d21e 	bne	r2,zero,10110650 <___vfiprintf_internal_r+0x11b4>
10110308:	d8c01d87 	ldb	r3,118(sp)
1011030c:	18009526 	beq	r3,zero,10110564 <___vfiprintf_internal_r+0x10c8>
10110310:	00800044 	movi	r2,1
10110314:	d8c01d84 	addi	r3,sp,118
10110318:	1009883a 	mov	r4,r2
1011031c:	d8c00015 	stw	r3,0(sp)
10110320:	d8800115 	stw	r2,4(sp)
10110324:	d811883a 	mov	r8,sp
10110328:	200b883a 	mov	r5,r4
1011032c:	42000204 	addi	r8,r8,8
10110330:	21000044 	addi	r4,r4,1
10110334:	003d9706 	br	1010f994 <_gp+0xfffee1c0>
10110338:	d9001d04 	addi	r4,sp,116
1011033c:	00800084 	movi	r2,2
10110340:	d9000015 	stw	r4,0(sp)
10110344:	d8800115 	stw	r2,4(sp)
10110348:	1809883a 	mov	r4,r3
1011034c:	d811883a 	mov	r8,sp
10110350:	200b883a 	mov	r5,r4
10110354:	42000204 	addi	r8,r8,8
10110358:	21000044 	addi	r4,r4,1
1011035c:	003f4e06 	br	10110098 <_gp+0xfffee8c4>
10110360:	d8001d85 	stb	zero,118(sp)
10110364:	48005016 	blt	r9,zero,101104a8 <___vfiprintf_internal_r+0x100c>
10110368:	00ffdfc4 	movi	r3,-129
1011036c:	94c4b03a 	or	r2,r18,r19
10110370:	a0e8703a 	and	r20,r20,r3
10110374:	103d4426 	beq	r2,zero,1010f888 <_gp+0xfffee0b4>
10110378:	0039883a 	mov	fp,zero
1011037c:	d9002617 	ldw	r4,152(sp)
10110380:	dd401a04 	addi	r21,sp,104
10110384:	908003cc 	andi	r2,r18,15
10110388:	9806973a 	slli	r3,r19,28
1011038c:	2085883a 	add	r2,r4,r2
10110390:	9024d13a 	srli	r18,r18,4
10110394:	10800003 	ldbu	r2,0(r2)
10110398:	9826d13a 	srli	r19,r19,4
1011039c:	ad7fffc4 	addi	r21,r21,-1
101103a0:	1ca4b03a 	or	r18,r3,r18
101103a4:	a8800005 	stb	r2,0(r21)
101103a8:	94c4b03a 	or	r2,r18,r19
101103ac:	103ff51e 	bne	r2,zero,10110384 <_gp+0xfffeebb0>
101103b0:	003e5906 	br	1010fd18 <_gp+0xfffee544>
101103b4:	d9402117 	ldw	r5,132(sp)
101103b8:	d9002017 	ldw	r4,128(sp)
101103bc:	d9801a04 	addi	r6,sp,104
101103c0:	010f3880 	call	1010f388 <__sprint_r.part.0>
101103c4:	103f891e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
101103c8:	d8801c17 	ldw	r2,112(sp)
101103cc:	d811883a 	mov	r8,sp
101103d0:	003f9506 	br	10110228 <_gp+0xfffeea54>
101103d4:	d9402117 	ldw	r5,132(sp)
101103d8:	d9002017 	ldw	r4,128(sp)
101103dc:	d9801a04 	addi	r6,sp,104
101103e0:	010f3880 	call	1010f388 <__sprint_r.part.0>
101103e4:	103f811e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
101103e8:	d811883a 	mov	r8,sp
101103ec:	003ced06 	br	1010f7a4 <_gp+0xfffedfd0>
101103f0:	d9402117 	ldw	r5,132(sp)
101103f4:	d9002017 	ldw	r4,128(sp)
101103f8:	d9801a04 	addi	r6,sp,104
101103fc:	da402c15 	stw	r9,176(sp)
10110400:	db802a15 	stw	r14,168(sp)
10110404:	010f3880 	call	1010f388 <__sprint_r.part.0>
10110408:	da402c17 	ldw	r9,176(sp)
1011040c:	db802a17 	ldw	r14,168(sp)
10110410:	103f761e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
10110414:	d9401b17 	ldw	r5,108(sp)
10110418:	d8801c17 	ldw	r2,112(sp)
1011041c:	d811883a 	mov	r8,sp
10110420:	29000044 	addi	r4,r5,1
10110424:	003d5b06 	br	1010f994 <_gp+0xfffee1c0>
10110428:	d9402117 	ldw	r5,132(sp)
1011042c:	d9002017 	ldw	r4,128(sp)
10110430:	d9801a04 	addi	r6,sp,104
10110434:	da402c15 	stw	r9,176(sp)
10110438:	010f3880 	call	1010f388 <__sprint_r.part.0>
1011043c:	da402c17 	ldw	r9,176(sp)
10110440:	103f6a1e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
10110444:	d9401b17 	ldw	r5,108(sp)
10110448:	d8801c17 	ldw	r2,112(sp)
1011044c:	d811883a 	mov	r8,sp
10110450:	29000044 	addi	r4,r5,1
10110454:	003f1006 	br	10110098 <_gp+0xfffee8c4>
10110458:	1000c31e 	bne	r2,zero,10110768 <___vfiprintf_internal_r+0x12cc>
1011045c:	01000044 	movi	r4,1
10110460:	000b883a 	mov	r5,zero
10110464:	d811883a 	mov	r8,sp
10110468:	003f0d06 	br	101100a0 <_gp+0xfffee8cc>
1011046c:	d9402117 	ldw	r5,132(sp)
10110470:	d9002017 	ldw	r4,128(sp)
10110474:	d9801a04 	addi	r6,sp,104
10110478:	010f3880 	call	1010f388 <__sprint_r.part.0>
1011047c:	103f5b1e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
10110480:	d9001b17 	ldw	r4,108(sp)
10110484:	d8801c17 	ldw	r2,112(sp)
10110488:	d811883a 	mov	r8,sp
1011048c:	21000044 	addi	r4,r4,1
10110490:	003d8006 	br	1010fa94 <_gp+0xfffee2c0>
10110494:	01040474 	movhi	r4,4113
10110498:	211e7804 	addi	r4,r4,31200
1011049c:	d9002615 	stw	r4,152(sp)
101104a0:	d8c02215 	stw	r3,136(sp)
101104a4:	1029883a 	mov	r20,r2
101104a8:	94c4b03a 	or	r2,r18,r19
101104ac:	103fb21e 	bne	r2,zero,10110378 <_gp+0xfffeeba4>
101104b0:	0039883a 	mov	fp,zero
101104b4:	00800084 	movi	r2,2
101104b8:	003e6b06 	br	1010fe68 <_gp+0xfffee694>
101104bc:	da802217 	ldw	r10,136(sp)
101104c0:	d8001d85 	stb	zero,118(sp)
101104c4:	0027883a 	mov	r19,zero
101104c8:	50800104 	addi	r2,r10,4
101104cc:	54800017 	ldw	r18,0(r10)
101104d0:	483e6016 	blt	r9,zero,1010fe54 <_gp+0xfffee680>
101104d4:	00ffdfc4 	movi	r3,-129
101104d8:	d8802215 	stw	r2,136(sp)
101104dc:	a0e8703a 	and	r20,r20,r3
101104e0:	0039883a 	mov	fp,zero
101104e4:	903ebb26 	beq	r18,zero,1010ffd4 <_gp+0xfffee800>
101104e8:	00800244 	movi	r2,9
101104ec:	14bdee36 	bltu	r2,r18,1010fca8 <_gp+0xfffee4d4>
101104f0:	003eba06 	br	1010ffdc <_gp+0xfffee808>
101104f4:	00800c04 	movi	r2,48
101104f8:	d8c01d45 	stb	r3,117(sp)
101104fc:	d8801d05 	stb	r2,116(sp)
10110500:	d8001d85 	stb	zero,118(sp)
10110504:	a0c00094 	ori	r3,r20,2
10110508:	4800a916 	blt	r9,zero,101107b0 <___vfiprintf_internal_r+0x1314>
1011050c:	00bfdfc4 	movi	r2,-129
10110510:	a096703a 	and	r11,r20,r2
10110514:	5d000094 	ori	r20,r11,2
10110518:	0039883a 	mov	fp,zero
1011051c:	003f9706 	br	1011037c <_gp+0xfffeeba8>
10110520:	8025883a 	mov	r18,r16
10110524:	003c2e06 	br	1010f5e0 <_gp+0xfffede0c>
10110528:	00840474 	movhi	r2,4113
1011052c:	109e7804 	addi	r2,r2,31200
10110530:	0039883a 	mov	fp,zero
10110534:	d8802615 	stw	r2,152(sp)
10110538:	003f9006 	br	1011037c <_gp+0xfffeeba8>
1011053c:	04a5c83a 	sub	r18,zero,r18
10110540:	07000b44 	movi	fp,45
10110544:	9004c03a 	cmpne	r2,r18,zero
10110548:	04e7c83a 	sub	r19,zero,r19
1011054c:	df001d85 	stb	fp,118(sp)
10110550:	98a7c83a 	sub	r19,r19,r2
10110554:	48009f16 	blt	r9,zero,101107d4 <___vfiprintf_internal_r+0x1338>
10110558:	00bfdfc4 	movi	r2,-129
1011055c:	a0a8703a 	and	r20,r20,r2
10110560:	003dd006 	br	1010fca4 <_gp+0xfffee4d0>
10110564:	70004c26 	beq	r14,zero,10110698 <___vfiprintf_internal_r+0x11fc>
10110568:	00800084 	movi	r2,2
1011056c:	d8c01d04 	addi	r3,sp,116
10110570:	d8c00015 	stw	r3,0(sp)
10110574:	d8800115 	stw	r2,4(sp)
10110578:	01000044 	movi	r4,1
1011057c:	d811883a 	mov	r8,sp
10110580:	003f7306 	br	10110350 <_gp+0xfffeeb7c>
10110584:	a080100c 	andi	r2,r20,64
10110588:	da802217 	ldw	r10,136(sp)
1011058c:	103e0626 	beq	r2,zero,1010fda8 <_gp+0xfffee5d4>
10110590:	5480000f 	ldh	r18,0(r10)
10110594:	52800104 	addi	r10,r10,4
10110598:	da802215 	stw	r10,136(sp)
1011059c:	9027d7fa 	srai	r19,r18,31
101105a0:	9805883a 	mov	r2,r19
101105a4:	003db806 	br	1010fc88 <_gp+0xfffee4b4>
101105a8:	a080040c 	andi	r2,r20,16
101105ac:	1000091e 	bne	r2,zero,101105d4 <___vfiprintf_internal_r+0x1138>
101105b0:	a2c0100c 	andi	r11,r20,64
101105b4:	58000726 	beq	r11,zero,101105d4 <___vfiprintf_internal_r+0x1138>
101105b8:	da802217 	ldw	r10,136(sp)
101105bc:	50800017 	ldw	r2,0(r10)
101105c0:	52800104 	addi	r10,r10,4
101105c4:	da802215 	stw	r10,136(sp)
101105c8:	da802317 	ldw	r10,140(sp)
101105cc:	1280000d 	sth	r10,0(r2)
101105d0:	003be706 	br	1010f570 <_gp+0xfffedd9c>
101105d4:	da802217 	ldw	r10,136(sp)
101105d8:	50800017 	ldw	r2,0(r10)
101105dc:	52800104 	addi	r10,r10,4
101105e0:	da802215 	stw	r10,136(sp)
101105e4:	da802317 	ldw	r10,140(sp)
101105e8:	12800015 	stw	r10,0(r2)
101105ec:	003be006 	br	1010f570 <_gp+0xfffedd9c>
101105f0:	a080100c 	andi	r2,r20,64
101105f4:	da802217 	ldw	r10,136(sp)
101105f8:	10003026 	beq	r2,zero,101106bc <___vfiprintf_internal_r+0x1220>
101105fc:	5480000b 	ldhu	r18,0(r10)
10110600:	52800104 	addi	r10,r10,4
10110604:	0027883a 	mov	r19,zero
10110608:	da802215 	stw	r10,136(sp)
1011060c:	003d8006 	br	1010fc10 <_gp+0xfffee43c>
10110610:	80c00007 	ldb	r3,0(r16)
10110614:	003c0006 	br	1010f618 <_gp+0xfffede44>
10110618:	a080100c 	andi	r2,r20,64
1011061c:	d8001d85 	stb	zero,118(sp)
10110620:	da802217 	ldw	r10,136(sp)
10110624:	1000201e 	bne	r2,zero,101106a8 <___vfiprintf_internal_r+0x120c>
10110628:	50800104 	addi	r2,r10,4
1011062c:	54800017 	ldw	r18,0(r10)
10110630:	0027883a 	mov	r19,zero
10110634:	483def0e 	bge	r9,zero,1010fdf4 <_gp+0xfffee620>
10110638:	94c6b03a 	or	r3,r18,r19
1011063c:	d8802215 	stw	r2,136(sp)
10110640:	183d4e1e 	bne	r3,zero,1010fb7c <_gp+0xfffee3a8>
10110644:	0039883a 	mov	fp,zero
10110648:	0005883a 	mov	r2,zero
1011064c:	003e0606 	br	1010fe68 <_gp+0xfffee694>
10110650:	d9402117 	ldw	r5,132(sp)
10110654:	d9002017 	ldw	r4,128(sp)
10110658:	d9801a04 	addi	r6,sp,104
1011065c:	da402c15 	stw	r9,176(sp)
10110660:	db802a15 	stw	r14,168(sp)
10110664:	010f3880 	call	1010f388 <__sprint_r.part.0>
10110668:	da402c17 	ldw	r9,176(sp)
1011066c:	db802a17 	ldw	r14,168(sp)
10110670:	103ede1e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
10110674:	d9401b17 	ldw	r5,108(sp)
10110678:	d8801c17 	ldw	r2,112(sp)
1011067c:	d811883a 	mov	r8,sp
10110680:	29000044 	addi	r4,r5,1
10110684:	003e7406 	br	10110058 <_gp+0xfffee884>
10110688:	00bfffc4 	movi	r2,-1
1011068c:	003c5806 	br	1010f7f0 <_gp+0xfffee01c>
10110690:	d811883a 	mov	r8,sp
10110694:	003ee806 	br	10110238 <_gp+0xfffeea64>
10110698:	000b883a 	mov	r5,zero
1011069c:	01000044 	movi	r4,1
101106a0:	d811883a 	mov	r8,sp
101106a4:	003e7c06 	br	10110098 <_gp+0xfffee8c4>
101106a8:	50800104 	addi	r2,r10,4
101106ac:	5480000b 	ldhu	r18,0(r10)
101106b0:	0027883a 	mov	r19,zero
101106b4:	483dcf0e 	bge	r9,zero,1010fdf4 <_gp+0xfffee620>
101106b8:	003fdf06 	br	10110638 <_gp+0xfffeee64>
101106bc:	54800017 	ldw	r18,0(r10)
101106c0:	52800104 	addi	r10,r10,4
101106c4:	0027883a 	mov	r19,zero
101106c8:	da802215 	stw	r10,136(sp)
101106cc:	003d5006 	br	1010fc10 <_gp+0xfffee43c>
101106d0:	50800104 	addi	r2,r10,4
101106d4:	5480000b 	ldhu	r18,0(r10)
101106d8:	0027883a 	mov	r19,zero
101106dc:	483f7d0e 	bge	r9,zero,101104d4 <_gp+0xfffeed00>
101106e0:	003ddc06 	br	1010fe54 <_gp+0xfffee680>
101106e4:	d8c02215 	stw	r3,136(sp)
101106e8:	0039883a 	mov	fp,zero
101106ec:	003ddb06 	br	1010fe5c <_gp+0xfffee688>
101106f0:	02840474 	movhi	r10,4113
101106f4:	529ee804 	addi	r10,r10,31648
101106f8:	da802415 	stw	r10,144(sp)
101106fc:	003e8306 	br	1011010c <_gp+0xfffee938>
10110700:	d8801c17 	ldw	r2,112(sp)
10110704:	dd002117 	ldw	r20,132(sp)
10110708:	103eb926 	beq	r2,zero,101101f0 <_gp+0xfffeea1c>
1011070c:	d9002017 	ldw	r4,128(sp)
10110710:	d9801a04 	addi	r6,sp,104
10110714:	a00b883a 	mov	r5,r20
10110718:	010f3880 	call	1010f388 <__sprint_r.part.0>
1011071c:	003eb406 	br	101101f0 <_gp+0xfffeea1c>
10110720:	80c00043 	ldbu	r3,1(r16)
10110724:	a5000814 	ori	r20,r20,32
10110728:	84000044 	addi	r16,r16,1
1011072c:	18c03fcc 	andi	r3,r3,255
10110730:	18c0201c 	xori	r3,r3,128
10110734:	18ffe004 	addi	r3,r3,-128
10110738:	003bb706 	br	1010f618 <_gp+0xfffede44>
1011073c:	a809883a 	mov	r4,r21
10110740:	d8c02a15 	stw	r3,168(sp)
10110744:	da002b15 	stw	r8,172(sp)
10110748:	01058d40 	call	101058d4 <strlen>
1011074c:	d8c02a17 	ldw	r3,168(sp)
10110750:	1027883a 	mov	r19,r2
10110754:	df001d83 	ldbu	fp,118(sp)
10110758:	d8c02215 	stw	r3,136(sp)
1011075c:	0013883a 	mov	r9,zero
10110760:	da002b17 	ldw	r8,172(sp)
10110764:	003c4d06 	br	1010f89c <_gp+0xfffee0c8>
10110768:	d9402117 	ldw	r5,132(sp)
1011076c:	d9002017 	ldw	r4,128(sp)
10110770:	d9801a04 	addi	r6,sp,104
10110774:	da402c15 	stw	r9,176(sp)
10110778:	010f3880 	call	1010f388 <__sprint_r.part.0>
1011077c:	da402c17 	ldw	r9,176(sp)
10110780:	103e9a1e 	bne	r2,zero,101101ec <_gp+0xfffeea18>
10110784:	d9401b17 	ldw	r5,108(sp)
10110788:	d8801c17 	ldw	r2,112(sp)
1011078c:	d811883a 	mov	r8,sp
10110790:	29000044 	addi	r4,r5,1
10110794:	003e4206 	br	101100a0 <_gp+0xfffee8cc>
10110798:	d9401b17 	ldw	r5,108(sp)
1011079c:	01040474 	movhi	r4,4113
101107a0:	211eec04 	addi	r4,r4,31664
101107a4:	d9002415 	stw	r4,144(sp)
101107a8:	29400044 	addi	r5,r5,1
101107ac:	003c6d06 	br	1010f964 <_gp+0xfffee190>
101107b0:	0039883a 	mov	fp,zero
101107b4:	00800084 	movi	r2,2
101107b8:	10803fcc 	andi	r2,r2,255
101107bc:	01000044 	movi	r4,1
101107c0:	11001e26 	beq	r2,r4,1011083c <___vfiprintf_internal_r+0x13a0>
101107c4:	01000084 	movi	r4,2
101107c8:	11001e1e 	bne	r2,r4,10110844 <___vfiprintf_internal_r+0x13a8>
101107cc:	1829883a 	mov	r20,r3
101107d0:	003eea06 	br	1011037c <_gp+0xfffeeba8>
101107d4:	a007883a 	mov	r3,r20
101107d8:	00800044 	movi	r2,1
101107dc:	003ff606 	br	101107b8 <_gp+0xfffeefe4>
101107e0:	00800184 	movi	r2,6
101107e4:	1240012e 	bgeu	r2,r9,101107ec <___vfiprintf_internal_r+0x1350>
101107e8:	1013883a 	mov	r9,r2
101107ec:	4827883a 	mov	r19,r9
101107f0:	4825883a 	mov	r18,r9
101107f4:	48001516 	blt	r9,zero,1011084c <___vfiprintf_internal_r+0x13b0>
101107f8:	05440474 	movhi	r21,4113
101107fc:	d8c02215 	stw	r3,136(sp)
10110800:	ad5e7d04 	addi	r21,r21,31220
10110804:	003d1406 	br	1010fc58 <_gp+0xfffee484>
10110808:	02840474 	movhi	r10,4113
1011080c:	529ee804 	addi	r10,r10,31648
10110810:	da802415 	stw	r10,144(sp)
10110814:	200d883a 	mov	r6,r4
10110818:	003c9106 	br	1010fa60 <_gp+0xfffee28c>
1011081c:	5021883a 	mov	r16,r10
10110820:	0013883a 	mov	r9,zero
10110824:	003b7d06 	br	1010f61c <_gp+0xfffede48>
10110828:	4827883a 	mov	r19,r9
1011082c:	df001d83 	ldbu	fp,118(sp)
10110830:	d8c02215 	stw	r3,136(sp)
10110834:	0013883a 	mov	r9,zero
10110838:	003c1806 	br	1010f89c <_gp+0xfffee0c8>
1011083c:	1829883a 	mov	r20,r3
10110840:	003d1806 	br	1010fca4 <_gp+0xfffee4d0>
10110844:	1829883a 	mov	r20,r3
10110848:	003ccd06 	br	1010fb80 <_gp+0xfffee3ac>
1011084c:	0025883a 	mov	r18,zero
10110850:	003fe906 	br	101107f8 <_gp+0xfffef024>
10110854:	d8802217 	ldw	r2,136(sp)
10110858:	80c00043 	ldbu	r3,1(r16)
1011085c:	5021883a 	mov	r16,r10
10110860:	12400017 	ldw	r9,0(r2)
10110864:	10800104 	addi	r2,r2,4
10110868:	d8802215 	stw	r2,136(sp)
1011086c:	483faf0e 	bge	r9,zero,1011072c <_gp+0xfffeef58>
10110870:	18c03fcc 	andi	r3,r3,255
10110874:	18c0201c 	xori	r3,r3,128
10110878:	027fffc4 	movi	r9,-1
1011087c:	18ffe004 	addi	r3,r3,-128
10110880:	003b6506 	br	1010f618 <_gp+0xfffede44>
10110884:	d9c01d85 	stb	r7,118(sp)
10110888:	003ca006 	br	1010fb0c <_gp+0xfffee338>
1011088c:	d9c01d85 	stb	r7,118(sp)
10110890:	003cad06 	br	1010fb48 <_gp+0xfffee374>
10110894:	d9c01d85 	stb	r7,118(sp)
10110898:	003d7d06 	br	1010fe90 <_gp+0xfffee6bc>
1011089c:	d9c01d85 	stb	r7,118(sp)
101108a0:	003d5f06 	br	1010fe20 <_gp+0xfffee64c>
101108a4:	a080004c 	andi	r2,r20,1
101108a8:	0039883a 	mov	fp,zero
101108ac:	10000526 	beq	r2,zero,101108c4 <___vfiprintf_internal_r+0x1428>
101108b0:	00800c04 	movi	r2,48
101108b4:	d88019c5 	stb	r2,103(sp)
101108b8:	dcc02717 	ldw	r19,156(sp)
101108bc:	dd4019c4 	addi	r21,sp,103
101108c0:	003bf606 	br	1010f89c <_gp+0xfffee0c8>
101108c4:	0027883a 	mov	r19,zero
101108c8:	dd401a04 	addi	r21,sp,104
101108cc:	003bf306 	br	1010f89c <_gp+0xfffee0c8>
101108d0:	d9c01d85 	stb	r7,118(sp)
101108d4:	003dc806 	br	1010fff8 <_gp+0xfffee824>
101108d8:	d9c01d85 	stb	r7,118(sp)
101108dc:	003d3a06 	br	1010fdc8 <_gp+0xfffee5f4>
101108e0:	d9c01d85 	stb	r7,118(sp)
101108e4:	003d2a06 	br	1010fd90 <_gp+0xfffee5bc>
101108e8:	d9c01d85 	stb	r7,118(sp)
101108ec:	003cde06 	br	1010fc68 <_gp+0xfffee494>
101108f0:	d9c01d85 	stb	r7,118(sp)
101108f4:	003cbc06 	br	1010fbe8 <_gp+0xfffee414>

101108f8 <__vfiprintf_internal>:
101108f8:	008404b4 	movhi	r2,4114
101108fc:	10a5f604 	addi	r2,r2,-26664
10110900:	300f883a 	mov	r7,r6
10110904:	280d883a 	mov	r6,r5
10110908:	200b883a 	mov	r5,r4
1011090c:	11000017 	ldw	r4,0(r2)
10110910:	010f49c1 	jmpi	1010f49c <___vfiprintf_internal_r>

10110914 <__sbprintf>:
10110914:	2880030b 	ldhu	r2,12(r5)
10110918:	2ac01917 	ldw	r11,100(r5)
1011091c:	2a80038b 	ldhu	r10,14(r5)
10110920:	2a400717 	ldw	r9,28(r5)
10110924:	2a000917 	ldw	r8,36(r5)
10110928:	defee204 	addi	sp,sp,-1144
1011092c:	00c10004 	movi	r3,1024
10110930:	dc011a15 	stw	r16,1128(sp)
10110934:	10bfff4c 	andi	r2,r2,65533
10110938:	2821883a 	mov	r16,r5
1011093c:	d8cb883a 	add	r5,sp,r3
10110940:	dc811c15 	stw	r18,1136(sp)
10110944:	dc411b15 	stw	r17,1132(sp)
10110948:	dfc11d15 	stw	ra,1140(sp)
1011094c:	2025883a 	mov	r18,r4
10110950:	d881030d 	sth	r2,1036(sp)
10110954:	dac11915 	stw	r11,1124(sp)
10110958:	da81038d 	sth	r10,1038(sp)
1011095c:	da410715 	stw	r9,1052(sp)
10110960:	da010915 	stw	r8,1060(sp)
10110964:	dec10015 	stw	sp,1024(sp)
10110968:	dec10415 	stw	sp,1040(sp)
1011096c:	d8c10215 	stw	r3,1032(sp)
10110970:	d8c10515 	stw	r3,1044(sp)
10110974:	d8010615 	stw	zero,1048(sp)
10110978:	010f49c0 	call	1010f49c <___vfiprintf_internal_r>
1011097c:	1023883a 	mov	r17,r2
10110980:	10000416 	blt	r2,zero,10110994 <__sbprintf+0x80>
10110984:	d9410004 	addi	r5,sp,1024
10110988:	9009883a 	mov	r4,r18
1011098c:	01035ec0 	call	101035ec <_fflush_r>
10110990:	10000d1e 	bne	r2,zero,101109c8 <__sbprintf+0xb4>
10110994:	d881030b 	ldhu	r2,1036(sp)
10110998:	1080100c 	andi	r2,r2,64
1011099c:	10000326 	beq	r2,zero,101109ac <__sbprintf+0x98>
101109a0:	8080030b 	ldhu	r2,12(r16)
101109a4:	10801014 	ori	r2,r2,64
101109a8:	8080030d 	sth	r2,12(r16)
101109ac:	8805883a 	mov	r2,r17
101109b0:	dfc11d17 	ldw	ra,1140(sp)
101109b4:	dc811c17 	ldw	r18,1136(sp)
101109b8:	dc411b17 	ldw	r17,1132(sp)
101109bc:	dc011a17 	ldw	r16,1128(sp)
101109c0:	dec11e04 	addi	sp,sp,1144
101109c4:	f800283a 	ret
101109c8:	047fffc4 	movi	r17,-1
101109cc:	003ff106 	br	10110994 <_gp+0xfffef1c0>

101109d0 <__swbuf_r>:
101109d0:	defffb04 	addi	sp,sp,-20
101109d4:	dcc00315 	stw	r19,12(sp)
101109d8:	dc800215 	stw	r18,8(sp)
101109dc:	dc000015 	stw	r16,0(sp)
101109e0:	dfc00415 	stw	ra,16(sp)
101109e4:	dc400115 	stw	r17,4(sp)
101109e8:	2025883a 	mov	r18,r4
101109ec:	2827883a 	mov	r19,r5
101109f0:	3021883a 	mov	r16,r6
101109f4:	20000226 	beq	r4,zero,10110a00 <__swbuf_r+0x30>
101109f8:	20800e17 	ldw	r2,56(r4)
101109fc:	10004226 	beq	r2,zero,10110b08 <__swbuf_r+0x138>
10110a00:	80800617 	ldw	r2,24(r16)
10110a04:	8100030b 	ldhu	r4,12(r16)
10110a08:	80800215 	stw	r2,8(r16)
10110a0c:	2080020c 	andi	r2,r4,8
10110a10:	10003626 	beq	r2,zero,10110aec <__swbuf_r+0x11c>
10110a14:	80c00417 	ldw	r3,16(r16)
10110a18:	18003426 	beq	r3,zero,10110aec <__swbuf_r+0x11c>
10110a1c:	2088000c 	andi	r2,r4,8192
10110a20:	9c403fcc 	andi	r17,r19,255
10110a24:	10001a26 	beq	r2,zero,10110a90 <__swbuf_r+0xc0>
10110a28:	80800017 	ldw	r2,0(r16)
10110a2c:	81000517 	ldw	r4,20(r16)
10110a30:	10c7c83a 	sub	r3,r2,r3
10110a34:	1900200e 	bge	r3,r4,10110ab8 <__swbuf_r+0xe8>
10110a38:	18c00044 	addi	r3,r3,1
10110a3c:	81000217 	ldw	r4,8(r16)
10110a40:	11400044 	addi	r5,r2,1
10110a44:	81400015 	stw	r5,0(r16)
10110a48:	213fffc4 	addi	r4,r4,-1
10110a4c:	81000215 	stw	r4,8(r16)
10110a50:	14c00005 	stb	r19,0(r2)
10110a54:	80800517 	ldw	r2,20(r16)
10110a58:	10c01e26 	beq	r2,r3,10110ad4 <__swbuf_r+0x104>
10110a5c:	8080030b 	ldhu	r2,12(r16)
10110a60:	1080004c 	andi	r2,r2,1
10110a64:	10000226 	beq	r2,zero,10110a70 <__swbuf_r+0xa0>
10110a68:	00800284 	movi	r2,10
10110a6c:	88801926 	beq	r17,r2,10110ad4 <__swbuf_r+0x104>
10110a70:	8805883a 	mov	r2,r17
10110a74:	dfc00417 	ldw	ra,16(sp)
10110a78:	dcc00317 	ldw	r19,12(sp)
10110a7c:	dc800217 	ldw	r18,8(sp)
10110a80:	dc400117 	ldw	r17,4(sp)
10110a84:	dc000017 	ldw	r16,0(sp)
10110a88:	dec00504 	addi	sp,sp,20
10110a8c:	f800283a 	ret
10110a90:	81401917 	ldw	r5,100(r16)
10110a94:	00b7ffc4 	movi	r2,-8193
10110a98:	21080014 	ori	r4,r4,8192
10110a9c:	2884703a 	and	r2,r5,r2
10110aa0:	80801915 	stw	r2,100(r16)
10110aa4:	80800017 	ldw	r2,0(r16)
10110aa8:	8100030d 	sth	r4,12(r16)
10110aac:	81000517 	ldw	r4,20(r16)
10110ab0:	10c7c83a 	sub	r3,r2,r3
10110ab4:	193fe016 	blt	r3,r4,10110a38 <_gp+0xfffef264>
10110ab8:	800b883a 	mov	r5,r16
10110abc:	9009883a 	mov	r4,r18
10110ac0:	01035ec0 	call	101035ec <_fflush_r>
10110ac4:	1000071e 	bne	r2,zero,10110ae4 <__swbuf_r+0x114>
10110ac8:	80800017 	ldw	r2,0(r16)
10110acc:	00c00044 	movi	r3,1
10110ad0:	003fda06 	br	10110a3c <_gp+0xfffef268>
10110ad4:	800b883a 	mov	r5,r16
10110ad8:	9009883a 	mov	r4,r18
10110adc:	01035ec0 	call	101035ec <_fflush_r>
10110ae0:	103fe326 	beq	r2,zero,10110a70 <_gp+0xfffef29c>
10110ae4:	00bfffc4 	movi	r2,-1
10110ae8:	003fe206 	br	10110a74 <_gp+0xfffef2a0>
10110aec:	800b883a 	mov	r5,r16
10110af0:	9009883a 	mov	r4,r18
10110af4:	0109edc0 	call	10109edc <__swsetup_r>
10110af8:	103ffa1e 	bne	r2,zero,10110ae4 <_gp+0xfffef310>
10110afc:	8100030b 	ldhu	r4,12(r16)
10110b00:	80c00417 	ldw	r3,16(r16)
10110b04:	003fc506 	br	10110a1c <_gp+0xfffef248>
10110b08:	01039c80 	call	101039c8 <__sinit>
10110b0c:	003fbc06 	br	10110a00 <_gp+0xfffef22c>

10110b10 <__swbuf>:
10110b10:	008404b4 	movhi	r2,4114
10110b14:	10a5f604 	addi	r2,r2,-26664
10110b18:	280d883a 	mov	r6,r5
10110b1c:	200b883a 	mov	r5,r4
10110b20:	11000017 	ldw	r4,0(r2)
10110b24:	01109d01 	jmpi	101109d0 <__swbuf_r>

10110b28 <_calloc_r>:
10110b28:	298b383a 	mul	r5,r5,r6
10110b2c:	defffe04 	addi	sp,sp,-8
10110b30:	dfc00115 	stw	ra,4(sp)
10110b34:	dc000015 	stw	r16,0(sp)
10110b38:	01049200 	call	10104920 <_malloc_r>
10110b3c:	10002926 	beq	r2,zero,10110be4 <_calloc_r+0xbc>
10110b40:	11bfff17 	ldw	r6,-4(r2)
10110b44:	1021883a 	mov	r16,r2
10110b48:	00bfff04 	movi	r2,-4
10110b4c:	308c703a 	and	r6,r6,r2
10110b50:	00c00904 	movi	r3,36
10110b54:	308d883a 	add	r6,r6,r2
10110b58:	19801636 	bltu	r3,r6,10110bb4 <_calloc_r+0x8c>
10110b5c:	008004c4 	movi	r2,19
10110b60:	11800b2e 	bgeu	r2,r6,10110b90 <_calloc_r+0x68>
10110b64:	80000015 	stw	zero,0(r16)
10110b68:	80000115 	stw	zero,4(r16)
10110b6c:	008006c4 	movi	r2,27
10110b70:	11801a2e 	bgeu	r2,r6,10110bdc <_calloc_r+0xb4>
10110b74:	80000215 	stw	zero,8(r16)
10110b78:	80000315 	stw	zero,12(r16)
10110b7c:	30c0151e 	bne	r6,r3,10110bd4 <_calloc_r+0xac>
10110b80:	80000415 	stw	zero,16(r16)
10110b84:	80800604 	addi	r2,r16,24
10110b88:	80000515 	stw	zero,20(r16)
10110b8c:	00000106 	br	10110b94 <_calloc_r+0x6c>
10110b90:	8005883a 	mov	r2,r16
10110b94:	10000015 	stw	zero,0(r2)
10110b98:	10000115 	stw	zero,4(r2)
10110b9c:	10000215 	stw	zero,8(r2)
10110ba0:	8005883a 	mov	r2,r16
10110ba4:	dfc00117 	ldw	ra,4(sp)
10110ba8:	dc000017 	ldw	r16,0(sp)
10110bac:	dec00204 	addi	sp,sp,8
10110bb0:	f800283a 	ret
10110bb4:	000b883a 	mov	r5,zero
10110bb8:	8009883a 	mov	r4,r16
10110bbc:	010512c0 	call	1010512c <memset>
10110bc0:	8005883a 	mov	r2,r16
10110bc4:	dfc00117 	ldw	ra,4(sp)
10110bc8:	dc000017 	ldw	r16,0(sp)
10110bcc:	dec00204 	addi	sp,sp,8
10110bd0:	f800283a 	ret
10110bd4:	80800404 	addi	r2,r16,16
10110bd8:	003fee06 	br	10110b94 <_gp+0xfffef3c0>
10110bdc:	80800204 	addi	r2,r16,8
10110be0:	003fec06 	br	10110b94 <_gp+0xfffef3c0>
10110be4:	0005883a 	mov	r2,zero
10110be8:	003fee06 	br	10110ba4 <_gp+0xfffef3d0>

10110bec <__fputwc>:
10110bec:	defff804 	addi	sp,sp,-32
10110bf0:	dcc00415 	stw	r19,16(sp)
10110bf4:	dc800315 	stw	r18,12(sp)
10110bf8:	dc000115 	stw	r16,4(sp)
10110bfc:	dfc00715 	stw	ra,28(sp)
10110c00:	dd400615 	stw	r21,24(sp)
10110c04:	dd000515 	stw	r20,20(sp)
10110c08:	dc400215 	stw	r17,8(sp)
10110c0c:	2027883a 	mov	r19,r4
10110c10:	2825883a 	mov	r18,r5
10110c14:	3021883a 	mov	r16,r6
10110c18:	010bfc40 	call	1010bfc4 <__locale_mb_cur_max>
10110c1c:	00c00044 	movi	r3,1
10110c20:	10c03e26 	beq	r2,r3,10110d1c <__fputwc+0x130>
10110c24:	81c01704 	addi	r7,r16,92
10110c28:	900d883a 	mov	r6,r18
10110c2c:	d80b883a 	mov	r5,sp
10110c30:	9809883a 	mov	r4,r19
10110c34:	0110df40 	call	10110df4 <_wcrtomb_r>
10110c38:	1029883a 	mov	r20,r2
10110c3c:	00bfffc4 	movi	r2,-1
10110c40:	a0802026 	beq	r20,r2,10110cc4 <__fputwc+0xd8>
10110c44:	d9400003 	ldbu	r5,0(sp)
10110c48:	a0001c26 	beq	r20,zero,10110cbc <__fputwc+0xd0>
10110c4c:	0023883a 	mov	r17,zero
10110c50:	05400284 	movi	r21,10
10110c54:	00000906 	br	10110c7c <__fputwc+0x90>
10110c58:	80800017 	ldw	r2,0(r16)
10110c5c:	11400005 	stb	r5,0(r2)
10110c60:	80c00017 	ldw	r3,0(r16)
10110c64:	18c00044 	addi	r3,r3,1
10110c68:	80c00015 	stw	r3,0(r16)
10110c6c:	8c400044 	addi	r17,r17,1
10110c70:	dc45883a 	add	r2,sp,r17
10110c74:	8d00112e 	bgeu	r17,r20,10110cbc <__fputwc+0xd0>
10110c78:	11400003 	ldbu	r5,0(r2)
10110c7c:	80c00217 	ldw	r3,8(r16)
10110c80:	18ffffc4 	addi	r3,r3,-1
10110c84:	80c00215 	stw	r3,8(r16)
10110c88:	183ff30e 	bge	r3,zero,10110c58 <_gp+0xfffef484>
10110c8c:	80800617 	ldw	r2,24(r16)
10110c90:	18801916 	blt	r3,r2,10110cf8 <__fputwc+0x10c>
10110c94:	80800017 	ldw	r2,0(r16)
10110c98:	11400005 	stb	r5,0(r2)
10110c9c:	80800017 	ldw	r2,0(r16)
10110ca0:	10c00003 	ldbu	r3,0(r2)
10110ca4:	10800044 	addi	r2,r2,1
10110ca8:	1d402326 	beq	r3,r21,10110d38 <__fputwc+0x14c>
10110cac:	80800015 	stw	r2,0(r16)
10110cb0:	8c400044 	addi	r17,r17,1
10110cb4:	dc45883a 	add	r2,sp,r17
10110cb8:	8d3fef36 	bltu	r17,r20,10110c78 <_gp+0xfffef4a4>
10110cbc:	9005883a 	mov	r2,r18
10110cc0:	00000406 	br	10110cd4 <__fputwc+0xe8>
10110cc4:	80c0030b 	ldhu	r3,12(r16)
10110cc8:	a005883a 	mov	r2,r20
10110ccc:	18c01014 	ori	r3,r3,64
10110cd0:	80c0030d 	sth	r3,12(r16)
10110cd4:	dfc00717 	ldw	ra,28(sp)
10110cd8:	dd400617 	ldw	r21,24(sp)
10110cdc:	dd000517 	ldw	r20,20(sp)
10110ce0:	dcc00417 	ldw	r19,16(sp)
10110ce4:	dc800317 	ldw	r18,12(sp)
10110ce8:	dc400217 	ldw	r17,8(sp)
10110cec:	dc000117 	ldw	r16,4(sp)
10110cf0:	dec00804 	addi	sp,sp,32
10110cf4:	f800283a 	ret
10110cf8:	800d883a 	mov	r6,r16
10110cfc:	29403fcc 	andi	r5,r5,255
10110d00:	9809883a 	mov	r4,r19
10110d04:	01109d00 	call	101109d0 <__swbuf_r>
10110d08:	10bfffe0 	cmpeqi	r2,r2,-1
10110d0c:	10803fcc 	andi	r2,r2,255
10110d10:	103fd626 	beq	r2,zero,10110c6c <_gp+0xfffef498>
10110d14:	00bfffc4 	movi	r2,-1
10110d18:	003fee06 	br	10110cd4 <_gp+0xfffef500>
10110d1c:	90ffffc4 	addi	r3,r18,-1
10110d20:	01003f84 	movi	r4,254
10110d24:	20ffbf36 	bltu	r4,r3,10110c24 <_gp+0xfffef450>
10110d28:	900b883a 	mov	r5,r18
10110d2c:	dc800005 	stb	r18,0(sp)
10110d30:	1029883a 	mov	r20,r2
10110d34:	003fc506 	br	10110c4c <_gp+0xfffef478>
10110d38:	800d883a 	mov	r6,r16
10110d3c:	a80b883a 	mov	r5,r21
10110d40:	9809883a 	mov	r4,r19
10110d44:	01109d00 	call	101109d0 <__swbuf_r>
10110d48:	10bfffe0 	cmpeqi	r2,r2,-1
10110d4c:	003fef06 	br	10110d0c <_gp+0xfffef538>

10110d50 <_fputwc_r>:
10110d50:	3080030b 	ldhu	r2,12(r6)
10110d54:	10c8000c 	andi	r3,r2,8192
10110d58:	1800051e 	bne	r3,zero,10110d70 <_fputwc_r+0x20>
10110d5c:	30c01917 	ldw	r3,100(r6)
10110d60:	10880014 	ori	r2,r2,8192
10110d64:	3080030d 	sth	r2,12(r6)
10110d68:	18880014 	ori	r2,r3,8192
10110d6c:	30801915 	stw	r2,100(r6)
10110d70:	0110bec1 	jmpi	10110bec <__fputwc>

10110d74 <fputwc>:
10110d74:	008404b4 	movhi	r2,4114
10110d78:	defffc04 	addi	sp,sp,-16
10110d7c:	10a5f604 	addi	r2,r2,-26664
10110d80:	dc000115 	stw	r16,4(sp)
10110d84:	14000017 	ldw	r16,0(r2)
10110d88:	dc400215 	stw	r17,8(sp)
10110d8c:	dfc00315 	stw	ra,12(sp)
10110d90:	2023883a 	mov	r17,r4
10110d94:	80000226 	beq	r16,zero,10110da0 <fputwc+0x2c>
10110d98:	80800e17 	ldw	r2,56(r16)
10110d9c:	10001026 	beq	r2,zero,10110de0 <fputwc+0x6c>
10110da0:	2880030b 	ldhu	r2,12(r5)
10110da4:	10c8000c 	andi	r3,r2,8192
10110da8:	1800051e 	bne	r3,zero,10110dc0 <fputwc+0x4c>
10110dac:	28c01917 	ldw	r3,100(r5)
10110db0:	10880014 	ori	r2,r2,8192
10110db4:	2880030d 	sth	r2,12(r5)
10110db8:	18880014 	ori	r2,r3,8192
10110dbc:	28801915 	stw	r2,100(r5)
10110dc0:	280d883a 	mov	r6,r5
10110dc4:	8009883a 	mov	r4,r16
10110dc8:	880b883a 	mov	r5,r17
10110dcc:	dfc00317 	ldw	ra,12(sp)
10110dd0:	dc400217 	ldw	r17,8(sp)
10110dd4:	dc000117 	ldw	r16,4(sp)
10110dd8:	dec00404 	addi	sp,sp,16
10110ddc:	0110bec1 	jmpi	10110bec <__fputwc>
10110de0:	8009883a 	mov	r4,r16
10110de4:	d9400015 	stw	r5,0(sp)
10110de8:	01039c80 	call	101039c8 <__sinit>
10110dec:	d9400017 	ldw	r5,0(sp)
10110df0:	003feb06 	br	10110da0 <_gp+0xfffef5cc>

10110df4 <_wcrtomb_r>:
10110df4:	defff604 	addi	sp,sp,-40
10110df8:	008404b4 	movhi	r2,4114
10110dfc:	dc800815 	stw	r18,32(sp)
10110e00:	dc400715 	stw	r17,28(sp)
10110e04:	dc000615 	stw	r16,24(sp)
10110e08:	10a5fa04 	addi	r2,r2,-26648
10110e0c:	dfc00915 	stw	ra,36(sp)
10110e10:	2021883a 	mov	r16,r4
10110e14:	3823883a 	mov	r17,r7
10110e18:	14800017 	ldw	r18,0(r2)
10110e1c:	28001426 	beq	r5,zero,10110e70 <_wcrtomb_r+0x7c>
10110e20:	d9400415 	stw	r5,16(sp)
10110e24:	d9800515 	stw	r6,20(sp)
10110e28:	010bfb80 	call	1010bfb8 <__locale_charset>
10110e2c:	d9800517 	ldw	r6,20(sp)
10110e30:	d9400417 	ldw	r5,16(sp)
10110e34:	100f883a 	mov	r7,r2
10110e38:	dc400015 	stw	r17,0(sp)
10110e3c:	8009883a 	mov	r4,r16
10110e40:	903ee83a 	callr	r18
10110e44:	00ffffc4 	movi	r3,-1
10110e48:	10c0031e 	bne	r2,r3,10110e58 <_wcrtomb_r+0x64>
10110e4c:	88000015 	stw	zero,0(r17)
10110e50:	00c02284 	movi	r3,138
10110e54:	80c00015 	stw	r3,0(r16)
10110e58:	dfc00917 	ldw	ra,36(sp)
10110e5c:	dc800817 	ldw	r18,32(sp)
10110e60:	dc400717 	ldw	r17,28(sp)
10110e64:	dc000617 	ldw	r16,24(sp)
10110e68:	dec00a04 	addi	sp,sp,40
10110e6c:	f800283a 	ret
10110e70:	010bfb80 	call	1010bfb8 <__locale_charset>
10110e74:	100f883a 	mov	r7,r2
10110e78:	dc400015 	stw	r17,0(sp)
10110e7c:	000d883a 	mov	r6,zero
10110e80:	d9400104 	addi	r5,sp,4
10110e84:	8009883a 	mov	r4,r16
10110e88:	903ee83a 	callr	r18
10110e8c:	003fed06 	br	10110e44 <_gp+0xfffef670>

10110e90 <wcrtomb>:
10110e90:	defff604 	addi	sp,sp,-40
10110e94:	008404b4 	movhi	r2,4114
10110e98:	dc800615 	stw	r18,24(sp)
10110e9c:	dc400515 	stw	r17,20(sp)
10110ea0:	10a5f604 	addi	r2,r2,-26664
10110ea4:	dfc00915 	stw	ra,36(sp)
10110ea8:	dd000815 	stw	r20,32(sp)
10110eac:	dcc00715 	stw	r19,28(sp)
10110eb0:	dc000415 	stw	r16,16(sp)
10110eb4:	3025883a 	mov	r18,r6
10110eb8:	14400017 	ldw	r17,0(r2)
10110ebc:	20001926 	beq	r4,zero,10110f24 <wcrtomb+0x94>
10110ec0:	008404b4 	movhi	r2,4114
10110ec4:	10a5fa04 	addi	r2,r2,-26648
10110ec8:	15000017 	ldw	r20,0(r2)
10110ecc:	2021883a 	mov	r16,r4
10110ed0:	2827883a 	mov	r19,r5
10110ed4:	010bfb80 	call	1010bfb8 <__locale_charset>
10110ed8:	100f883a 	mov	r7,r2
10110edc:	dc800015 	stw	r18,0(sp)
10110ee0:	980d883a 	mov	r6,r19
10110ee4:	800b883a 	mov	r5,r16
10110ee8:	8809883a 	mov	r4,r17
10110eec:	a03ee83a 	callr	r20
10110ef0:	00ffffc4 	movi	r3,-1
10110ef4:	10c0031e 	bne	r2,r3,10110f04 <wcrtomb+0x74>
10110ef8:	90000015 	stw	zero,0(r18)
10110efc:	00c02284 	movi	r3,138
10110f00:	88c00015 	stw	r3,0(r17)
10110f04:	dfc00917 	ldw	ra,36(sp)
10110f08:	dd000817 	ldw	r20,32(sp)
10110f0c:	dcc00717 	ldw	r19,28(sp)
10110f10:	dc800617 	ldw	r18,24(sp)
10110f14:	dc400517 	ldw	r17,20(sp)
10110f18:	dc000417 	ldw	r16,16(sp)
10110f1c:	dec00a04 	addi	sp,sp,40
10110f20:	f800283a 	ret
10110f24:	008404b4 	movhi	r2,4114
10110f28:	10a5fa04 	addi	r2,r2,-26648
10110f2c:	14000017 	ldw	r16,0(r2)
10110f30:	010bfb80 	call	1010bfb8 <__locale_charset>
10110f34:	100f883a 	mov	r7,r2
10110f38:	dc800015 	stw	r18,0(sp)
10110f3c:	000d883a 	mov	r6,zero
10110f40:	d9400104 	addi	r5,sp,4
10110f44:	8809883a 	mov	r4,r17
10110f48:	803ee83a 	callr	r16
10110f4c:	003fe806 	br	10110ef0 <_gp+0xfffef71c>

10110f50 <__ascii_wctomb>:
10110f50:	28000526 	beq	r5,zero,10110f68 <__ascii_wctomb+0x18>
10110f54:	00803fc4 	movi	r2,255
10110f58:	11800536 	bltu	r2,r6,10110f70 <__ascii_wctomb+0x20>
10110f5c:	29800005 	stb	r6,0(r5)
10110f60:	00800044 	movi	r2,1
10110f64:	f800283a 	ret
10110f68:	0005883a 	mov	r2,zero
10110f6c:	f800283a 	ret
10110f70:	00802284 	movi	r2,138
10110f74:	20800015 	stw	r2,0(r4)
10110f78:	00bfffc4 	movi	r2,-1
10110f7c:	f800283a 	ret

10110f80 <_wctomb_r>:
10110f80:	008404b4 	movhi	r2,4114
10110f84:	defff904 	addi	sp,sp,-28
10110f88:	10a5fa04 	addi	r2,r2,-26648
10110f8c:	dfc00615 	stw	ra,24(sp)
10110f90:	dc400515 	stw	r17,20(sp)
10110f94:	dc000415 	stw	r16,16(sp)
10110f98:	3823883a 	mov	r17,r7
10110f9c:	14000017 	ldw	r16,0(r2)
10110fa0:	d9000115 	stw	r4,4(sp)
10110fa4:	d9400215 	stw	r5,8(sp)
10110fa8:	d9800315 	stw	r6,12(sp)
10110fac:	010bfb80 	call	1010bfb8 <__locale_charset>
10110fb0:	d9800317 	ldw	r6,12(sp)
10110fb4:	d9400217 	ldw	r5,8(sp)
10110fb8:	d9000117 	ldw	r4,4(sp)
10110fbc:	100f883a 	mov	r7,r2
10110fc0:	dc400015 	stw	r17,0(sp)
10110fc4:	803ee83a 	callr	r16
10110fc8:	dfc00617 	ldw	ra,24(sp)
10110fcc:	dc400517 	ldw	r17,20(sp)
10110fd0:	dc000417 	ldw	r16,16(sp)
10110fd4:	dec00704 	addi	sp,sp,28
10110fd8:	f800283a 	ret

10110fdc <__muldi3>:
10110fdc:	223fffcc 	andi	r8,r4,65535
10110fe0:	2006d43a 	srli	r3,r4,16
10110fe4:	32bfffcc 	andi	r10,r6,65535
10110fe8:	3012d43a 	srli	r9,r6,16
10110fec:	4297383a 	mul	r11,r8,r10
10110ff0:	1a95383a 	mul	r10,r3,r10
10110ff4:	4251383a 	mul	r8,r8,r9
10110ff8:	5804d43a 	srli	r2,r11,16
10110ffc:	4291883a 	add	r8,r8,r10
10111000:	1205883a 	add	r2,r2,r8
10111004:	1a51383a 	mul	r8,r3,r9
10111008:	1280022e 	bgeu	r2,r10,10111014 <__muldi3+0x38>
1011100c:	00c00074 	movhi	r3,1
10111010:	40d1883a 	add	r8,r8,r3
10111014:	1006d43a 	srli	r3,r2,16
10111018:	21cf383a 	mul	r7,r4,r7
1011101c:	314b383a 	mul	r5,r6,r5
10111020:	1004943a 	slli	r2,r2,16
10111024:	1a11883a 	add	r8,r3,r8
10111028:	5affffcc 	andi	r11,r11,65535
1011102c:	3947883a 	add	r3,r7,r5
10111030:	12c5883a 	add	r2,r2,r11
10111034:	1a07883a 	add	r3,r3,r8
10111038:	f800283a 	ret

1011103c <__udivdi3>:
1011103c:	defff504 	addi	sp,sp,-44
10111040:	dcc00415 	stw	r19,16(sp)
10111044:	dc000115 	stw	r16,4(sp)
10111048:	dfc00a15 	stw	ra,40(sp)
1011104c:	df000915 	stw	fp,36(sp)
10111050:	ddc00815 	stw	r23,32(sp)
10111054:	dd800715 	stw	r22,28(sp)
10111058:	dd400615 	stw	r21,24(sp)
1011105c:	dd000515 	stw	r20,20(sp)
10111060:	dc800315 	stw	r18,12(sp)
10111064:	dc400215 	stw	r17,8(sp)
10111068:	2027883a 	mov	r19,r4
1011106c:	2821883a 	mov	r16,r5
10111070:	3800411e 	bne	r7,zero,10111178 <__udivdi3+0x13c>
10111074:	3023883a 	mov	r17,r6
10111078:	2025883a 	mov	r18,r4
1011107c:	2980522e 	bgeu	r5,r6,101111c8 <__udivdi3+0x18c>
10111080:	00bfffd4 	movui	r2,65535
10111084:	282d883a 	mov	r22,r5
10111088:	1180a836 	bltu	r2,r6,1011132c <__udivdi3+0x2f0>
1011108c:	00803fc4 	movi	r2,255
10111090:	1185803a 	cmpltu	r2,r2,r6
10111094:	100490fa 	slli	r2,r2,3
10111098:	3086d83a 	srl	r3,r6,r2
1011109c:	01040474 	movhi	r4,4113
101110a0:	211ef004 	addi	r4,r4,31680
101110a4:	20c7883a 	add	r3,r4,r3
101110a8:	18c00003 	ldbu	r3,0(r3)
101110ac:	1885883a 	add	r2,r3,r2
101110b0:	00c00804 	movi	r3,32
101110b4:	1887c83a 	sub	r3,r3,r2
101110b8:	18000526 	beq	r3,zero,101110d0 <__udivdi3+0x94>
101110bc:	80e0983a 	sll	r16,r16,r3
101110c0:	9884d83a 	srl	r2,r19,r2
101110c4:	30e2983a 	sll	r17,r6,r3
101110c8:	98e4983a 	sll	r18,r19,r3
101110cc:	142cb03a 	or	r22,r2,r16
101110d0:	882ad43a 	srli	r21,r17,16
101110d4:	b009883a 	mov	r4,r22
101110d8:	8d3fffcc 	andi	r20,r17,65535
101110dc:	a80b883a 	mov	r5,r21
101110e0:	01031f80 	call	101031f8 <__umodsi3>
101110e4:	b009883a 	mov	r4,r22
101110e8:	a80b883a 	mov	r5,r21
101110ec:	1027883a 	mov	r19,r2
101110f0:	01031940 	call	10103194 <__udivsi3>
101110f4:	102d883a 	mov	r22,r2
101110f8:	9826943a 	slli	r19,r19,16
101110fc:	9004d43a 	srli	r2,r18,16
10111100:	a5a1383a 	mul	r16,r20,r22
10111104:	14c4b03a 	or	r2,r2,r19
10111108:	1400052e 	bgeu	r2,r16,10111120 <__udivdi3+0xe4>
1011110c:	1445883a 	add	r2,r2,r17
10111110:	b0ffffc4 	addi	r3,r22,-1
10111114:	14400136 	bltu	r2,r17,1011111c <__udivdi3+0xe0>
10111118:	14012336 	bltu	r2,r16,101115a8 <__udivdi3+0x56c>
1011111c:	182d883a 	mov	r22,r3
10111120:	1421c83a 	sub	r16,r2,r16
10111124:	a80b883a 	mov	r5,r21
10111128:	8009883a 	mov	r4,r16
1011112c:	01031f80 	call	101031f8 <__umodsi3>
10111130:	1027883a 	mov	r19,r2
10111134:	a80b883a 	mov	r5,r21
10111138:	8009883a 	mov	r4,r16
1011113c:	01031940 	call	10103194 <__udivsi3>
10111140:	9826943a 	slli	r19,r19,16
10111144:	a0a9383a 	mul	r20,r20,r2
10111148:	94bfffcc 	andi	r18,r18,65535
1011114c:	94e4b03a 	or	r18,r18,r19
10111150:	9500052e 	bgeu	r18,r20,10111168 <__udivdi3+0x12c>
10111154:	8ca5883a 	add	r18,r17,r18
10111158:	10ffffc4 	addi	r3,r2,-1
1011115c:	9440f136 	bltu	r18,r17,10111524 <__udivdi3+0x4e8>
10111160:	9500f02e 	bgeu	r18,r20,10111524 <__udivdi3+0x4e8>
10111164:	10bfff84 	addi	r2,r2,-2
10111168:	b00c943a 	slli	r6,r22,16
1011116c:	0007883a 	mov	r3,zero
10111170:	3084b03a 	or	r2,r6,r2
10111174:	00005906 	br	101112dc <__udivdi3+0x2a0>
10111178:	29c05636 	bltu	r5,r7,101112d4 <__udivdi3+0x298>
1011117c:	00bfffd4 	movui	r2,65535
10111180:	11c0622e 	bgeu	r2,r7,1011130c <__udivdi3+0x2d0>
10111184:	00804034 	movhi	r2,256
10111188:	10bfffc4 	addi	r2,r2,-1
1011118c:	11c0ee36 	bltu	r2,r7,10111548 <__udivdi3+0x50c>
10111190:	00800404 	movi	r2,16
10111194:	3886d83a 	srl	r3,r7,r2
10111198:	01040474 	movhi	r4,4113
1011119c:	211ef004 	addi	r4,r4,31680
101111a0:	20c7883a 	add	r3,r4,r3
101111a4:	18c00003 	ldbu	r3,0(r3)
101111a8:	05400804 	movi	r21,32
101111ac:	1885883a 	add	r2,r3,r2
101111b0:	a8abc83a 	sub	r21,r21,r2
101111b4:	a800621e 	bne	r21,zero,10111340 <__udivdi3+0x304>
101111b8:	3c00e936 	bltu	r7,r16,10111560 <__udivdi3+0x524>
101111bc:	9985403a 	cmpgeu	r2,r19,r6
101111c0:	0007883a 	mov	r3,zero
101111c4:	00004506 	br	101112dc <__udivdi3+0x2a0>
101111c8:	3000041e 	bne	r6,zero,101111dc <__udivdi3+0x1a0>
101111cc:	000b883a 	mov	r5,zero
101111d0:	01000044 	movi	r4,1
101111d4:	01031940 	call	10103194 <__udivsi3>
101111d8:	1023883a 	mov	r17,r2
101111dc:	00bfffd4 	movui	r2,65535
101111e0:	14404e2e 	bgeu	r2,r17,1011131c <__udivdi3+0x2e0>
101111e4:	00804034 	movhi	r2,256
101111e8:	10bfffc4 	addi	r2,r2,-1
101111ec:	1440d836 	bltu	r2,r17,10111550 <__udivdi3+0x514>
101111f0:	00800404 	movi	r2,16
101111f4:	8886d83a 	srl	r3,r17,r2
101111f8:	01040474 	movhi	r4,4113
101111fc:	211ef004 	addi	r4,r4,31680
10111200:	20c7883a 	add	r3,r4,r3
10111204:	18c00003 	ldbu	r3,0(r3)
10111208:	1885883a 	add	r2,r3,r2
1011120c:	00c00804 	movi	r3,32
10111210:	1887c83a 	sub	r3,r3,r2
10111214:	18008f1e 	bne	r3,zero,10111454 <__udivdi3+0x418>
10111218:	882ad43a 	srli	r21,r17,16
1011121c:	8461c83a 	sub	r16,r16,r17
10111220:	8d3fffcc 	andi	r20,r17,65535
10111224:	00c00044 	movi	r3,1
10111228:	8009883a 	mov	r4,r16
1011122c:	a80b883a 	mov	r5,r21
10111230:	d8c00015 	stw	r3,0(sp)
10111234:	01031f80 	call	101031f8 <__umodsi3>
10111238:	8009883a 	mov	r4,r16
1011123c:	a80b883a 	mov	r5,r21
10111240:	1027883a 	mov	r19,r2
10111244:	01031940 	call	10103194 <__udivsi3>
10111248:	9826943a 	slli	r19,r19,16
1011124c:	9008d43a 	srli	r4,r18,16
10111250:	1521383a 	mul	r16,r2,r20
10111254:	102d883a 	mov	r22,r2
10111258:	24c8b03a 	or	r4,r4,r19
1011125c:	d8c00017 	ldw	r3,0(sp)
10111260:	2400052e 	bgeu	r4,r16,10111278 <__udivdi3+0x23c>
10111264:	2449883a 	add	r4,r4,r17
10111268:	b0bfffc4 	addi	r2,r22,-1
1011126c:	24400136 	bltu	r4,r17,10111274 <__udivdi3+0x238>
10111270:	2400ca36 	bltu	r4,r16,1011159c <__udivdi3+0x560>
10111274:	102d883a 	mov	r22,r2
10111278:	2421c83a 	sub	r16,r4,r16
1011127c:	a80b883a 	mov	r5,r21
10111280:	8009883a 	mov	r4,r16
10111284:	d8c00015 	stw	r3,0(sp)
10111288:	01031f80 	call	101031f8 <__umodsi3>
1011128c:	1027883a 	mov	r19,r2
10111290:	a80b883a 	mov	r5,r21
10111294:	8009883a 	mov	r4,r16
10111298:	01031940 	call	10103194 <__udivsi3>
1011129c:	9826943a 	slli	r19,r19,16
101112a0:	1529383a 	mul	r20,r2,r20
101112a4:	94bfffcc 	andi	r18,r18,65535
101112a8:	94e4b03a 	or	r18,r18,r19
101112ac:	d8c00017 	ldw	r3,0(sp)
101112b0:	9500052e 	bgeu	r18,r20,101112c8 <__udivdi3+0x28c>
101112b4:	8ca5883a 	add	r18,r17,r18
101112b8:	113fffc4 	addi	r4,r2,-1
101112bc:	94409736 	bltu	r18,r17,1011151c <__udivdi3+0x4e0>
101112c0:	9500962e 	bgeu	r18,r20,1011151c <__udivdi3+0x4e0>
101112c4:	10bfff84 	addi	r2,r2,-2
101112c8:	b00c943a 	slli	r6,r22,16
101112cc:	3084b03a 	or	r2,r6,r2
101112d0:	00000206 	br	101112dc <__udivdi3+0x2a0>
101112d4:	0007883a 	mov	r3,zero
101112d8:	0005883a 	mov	r2,zero
101112dc:	dfc00a17 	ldw	ra,40(sp)
101112e0:	df000917 	ldw	fp,36(sp)
101112e4:	ddc00817 	ldw	r23,32(sp)
101112e8:	dd800717 	ldw	r22,28(sp)
101112ec:	dd400617 	ldw	r21,24(sp)
101112f0:	dd000517 	ldw	r20,20(sp)
101112f4:	dcc00417 	ldw	r19,16(sp)
101112f8:	dc800317 	ldw	r18,12(sp)
101112fc:	dc400217 	ldw	r17,8(sp)
10111300:	dc000117 	ldw	r16,4(sp)
10111304:	dec00b04 	addi	sp,sp,44
10111308:	f800283a 	ret
1011130c:	00803fc4 	movi	r2,255
10111310:	11c5803a 	cmpltu	r2,r2,r7
10111314:	100490fa 	slli	r2,r2,3
10111318:	003f9e06 	br	10111194 <_gp+0xfffef9c0>
1011131c:	00803fc4 	movi	r2,255
10111320:	1445803a 	cmpltu	r2,r2,r17
10111324:	100490fa 	slli	r2,r2,3
10111328:	003fb206 	br	101111f4 <_gp+0xfffefa20>
1011132c:	00804034 	movhi	r2,256
10111330:	10bfffc4 	addi	r2,r2,-1
10111334:	11808836 	bltu	r2,r6,10111558 <__udivdi3+0x51c>
10111338:	00800404 	movi	r2,16
1011133c:	003f5606 	br	10111098 <_gp+0xfffef8c4>
10111340:	30aed83a 	srl	r23,r6,r2
10111344:	3d4e983a 	sll	r7,r7,r21
10111348:	80acd83a 	srl	r22,r16,r2
1011134c:	9884d83a 	srl	r2,r19,r2
10111350:	3deeb03a 	or	r23,r7,r23
10111354:	b824d43a 	srli	r18,r23,16
10111358:	8560983a 	sll	r16,r16,r21
1011135c:	b009883a 	mov	r4,r22
10111360:	900b883a 	mov	r5,r18
10111364:	3568983a 	sll	r20,r6,r21
10111368:	1420b03a 	or	r16,r2,r16
1011136c:	01031f80 	call	101031f8 <__umodsi3>
10111370:	b009883a 	mov	r4,r22
10111374:	900b883a 	mov	r5,r18
10111378:	1023883a 	mov	r17,r2
1011137c:	01031940 	call	10103194 <__udivsi3>
10111380:	8808943a 	slli	r4,r17,16
10111384:	bf3fffcc 	andi	fp,r23,65535
10111388:	8006d43a 	srli	r3,r16,16
1011138c:	e0a3383a 	mul	r17,fp,r2
10111390:	100d883a 	mov	r6,r2
10111394:	1906b03a 	or	r3,r3,r4
10111398:	1c40042e 	bgeu	r3,r17,101113ac <__udivdi3+0x370>
1011139c:	1dc7883a 	add	r3,r3,r23
101113a0:	10bfffc4 	addi	r2,r2,-1
101113a4:	1dc0752e 	bgeu	r3,r23,1011157c <__udivdi3+0x540>
101113a8:	100d883a 	mov	r6,r2
101113ac:	1c63c83a 	sub	r17,r3,r17
101113b0:	900b883a 	mov	r5,r18
101113b4:	8809883a 	mov	r4,r17
101113b8:	d9800015 	stw	r6,0(sp)
101113bc:	01031f80 	call	101031f8 <__umodsi3>
101113c0:	102d883a 	mov	r22,r2
101113c4:	8809883a 	mov	r4,r17
101113c8:	900b883a 	mov	r5,r18
101113cc:	01031940 	call	10103194 <__udivsi3>
101113d0:	b02c943a 	slli	r22,r22,16
101113d4:	e089383a 	mul	r4,fp,r2
101113d8:	843fffcc 	andi	r16,r16,65535
101113dc:	85a0b03a 	or	r16,r16,r22
101113e0:	d9800017 	ldw	r6,0(sp)
101113e4:	8100042e 	bgeu	r16,r4,101113f8 <__udivdi3+0x3bc>
101113e8:	85e1883a 	add	r16,r16,r23
101113ec:	10ffffc4 	addi	r3,r2,-1
101113f0:	85c05e2e 	bgeu	r16,r23,1011156c <__udivdi3+0x530>
101113f4:	1805883a 	mov	r2,r3
101113f8:	300c943a 	slli	r6,r6,16
101113fc:	a17fffcc 	andi	r5,r20,65535
10111400:	a028d43a 	srli	r20,r20,16
10111404:	3084b03a 	or	r2,r6,r2
10111408:	10ffffcc 	andi	r3,r2,65535
1011140c:	100cd43a 	srli	r6,r2,16
10111410:	194f383a 	mul	r7,r3,r5
10111414:	1d07383a 	mul	r3,r3,r20
10111418:	314b383a 	mul	r5,r6,r5
1011141c:	3810d43a 	srli	r8,r7,16
10111420:	8121c83a 	sub	r16,r16,r4
10111424:	1947883a 	add	r3,r3,r5
10111428:	40c7883a 	add	r3,r8,r3
1011142c:	350d383a 	mul	r6,r6,r20
10111430:	1940022e 	bgeu	r3,r5,1011143c <__udivdi3+0x400>
10111434:	01000074 	movhi	r4,1
10111438:	310d883a 	add	r6,r6,r4
1011143c:	1828d43a 	srli	r20,r3,16
10111440:	a18d883a 	add	r6,r20,r6
10111444:	81803e36 	bltu	r16,r6,10111540 <__udivdi3+0x504>
10111448:	81803826 	beq	r16,r6,1011152c <__udivdi3+0x4f0>
1011144c:	0007883a 	mov	r3,zero
10111450:	003fa206 	br	101112dc <_gp+0xfffefb08>
10111454:	88e2983a 	sll	r17,r17,r3
10111458:	80a8d83a 	srl	r20,r16,r2
1011145c:	80e0983a 	sll	r16,r16,r3
10111460:	882ad43a 	srli	r21,r17,16
10111464:	9884d83a 	srl	r2,r19,r2
10111468:	a009883a 	mov	r4,r20
1011146c:	a80b883a 	mov	r5,r21
10111470:	142eb03a 	or	r23,r2,r16
10111474:	98e4983a 	sll	r18,r19,r3
10111478:	01031f80 	call	101031f8 <__umodsi3>
1011147c:	a009883a 	mov	r4,r20
10111480:	a80b883a 	mov	r5,r21
10111484:	1021883a 	mov	r16,r2
10111488:	01031940 	call	10103194 <__udivsi3>
1011148c:	1039883a 	mov	fp,r2
10111490:	8d3fffcc 	andi	r20,r17,65535
10111494:	8020943a 	slli	r16,r16,16
10111498:	b804d43a 	srli	r2,r23,16
1011149c:	a72d383a 	mul	r22,r20,fp
101114a0:	1404b03a 	or	r2,r2,r16
101114a4:	1580062e 	bgeu	r2,r22,101114c0 <__udivdi3+0x484>
101114a8:	1445883a 	add	r2,r2,r17
101114ac:	e0ffffc4 	addi	r3,fp,-1
101114b0:	14403836 	bltu	r2,r17,10111594 <__udivdi3+0x558>
101114b4:	1580372e 	bgeu	r2,r22,10111594 <__udivdi3+0x558>
101114b8:	e73fff84 	addi	fp,fp,-2
101114bc:	1445883a 	add	r2,r2,r17
101114c0:	15adc83a 	sub	r22,r2,r22
101114c4:	a80b883a 	mov	r5,r21
101114c8:	b009883a 	mov	r4,r22
101114cc:	01031f80 	call	101031f8 <__umodsi3>
101114d0:	1027883a 	mov	r19,r2
101114d4:	b009883a 	mov	r4,r22
101114d8:	a80b883a 	mov	r5,r21
101114dc:	01031940 	call	10103194 <__udivsi3>
101114e0:	9826943a 	slli	r19,r19,16
101114e4:	a0a1383a 	mul	r16,r20,r2
101114e8:	b93fffcc 	andi	r4,r23,65535
101114ec:	24c8b03a 	or	r4,r4,r19
101114f0:	2400062e 	bgeu	r4,r16,1011150c <__udivdi3+0x4d0>
101114f4:	2449883a 	add	r4,r4,r17
101114f8:	10ffffc4 	addi	r3,r2,-1
101114fc:	24402336 	bltu	r4,r17,1011158c <__udivdi3+0x550>
10111500:	2400222e 	bgeu	r4,r16,1011158c <__udivdi3+0x550>
10111504:	10bfff84 	addi	r2,r2,-2
10111508:	2449883a 	add	r4,r4,r17
1011150c:	e038943a 	slli	fp,fp,16
10111510:	2421c83a 	sub	r16,r4,r16
10111514:	e086b03a 	or	r3,fp,r2
10111518:	003f4306 	br	10111228 <_gp+0xfffefa54>
1011151c:	2005883a 	mov	r2,r4
10111520:	003f6906 	br	101112c8 <_gp+0xfffefaf4>
10111524:	1805883a 	mov	r2,r3
10111528:	003f0f06 	br	10111168 <_gp+0xfffef994>
1011152c:	1806943a 	slli	r3,r3,16
10111530:	9d66983a 	sll	r19,r19,r21
10111534:	39ffffcc 	andi	r7,r7,65535
10111538:	19c7883a 	add	r3,r3,r7
1011153c:	98ffc32e 	bgeu	r19,r3,1011144c <_gp+0xfffefc78>
10111540:	10bfffc4 	addi	r2,r2,-1
10111544:	003fc106 	br	1011144c <_gp+0xfffefc78>
10111548:	00800604 	movi	r2,24
1011154c:	003f1106 	br	10111194 <_gp+0xfffef9c0>
10111550:	00800604 	movi	r2,24
10111554:	003f2706 	br	101111f4 <_gp+0xfffefa20>
10111558:	00800604 	movi	r2,24
1011155c:	003ece06 	br	10111098 <_gp+0xfffef8c4>
10111560:	0007883a 	mov	r3,zero
10111564:	00800044 	movi	r2,1
10111568:	003f5c06 	br	101112dc <_gp+0xfffefb08>
1011156c:	813fa12e 	bgeu	r16,r4,101113f4 <_gp+0xfffefc20>
10111570:	10bfff84 	addi	r2,r2,-2
10111574:	85e1883a 	add	r16,r16,r23
10111578:	003f9f06 	br	101113f8 <_gp+0xfffefc24>
1011157c:	1c7f8a2e 	bgeu	r3,r17,101113a8 <_gp+0xfffefbd4>
10111580:	31bfff84 	addi	r6,r6,-2
10111584:	1dc7883a 	add	r3,r3,r23
10111588:	003f8806 	br	101113ac <_gp+0xfffefbd8>
1011158c:	1805883a 	mov	r2,r3
10111590:	003fde06 	br	1011150c <_gp+0xfffefd38>
10111594:	1839883a 	mov	fp,r3
10111598:	003fc906 	br	101114c0 <_gp+0xfffefcec>
1011159c:	b5bfff84 	addi	r22,r22,-2
101115a0:	2449883a 	add	r4,r4,r17
101115a4:	003f3406 	br	10111278 <_gp+0xfffefaa4>
101115a8:	b5bfff84 	addi	r22,r22,-2
101115ac:	1445883a 	add	r2,r2,r17
101115b0:	003edb06 	br	10111120 <_gp+0xfffef94c>

101115b4 <__umoddi3>:
101115b4:	defff404 	addi	sp,sp,-48
101115b8:	df000a15 	stw	fp,40(sp)
101115bc:	dc400315 	stw	r17,12(sp)
101115c0:	dc000215 	stw	r16,8(sp)
101115c4:	dfc00b15 	stw	ra,44(sp)
101115c8:	ddc00915 	stw	r23,36(sp)
101115cc:	dd800815 	stw	r22,32(sp)
101115d0:	dd400715 	stw	r21,28(sp)
101115d4:	dd000615 	stw	r20,24(sp)
101115d8:	dcc00515 	stw	r19,20(sp)
101115dc:	dc800415 	stw	r18,16(sp)
101115e0:	2021883a 	mov	r16,r4
101115e4:	2823883a 	mov	r17,r5
101115e8:	2839883a 	mov	fp,r5
101115ec:	38003c1e 	bne	r7,zero,101116e0 <__umoddi3+0x12c>
101115f0:	3027883a 	mov	r19,r6
101115f4:	2029883a 	mov	r20,r4
101115f8:	2980512e 	bgeu	r5,r6,10111740 <__umoddi3+0x18c>
101115fc:	00bfffd4 	movui	r2,65535
10111600:	11809a36 	bltu	r2,r6,1011186c <__umoddi3+0x2b8>
10111604:	01003fc4 	movi	r4,255
10111608:	2189803a 	cmpltu	r4,r4,r6
1011160c:	200890fa 	slli	r4,r4,3
10111610:	3104d83a 	srl	r2,r6,r4
10111614:	00c40474 	movhi	r3,4113
10111618:	18def004 	addi	r3,r3,31680
1011161c:	1885883a 	add	r2,r3,r2
10111620:	10c00003 	ldbu	r3,0(r2)
10111624:	00800804 	movi	r2,32
10111628:	1909883a 	add	r4,r3,r4
1011162c:	1125c83a 	sub	r18,r2,r4
10111630:	90000526 	beq	r18,zero,10111648 <__umoddi3+0x94>
10111634:	8ca2983a 	sll	r17,r17,r18
10111638:	8108d83a 	srl	r4,r16,r4
1011163c:	34a6983a 	sll	r19,r6,r18
10111640:	84a8983a 	sll	r20,r16,r18
10111644:	2478b03a 	or	fp,r4,r17
10111648:	982ed43a 	srli	r23,r19,16
1011164c:	e009883a 	mov	r4,fp
10111650:	9dbfffcc 	andi	r22,r19,65535
10111654:	b80b883a 	mov	r5,r23
10111658:	01031f80 	call	101031f8 <__umodsi3>
1011165c:	e009883a 	mov	r4,fp
10111660:	b80b883a 	mov	r5,r23
10111664:	102b883a 	mov	r21,r2
10111668:	01031940 	call	10103194 <__udivsi3>
1011166c:	a806943a 	slli	r3,r21,16
10111670:	a008d43a 	srli	r4,r20,16
10111674:	b085383a 	mul	r2,r22,r2
10111678:	20c8b03a 	or	r4,r4,r3
1011167c:	2080032e 	bgeu	r4,r2,1011168c <__umoddi3+0xd8>
10111680:	24c9883a 	add	r4,r4,r19
10111684:	24c00136 	bltu	r4,r19,1011168c <__umoddi3+0xd8>
10111688:	20811036 	bltu	r4,r2,10111acc <__umoddi3+0x518>
1011168c:	20abc83a 	sub	r21,r4,r2
10111690:	b80b883a 	mov	r5,r23
10111694:	a809883a 	mov	r4,r21
10111698:	01031f80 	call	101031f8 <__umodsi3>
1011169c:	1023883a 	mov	r17,r2
101116a0:	b80b883a 	mov	r5,r23
101116a4:	a809883a 	mov	r4,r21
101116a8:	01031940 	call	10103194 <__udivsi3>
101116ac:	8822943a 	slli	r17,r17,16
101116b0:	b085383a 	mul	r2,r22,r2
101116b4:	a0ffffcc 	andi	r3,r20,65535
101116b8:	1c46b03a 	or	r3,r3,r17
101116bc:	1880042e 	bgeu	r3,r2,101116d0 <__umoddi3+0x11c>
101116c0:	1cc7883a 	add	r3,r3,r19
101116c4:	1cc00236 	bltu	r3,r19,101116d0 <__umoddi3+0x11c>
101116c8:	1880012e 	bgeu	r3,r2,101116d0 <__umoddi3+0x11c>
101116cc:	1cc7883a 	add	r3,r3,r19
101116d0:	1885c83a 	sub	r2,r3,r2
101116d4:	1484d83a 	srl	r2,r2,r18
101116d8:	0007883a 	mov	r3,zero
101116dc:	00004f06 	br	1011181c <__umoddi3+0x268>
101116e0:	29c04c36 	bltu	r5,r7,10111814 <__umoddi3+0x260>
101116e4:	00bfffd4 	movui	r2,65535
101116e8:	11c0582e 	bgeu	r2,r7,1011184c <__umoddi3+0x298>
101116ec:	00804034 	movhi	r2,256
101116f0:	10bfffc4 	addi	r2,r2,-1
101116f4:	11c0e736 	bltu	r2,r7,10111a94 <__umoddi3+0x4e0>
101116f8:	01000404 	movi	r4,16
101116fc:	3904d83a 	srl	r2,r7,r4
10111700:	00c40474 	movhi	r3,4113
10111704:	18def004 	addi	r3,r3,31680
10111708:	1885883a 	add	r2,r3,r2
1011170c:	14c00003 	ldbu	r19,0(r2)
10111710:	00c00804 	movi	r3,32
10111714:	9927883a 	add	r19,r19,r4
10111718:	1ce9c83a 	sub	r20,r3,r19
1011171c:	a000581e 	bne	r20,zero,10111880 <__umoddi3+0x2cc>
10111720:	3c400136 	bltu	r7,r17,10111728 <__umoddi3+0x174>
10111724:	8180eb36 	bltu	r16,r6,10111ad4 <__umoddi3+0x520>
10111728:	8185c83a 	sub	r2,r16,r6
1011172c:	89e3c83a 	sub	r17,r17,r7
10111730:	8089803a 	cmpltu	r4,r16,r2
10111734:	8939c83a 	sub	fp,r17,r4
10111738:	e007883a 	mov	r3,fp
1011173c:	00003706 	br	1011181c <__umoddi3+0x268>
10111740:	3000041e 	bne	r6,zero,10111754 <__umoddi3+0x1a0>
10111744:	000b883a 	mov	r5,zero
10111748:	01000044 	movi	r4,1
1011174c:	01031940 	call	10103194 <__udivsi3>
10111750:	1027883a 	mov	r19,r2
10111754:	00bfffd4 	movui	r2,65535
10111758:	14c0402e 	bgeu	r2,r19,1011185c <__umoddi3+0x2a8>
1011175c:	00804034 	movhi	r2,256
10111760:	10bfffc4 	addi	r2,r2,-1
10111764:	14c0cd36 	bltu	r2,r19,10111a9c <__umoddi3+0x4e8>
10111768:	00800404 	movi	r2,16
1011176c:	9886d83a 	srl	r3,r19,r2
10111770:	01040474 	movhi	r4,4113
10111774:	211ef004 	addi	r4,r4,31680
10111778:	20c7883a 	add	r3,r4,r3
1011177c:	18c00003 	ldbu	r3,0(r3)
10111780:	1887883a 	add	r3,r3,r2
10111784:	00800804 	movi	r2,32
10111788:	10e5c83a 	sub	r18,r2,r3
1011178c:	9000901e 	bne	r18,zero,101119d0 <__umoddi3+0x41c>
10111790:	982cd43a 	srli	r22,r19,16
10111794:	8ce3c83a 	sub	r17,r17,r19
10111798:	9d7fffcc 	andi	r21,r19,65535
1011179c:	b00b883a 	mov	r5,r22
101117a0:	8809883a 	mov	r4,r17
101117a4:	01031f80 	call	101031f8 <__umodsi3>
101117a8:	8809883a 	mov	r4,r17
101117ac:	b00b883a 	mov	r5,r22
101117b0:	1021883a 	mov	r16,r2
101117b4:	01031940 	call	10103194 <__udivsi3>
101117b8:	8006943a 	slli	r3,r16,16
101117bc:	a008d43a 	srli	r4,r20,16
101117c0:	1545383a 	mul	r2,r2,r21
101117c4:	20c8b03a 	or	r4,r4,r3
101117c8:	2080042e 	bgeu	r4,r2,101117dc <__umoddi3+0x228>
101117cc:	24c9883a 	add	r4,r4,r19
101117d0:	24c00236 	bltu	r4,r19,101117dc <__umoddi3+0x228>
101117d4:	2080012e 	bgeu	r4,r2,101117dc <__umoddi3+0x228>
101117d8:	24c9883a 	add	r4,r4,r19
101117dc:	20a1c83a 	sub	r16,r4,r2
101117e0:	b00b883a 	mov	r5,r22
101117e4:	8009883a 	mov	r4,r16
101117e8:	01031f80 	call	101031f8 <__umodsi3>
101117ec:	1023883a 	mov	r17,r2
101117f0:	b00b883a 	mov	r5,r22
101117f4:	8009883a 	mov	r4,r16
101117f8:	01031940 	call	10103194 <__udivsi3>
101117fc:	8822943a 	slli	r17,r17,16
10111800:	1545383a 	mul	r2,r2,r21
10111804:	a53fffcc 	andi	r20,r20,65535
10111808:	a446b03a 	or	r3,r20,r17
1011180c:	18bfb02e 	bgeu	r3,r2,101116d0 <_gp+0xfffefefc>
10111810:	003fab06 	br	101116c0 <_gp+0xfffefeec>
10111814:	2005883a 	mov	r2,r4
10111818:	2807883a 	mov	r3,r5
1011181c:	dfc00b17 	ldw	ra,44(sp)
10111820:	df000a17 	ldw	fp,40(sp)
10111824:	ddc00917 	ldw	r23,36(sp)
10111828:	dd800817 	ldw	r22,32(sp)
1011182c:	dd400717 	ldw	r21,28(sp)
10111830:	dd000617 	ldw	r20,24(sp)
10111834:	dcc00517 	ldw	r19,20(sp)
10111838:	dc800417 	ldw	r18,16(sp)
1011183c:	dc400317 	ldw	r17,12(sp)
10111840:	dc000217 	ldw	r16,8(sp)
10111844:	dec00c04 	addi	sp,sp,48
10111848:	f800283a 	ret
1011184c:	04c03fc4 	movi	r19,255
10111850:	99c9803a 	cmpltu	r4,r19,r7
10111854:	200890fa 	slli	r4,r4,3
10111858:	003fa806 	br	101116fc <_gp+0xfffeff28>
1011185c:	00803fc4 	movi	r2,255
10111860:	14c5803a 	cmpltu	r2,r2,r19
10111864:	100490fa 	slli	r2,r2,3
10111868:	003fc006 	br	1011176c <_gp+0xfffeff98>
1011186c:	00804034 	movhi	r2,256
10111870:	10bfffc4 	addi	r2,r2,-1
10111874:	11808b36 	bltu	r2,r6,10111aa4 <__umoddi3+0x4f0>
10111878:	01000404 	movi	r4,16
1011187c:	003f6406 	br	10111610 <_gp+0xfffefe3c>
10111880:	34c4d83a 	srl	r2,r6,r19
10111884:	3d0e983a 	sll	r7,r7,r20
10111888:	8cf8d83a 	srl	fp,r17,r19
1011188c:	8d10983a 	sll	r8,r17,r20
10111890:	38aab03a 	or	r21,r7,r2
10111894:	a82cd43a 	srli	r22,r21,16
10111898:	84e2d83a 	srl	r17,r16,r19
1011189c:	e009883a 	mov	r4,fp
101118a0:	b00b883a 	mov	r5,r22
101118a4:	8a22b03a 	or	r17,r17,r8
101118a8:	3524983a 	sll	r18,r6,r20
101118ac:	01031f80 	call	101031f8 <__umodsi3>
101118b0:	e009883a 	mov	r4,fp
101118b4:	b00b883a 	mov	r5,r22
101118b8:	102f883a 	mov	r23,r2
101118bc:	01031940 	call	10103194 <__udivsi3>
101118c0:	100d883a 	mov	r6,r2
101118c4:	b808943a 	slli	r4,r23,16
101118c8:	aa3fffcc 	andi	r8,r21,65535
101118cc:	8804d43a 	srli	r2,r17,16
101118d0:	41af383a 	mul	r23,r8,r6
101118d4:	8520983a 	sll	r16,r16,r20
101118d8:	1104b03a 	or	r2,r2,r4
101118dc:	15c0042e 	bgeu	r2,r23,101118f0 <__umoddi3+0x33c>
101118e0:	1545883a 	add	r2,r2,r21
101118e4:	30ffffc4 	addi	r3,r6,-1
101118e8:	1540742e 	bgeu	r2,r21,10111abc <__umoddi3+0x508>
101118ec:	180d883a 	mov	r6,r3
101118f0:	15efc83a 	sub	r23,r2,r23
101118f4:	b00b883a 	mov	r5,r22
101118f8:	b809883a 	mov	r4,r23
101118fc:	d9800115 	stw	r6,4(sp)
10111900:	da000015 	stw	r8,0(sp)
10111904:	01031f80 	call	101031f8 <__umodsi3>
10111908:	b00b883a 	mov	r5,r22
1011190c:	b809883a 	mov	r4,r23
10111910:	1039883a 	mov	fp,r2
10111914:	01031940 	call	10103194 <__udivsi3>
10111918:	da000017 	ldw	r8,0(sp)
1011191c:	e038943a 	slli	fp,fp,16
10111920:	100b883a 	mov	r5,r2
10111924:	4089383a 	mul	r4,r8,r2
10111928:	8a3fffcc 	andi	r8,r17,65535
1011192c:	4710b03a 	or	r8,r8,fp
10111930:	d9800117 	ldw	r6,4(sp)
10111934:	4100042e 	bgeu	r8,r4,10111948 <__umoddi3+0x394>
10111938:	4551883a 	add	r8,r8,r21
1011193c:	10bfffc4 	addi	r2,r2,-1
10111940:	45405a2e 	bgeu	r8,r21,10111aac <__umoddi3+0x4f8>
10111944:	100b883a 	mov	r5,r2
10111948:	300c943a 	slli	r6,r6,16
1011194c:	91ffffcc 	andi	r7,r18,65535
10111950:	9004d43a 	srli	r2,r18,16
10111954:	314cb03a 	or	r6,r6,r5
10111958:	317fffcc 	andi	r5,r6,65535
1011195c:	300cd43a 	srli	r6,r6,16
10111960:	29d3383a 	mul	r9,r5,r7
10111964:	288b383a 	mul	r5,r5,r2
10111968:	31cf383a 	mul	r7,r6,r7
1011196c:	4806d43a 	srli	r3,r9,16
10111970:	4111c83a 	sub	r8,r8,r4
10111974:	29cb883a 	add	r5,r5,r7
10111978:	194b883a 	add	r5,r3,r5
1011197c:	3085383a 	mul	r2,r6,r2
10111980:	29c0022e 	bgeu	r5,r7,1011198c <__umoddi3+0x3d8>
10111984:	00c00074 	movhi	r3,1
10111988:	10c5883a 	add	r2,r2,r3
1011198c:	2808d43a 	srli	r4,r5,16
10111990:	280a943a 	slli	r5,r5,16
10111994:	4a7fffcc 	andi	r9,r9,65535
10111998:	2085883a 	add	r2,r4,r2
1011199c:	2a4b883a 	add	r5,r5,r9
101119a0:	40803636 	bltu	r8,r2,10111a7c <__umoddi3+0x4c8>
101119a4:	40804d26 	beq	r8,r2,10111adc <__umoddi3+0x528>
101119a8:	4089c83a 	sub	r4,r8,r2
101119ac:	280f883a 	mov	r7,r5
101119b0:	81cfc83a 	sub	r7,r16,r7
101119b4:	81c7803a 	cmpltu	r3,r16,r7
101119b8:	20c7c83a 	sub	r3,r4,r3
101119bc:	1cc4983a 	sll	r2,r3,r19
101119c0:	3d0ed83a 	srl	r7,r7,r20
101119c4:	1d06d83a 	srl	r3,r3,r20
101119c8:	11c4b03a 	or	r2,r2,r7
101119cc:	003f9306 	br	1011181c <_gp+0xffff0048>
101119d0:	9ca6983a 	sll	r19,r19,r18
101119d4:	88e8d83a 	srl	r20,r17,r3
101119d8:	80c4d83a 	srl	r2,r16,r3
101119dc:	982cd43a 	srli	r22,r19,16
101119e0:	8ca2983a 	sll	r17,r17,r18
101119e4:	a009883a 	mov	r4,r20
101119e8:	b00b883a 	mov	r5,r22
101119ec:	1478b03a 	or	fp,r2,r17
101119f0:	01031f80 	call	101031f8 <__umodsi3>
101119f4:	a009883a 	mov	r4,r20
101119f8:	b00b883a 	mov	r5,r22
101119fc:	1023883a 	mov	r17,r2
10111a00:	01031940 	call	10103194 <__udivsi3>
10111a04:	9d7fffcc 	andi	r21,r19,65535
10111a08:	880a943a 	slli	r5,r17,16
10111a0c:	e008d43a 	srli	r4,fp,16
10111a10:	a885383a 	mul	r2,r21,r2
10111a14:	84a8983a 	sll	r20,r16,r18
10111a18:	2148b03a 	or	r4,r4,r5
10111a1c:	2080042e 	bgeu	r4,r2,10111a30 <__umoddi3+0x47c>
10111a20:	24c9883a 	add	r4,r4,r19
10111a24:	24c00236 	bltu	r4,r19,10111a30 <__umoddi3+0x47c>
10111a28:	2080012e 	bgeu	r4,r2,10111a30 <__umoddi3+0x47c>
10111a2c:	24c9883a 	add	r4,r4,r19
10111a30:	20a3c83a 	sub	r17,r4,r2
10111a34:	b00b883a 	mov	r5,r22
10111a38:	8809883a 	mov	r4,r17
10111a3c:	01031f80 	call	101031f8 <__umodsi3>
10111a40:	102f883a 	mov	r23,r2
10111a44:	8809883a 	mov	r4,r17
10111a48:	b00b883a 	mov	r5,r22
10111a4c:	01031940 	call	10103194 <__udivsi3>
10111a50:	b82e943a 	slli	r23,r23,16
10111a54:	a885383a 	mul	r2,r21,r2
10111a58:	e13fffcc 	andi	r4,fp,65535
10111a5c:	25c8b03a 	or	r4,r4,r23
10111a60:	2080042e 	bgeu	r4,r2,10111a74 <__umoddi3+0x4c0>
10111a64:	24c9883a 	add	r4,r4,r19
10111a68:	24c00236 	bltu	r4,r19,10111a74 <__umoddi3+0x4c0>
10111a6c:	2080012e 	bgeu	r4,r2,10111a74 <__umoddi3+0x4c0>
10111a70:	24c9883a 	add	r4,r4,r19
10111a74:	20a3c83a 	sub	r17,r4,r2
10111a78:	003f4806 	br	1011179c <_gp+0xfffeffc8>
10111a7c:	2c8fc83a 	sub	r7,r5,r18
10111a80:	1545c83a 	sub	r2,r2,r21
10111a84:	29cb803a 	cmpltu	r5,r5,r7
10111a88:	1145c83a 	sub	r2,r2,r5
10111a8c:	4089c83a 	sub	r4,r8,r2
10111a90:	003fc706 	br	101119b0 <_gp+0xffff01dc>
10111a94:	01000604 	movi	r4,24
10111a98:	003f1806 	br	101116fc <_gp+0xfffeff28>
10111a9c:	00800604 	movi	r2,24
10111aa0:	003f3206 	br	1011176c <_gp+0xfffeff98>
10111aa4:	01000604 	movi	r4,24
10111aa8:	003ed906 	br	10111610 <_gp+0xfffefe3c>
10111aac:	413fa52e 	bgeu	r8,r4,10111944 <_gp+0xffff0170>
10111ab0:	297fff84 	addi	r5,r5,-2
10111ab4:	4551883a 	add	r8,r8,r21
10111ab8:	003fa306 	br	10111948 <_gp+0xffff0174>
10111abc:	15ff8b2e 	bgeu	r2,r23,101118ec <_gp+0xffff0118>
10111ac0:	31bfff84 	addi	r6,r6,-2
10111ac4:	1545883a 	add	r2,r2,r21
10111ac8:	003f8906 	br	101118f0 <_gp+0xffff011c>
10111acc:	24c9883a 	add	r4,r4,r19
10111ad0:	003eee06 	br	1011168c <_gp+0xfffefeb8>
10111ad4:	8005883a 	mov	r2,r16
10111ad8:	003f1706 	br	10111738 <_gp+0xfffeff64>
10111adc:	817fe736 	bltu	r16,r5,10111a7c <_gp+0xffff02a8>
10111ae0:	280f883a 	mov	r7,r5
10111ae4:	0009883a 	mov	r4,zero
10111ae8:	003fb106 	br	101119b0 <_gp+0xffff01dc>

10111aec <__adddf3>:
10111aec:	02c00434 	movhi	r11,16
10111af0:	5affffc4 	addi	r11,r11,-1
10111af4:	2806d7fa 	srli	r3,r5,31
10111af8:	2ad4703a 	and	r10,r5,r11
10111afc:	3ad2703a 	and	r9,r7,r11
10111b00:	3804d53a 	srli	r2,r7,20
10111b04:	3018d77a 	srli	r12,r6,29
10111b08:	280ad53a 	srli	r5,r5,20
10111b0c:	501490fa 	slli	r10,r10,3
10111b10:	2010d77a 	srli	r8,r4,29
10111b14:	481290fa 	slli	r9,r9,3
10111b18:	380ed7fa 	srli	r7,r7,31
10111b1c:	defffb04 	addi	sp,sp,-20
10111b20:	dc800215 	stw	r18,8(sp)
10111b24:	dc400115 	stw	r17,4(sp)
10111b28:	dc000015 	stw	r16,0(sp)
10111b2c:	dfc00415 	stw	ra,16(sp)
10111b30:	dcc00315 	stw	r19,12(sp)
10111b34:	1c803fcc 	andi	r18,r3,255
10111b38:	2c01ffcc 	andi	r16,r5,2047
10111b3c:	5210b03a 	or	r8,r10,r8
10111b40:	202290fa 	slli	r17,r4,3
10111b44:	1081ffcc 	andi	r2,r2,2047
10111b48:	4b12b03a 	or	r9,r9,r12
10111b4c:	300c90fa 	slli	r6,r6,3
10111b50:	91c07526 	beq	r18,r7,10111d28 <__adddf3+0x23c>
10111b54:	8087c83a 	sub	r3,r16,r2
10111b58:	00c0ab0e 	bge	zero,r3,10111e08 <__adddf3+0x31c>
10111b5c:	10002a1e 	bne	r2,zero,10111c08 <__adddf3+0x11c>
10111b60:	4984b03a 	or	r2,r9,r6
10111b64:	1000961e 	bne	r2,zero,10111dc0 <__adddf3+0x2d4>
10111b68:	888001cc 	andi	r2,r17,7
10111b6c:	10000726 	beq	r2,zero,10111b8c <__adddf3+0xa0>
10111b70:	888003cc 	andi	r2,r17,15
10111b74:	00c00104 	movi	r3,4
10111b78:	10c00426 	beq	r2,r3,10111b8c <__adddf3+0xa0>
10111b7c:	88c7883a 	add	r3,r17,r3
10111b80:	1c63803a 	cmpltu	r17,r3,r17
10111b84:	4451883a 	add	r8,r8,r17
10111b88:	1823883a 	mov	r17,r3
10111b8c:	4080202c 	andhi	r2,r8,128
10111b90:	10005926 	beq	r2,zero,10111cf8 <__adddf3+0x20c>
10111b94:	84000044 	addi	r16,r16,1
10111b98:	0081ffc4 	movi	r2,2047
10111b9c:	8080ba26 	beq	r16,r2,10111e88 <__adddf3+0x39c>
10111ba0:	00bfe034 	movhi	r2,65408
10111ba4:	10bfffc4 	addi	r2,r2,-1
10111ba8:	4090703a 	and	r8,r8,r2
10111bac:	4004977a 	slli	r2,r8,29
10111bb0:	4010927a 	slli	r8,r8,9
10111bb4:	8822d0fa 	srli	r17,r17,3
10111bb8:	8401ffcc 	andi	r16,r16,2047
10111bbc:	4010d33a 	srli	r8,r8,12
10111bc0:	9007883a 	mov	r3,r18
10111bc4:	1444b03a 	or	r2,r2,r17
10111bc8:	8401ffcc 	andi	r16,r16,2047
10111bcc:	8020953a 	slli	r16,r16,20
10111bd0:	18c03fcc 	andi	r3,r3,255
10111bd4:	01000434 	movhi	r4,16
10111bd8:	213fffc4 	addi	r4,r4,-1
10111bdc:	180697fa 	slli	r3,r3,31
10111be0:	4110703a 	and	r8,r8,r4
10111be4:	4410b03a 	or	r8,r8,r16
10111be8:	40c6b03a 	or	r3,r8,r3
10111bec:	dfc00417 	ldw	ra,16(sp)
10111bf0:	dcc00317 	ldw	r19,12(sp)
10111bf4:	dc800217 	ldw	r18,8(sp)
10111bf8:	dc400117 	ldw	r17,4(sp)
10111bfc:	dc000017 	ldw	r16,0(sp)
10111c00:	dec00504 	addi	sp,sp,20
10111c04:	f800283a 	ret
10111c08:	0081ffc4 	movi	r2,2047
10111c0c:	80bfd626 	beq	r16,r2,10111b68 <_gp+0xffff0394>
10111c10:	4a402034 	orhi	r9,r9,128
10111c14:	00800e04 	movi	r2,56
10111c18:	10c09f16 	blt	r2,r3,10111e98 <__adddf3+0x3ac>
10111c1c:	008007c4 	movi	r2,31
10111c20:	10c0c216 	blt	r2,r3,10111f2c <__adddf3+0x440>
10111c24:	00800804 	movi	r2,32
10111c28:	10c5c83a 	sub	r2,r2,r3
10111c2c:	488a983a 	sll	r5,r9,r2
10111c30:	30c8d83a 	srl	r4,r6,r3
10111c34:	3084983a 	sll	r2,r6,r2
10111c38:	48c6d83a 	srl	r3,r9,r3
10111c3c:	290cb03a 	or	r6,r5,r4
10111c40:	1004c03a 	cmpne	r2,r2,zero
10111c44:	308cb03a 	or	r6,r6,r2
10111c48:	898dc83a 	sub	r6,r17,r6
10111c4c:	89a3803a 	cmpltu	r17,r17,r6
10111c50:	40d1c83a 	sub	r8,r8,r3
10111c54:	4451c83a 	sub	r8,r8,r17
10111c58:	3023883a 	mov	r17,r6
10111c5c:	4080202c 	andhi	r2,r8,128
10111c60:	10002326 	beq	r2,zero,10111cf0 <__adddf3+0x204>
10111c64:	04c02034 	movhi	r19,128
10111c68:	9cffffc4 	addi	r19,r19,-1
10111c6c:	44e6703a 	and	r19,r8,r19
10111c70:	98007626 	beq	r19,zero,10111e4c <__adddf3+0x360>
10111c74:	9809883a 	mov	r4,r19
10111c78:	01140f00 	call	101140f0 <__clzsi2>
10111c7c:	10fffe04 	addi	r3,r2,-8
10111c80:	010007c4 	movi	r4,31
10111c84:	20c07716 	blt	r4,r3,10111e64 <__adddf3+0x378>
10111c88:	00800804 	movi	r2,32
10111c8c:	10c5c83a 	sub	r2,r2,r3
10111c90:	8884d83a 	srl	r2,r17,r2
10111c94:	98d0983a 	sll	r8,r19,r3
10111c98:	88e2983a 	sll	r17,r17,r3
10111c9c:	1204b03a 	or	r2,r2,r8
10111ca0:	1c007416 	blt	r3,r16,10111e74 <__adddf3+0x388>
10111ca4:	1c21c83a 	sub	r16,r3,r16
10111ca8:	82000044 	addi	r8,r16,1
10111cac:	00c007c4 	movi	r3,31
10111cb0:	1a009116 	blt	r3,r8,10111ef8 <__adddf3+0x40c>
10111cb4:	00c00804 	movi	r3,32
10111cb8:	1a07c83a 	sub	r3,r3,r8
10111cbc:	8a08d83a 	srl	r4,r17,r8
10111cc0:	88e2983a 	sll	r17,r17,r3
10111cc4:	10c6983a 	sll	r3,r2,r3
10111cc8:	1210d83a 	srl	r8,r2,r8
10111ccc:	8804c03a 	cmpne	r2,r17,zero
10111cd0:	1906b03a 	or	r3,r3,r4
10111cd4:	18a2b03a 	or	r17,r3,r2
10111cd8:	0021883a 	mov	r16,zero
10111cdc:	003fa206 	br	10111b68 <_gp+0xffff0394>
10111ce0:	1890b03a 	or	r8,r3,r2
10111ce4:	40017d26 	beq	r8,zero,101122dc <__adddf3+0x7f0>
10111ce8:	1011883a 	mov	r8,r2
10111cec:	1823883a 	mov	r17,r3
10111cf0:	888001cc 	andi	r2,r17,7
10111cf4:	103f9e1e 	bne	r2,zero,10111b70 <_gp+0xffff039c>
10111cf8:	4004977a 	slli	r2,r8,29
10111cfc:	8822d0fa 	srli	r17,r17,3
10111d00:	4010d0fa 	srli	r8,r8,3
10111d04:	9007883a 	mov	r3,r18
10111d08:	1444b03a 	or	r2,r2,r17
10111d0c:	0101ffc4 	movi	r4,2047
10111d10:	81002426 	beq	r16,r4,10111da4 <__adddf3+0x2b8>
10111d14:	8120703a 	and	r16,r16,r4
10111d18:	01000434 	movhi	r4,16
10111d1c:	213fffc4 	addi	r4,r4,-1
10111d20:	4110703a 	and	r8,r8,r4
10111d24:	003fa806 	br	10111bc8 <_gp+0xffff03f4>
10111d28:	8089c83a 	sub	r4,r16,r2
10111d2c:	01005e0e 	bge	zero,r4,10111ea8 <__adddf3+0x3bc>
10111d30:	10002b26 	beq	r2,zero,10111de0 <__adddf3+0x2f4>
10111d34:	0081ffc4 	movi	r2,2047
10111d38:	80bf8b26 	beq	r16,r2,10111b68 <_gp+0xffff0394>
10111d3c:	4a402034 	orhi	r9,r9,128
10111d40:	00800e04 	movi	r2,56
10111d44:	1100a40e 	bge	r2,r4,10111fd8 <__adddf3+0x4ec>
10111d48:	498cb03a 	or	r6,r9,r6
10111d4c:	300ac03a 	cmpne	r5,r6,zero
10111d50:	0013883a 	mov	r9,zero
10111d54:	2c4b883a 	add	r5,r5,r17
10111d58:	2c63803a 	cmpltu	r17,r5,r17
10111d5c:	4a11883a 	add	r8,r9,r8
10111d60:	8a11883a 	add	r8,r17,r8
10111d64:	2823883a 	mov	r17,r5
10111d68:	4080202c 	andhi	r2,r8,128
10111d6c:	103fe026 	beq	r2,zero,10111cf0 <_gp+0xffff051c>
10111d70:	84000044 	addi	r16,r16,1
10111d74:	0081ffc4 	movi	r2,2047
10111d78:	8080d226 	beq	r16,r2,101120c4 <__adddf3+0x5d8>
10111d7c:	00bfe034 	movhi	r2,65408
10111d80:	10bfffc4 	addi	r2,r2,-1
10111d84:	4090703a 	and	r8,r8,r2
10111d88:	880ad07a 	srli	r5,r17,1
10111d8c:	400897fa 	slli	r4,r8,31
10111d90:	88c0004c 	andi	r3,r17,1
10111d94:	28e2b03a 	or	r17,r5,r3
10111d98:	4010d07a 	srli	r8,r8,1
10111d9c:	2462b03a 	or	r17,r4,r17
10111da0:	003f7106 	br	10111b68 <_gp+0xffff0394>
10111da4:	4088b03a 	or	r4,r8,r2
10111da8:	20014526 	beq	r4,zero,101122c0 <__adddf3+0x7d4>
10111dac:	01000434 	movhi	r4,16
10111db0:	42000234 	orhi	r8,r8,8
10111db4:	213fffc4 	addi	r4,r4,-1
10111db8:	4110703a 	and	r8,r8,r4
10111dbc:	003f8206 	br	10111bc8 <_gp+0xffff03f4>
10111dc0:	18ffffc4 	addi	r3,r3,-1
10111dc4:	1800491e 	bne	r3,zero,10111eec <__adddf3+0x400>
10111dc8:	898bc83a 	sub	r5,r17,r6
10111dcc:	8963803a 	cmpltu	r17,r17,r5
10111dd0:	4251c83a 	sub	r8,r8,r9
10111dd4:	4451c83a 	sub	r8,r8,r17
10111dd8:	2823883a 	mov	r17,r5
10111ddc:	003f9f06 	br	10111c5c <_gp+0xffff0488>
10111de0:	4984b03a 	or	r2,r9,r6
10111de4:	103f6026 	beq	r2,zero,10111b68 <_gp+0xffff0394>
10111de8:	213fffc4 	addi	r4,r4,-1
10111dec:	2000931e 	bne	r4,zero,1011203c <__adddf3+0x550>
10111df0:	898d883a 	add	r6,r17,r6
10111df4:	3463803a 	cmpltu	r17,r6,r17
10111df8:	4251883a 	add	r8,r8,r9
10111dfc:	8a11883a 	add	r8,r17,r8
10111e00:	3023883a 	mov	r17,r6
10111e04:	003fd806 	br	10111d68 <_gp+0xffff0594>
10111e08:	1800541e 	bne	r3,zero,10111f5c <__adddf3+0x470>
10111e0c:	80800044 	addi	r2,r16,1
10111e10:	1081ffcc 	andi	r2,r2,2047
10111e14:	00c00044 	movi	r3,1
10111e18:	1880a00e 	bge	r3,r2,1011209c <__adddf3+0x5b0>
10111e1c:	8989c83a 	sub	r4,r17,r6
10111e20:	8905803a 	cmpltu	r2,r17,r4
10111e24:	4267c83a 	sub	r19,r8,r9
10111e28:	98a7c83a 	sub	r19,r19,r2
10111e2c:	9880202c 	andhi	r2,r19,128
10111e30:	10006326 	beq	r2,zero,10111fc0 <__adddf3+0x4d4>
10111e34:	3463c83a 	sub	r17,r6,r17
10111e38:	4a07c83a 	sub	r3,r9,r8
10111e3c:	344d803a 	cmpltu	r6,r6,r17
10111e40:	19a7c83a 	sub	r19,r3,r6
10111e44:	3825883a 	mov	r18,r7
10111e48:	983f8a1e 	bne	r19,zero,10111c74 <_gp+0xffff04a0>
10111e4c:	8809883a 	mov	r4,r17
10111e50:	01140f00 	call	101140f0 <__clzsi2>
10111e54:	10800804 	addi	r2,r2,32
10111e58:	10fffe04 	addi	r3,r2,-8
10111e5c:	010007c4 	movi	r4,31
10111e60:	20ff890e 	bge	r4,r3,10111c88 <_gp+0xffff04b4>
10111e64:	10bff604 	addi	r2,r2,-40
10111e68:	8884983a 	sll	r2,r17,r2
10111e6c:	0023883a 	mov	r17,zero
10111e70:	1c3f8c0e 	bge	r3,r16,10111ca4 <_gp+0xffff04d0>
10111e74:	023fe034 	movhi	r8,65408
10111e78:	423fffc4 	addi	r8,r8,-1
10111e7c:	80e1c83a 	sub	r16,r16,r3
10111e80:	1210703a 	and	r8,r2,r8
10111e84:	003f3806 	br	10111b68 <_gp+0xffff0394>
10111e88:	9007883a 	mov	r3,r18
10111e8c:	0011883a 	mov	r8,zero
10111e90:	0005883a 	mov	r2,zero
10111e94:	003f4c06 	br	10111bc8 <_gp+0xffff03f4>
10111e98:	498cb03a 	or	r6,r9,r6
10111e9c:	300cc03a 	cmpne	r6,r6,zero
10111ea0:	0007883a 	mov	r3,zero
10111ea4:	003f6806 	br	10111c48 <_gp+0xffff0474>
10111ea8:	20009c1e 	bne	r4,zero,1011211c <__adddf3+0x630>
10111eac:	80800044 	addi	r2,r16,1
10111eb0:	1141ffcc 	andi	r5,r2,2047
10111eb4:	01000044 	movi	r4,1
10111eb8:	2140670e 	bge	r4,r5,10112058 <__adddf3+0x56c>
10111ebc:	0101ffc4 	movi	r4,2047
10111ec0:	11007f26 	beq	r2,r4,101120c0 <__adddf3+0x5d4>
10111ec4:	898d883a 	add	r6,r17,r6
10111ec8:	4247883a 	add	r3,r8,r9
10111ecc:	3451803a 	cmpltu	r8,r6,r17
10111ed0:	40d1883a 	add	r8,r8,r3
10111ed4:	402297fa 	slli	r17,r8,31
10111ed8:	300cd07a 	srli	r6,r6,1
10111edc:	4010d07a 	srli	r8,r8,1
10111ee0:	1021883a 	mov	r16,r2
10111ee4:	89a2b03a 	or	r17,r17,r6
10111ee8:	003f1f06 	br	10111b68 <_gp+0xffff0394>
10111eec:	0081ffc4 	movi	r2,2047
10111ef0:	80bf481e 	bne	r16,r2,10111c14 <_gp+0xffff0440>
10111ef4:	003f1c06 	br	10111b68 <_gp+0xffff0394>
10111ef8:	843ff844 	addi	r16,r16,-31
10111efc:	01000804 	movi	r4,32
10111f00:	1406d83a 	srl	r3,r2,r16
10111f04:	41005026 	beq	r8,r4,10112048 <__adddf3+0x55c>
10111f08:	01001004 	movi	r4,64
10111f0c:	2211c83a 	sub	r8,r4,r8
10111f10:	1204983a 	sll	r2,r2,r8
10111f14:	88a2b03a 	or	r17,r17,r2
10111f18:	8822c03a 	cmpne	r17,r17,zero
10111f1c:	1c62b03a 	or	r17,r3,r17
10111f20:	0011883a 	mov	r8,zero
10111f24:	0021883a 	mov	r16,zero
10111f28:	003f7106 	br	10111cf0 <_gp+0xffff051c>
10111f2c:	193ff804 	addi	r4,r3,-32
10111f30:	00800804 	movi	r2,32
10111f34:	4908d83a 	srl	r4,r9,r4
10111f38:	18804526 	beq	r3,r2,10112050 <__adddf3+0x564>
10111f3c:	00801004 	movi	r2,64
10111f40:	10c5c83a 	sub	r2,r2,r3
10111f44:	4886983a 	sll	r3,r9,r2
10111f48:	198cb03a 	or	r6,r3,r6
10111f4c:	300cc03a 	cmpne	r6,r6,zero
10111f50:	218cb03a 	or	r6,r4,r6
10111f54:	0007883a 	mov	r3,zero
10111f58:	003f3b06 	br	10111c48 <_gp+0xffff0474>
10111f5c:	80002a26 	beq	r16,zero,10112008 <__adddf3+0x51c>
10111f60:	0101ffc4 	movi	r4,2047
10111f64:	11006826 	beq	r2,r4,10112108 <__adddf3+0x61c>
10111f68:	00c7c83a 	sub	r3,zero,r3
10111f6c:	42002034 	orhi	r8,r8,128
10111f70:	01000e04 	movi	r4,56
10111f74:	20c07c16 	blt	r4,r3,10112168 <__adddf3+0x67c>
10111f78:	010007c4 	movi	r4,31
10111f7c:	20c0da16 	blt	r4,r3,101122e8 <__adddf3+0x7fc>
10111f80:	01000804 	movi	r4,32
10111f84:	20c9c83a 	sub	r4,r4,r3
10111f88:	4114983a 	sll	r10,r8,r4
10111f8c:	88cad83a 	srl	r5,r17,r3
10111f90:	8908983a 	sll	r4,r17,r4
10111f94:	40c6d83a 	srl	r3,r8,r3
10111f98:	5162b03a 	or	r17,r10,r5
10111f9c:	2008c03a 	cmpne	r4,r4,zero
10111fa0:	8922b03a 	or	r17,r17,r4
10111fa4:	3463c83a 	sub	r17,r6,r17
10111fa8:	48c7c83a 	sub	r3,r9,r3
10111fac:	344d803a 	cmpltu	r6,r6,r17
10111fb0:	1991c83a 	sub	r8,r3,r6
10111fb4:	1021883a 	mov	r16,r2
10111fb8:	3825883a 	mov	r18,r7
10111fbc:	003f2706 	br	10111c5c <_gp+0xffff0488>
10111fc0:	24d0b03a 	or	r8,r4,r19
10111fc4:	40001b1e 	bne	r8,zero,10112034 <__adddf3+0x548>
10111fc8:	0005883a 	mov	r2,zero
10111fcc:	0007883a 	mov	r3,zero
10111fd0:	0021883a 	mov	r16,zero
10111fd4:	003f4d06 	br	10111d0c <_gp+0xffff0538>
10111fd8:	008007c4 	movi	r2,31
10111fdc:	11003c16 	blt	r2,r4,101120d0 <__adddf3+0x5e4>
10111fe0:	00800804 	movi	r2,32
10111fe4:	1105c83a 	sub	r2,r2,r4
10111fe8:	488e983a 	sll	r7,r9,r2
10111fec:	310ad83a 	srl	r5,r6,r4
10111ff0:	3084983a 	sll	r2,r6,r2
10111ff4:	4912d83a 	srl	r9,r9,r4
10111ff8:	394ab03a 	or	r5,r7,r5
10111ffc:	1004c03a 	cmpne	r2,r2,zero
10112000:	288ab03a 	or	r5,r5,r2
10112004:	003f5306 	br	10111d54 <_gp+0xffff0580>
10112008:	4448b03a 	or	r4,r8,r17
1011200c:	20003e26 	beq	r4,zero,10112108 <__adddf3+0x61c>
10112010:	00c6303a 	nor	r3,zero,r3
10112014:	18003a1e 	bne	r3,zero,10112100 <__adddf3+0x614>
10112018:	3463c83a 	sub	r17,r6,r17
1011201c:	4a07c83a 	sub	r3,r9,r8
10112020:	344d803a 	cmpltu	r6,r6,r17
10112024:	1991c83a 	sub	r8,r3,r6
10112028:	1021883a 	mov	r16,r2
1011202c:	3825883a 	mov	r18,r7
10112030:	003f0a06 	br	10111c5c <_gp+0xffff0488>
10112034:	2023883a 	mov	r17,r4
10112038:	003f0d06 	br	10111c70 <_gp+0xffff049c>
1011203c:	0081ffc4 	movi	r2,2047
10112040:	80bf3f1e 	bne	r16,r2,10111d40 <_gp+0xffff056c>
10112044:	003ec806 	br	10111b68 <_gp+0xffff0394>
10112048:	0005883a 	mov	r2,zero
1011204c:	003fb106 	br	10111f14 <_gp+0xffff0740>
10112050:	0007883a 	mov	r3,zero
10112054:	003fbc06 	br	10111f48 <_gp+0xffff0774>
10112058:	4444b03a 	or	r2,r8,r17
1011205c:	8000871e 	bne	r16,zero,1011227c <__adddf3+0x790>
10112060:	1000ba26 	beq	r2,zero,1011234c <__adddf3+0x860>
10112064:	4984b03a 	or	r2,r9,r6
10112068:	103ebf26 	beq	r2,zero,10111b68 <_gp+0xffff0394>
1011206c:	8985883a 	add	r2,r17,r6
10112070:	4247883a 	add	r3,r8,r9
10112074:	1451803a 	cmpltu	r8,r2,r17
10112078:	40d1883a 	add	r8,r8,r3
1011207c:	40c0202c 	andhi	r3,r8,128
10112080:	1023883a 	mov	r17,r2
10112084:	183f1a26 	beq	r3,zero,10111cf0 <_gp+0xffff051c>
10112088:	00bfe034 	movhi	r2,65408
1011208c:	10bfffc4 	addi	r2,r2,-1
10112090:	2021883a 	mov	r16,r4
10112094:	4090703a 	and	r8,r8,r2
10112098:	003eb306 	br	10111b68 <_gp+0xffff0394>
1011209c:	4444b03a 	or	r2,r8,r17
101120a0:	8000291e 	bne	r16,zero,10112148 <__adddf3+0x65c>
101120a4:	10004b1e 	bne	r2,zero,101121d4 <__adddf3+0x6e8>
101120a8:	4990b03a 	or	r8,r9,r6
101120ac:	40008b26 	beq	r8,zero,101122dc <__adddf3+0x7f0>
101120b0:	4811883a 	mov	r8,r9
101120b4:	3023883a 	mov	r17,r6
101120b8:	3825883a 	mov	r18,r7
101120bc:	003eaa06 	br	10111b68 <_gp+0xffff0394>
101120c0:	1021883a 	mov	r16,r2
101120c4:	0011883a 	mov	r8,zero
101120c8:	0005883a 	mov	r2,zero
101120cc:	003f0f06 	br	10111d0c <_gp+0xffff0538>
101120d0:	217ff804 	addi	r5,r4,-32
101120d4:	00800804 	movi	r2,32
101120d8:	494ad83a 	srl	r5,r9,r5
101120dc:	20807d26 	beq	r4,r2,101122d4 <__adddf3+0x7e8>
101120e0:	00801004 	movi	r2,64
101120e4:	1109c83a 	sub	r4,r2,r4
101120e8:	4912983a 	sll	r9,r9,r4
101120ec:	498cb03a 	or	r6,r9,r6
101120f0:	300cc03a 	cmpne	r6,r6,zero
101120f4:	298ab03a 	or	r5,r5,r6
101120f8:	0013883a 	mov	r9,zero
101120fc:	003f1506 	br	10111d54 <_gp+0xffff0580>
10112100:	0101ffc4 	movi	r4,2047
10112104:	113f9a1e 	bne	r2,r4,10111f70 <_gp+0xffff079c>
10112108:	4811883a 	mov	r8,r9
1011210c:	3023883a 	mov	r17,r6
10112110:	1021883a 	mov	r16,r2
10112114:	3825883a 	mov	r18,r7
10112118:	003e9306 	br	10111b68 <_gp+0xffff0394>
1011211c:	8000161e 	bne	r16,zero,10112178 <__adddf3+0x68c>
10112120:	444ab03a 	or	r5,r8,r17
10112124:	28005126 	beq	r5,zero,1011226c <__adddf3+0x780>
10112128:	0108303a 	nor	r4,zero,r4
1011212c:	20004d1e 	bne	r4,zero,10112264 <__adddf3+0x778>
10112130:	89a3883a 	add	r17,r17,r6
10112134:	4253883a 	add	r9,r8,r9
10112138:	898d803a 	cmpltu	r6,r17,r6
1011213c:	3251883a 	add	r8,r6,r9
10112140:	1021883a 	mov	r16,r2
10112144:	003f0806 	br	10111d68 <_gp+0xffff0594>
10112148:	1000301e 	bne	r2,zero,1011220c <__adddf3+0x720>
1011214c:	4984b03a 	or	r2,r9,r6
10112150:	10007126 	beq	r2,zero,10112318 <__adddf3+0x82c>
10112154:	4811883a 	mov	r8,r9
10112158:	3023883a 	mov	r17,r6
1011215c:	3825883a 	mov	r18,r7
10112160:	0401ffc4 	movi	r16,2047
10112164:	003e8006 	br	10111b68 <_gp+0xffff0394>
10112168:	4462b03a 	or	r17,r8,r17
1011216c:	8822c03a 	cmpne	r17,r17,zero
10112170:	0007883a 	mov	r3,zero
10112174:	003f8b06 	br	10111fa4 <_gp+0xffff07d0>
10112178:	0141ffc4 	movi	r5,2047
1011217c:	11403b26 	beq	r2,r5,1011226c <__adddf3+0x780>
10112180:	0109c83a 	sub	r4,zero,r4
10112184:	42002034 	orhi	r8,r8,128
10112188:	01400e04 	movi	r5,56
1011218c:	29006716 	blt	r5,r4,1011232c <__adddf3+0x840>
10112190:	014007c4 	movi	r5,31
10112194:	29007016 	blt	r5,r4,10112358 <__adddf3+0x86c>
10112198:	01400804 	movi	r5,32
1011219c:	290bc83a 	sub	r5,r5,r4
101121a0:	4154983a 	sll	r10,r8,r5
101121a4:	890ed83a 	srl	r7,r17,r4
101121a8:	894a983a 	sll	r5,r17,r5
101121ac:	4108d83a 	srl	r4,r8,r4
101121b0:	51e2b03a 	or	r17,r10,r7
101121b4:	280ac03a 	cmpne	r5,r5,zero
101121b8:	8962b03a 	or	r17,r17,r5
101121bc:	89a3883a 	add	r17,r17,r6
101121c0:	2253883a 	add	r9,r4,r9
101121c4:	898d803a 	cmpltu	r6,r17,r6
101121c8:	3251883a 	add	r8,r6,r9
101121cc:	1021883a 	mov	r16,r2
101121d0:	003ee506 	br	10111d68 <_gp+0xffff0594>
101121d4:	4984b03a 	or	r2,r9,r6
101121d8:	103e6326 	beq	r2,zero,10111b68 <_gp+0xffff0394>
101121dc:	8987c83a 	sub	r3,r17,r6
101121e0:	88c9803a 	cmpltu	r4,r17,r3
101121e4:	4245c83a 	sub	r2,r8,r9
101121e8:	1105c83a 	sub	r2,r2,r4
101121ec:	1100202c 	andhi	r4,r2,128
101121f0:	203ebb26 	beq	r4,zero,10111ce0 <_gp+0xffff050c>
101121f4:	3463c83a 	sub	r17,r6,r17
101121f8:	4a07c83a 	sub	r3,r9,r8
101121fc:	344d803a 	cmpltu	r6,r6,r17
10112200:	1991c83a 	sub	r8,r3,r6
10112204:	3825883a 	mov	r18,r7
10112208:	003e5706 	br	10111b68 <_gp+0xffff0394>
1011220c:	4984b03a 	or	r2,r9,r6
10112210:	10002e26 	beq	r2,zero,101122cc <__adddf3+0x7e0>
10112214:	4004d0fa 	srli	r2,r8,3
10112218:	8822d0fa 	srli	r17,r17,3
1011221c:	4010977a 	slli	r8,r8,29
10112220:	10c0022c 	andhi	r3,r2,8
10112224:	4462b03a 	or	r17,r8,r17
10112228:	18000826 	beq	r3,zero,1011224c <__adddf3+0x760>
1011222c:	4808d0fa 	srli	r4,r9,3
10112230:	20c0022c 	andhi	r3,r4,8
10112234:	1800051e 	bne	r3,zero,1011224c <__adddf3+0x760>
10112238:	300cd0fa 	srli	r6,r6,3
1011223c:	4806977a 	slli	r3,r9,29
10112240:	2005883a 	mov	r2,r4
10112244:	3825883a 	mov	r18,r7
10112248:	19a2b03a 	or	r17,r3,r6
1011224c:	8810d77a 	srli	r8,r17,29
10112250:	100490fa 	slli	r2,r2,3
10112254:	882290fa 	slli	r17,r17,3
10112258:	0401ffc4 	movi	r16,2047
1011225c:	4090b03a 	or	r8,r8,r2
10112260:	003e4106 	br	10111b68 <_gp+0xffff0394>
10112264:	0141ffc4 	movi	r5,2047
10112268:	117fc71e 	bne	r2,r5,10112188 <_gp+0xffff09b4>
1011226c:	4811883a 	mov	r8,r9
10112270:	3023883a 	mov	r17,r6
10112274:	1021883a 	mov	r16,r2
10112278:	003e3b06 	br	10111b68 <_gp+0xffff0394>
1011227c:	10002f26 	beq	r2,zero,1011233c <__adddf3+0x850>
10112280:	4984b03a 	or	r2,r9,r6
10112284:	10001126 	beq	r2,zero,101122cc <__adddf3+0x7e0>
10112288:	4004d0fa 	srli	r2,r8,3
1011228c:	8822d0fa 	srli	r17,r17,3
10112290:	4010977a 	slli	r8,r8,29
10112294:	10c0022c 	andhi	r3,r2,8
10112298:	4462b03a 	or	r17,r8,r17
1011229c:	183feb26 	beq	r3,zero,1011224c <_gp+0xffff0a78>
101122a0:	4808d0fa 	srli	r4,r9,3
101122a4:	20c0022c 	andhi	r3,r4,8
101122a8:	183fe81e 	bne	r3,zero,1011224c <_gp+0xffff0a78>
101122ac:	300cd0fa 	srli	r6,r6,3
101122b0:	4806977a 	slli	r3,r9,29
101122b4:	2005883a 	mov	r2,r4
101122b8:	19a2b03a 	or	r17,r3,r6
101122bc:	003fe306 	br	1011224c <_gp+0xffff0a78>
101122c0:	0011883a 	mov	r8,zero
101122c4:	0005883a 	mov	r2,zero
101122c8:	003e3f06 	br	10111bc8 <_gp+0xffff03f4>
101122cc:	0401ffc4 	movi	r16,2047
101122d0:	003e2506 	br	10111b68 <_gp+0xffff0394>
101122d4:	0013883a 	mov	r9,zero
101122d8:	003f8406 	br	101120ec <_gp+0xffff0918>
101122dc:	0005883a 	mov	r2,zero
101122e0:	0007883a 	mov	r3,zero
101122e4:	003e8906 	br	10111d0c <_gp+0xffff0538>
101122e8:	197ff804 	addi	r5,r3,-32
101122ec:	01000804 	movi	r4,32
101122f0:	414ad83a 	srl	r5,r8,r5
101122f4:	19002426 	beq	r3,r4,10112388 <__adddf3+0x89c>
101122f8:	01001004 	movi	r4,64
101122fc:	20c7c83a 	sub	r3,r4,r3
10112300:	40c6983a 	sll	r3,r8,r3
10112304:	1c46b03a 	or	r3,r3,r17
10112308:	1806c03a 	cmpne	r3,r3,zero
1011230c:	28e2b03a 	or	r17,r5,r3
10112310:	0007883a 	mov	r3,zero
10112314:	003f2306 	br	10111fa4 <_gp+0xffff07d0>
10112318:	0007883a 	mov	r3,zero
1011231c:	5811883a 	mov	r8,r11
10112320:	00bfffc4 	movi	r2,-1
10112324:	0401ffc4 	movi	r16,2047
10112328:	003e7806 	br	10111d0c <_gp+0xffff0538>
1011232c:	4462b03a 	or	r17,r8,r17
10112330:	8822c03a 	cmpne	r17,r17,zero
10112334:	0009883a 	mov	r4,zero
10112338:	003fa006 	br	101121bc <_gp+0xffff09e8>
1011233c:	4811883a 	mov	r8,r9
10112340:	3023883a 	mov	r17,r6
10112344:	0401ffc4 	movi	r16,2047
10112348:	003e0706 	br	10111b68 <_gp+0xffff0394>
1011234c:	4811883a 	mov	r8,r9
10112350:	3023883a 	mov	r17,r6
10112354:	003e0406 	br	10111b68 <_gp+0xffff0394>
10112358:	21fff804 	addi	r7,r4,-32
1011235c:	01400804 	movi	r5,32
10112360:	41ced83a 	srl	r7,r8,r7
10112364:	21400a26 	beq	r4,r5,10112390 <__adddf3+0x8a4>
10112368:	01401004 	movi	r5,64
1011236c:	2909c83a 	sub	r4,r5,r4
10112370:	4108983a 	sll	r4,r8,r4
10112374:	2448b03a 	or	r4,r4,r17
10112378:	2008c03a 	cmpne	r4,r4,zero
1011237c:	3922b03a 	or	r17,r7,r4
10112380:	0009883a 	mov	r4,zero
10112384:	003f8d06 	br	101121bc <_gp+0xffff09e8>
10112388:	0007883a 	mov	r3,zero
1011238c:	003fdd06 	br	10112304 <_gp+0xffff0b30>
10112390:	0009883a 	mov	r4,zero
10112394:	003ff706 	br	10112374 <_gp+0xffff0ba0>

10112398 <__divdf3>:
10112398:	defff204 	addi	sp,sp,-56
1011239c:	dd400915 	stw	r21,36(sp)
101123a0:	282ad53a 	srli	r21,r5,20
101123a4:	dd000815 	stw	r20,32(sp)
101123a8:	2828d7fa 	srli	r20,r5,31
101123ac:	dc000415 	stw	r16,16(sp)
101123b0:	04000434 	movhi	r16,16
101123b4:	df000c15 	stw	fp,48(sp)
101123b8:	843fffc4 	addi	r16,r16,-1
101123bc:	dfc00d15 	stw	ra,52(sp)
101123c0:	ddc00b15 	stw	r23,44(sp)
101123c4:	dd800a15 	stw	r22,40(sp)
101123c8:	dcc00715 	stw	r19,28(sp)
101123cc:	dc800615 	stw	r18,24(sp)
101123d0:	dc400515 	stw	r17,20(sp)
101123d4:	ad41ffcc 	andi	r21,r21,2047
101123d8:	2c20703a 	and	r16,r5,r16
101123dc:	a7003fcc 	andi	fp,r20,255
101123e0:	a8006126 	beq	r21,zero,10112568 <__divdf3+0x1d0>
101123e4:	0081ffc4 	movi	r2,2047
101123e8:	2025883a 	mov	r18,r4
101123ec:	a8803726 	beq	r21,r2,101124cc <__divdf3+0x134>
101123f0:	80800434 	orhi	r2,r16,16
101123f4:	100490fa 	slli	r2,r2,3
101123f8:	2020d77a 	srli	r16,r4,29
101123fc:	202490fa 	slli	r18,r4,3
10112400:	ad7f0044 	addi	r21,r21,-1023
10112404:	80a0b03a 	or	r16,r16,r2
10112408:	0027883a 	mov	r19,zero
1011240c:	0013883a 	mov	r9,zero
10112410:	3804d53a 	srli	r2,r7,20
10112414:	382cd7fa 	srli	r22,r7,31
10112418:	04400434 	movhi	r17,16
1011241c:	8c7fffc4 	addi	r17,r17,-1
10112420:	1081ffcc 	andi	r2,r2,2047
10112424:	3011883a 	mov	r8,r6
10112428:	3c62703a 	and	r17,r7,r17
1011242c:	b5c03fcc 	andi	r23,r22,255
10112430:	10006c26 	beq	r2,zero,101125e4 <__divdf3+0x24c>
10112434:	00c1ffc4 	movi	r3,2047
10112438:	10c06426 	beq	r2,r3,101125cc <__divdf3+0x234>
1011243c:	88c00434 	orhi	r3,r17,16
10112440:	180690fa 	slli	r3,r3,3
10112444:	3022d77a 	srli	r17,r6,29
10112448:	301090fa 	slli	r8,r6,3
1011244c:	10bf0044 	addi	r2,r2,-1023
10112450:	88e2b03a 	or	r17,r17,r3
10112454:	000f883a 	mov	r7,zero
10112458:	a58cf03a 	xor	r6,r20,r22
1011245c:	3cc8b03a 	or	r4,r7,r19
10112460:	a8abc83a 	sub	r21,r21,r2
10112464:	008003c4 	movi	r2,15
10112468:	3007883a 	mov	r3,r6
1011246c:	34c03fcc 	andi	r19,r6,255
10112470:	11009036 	bltu	r2,r4,101126b4 <__divdf3+0x31c>
10112474:	200890ba 	slli	r4,r4,2
10112478:	00840474 	movhi	r2,4113
1011247c:	10892304 	addi	r2,r2,9356
10112480:	2089883a 	add	r4,r4,r2
10112484:	20800017 	ldw	r2,0(r4)
10112488:	1000683a 	jmp	r2
1011248c:	101126b4 	orhi	zero,r2,17562
10112490:	10112504 	addi	zero,r2,17556
10112494:	101126a4 	muli	zero,r2,17562
10112498:	101124f8 	rdprs	zero,r2,17555
1011249c:	101126a4 	muli	zero,r2,17562
101124a0:	10112678 	rdprs	zero,r2,17561
101124a4:	101126a4 	muli	zero,r2,17562
101124a8:	101124f8 	rdprs	zero,r2,17555
101124ac:	10112504 	addi	zero,r2,17556
101124b0:	10112504 	addi	zero,r2,17556
101124b4:	10112678 	rdprs	zero,r2,17561
101124b8:	101124f8 	rdprs	zero,r2,17555
101124bc:	101124e8 	cmpgeui	zero,r2,17555
101124c0:	101124e8 	cmpgeui	zero,r2,17555
101124c4:	101124e8 	cmpgeui	zero,r2,17555
101124c8:	10112998 	cmpnei	zero,r2,17574
101124cc:	2404b03a 	or	r2,r4,r16
101124d0:	1000661e 	bne	r2,zero,1011266c <__divdf3+0x2d4>
101124d4:	04c00204 	movi	r19,8
101124d8:	0021883a 	mov	r16,zero
101124dc:	0025883a 	mov	r18,zero
101124e0:	02400084 	movi	r9,2
101124e4:	003fca06 	br	10112410 <_gp+0xffff0c3c>
101124e8:	8023883a 	mov	r17,r16
101124ec:	9011883a 	mov	r8,r18
101124f0:	e02f883a 	mov	r23,fp
101124f4:	480f883a 	mov	r7,r9
101124f8:	00800084 	movi	r2,2
101124fc:	3881311e 	bne	r7,r2,101129c4 <__divdf3+0x62c>
10112500:	b827883a 	mov	r19,r23
10112504:	98c0004c 	andi	r3,r19,1
10112508:	0081ffc4 	movi	r2,2047
1011250c:	000b883a 	mov	r5,zero
10112510:	0025883a 	mov	r18,zero
10112514:	1004953a 	slli	r2,r2,20
10112518:	18c03fcc 	andi	r3,r3,255
1011251c:	04400434 	movhi	r17,16
10112520:	8c7fffc4 	addi	r17,r17,-1
10112524:	180697fa 	slli	r3,r3,31
10112528:	2c4a703a 	and	r5,r5,r17
1011252c:	288ab03a 	or	r5,r5,r2
10112530:	28c6b03a 	or	r3,r5,r3
10112534:	9005883a 	mov	r2,r18
10112538:	dfc00d17 	ldw	ra,52(sp)
1011253c:	df000c17 	ldw	fp,48(sp)
10112540:	ddc00b17 	ldw	r23,44(sp)
10112544:	dd800a17 	ldw	r22,40(sp)
10112548:	dd400917 	ldw	r21,36(sp)
1011254c:	dd000817 	ldw	r20,32(sp)
10112550:	dcc00717 	ldw	r19,28(sp)
10112554:	dc800617 	ldw	r18,24(sp)
10112558:	dc400517 	ldw	r17,20(sp)
1011255c:	dc000417 	ldw	r16,16(sp)
10112560:	dec00e04 	addi	sp,sp,56
10112564:	f800283a 	ret
10112568:	2404b03a 	or	r2,r4,r16
1011256c:	2027883a 	mov	r19,r4
10112570:	10003926 	beq	r2,zero,10112658 <__divdf3+0x2c0>
10112574:	80012e26 	beq	r16,zero,10112a30 <__divdf3+0x698>
10112578:	8009883a 	mov	r4,r16
1011257c:	d9800315 	stw	r6,12(sp)
10112580:	d9c00215 	stw	r7,8(sp)
10112584:	01140f00 	call	101140f0 <__clzsi2>
10112588:	d9800317 	ldw	r6,12(sp)
1011258c:	d9c00217 	ldw	r7,8(sp)
10112590:	113ffd44 	addi	r4,r2,-11
10112594:	00c00704 	movi	r3,28
10112598:	19012116 	blt	r3,r4,10112a20 <__divdf3+0x688>
1011259c:	00c00744 	movi	r3,29
101125a0:	147ffe04 	addi	r17,r2,-8
101125a4:	1907c83a 	sub	r3,r3,r4
101125a8:	8460983a 	sll	r16,r16,r17
101125ac:	98c6d83a 	srl	r3,r19,r3
101125b0:	9c64983a 	sll	r18,r19,r17
101125b4:	1c20b03a 	or	r16,r3,r16
101125b8:	1080fcc4 	addi	r2,r2,1011
101125bc:	00abc83a 	sub	r21,zero,r2
101125c0:	0027883a 	mov	r19,zero
101125c4:	0013883a 	mov	r9,zero
101125c8:	003f9106 	br	10112410 <_gp+0xffff0c3c>
101125cc:	3446b03a 	or	r3,r6,r17
101125d0:	18001f1e 	bne	r3,zero,10112650 <__divdf3+0x2b8>
101125d4:	0023883a 	mov	r17,zero
101125d8:	0011883a 	mov	r8,zero
101125dc:	01c00084 	movi	r7,2
101125e0:	003f9d06 	br	10112458 <_gp+0xffff0c84>
101125e4:	3446b03a 	or	r3,r6,r17
101125e8:	18001526 	beq	r3,zero,10112640 <__divdf3+0x2a8>
101125ec:	88011b26 	beq	r17,zero,10112a5c <__divdf3+0x6c4>
101125f0:	8809883a 	mov	r4,r17
101125f4:	d9800315 	stw	r6,12(sp)
101125f8:	da400115 	stw	r9,4(sp)
101125fc:	01140f00 	call	101140f0 <__clzsi2>
10112600:	d9800317 	ldw	r6,12(sp)
10112604:	da400117 	ldw	r9,4(sp)
10112608:	113ffd44 	addi	r4,r2,-11
1011260c:	00c00704 	movi	r3,28
10112610:	19010e16 	blt	r3,r4,10112a4c <__divdf3+0x6b4>
10112614:	00c00744 	movi	r3,29
10112618:	123ffe04 	addi	r8,r2,-8
1011261c:	1907c83a 	sub	r3,r3,r4
10112620:	8a22983a 	sll	r17,r17,r8
10112624:	30c6d83a 	srl	r3,r6,r3
10112628:	3210983a 	sll	r8,r6,r8
1011262c:	1c62b03a 	or	r17,r3,r17
10112630:	1080fcc4 	addi	r2,r2,1011
10112634:	0085c83a 	sub	r2,zero,r2
10112638:	000f883a 	mov	r7,zero
1011263c:	003f8606 	br	10112458 <_gp+0xffff0c84>
10112640:	0023883a 	mov	r17,zero
10112644:	0011883a 	mov	r8,zero
10112648:	01c00044 	movi	r7,1
1011264c:	003f8206 	br	10112458 <_gp+0xffff0c84>
10112650:	01c000c4 	movi	r7,3
10112654:	003f8006 	br	10112458 <_gp+0xffff0c84>
10112658:	04c00104 	movi	r19,4
1011265c:	0021883a 	mov	r16,zero
10112660:	0025883a 	mov	r18,zero
10112664:	02400044 	movi	r9,1
10112668:	003f6906 	br	10112410 <_gp+0xffff0c3c>
1011266c:	04c00304 	movi	r19,12
10112670:	024000c4 	movi	r9,3
10112674:	003f6606 	br	10112410 <_gp+0xffff0c3c>
10112678:	01400434 	movhi	r5,16
1011267c:	0007883a 	mov	r3,zero
10112680:	297fffc4 	addi	r5,r5,-1
10112684:	04bfffc4 	movi	r18,-1
10112688:	0081ffc4 	movi	r2,2047
1011268c:	003fa106 	br	10112514 <_gp+0xffff0d40>
10112690:	00c00044 	movi	r3,1
10112694:	1887c83a 	sub	r3,r3,r2
10112698:	01000e04 	movi	r4,56
1011269c:	20c1210e 	bge	r4,r3,10112b24 <__divdf3+0x78c>
101126a0:	98c0004c 	andi	r3,r19,1
101126a4:	0005883a 	mov	r2,zero
101126a8:	000b883a 	mov	r5,zero
101126ac:	0025883a 	mov	r18,zero
101126b0:	003f9806 	br	10112514 <_gp+0xffff0d40>
101126b4:	8c00fd36 	bltu	r17,r16,10112aac <__divdf3+0x714>
101126b8:	8440fb26 	beq	r16,r17,10112aa8 <__divdf3+0x710>
101126bc:	8007883a 	mov	r3,r16
101126c0:	ad7fffc4 	addi	r21,r21,-1
101126c4:	0021883a 	mov	r16,zero
101126c8:	4004d63a 	srli	r2,r8,24
101126cc:	8822923a 	slli	r17,r17,8
101126d0:	1809883a 	mov	r4,r3
101126d4:	402c923a 	slli	r22,r8,8
101126d8:	88b8b03a 	or	fp,r17,r2
101126dc:	e028d43a 	srli	r20,fp,16
101126e0:	d8c00015 	stw	r3,0(sp)
101126e4:	e5ffffcc 	andi	r23,fp,65535
101126e8:	a00b883a 	mov	r5,r20
101126ec:	01031940 	call	10103194 <__udivsi3>
101126f0:	d8c00017 	ldw	r3,0(sp)
101126f4:	a00b883a 	mov	r5,r20
101126f8:	d8800315 	stw	r2,12(sp)
101126fc:	1809883a 	mov	r4,r3
10112700:	01031f80 	call	101031f8 <__umodsi3>
10112704:	d9800317 	ldw	r6,12(sp)
10112708:	1006943a 	slli	r3,r2,16
1011270c:	9004d43a 	srli	r2,r18,16
10112710:	b9a3383a 	mul	r17,r23,r6
10112714:	10c4b03a 	or	r2,r2,r3
10112718:	1440062e 	bgeu	r2,r17,10112734 <__divdf3+0x39c>
1011271c:	1705883a 	add	r2,r2,fp
10112720:	30ffffc4 	addi	r3,r6,-1
10112724:	1700ee36 	bltu	r2,fp,10112ae0 <__divdf3+0x748>
10112728:	1440ed2e 	bgeu	r2,r17,10112ae0 <__divdf3+0x748>
1011272c:	31bfff84 	addi	r6,r6,-2
10112730:	1705883a 	add	r2,r2,fp
10112734:	1463c83a 	sub	r17,r2,r17
10112738:	a00b883a 	mov	r5,r20
1011273c:	8809883a 	mov	r4,r17
10112740:	d9800315 	stw	r6,12(sp)
10112744:	01031940 	call	10103194 <__udivsi3>
10112748:	a00b883a 	mov	r5,r20
1011274c:	8809883a 	mov	r4,r17
10112750:	d8800215 	stw	r2,8(sp)
10112754:	01031f80 	call	101031f8 <__umodsi3>
10112758:	d9c00217 	ldw	r7,8(sp)
1011275c:	1004943a 	slli	r2,r2,16
10112760:	94bfffcc 	andi	r18,r18,65535
10112764:	b9d1383a 	mul	r8,r23,r7
10112768:	90a4b03a 	or	r18,r18,r2
1011276c:	d9800317 	ldw	r6,12(sp)
10112770:	9200062e 	bgeu	r18,r8,1011278c <__divdf3+0x3f4>
10112774:	9725883a 	add	r18,r18,fp
10112778:	38bfffc4 	addi	r2,r7,-1
1011277c:	9700d636 	bltu	r18,fp,10112ad8 <__divdf3+0x740>
10112780:	9200d52e 	bgeu	r18,r8,10112ad8 <__divdf3+0x740>
10112784:	39ffff84 	addi	r7,r7,-2
10112788:	9725883a 	add	r18,r18,fp
1011278c:	3004943a 	slli	r2,r6,16
10112790:	b012d43a 	srli	r9,r22,16
10112794:	b1bfffcc 	andi	r6,r22,65535
10112798:	11e2b03a 	or	r17,r2,r7
1011279c:	8806d43a 	srli	r3,r17,16
101127a0:	893fffcc 	andi	r4,r17,65535
101127a4:	218b383a 	mul	r5,r4,r6
101127a8:	30c5383a 	mul	r2,r6,r3
101127ac:	2249383a 	mul	r4,r4,r9
101127b0:	280ed43a 	srli	r7,r5,16
101127b4:	9225c83a 	sub	r18,r18,r8
101127b8:	2089883a 	add	r4,r4,r2
101127bc:	3909883a 	add	r4,r7,r4
101127c0:	1a47383a 	mul	r3,r3,r9
101127c4:	2080022e 	bgeu	r4,r2,101127d0 <__divdf3+0x438>
101127c8:	00800074 	movhi	r2,1
101127cc:	1887883a 	add	r3,r3,r2
101127d0:	2004d43a 	srli	r2,r4,16
101127d4:	2008943a 	slli	r4,r4,16
101127d8:	297fffcc 	andi	r5,r5,65535
101127dc:	10c7883a 	add	r3,r2,r3
101127e0:	2149883a 	add	r4,r4,r5
101127e4:	90c0a536 	bltu	r18,r3,10112a7c <__divdf3+0x6e4>
101127e8:	90c0bf26 	beq	r18,r3,10112ae8 <__divdf3+0x750>
101127ec:	90c7c83a 	sub	r3,r18,r3
101127f0:	810fc83a 	sub	r7,r16,r4
101127f4:	81e5803a 	cmpltu	r18,r16,r7
101127f8:	1ca5c83a 	sub	r18,r3,r18
101127fc:	e480c126 	beq	fp,r18,10112b04 <__divdf3+0x76c>
10112800:	a00b883a 	mov	r5,r20
10112804:	9009883a 	mov	r4,r18
10112808:	d9800315 	stw	r6,12(sp)
1011280c:	d9c00215 	stw	r7,8(sp)
10112810:	da400115 	stw	r9,4(sp)
10112814:	01031940 	call	10103194 <__udivsi3>
10112818:	a00b883a 	mov	r5,r20
1011281c:	9009883a 	mov	r4,r18
10112820:	d8800015 	stw	r2,0(sp)
10112824:	01031f80 	call	101031f8 <__umodsi3>
10112828:	d9c00217 	ldw	r7,8(sp)
1011282c:	da000017 	ldw	r8,0(sp)
10112830:	1006943a 	slli	r3,r2,16
10112834:	3804d43a 	srli	r2,r7,16
10112838:	ba21383a 	mul	r16,r23,r8
1011283c:	d9800317 	ldw	r6,12(sp)
10112840:	10c4b03a 	or	r2,r2,r3
10112844:	da400117 	ldw	r9,4(sp)
10112848:	1400062e 	bgeu	r2,r16,10112864 <__divdf3+0x4cc>
1011284c:	1705883a 	add	r2,r2,fp
10112850:	40ffffc4 	addi	r3,r8,-1
10112854:	1700ad36 	bltu	r2,fp,10112b0c <__divdf3+0x774>
10112858:	1400ac2e 	bgeu	r2,r16,10112b0c <__divdf3+0x774>
1011285c:	423fff84 	addi	r8,r8,-2
10112860:	1705883a 	add	r2,r2,fp
10112864:	1421c83a 	sub	r16,r2,r16
10112868:	a00b883a 	mov	r5,r20
1011286c:	8009883a 	mov	r4,r16
10112870:	d9800315 	stw	r6,12(sp)
10112874:	d9c00215 	stw	r7,8(sp)
10112878:	da000015 	stw	r8,0(sp)
1011287c:	da400115 	stw	r9,4(sp)
10112880:	01031940 	call	10103194 <__udivsi3>
10112884:	8009883a 	mov	r4,r16
10112888:	a00b883a 	mov	r5,r20
1011288c:	1025883a 	mov	r18,r2
10112890:	01031f80 	call	101031f8 <__umodsi3>
10112894:	d9c00217 	ldw	r7,8(sp)
10112898:	1004943a 	slli	r2,r2,16
1011289c:	bcaf383a 	mul	r23,r23,r18
101128a0:	393fffcc 	andi	r4,r7,65535
101128a4:	2088b03a 	or	r4,r4,r2
101128a8:	d9800317 	ldw	r6,12(sp)
101128ac:	da000017 	ldw	r8,0(sp)
101128b0:	da400117 	ldw	r9,4(sp)
101128b4:	25c0062e 	bgeu	r4,r23,101128d0 <__divdf3+0x538>
101128b8:	2709883a 	add	r4,r4,fp
101128bc:	90bfffc4 	addi	r2,r18,-1
101128c0:	27009436 	bltu	r4,fp,10112b14 <__divdf3+0x77c>
101128c4:	25c0932e 	bgeu	r4,r23,10112b14 <__divdf3+0x77c>
101128c8:	94bfff84 	addi	r18,r18,-2
101128cc:	2709883a 	add	r4,r4,fp
101128d0:	4004943a 	slli	r2,r8,16
101128d4:	25efc83a 	sub	r23,r4,r23
101128d8:	1490b03a 	or	r8,r2,r18
101128dc:	4008d43a 	srli	r4,r8,16
101128e0:	40ffffcc 	andi	r3,r8,65535
101128e4:	30c5383a 	mul	r2,r6,r3
101128e8:	1a47383a 	mul	r3,r3,r9
101128ec:	310d383a 	mul	r6,r6,r4
101128f0:	100ad43a 	srli	r5,r2,16
101128f4:	4913383a 	mul	r9,r9,r4
101128f8:	1987883a 	add	r3,r3,r6
101128fc:	28c7883a 	add	r3,r5,r3
10112900:	1980022e 	bgeu	r3,r6,1011290c <__divdf3+0x574>
10112904:	01000074 	movhi	r4,1
10112908:	4913883a 	add	r9,r9,r4
1011290c:	1808d43a 	srli	r4,r3,16
10112910:	1806943a 	slli	r3,r3,16
10112914:	10bfffcc 	andi	r2,r2,65535
10112918:	2253883a 	add	r9,r4,r9
1011291c:	1887883a 	add	r3,r3,r2
10112920:	ba403836 	bltu	r23,r9,10112a04 <__divdf3+0x66c>
10112924:	ba403626 	beq	r23,r9,10112a00 <__divdf3+0x668>
10112928:	42000054 	ori	r8,r8,1
1011292c:	a880ffc4 	addi	r2,r21,1023
10112930:	00bf570e 	bge	zero,r2,10112690 <_gp+0xffff0ebc>
10112934:	40c001cc 	andi	r3,r8,7
10112938:	18000726 	beq	r3,zero,10112958 <__divdf3+0x5c0>
1011293c:	40c003cc 	andi	r3,r8,15
10112940:	01000104 	movi	r4,4
10112944:	19000426 	beq	r3,r4,10112958 <__divdf3+0x5c0>
10112948:	4107883a 	add	r3,r8,r4
1011294c:	1a11803a 	cmpltu	r8,r3,r8
10112950:	8a23883a 	add	r17,r17,r8
10112954:	1811883a 	mov	r8,r3
10112958:	88c0402c 	andhi	r3,r17,256
1011295c:	18000426 	beq	r3,zero,10112970 <__divdf3+0x5d8>
10112960:	00ffc034 	movhi	r3,65280
10112964:	18ffffc4 	addi	r3,r3,-1
10112968:	a8810004 	addi	r2,r21,1024
1011296c:	88e2703a 	and	r17,r17,r3
10112970:	00c1ff84 	movi	r3,2046
10112974:	18bee316 	blt	r3,r2,10112504 <_gp+0xffff0d30>
10112978:	8824977a 	slli	r18,r17,29
1011297c:	4010d0fa 	srli	r8,r8,3
10112980:	8822927a 	slli	r17,r17,9
10112984:	1081ffcc 	andi	r2,r2,2047
10112988:	9224b03a 	or	r18,r18,r8
1011298c:	880ad33a 	srli	r5,r17,12
10112990:	98c0004c 	andi	r3,r19,1
10112994:	003edf06 	br	10112514 <_gp+0xffff0d40>
10112998:	8080022c 	andhi	r2,r16,8
1011299c:	10001226 	beq	r2,zero,101129e8 <__divdf3+0x650>
101129a0:	8880022c 	andhi	r2,r17,8
101129a4:	1000101e 	bne	r2,zero,101129e8 <__divdf3+0x650>
101129a8:	00800434 	movhi	r2,16
101129ac:	89400234 	orhi	r5,r17,8
101129b0:	10bfffc4 	addi	r2,r2,-1
101129b4:	b007883a 	mov	r3,r22
101129b8:	288a703a 	and	r5,r5,r2
101129bc:	4025883a 	mov	r18,r8
101129c0:	003f3106 	br	10112688 <_gp+0xffff0eb4>
101129c4:	008000c4 	movi	r2,3
101129c8:	3880a626 	beq	r7,r2,10112c64 <__divdf3+0x8cc>
101129cc:	00800044 	movi	r2,1
101129d0:	3880521e 	bne	r7,r2,10112b1c <__divdf3+0x784>
101129d4:	b807883a 	mov	r3,r23
101129d8:	0005883a 	mov	r2,zero
101129dc:	000b883a 	mov	r5,zero
101129e0:	0025883a 	mov	r18,zero
101129e4:	003ecb06 	br	10112514 <_gp+0xffff0d40>
101129e8:	00800434 	movhi	r2,16
101129ec:	81400234 	orhi	r5,r16,8
101129f0:	10bfffc4 	addi	r2,r2,-1
101129f4:	a007883a 	mov	r3,r20
101129f8:	288a703a 	and	r5,r5,r2
101129fc:	003f2206 	br	10112688 <_gp+0xffff0eb4>
10112a00:	183fca26 	beq	r3,zero,1011292c <_gp+0xffff1158>
10112a04:	e5ef883a 	add	r23,fp,r23
10112a08:	40bfffc4 	addi	r2,r8,-1
10112a0c:	bf00392e 	bgeu	r23,fp,10112af4 <__divdf3+0x75c>
10112a10:	1011883a 	mov	r8,r2
10112a14:	ba7fc41e 	bne	r23,r9,10112928 <_gp+0xffff1154>
10112a18:	b0ffc31e 	bne	r22,r3,10112928 <_gp+0xffff1154>
10112a1c:	003fc306 	br	1011292c <_gp+0xffff1158>
10112a20:	143ff604 	addi	r16,r2,-40
10112a24:	9c20983a 	sll	r16,r19,r16
10112a28:	0025883a 	mov	r18,zero
10112a2c:	003ee206 	br	101125b8 <_gp+0xffff0de4>
10112a30:	d9800315 	stw	r6,12(sp)
10112a34:	d9c00215 	stw	r7,8(sp)
10112a38:	01140f00 	call	101140f0 <__clzsi2>
10112a3c:	10800804 	addi	r2,r2,32
10112a40:	d9c00217 	ldw	r7,8(sp)
10112a44:	d9800317 	ldw	r6,12(sp)
10112a48:	003ed106 	br	10112590 <_gp+0xffff0dbc>
10112a4c:	147ff604 	addi	r17,r2,-40
10112a50:	3462983a 	sll	r17,r6,r17
10112a54:	0011883a 	mov	r8,zero
10112a58:	003ef506 	br	10112630 <_gp+0xffff0e5c>
10112a5c:	3009883a 	mov	r4,r6
10112a60:	d9800315 	stw	r6,12(sp)
10112a64:	da400115 	stw	r9,4(sp)
10112a68:	01140f00 	call	101140f0 <__clzsi2>
10112a6c:	10800804 	addi	r2,r2,32
10112a70:	da400117 	ldw	r9,4(sp)
10112a74:	d9800317 	ldw	r6,12(sp)
10112a78:	003ee306 	br	10112608 <_gp+0xffff0e34>
10112a7c:	85a1883a 	add	r16,r16,r22
10112a80:	8585803a 	cmpltu	r2,r16,r22
10112a84:	1705883a 	add	r2,r2,fp
10112a88:	14a5883a 	add	r18,r2,r18
10112a8c:	88bfffc4 	addi	r2,r17,-1
10112a90:	e4800c2e 	bgeu	fp,r18,10112ac4 <__divdf3+0x72c>
10112a94:	90c03e36 	bltu	r18,r3,10112b90 <__divdf3+0x7f8>
10112a98:	1c806926 	beq	r3,r18,10112c40 <__divdf3+0x8a8>
10112a9c:	90c7c83a 	sub	r3,r18,r3
10112aa0:	1023883a 	mov	r17,r2
10112aa4:	003f5206 	br	101127f0 <_gp+0xffff101c>
10112aa8:	923f0436 	bltu	r18,r8,101126bc <_gp+0xffff0ee8>
10112aac:	800897fa 	slli	r4,r16,31
10112ab0:	9004d07a 	srli	r2,r18,1
10112ab4:	8006d07a 	srli	r3,r16,1
10112ab8:	902097fa 	slli	r16,r18,31
10112abc:	20a4b03a 	or	r18,r4,r2
10112ac0:	003f0106 	br	101126c8 <_gp+0xffff0ef4>
10112ac4:	e4bff51e 	bne	fp,r18,10112a9c <_gp+0xffff12c8>
10112ac8:	85bff22e 	bgeu	r16,r22,10112a94 <_gp+0xffff12c0>
10112acc:	e0c7c83a 	sub	r3,fp,r3
10112ad0:	1023883a 	mov	r17,r2
10112ad4:	003f4606 	br	101127f0 <_gp+0xffff101c>
10112ad8:	100f883a 	mov	r7,r2
10112adc:	003f2b06 	br	1011278c <_gp+0xffff0fb8>
10112ae0:	180d883a 	mov	r6,r3
10112ae4:	003f1306 	br	10112734 <_gp+0xffff0f60>
10112ae8:	813fe436 	bltu	r16,r4,10112a7c <_gp+0xffff12a8>
10112aec:	0007883a 	mov	r3,zero
10112af0:	003f3f06 	br	101127f0 <_gp+0xffff101c>
10112af4:	ba402c36 	bltu	r23,r9,10112ba8 <__divdf3+0x810>
10112af8:	4dc05426 	beq	r9,r23,10112c4c <__divdf3+0x8b4>
10112afc:	1011883a 	mov	r8,r2
10112b00:	003f8906 	br	10112928 <_gp+0xffff1154>
10112b04:	023fffc4 	movi	r8,-1
10112b08:	003f8806 	br	1011292c <_gp+0xffff1158>
10112b0c:	1811883a 	mov	r8,r3
10112b10:	003f5406 	br	10112864 <_gp+0xffff1090>
10112b14:	1025883a 	mov	r18,r2
10112b18:	003f6d06 	br	101128d0 <_gp+0xffff10fc>
10112b1c:	b827883a 	mov	r19,r23
10112b20:	003f8206 	br	1011292c <_gp+0xffff1158>
10112b24:	010007c4 	movi	r4,31
10112b28:	20c02616 	blt	r4,r3,10112bc4 <__divdf3+0x82c>
10112b2c:	00800804 	movi	r2,32
10112b30:	10c5c83a 	sub	r2,r2,r3
10112b34:	888a983a 	sll	r5,r17,r2
10112b38:	40c8d83a 	srl	r4,r8,r3
10112b3c:	4084983a 	sll	r2,r8,r2
10112b40:	88e2d83a 	srl	r17,r17,r3
10112b44:	2906b03a 	or	r3,r5,r4
10112b48:	1004c03a 	cmpne	r2,r2,zero
10112b4c:	1886b03a 	or	r3,r3,r2
10112b50:	188001cc 	andi	r2,r3,7
10112b54:	10000726 	beq	r2,zero,10112b74 <__divdf3+0x7dc>
10112b58:	188003cc 	andi	r2,r3,15
10112b5c:	01000104 	movi	r4,4
10112b60:	11000426 	beq	r2,r4,10112b74 <__divdf3+0x7dc>
10112b64:	1805883a 	mov	r2,r3
10112b68:	10c00104 	addi	r3,r2,4
10112b6c:	1885803a 	cmpltu	r2,r3,r2
10112b70:	88a3883a 	add	r17,r17,r2
10112b74:	8880202c 	andhi	r2,r17,128
10112b78:	10002726 	beq	r2,zero,10112c18 <__divdf3+0x880>
10112b7c:	98c0004c 	andi	r3,r19,1
10112b80:	00800044 	movi	r2,1
10112b84:	000b883a 	mov	r5,zero
10112b88:	0025883a 	mov	r18,zero
10112b8c:	003e6106 	br	10112514 <_gp+0xffff0d40>
10112b90:	85a1883a 	add	r16,r16,r22
10112b94:	8585803a 	cmpltu	r2,r16,r22
10112b98:	1705883a 	add	r2,r2,fp
10112b9c:	14a5883a 	add	r18,r2,r18
10112ba0:	8c7fff84 	addi	r17,r17,-2
10112ba4:	003f1106 	br	101127ec <_gp+0xffff1018>
10112ba8:	b589883a 	add	r4,r22,r22
10112bac:	25ad803a 	cmpltu	r22,r4,r22
10112bb0:	b739883a 	add	fp,r22,fp
10112bb4:	40bfff84 	addi	r2,r8,-2
10112bb8:	bf2f883a 	add	r23,r23,fp
10112bbc:	202d883a 	mov	r22,r4
10112bc0:	003f9306 	br	10112a10 <_gp+0xffff123c>
10112bc4:	013ff844 	movi	r4,-31
10112bc8:	2085c83a 	sub	r2,r4,r2
10112bcc:	8888d83a 	srl	r4,r17,r2
10112bd0:	00800804 	movi	r2,32
10112bd4:	18802126 	beq	r3,r2,10112c5c <__divdf3+0x8c4>
10112bd8:	00801004 	movi	r2,64
10112bdc:	10c5c83a 	sub	r2,r2,r3
10112be0:	8884983a 	sll	r2,r17,r2
10112be4:	1204b03a 	or	r2,r2,r8
10112be8:	1004c03a 	cmpne	r2,r2,zero
10112bec:	2084b03a 	or	r2,r4,r2
10112bf0:	144001cc 	andi	r17,r2,7
10112bf4:	88000d1e 	bne	r17,zero,10112c2c <__divdf3+0x894>
10112bf8:	000b883a 	mov	r5,zero
10112bfc:	1024d0fa 	srli	r18,r2,3
10112c00:	98c0004c 	andi	r3,r19,1
10112c04:	0005883a 	mov	r2,zero
10112c08:	9464b03a 	or	r18,r18,r17
10112c0c:	003e4106 	br	10112514 <_gp+0xffff0d40>
10112c10:	1007883a 	mov	r3,r2
10112c14:	0023883a 	mov	r17,zero
10112c18:	880a927a 	slli	r5,r17,9
10112c1c:	1805883a 	mov	r2,r3
10112c20:	8822977a 	slli	r17,r17,29
10112c24:	280ad33a 	srli	r5,r5,12
10112c28:	003ff406 	br	10112bfc <_gp+0xffff1428>
10112c2c:	10c003cc 	andi	r3,r2,15
10112c30:	01000104 	movi	r4,4
10112c34:	193ff626 	beq	r3,r4,10112c10 <_gp+0xffff143c>
10112c38:	0023883a 	mov	r17,zero
10112c3c:	003fca06 	br	10112b68 <_gp+0xffff1394>
10112c40:	813fd336 	bltu	r16,r4,10112b90 <_gp+0xffff13bc>
10112c44:	1023883a 	mov	r17,r2
10112c48:	003fa806 	br	10112aec <_gp+0xffff1318>
10112c4c:	b0ffd636 	bltu	r22,r3,10112ba8 <_gp+0xffff13d4>
10112c50:	1011883a 	mov	r8,r2
10112c54:	b0ff341e 	bne	r22,r3,10112928 <_gp+0xffff1154>
10112c58:	003f3406 	br	1011292c <_gp+0xffff1158>
10112c5c:	0005883a 	mov	r2,zero
10112c60:	003fe006 	br	10112be4 <_gp+0xffff1410>
10112c64:	00800434 	movhi	r2,16
10112c68:	89400234 	orhi	r5,r17,8
10112c6c:	10bfffc4 	addi	r2,r2,-1
10112c70:	b807883a 	mov	r3,r23
10112c74:	288a703a 	and	r5,r5,r2
10112c78:	4025883a 	mov	r18,r8
10112c7c:	003e8206 	br	10112688 <_gp+0xffff0eb4>

10112c80 <__eqdf2>:
10112c80:	2804d53a 	srli	r2,r5,20
10112c84:	3806d53a 	srli	r3,r7,20
10112c88:	02000434 	movhi	r8,16
10112c8c:	423fffc4 	addi	r8,r8,-1
10112c90:	1081ffcc 	andi	r2,r2,2047
10112c94:	0281ffc4 	movi	r10,2047
10112c98:	2a12703a 	and	r9,r5,r8
10112c9c:	18c1ffcc 	andi	r3,r3,2047
10112ca0:	3a10703a 	and	r8,r7,r8
10112ca4:	280ad7fa 	srli	r5,r5,31
10112ca8:	380ed7fa 	srli	r7,r7,31
10112cac:	12801026 	beq	r2,r10,10112cf0 <__eqdf2+0x70>
10112cb0:	0281ffc4 	movi	r10,2047
10112cb4:	1a800a26 	beq	r3,r10,10112ce0 <__eqdf2+0x60>
10112cb8:	10c00226 	beq	r2,r3,10112cc4 <__eqdf2+0x44>
10112cbc:	00800044 	movi	r2,1
10112cc0:	f800283a 	ret
10112cc4:	4a3ffd1e 	bne	r9,r8,10112cbc <_gp+0xffff14e8>
10112cc8:	21bffc1e 	bne	r4,r6,10112cbc <_gp+0xffff14e8>
10112ccc:	29c00c26 	beq	r5,r7,10112d00 <__eqdf2+0x80>
10112cd0:	103ffa1e 	bne	r2,zero,10112cbc <_gp+0xffff14e8>
10112cd4:	2244b03a 	or	r2,r4,r9
10112cd8:	1004c03a 	cmpne	r2,r2,zero
10112cdc:	f800283a 	ret
10112ce0:	3214b03a 	or	r10,r6,r8
10112ce4:	503ff426 	beq	r10,zero,10112cb8 <_gp+0xffff14e4>
10112ce8:	00800044 	movi	r2,1
10112cec:	f800283a 	ret
10112cf0:	2254b03a 	or	r10,r4,r9
10112cf4:	503fee26 	beq	r10,zero,10112cb0 <_gp+0xffff14dc>
10112cf8:	00800044 	movi	r2,1
10112cfc:	f800283a 	ret
10112d00:	0005883a 	mov	r2,zero
10112d04:	f800283a 	ret

10112d08 <__gedf2>:
10112d08:	2804d53a 	srli	r2,r5,20
10112d0c:	3806d53a 	srli	r3,r7,20
10112d10:	02000434 	movhi	r8,16
10112d14:	423fffc4 	addi	r8,r8,-1
10112d18:	1081ffcc 	andi	r2,r2,2047
10112d1c:	0241ffc4 	movi	r9,2047
10112d20:	2a14703a 	and	r10,r5,r8
10112d24:	18c1ffcc 	andi	r3,r3,2047
10112d28:	3a10703a 	and	r8,r7,r8
10112d2c:	280ad7fa 	srli	r5,r5,31
10112d30:	380ed7fa 	srli	r7,r7,31
10112d34:	12401d26 	beq	r2,r9,10112dac <__gedf2+0xa4>
10112d38:	0241ffc4 	movi	r9,2047
10112d3c:	1a401226 	beq	r3,r9,10112d88 <__gedf2+0x80>
10112d40:	1000081e 	bne	r2,zero,10112d64 <__gedf2+0x5c>
10112d44:	2296b03a 	or	r11,r4,r10
10112d48:	5813003a 	cmpeq	r9,r11,zero
10112d4c:	1800091e 	bne	r3,zero,10112d74 <__gedf2+0x6c>
10112d50:	3218b03a 	or	r12,r6,r8
10112d54:	6000071e 	bne	r12,zero,10112d74 <__gedf2+0x6c>
10112d58:	0005883a 	mov	r2,zero
10112d5c:	5800101e 	bne	r11,zero,10112da0 <__gedf2+0x98>
10112d60:	f800283a 	ret
10112d64:	18000c1e 	bne	r3,zero,10112d98 <__gedf2+0x90>
10112d68:	3212b03a 	or	r9,r6,r8
10112d6c:	48000c26 	beq	r9,zero,10112da0 <__gedf2+0x98>
10112d70:	0013883a 	mov	r9,zero
10112d74:	39c03fcc 	andi	r7,r7,255
10112d78:	48000826 	beq	r9,zero,10112d9c <__gedf2+0x94>
10112d7c:	38000926 	beq	r7,zero,10112da4 <__gedf2+0x9c>
10112d80:	00800044 	movi	r2,1
10112d84:	f800283a 	ret
10112d88:	3212b03a 	or	r9,r6,r8
10112d8c:	483fec26 	beq	r9,zero,10112d40 <_gp+0xffff156c>
10112d90:	00bfff84 	movi	r2,-2
10112d94:	f800283a 	ret
10112d98:	39c03fcc 	andi	r7,r7,255
10112d9c:	29c00626 	beq	r5,r7,10112db8 <__gedf2+0xb0>
10112da0:	283ff726 	beq	r5,zero,10112d80 <_gp+0xffff15ac>
10112da4:	00bfffc4 	movi	r2,-1
10112da8:	f800283a 	ret
10112dac:	2292b03a 	or	r9,r4,r10
10112db0:	483fe126 	beq	r9,zero,10112d38 <_gp+0xffff1564>
10112db4:	003ff606 	br	10112d90 <_gp+0xffff15bc>
10112db8:	18bff916 	blt	r3,r2,10112da0 <_gp+0xffff15cc>
10112dbc:	10c00316 	blt	r2,r3,10112dcc <__gedf2+0xc4>
10112dc0:	42bff736 	bltu	r8,r10,10112da0 <_gp+0xffff15cc>
10112dc4:	52000326 	beq	r10,r8,10112dd4 <__gedf2+0xcc>
10112dc8:	5200042e 	bgeu	r10,r8,10112ddc <__gedf2+0xd4>
10112dcc:	283fec1e 	bne	r5,zero,10112d80 <_gp+0xffff15ac>
10112dd0:	003ff406 	br	10112da4 <_gp+0xffff15d0>
10112dd4:	313ff236 	bltu	r6,r4,10112da0 <_gp+0xffff15cc>
10112dd8:	21bffc36 	bltu	r4,r6,10112dcc <_gp+0xffff15f8>
10112ddc:	0005883a 	mov	r2,zero
10112de0:	f800283a 	ret

10112de4 <__ledf2>:
10112de4:	2804d53a 	srli	r2,r5,20
10112de8:	3810d53a 	srli	r8,r7,20
10112dec:	00c00434 	movhi	r3,16
10112df0:	18ffffc4 	addi	r3,r3,-1
10112df4:	1081ffcc 	andi	r2,r2,2047
10112df8:	0241ffc4 	movi	r9,2047
10112dfc:	28d4703a 	and	r10,r5,r3
10112e00:	4201ffcc 	andi	r8,r8,2047
10112e04:	38c6703a 	and	r3,r7,r3
10112e08:	280ad7fa 	srli	r5,r5,31
10112e0c:	380ed7fa 	srli	r7,r7,31
10112e10:	12401f26 	beq	r2,r9,10112e90 <__ledf2+0xac>
10112e14:	0241ffc4 	movi	r9,2047
10112e18:	42401426 	beq	r8,r9,10112e6c <__ledf2+0x88>
10112e1c:	1000091e 	bne	r2,zero,10112e44 <__ledf2+0x60>
10112e20:	2296b03a 	or	r11,r4,r10
10112e24:	5813003a 	cmpeq	r9,r11,zero
10112e28:	29403fcc 	andi	r5,r5,255
10112e2c:	40000a1e 	bne	r8,zero,10112e58 <__ledf2+0x74>
10112e30:	30d8b03a 	or	r12,r6,r3
10112e34:	6000081e 	bne	r12,zero,10112e58 <__ledf2+0x74>
10112e38:	0005883a 	mov	r2,zero
10112e3c:	5800111e 	bne	r11,zero,10112e84 <__ledf2+0xa0>
10112e40:	f800283a 	ret
10112e44:	29403fcc 	andi	r5,r5,255
10112e48:	40000c1e 	bne	r8,zero,10112e7c <__ledf2+0x98>
10112e4c:	30d2b03a 	or	r9,r6,r3
10112e50:	48000c26 	beq	r9,zero,10112e84 <__ledf2+0xa0>
10112e54:	0013883a 	mov	r9,zero
10112e58:	39c03fcc 	andi	r7,r7,255
10112e5c:	48000826 	beq	r9,zero,10112e80 <__ledf2+0x9c>
10112e60:	38001126 	beq	r7,zero,10112ea8 <__ledf2+0xc4>
10112e64:	00800044 	movi	r2,1
10112e68:	f800283a 	ret
10112e6c:	30d2b03a 	or	r9,r6,r3
10112e70:	483fea26 	beq	r9,zero,10112e1c <_gp+0xffff1648>
10112e74:	00800084 	movi	r2,2
10112e78:	f800283a 	ret
10112e7c:	39c03fcc 	andi	r7,r7,255
10112e80:	39400726 	beq	r7,r5,10112ea0 <__ledf2+0xbc>
10112e84:	2800081e 	bne	r5,zero,10112ea8 <__ledf2+0xc4>
10112e88:	00800044 	movi	r2,1
10112e8c:	f800283a 	ret
10112e90:	2292b03a 	or	r9,r4,r10
10112e94:	483fdf26 	beq	r9,zero,10112e14 <_gp+0xffff1640>
10112e98:	00800084 	movi	r2,2
10112e9c:	f800283a 	ret
10112ea0:	4080030e 	bge	r8,r2,10112eb0 <__ledf2+0xcc>
10112ea4:	383fef26 	beq	r7,zero,10112e64 <_gp+0xffff1690>
10112ea8:	00bfffc4 	movi	r2,-1
10112eac:	f800283a 	ret
10112eb0:	123feb16 	blt	r2,r8,10112e60 <_gp+0xffff168c>
10112eb4:	1abff336 	bltu	r3,r10,10112e84 <_gp+0xffff16b0>
10112eb8:	50c00326 	beq	r10,r3,10112ec8 <__ledf2+0xe4>
10112ebc:	50c0042e 	bgeu	r10,r3,10112ed0 <__ledf2+0xec>
10112ec0:	283fe81e 	bne	r5,zero,10112e64 <_gp+0xffff1690>
10112ec4:	003ff806 	br	10112ea8 <_gp+0xffff16d4>
10112ec8:	313fee36 	bltu	r6,r4,10112e84 <_gp+0xffff16b0>
10112ecc:	21bffc36 	bltu	r4,r6,10112ec0 <_gp+0xffff16ec>
10112ed0:	0005883a 	mov	r2,zero
10112ed4:	f800283a 	ret

10112ed8 <__muldf3>:
10112ed8:	defff304 	addi	sp,sp,-52
10112edc:	2804d53a 	srli	r2,r5,20
10112ee0:	dd800915 	stw	r22,36(sp)
10112ee4:	282cd7fa 	srli	r22,r5,31
10112ee8:	dc000315 	stw	r16,12(sp)
10112eec:	04000434 	movhi	r16,16
10112ef0:	dd400815 	stw	r21,32(sp)
10112ef4:	dc800515 	stw	r18,20(sp)
10112ef8:	843fffc4 	addi	r16,r16,-1
10112efc:	dfc00c15 	stw	ra,48(sp)
10112f00:	df000b15 	stw	fp,44(sp)
10112f04:	ddc00a15 	stw	r23,40(sp)
10112f08:	dd000715 	stw	r20,28(sp)
10112f0c:	dcc00615 	stw	r19,24(sp)
10112f10:	dc400415 	stw	r17,16(sp)
10112f14:	1481ffcc 	andi	r18,r2,2047
10112f18:	2c20703a 	and	r16,r5,r16
10112f1c:	b02b883a 	mov	r21,r22
10112f20:	b2403fcc 	andi	r9,r22,255
10112f24:	90006026 	beq	r18,zero,101130a8 <__muldf3+0x1d0>
10112f28:	0081ffc4 	movi	r2,2047
10112f2c:	2029883a 	mov	r20,r4
10112f30:	90803626 	beq	r18,r2,1011300c <__muldf3+0x134>
10112f34:	80800434 	orhi	r2,r16,16
10112f38:	100490fa 	slli	r2,r2,3
10112f3c:	2020d77a 	srli	r16,r4,29
10112f40:	202890fa 	slli	r20,r4,3
10112f44:	94bf0044 	addi	r18,r18,-1023
10112f48:	80a0b03a 	or	r16,r16,r2
10112f4c:	0027883a 	mov	r19,zero
10112f50:	0039883a 	mov	fp,zero
10112f54:	3804d53a 	srli	r2,r7,20
10112f58:	382ed7fa 	srli	r23,r7,31
10112f5c:	04400434 	movhi	r17,16
10112f60:	8c7fffc4 	addi	r17,r17,-1
10112f64:	1081ffcc 	andi	r2,r2,2047
10112f68:	3011883a 	mov	r8,r6
10112f6c:	3c62703a 	and	r17,r7,r17
10112f70:	ba803fcc 	andi	r10,r23,255
10112f74:	10006d26 	beq	r2,zero,1011312c <__muldf3+0x254>
10112f78:	00c1ffc4 	movi	r3,2047
10112f7c:	10c06526 	beq	r2,r3,10113114 <__muldf3+0x23c>
10112f80:	88c00434 	orhi	r3,r17,16
10112f84:	180690fa 	slli	r3,r3,3
10112f88:	3022d77a 	srli	r17,r6,29
10112f8c:	301090fa 	slli	r8,r6,3
10112f90:	10bf0044 	addi	r2,r2,-1023
10112f94:	88e2b03a 	or	r17,r17,r3
10112f98:	000b883a 	mov	r5,zero
10112f9c:	9085883a 	add	r2,r18,r2
10112fa0:	2cc8b03a 	or	r4,r5,r19
10112fa4:	00c003c4 	movi	r3,15
10112fa8:	bdacf03a 	xor	r22,r23,r22
10112fac:	12c00044 	addi	r11,r2,1
10112fb0:	19009936 	bltu	r3,r4,10113218 <__muldf3+0x340>
10112fb4:	200890ba 	slli	r4,r4,2
10112fb8:	00c40474 	movhi	r3,4113
10112fbc:	18cbf304 	addi	r3,r3,12236
10112fc0:	20c9883a 	add	r4,r4,r3
10112fc4:	20c00017 	ldw	r3,0(r4)
10112fc8:	1800683a 	jmp	r3
10112fcc:	10113218 	cmpnei	zero,r2,17608
10112fd0:	1011302c 	andhi	zero,r2,17600
10112fd4:	1011302c 	andhi	zero,r2,17600
10112fd8:	10113028 	cmpgeui	zero,r2,17600
10112fdc:	101131f4 	orhi	zero,r2,17607
10112fe0:	101131f4 	orhi	zero,r2,17607
10112fe4:	101131dc 	xori	zero,r2,17607
10112fe8:	10113028 	cmpgeui	zero,r2,17600
10112fec:	101131f4 	orhi	zero,r2,17607
10112ff0:	101131dc 	xori	zero,r2,17607
10112ff4:	101131f4 	orhi	zero,r2,17607
10112ff8:	10113028 	cmpgeui	zero,r2,17600
10112ffc:	10113204 	addi	zero,r2,17608
10113000:	10113204 	addi	zero,r2,17608
10113004:	10113204 	addi	zero,r2,17608
10113008:	10113420 	cmpeqi	zero,r2,17616
1011300c:	2404b03a 	or	r2,r4,r16
10113010:	10006f1e 	bne	r2,zero,101131d0 <__muldf3+0x2f8>
10113014:	04c00204 	movi	r19,8
10113018:	0021883a 	mov	r16,zero
1011301c:	0029883a 	mov	r20,zero
10113020:	07000084 	movi	fp,2
10113024:	003fcb06 	br	10112f54 <_gp+0xffff1780>
10113028:	502d883a 	mov	r22,r10
1011302c:	00800084 	movi	r2,2
10113030:	28805726 	beq	r5,r2,10113190 <__muldf3+0x2b8>
10113034:	008000c4 	movi	r2,3
10113038:	28816626 	beq	r5,r2,101135d4 <__muldf3+0x6fc>
1011303c:	00800044 	movi	r2,1
10113040:	2881411e 	bne	r5,r2,10113548 <__muldf3+0x670>
10113044:	b02b883a 	mov	r21,r22
10113048:	0005883a 	mov	r2,zero
1011304c:	000b883a 	mov	r5,zero
10113050:	0029883a 	mov	r20,zero
10113054:	1004953a 	slli	r2,r2,20
10113058:	a8c03fcc 	andi	r3,r21,255
1011305c:	04400434 	movhi	r17,16
10113060:	8c7fffc4 	addi	r17,r17,-1
10113064:	180697fa 	slli	r3,r3,31
10113068:	2c4a703a 	and	r5,r5,r17
1011306c:	288ab03a 	or	r5,r5,r2
10113070:	28c6b03a 	or	r3,r5,r3
10113074:	a005883a 	mov	r2,r20
10113078:	dfc00c17 	ldw	ra,48(sp)
1011307c:	df000b17 	ldw	fp,44(sp)
10113080:	ddc00a17 	ldw	r23,40(sp)
10113084:	dd800917 	ldw	r22,36(sp)
10113088:	dd400817 	ldw	r21,32(sp)
1011308c:	dd000717 	ldw	r20,28(sp)
10113090:	dcc00617 	ldw	r19,24(sp)
10113094:	dc800517 	ldw	r18,20(sp)
10113098:	dc400417 	ldw	r17,16(sp)
1011309c:	dc000317 	ldw	r16,12(sp)
101130a0:	dec00d04 	addi	sp,sp,52
101130a4:	f800283a 	ret
101130a8:	2404b03a 	or	r2,r4,r16
101130ac:	2027883a 	mov	r19,r4
101130b0:	10004226 	beq	r2,zero,101131bc <__muldf3+0x2e4>
101130b4:	8000fc26 	beq	r16,zero,101134a8 <__muldf3+0x5d0>
101130b8:	8009883a 	mov	r4,r16
101130bc:	d9800215 	stw	r6,8(sp)
101130c0:	d9c00015 	stw	r7,0(sp)
101130c4:	da400115 	stw	r9,4(sp)
101130c8:	01140f00 	call	101140f0 <__clzsi2>
101130cc:	d9800217 	ldw	r6,8(sp)
101130d0:	d9c00017 	ldw	r7,0(sp)
101130d4:	da400117 	ldw	r9,4(sp)
101130d8:	113ffd44 	addi	r4,r2,-11
101130dc:	00c00704 	movi	r3,28
101130e0:	1900ed16 	blt	r3,r4,10113498 <__muldf3+0x5c0>
101130e4:	00c00744 	movi	r3,29
101130e8:	147ffe04 	addi	r17,r2,-8
101130ec:	1907c83a 	sub	r3,r3,r4
101130f0:	8460983a 	sll	r16,r16,r17
101130f4:	98c6d83a 	srl	r3,r19,r3
101130f8:	9c68983a 	sll	r20,r19,r17
101130fc:	1c20b03a 	or	r16,r3,r16
10113100:	1080fcc4 	addi	r2,r2,1011
10113104:	00a5c83a 	sub	r18,zero,r2
10113108:	0027883a 	mov	r19,zero
1011310c:	0039883a 	mov	fp,zero
10113110:	003f9006 	br	10112f54 <_gp+0xffff1780>
10113114:	3446b03a 	or	r3,r6,r17
10113118:	1800261e 	bne	r3,zero,101131b4 <__muldf3+0x2dc>
1011311c:	0023883a 	mov	r17,zero
10113120:	0011883a 	mov	r8,zero
10113124:	01400084 	movi	r5,2
10113128:	003f9c06 	br	10112f9c <_gp+0xffff17c8>
1011312c:	3446b03a 	or	r3,r6,r17
10113130:	18001c26 	beq	r3,zero,101131a4 <__muldf3+0x2cc>
10113134:	8800ce26 	beq	r17,zero,10113470 <__muldf3+0x598>
10113138:	8809883a 	mov	r4,r17
1011313c:	d9800215 	stw	r6,8(sp)
10113140:	da400115 	stw	r9,4(sp)
10113144:	da800015 	stw	r10,0(sp)
10113148:	01140f00 	call	101140f0 <__clzsi2>
1011314c:	d9800217 	ldw	r6,8(sp)
10113150:	da400117 	ldw	r9,4(sp)
10113154:	da800017 	ldw	r10,0(sp)
10113158:	113ffd44 	addi	r4,r2,-11
1011315c:	00c00704 	movi	r3,28
10113160:	1900bf16 	blt	r3,r4,10113460 <__muldf3+0x588>
10113164:	00c00744 	movi	r3,29
10113168:	123ffe04 	addi	r8,r2,-8
1011316c:	1907c83a 	sub	r3,r3,r4
10113170:	8a22983a 	sll	r17,r17,r8
10113174:	30c6d83a 	srl	r3,r6,r3
10113178:	3210983a 	sll	r8,r6,r8
1011317c:	1c62b03a 	or	r17,r3,r17
10113180:	1080fcc4 	addi	r2,r2,1011
10113184:	0085c83a 	sub	r2,zero,r2
10113188:	000b883a 	mov	r5,zero
1011318c:	003f8306 	br	10112f9c <_gp+0xffff17c8>
10113190:	b02b883a 	mov	r21,r22
10113194:	0081ffc4 	movi	r2,2047
10113198:	000b883a 	mov	r5,zero
1011319c:	0029883a 	mov	r20,zero
101131a0:	003fac06 	br	10113054 <_gp+0xffff1880>
101131a4:	0023883a 	mov	r17,zero
101131a8:	0011883a 	mov	r8,zero
101131ac:	01400044 	movi	r5,1
101131b0:	003f7a06 	br	10112f9c <_gp+0xffff17c8>
101131b4:	014000c4 	movi	r5,3
101131b8:	003f7806 	br	10112f9c <_gp+0xffff17c8>
101131bc:	04c00104 	movi	r19,4
101131c0:	0021883a 	mov	r16,zero
101131c4:	0029883a 	mov	r20,zero
101131c8:	07000044 	movi	fp,1
101131cc:	003f6106 	br	10112f54 <_gp+0xffff1780>
101131d0:	04c00304 	movi	r19,12
101131d4:	070000c4 	movi	fp,3
101131d8:	003f5e06 	br	10112f54 <_gp+0xffff1780>
101131dc:	01400434 	movhi	r5,16
101131e0:	002b883a 	mov	r21,zero
101131e4:	297fffc4 	addi	r5,r5,-1
101131e8:	053fffc4 	movi	r20,-1
101131ec:	0081ffc4 	movi	r2,2047
101131f0:	003f9806 	br	10113054 <_gp+0xffff1880>
101131f4:	8023883a 	mov	r17,r16
101131f8:	a011883a 	mov	r8,r20
101131fc:	e00b883a 	mov	r5,fp
10113200:	003f8a06 	br	1011302c <_gp+0xffff1858>
10113204:	8023883a 	mov	r17,r16
10113208:	a011883a 	mov	r8,r20
1011320c:	482d883a 	mov	r22,r9
10113210:	e00b883a 	mov	r5,fp
10113214:	003f8506 	br	1011302c <_gp+0xffff1858>
10113218:	a00ad43a 	srli	r5,r20,16
1011321c:	401ad43a 	srli	r13,r8,16
10113220:	a53fffcc 	andi	r20,r20,65535
10113224:	423fffcc 	andi	r8,r8,65535
10113228:	4519383a 	mul	r12,r8,r20
1011322c:	4147383a 	mul	r3,r8,r5
10113230:	6d09383a 	mul	r4,r13,r20
10113234:	600cd43a 	srli	r6,r12,16
10113238:	2b5d383a 	mul	r14,r5,r13
1011323c:	20c9883a 	add	r4,r4,r3
10113240:	310d883a 	add	r6,r6,r4
10113244:	30c0022e 	bgeu	r6,r3,10113250 <__muldf3+0x378>
10113248:	00c00074 	movhi	r3,1
1011324c:	70dd883a 	add	r14,r14,r3
10113250:	8826d43a 	srli	r19,r17,16
10113254:	8bffffcc 	andi	r15,r17,65535
10113258:	7d23383a 	mul	r17,r15,r20
1011325c:	7949383a 	mul	r4,r15,r5
10113260:	9d29383a 	mul	r20,r19,r20
10113264:	8814d43a 	srli	r10,r17,16
10113268:	3012943a 	slli	r9,r6,16
1011326c:	a129883a 	add	r20,r20,r4
10113270:	633fffcc 	andi	r12,r12,65535
10113274:	5515883a 	add	r10,r10,r20
10113278:	3006d43a 	srli	r3,r6,16
1011327c:	4b13883a 	add	r9,r9,r12
10113280:	2ccb383a 	mul	r5,r5,r19
10113284:	5100022e 	bgeu	r10,r4,10113290 <__muldf3+0x3b8>
10113288:	01000074 	movhi	r4,1
1011328c:	290b883a 	add	r5,r5,r4
10113290:	802ad43a 	srli	r21,r16,16
10113294:	843fffcc 	andi	r16,r16,65535
10113298:	440d383a 	mul	r6,r8,r16
1011329c:	4565383a 	mul	r18,r8,r21
101132a0:	8349383a 	mul	r4,r16,r13
101132a4:	500e943a 	slli	r7,r10,16
101132a8:	3010d43a 	srli	r8,r6,16
101132ac:	5028d43a 	srli	r20,r10,16
101132b0:	2489883a 	add	r4,r4,r18
101132b4:	8abfffcc 	andi	r10,r17,65535
101132b8:	3a95883a 	add	r10,r7,r10
101132bc:	4119883a 	add	r12,r8,r4
101132c0:	a169883a 	add	r20,r20,r5
101132c4:	1a87883a 	add	r3,r3,r10
101132c8:	6d5b383a 	mul	r13,r13,r21
101132cc:	6480022e 	bgeu	r12,r18,101132d8 <__muldf3+0x400>
101132d0:	01000074 	movhi	r4,1
101132d4:	691b883a 	add	r13,r13,r4
101132d8:	7c25383a 	mul	r18,r15,r16
101132dc:	7d4b383a 	mul	r5,r15,r21
101132e0:	84cf383a 	mul	r7,r16,r19
101132e4:	901ed43a 	srli	r15,r18,16
101132e8:	6008d43a 	srli	r4,r12,16
101132ec:	6010943a 	slli	r8,r12,16
101132f0:	394f883a 	add	r7,r7,r5
101132f4:	333fffcc 	andi	r12,r6,65535
101132f8:	79df883a 	add	r15,r15,r7
101132fc:	235b883a 	add	r13,r4,r13
10113300:	9d63383a 	mul	r17,r19,r21
10113304:	4309883a 	add	r4,r8,r12
10113308:	7940022e 	bgeu	r15,r5,10113314 <__muldf3+0x43c>
1011330c:	01400074 	movhi	r5,1
10113310:	8963883a 	add	r17,r17,r5
10113314:	780a943a 	slli	r5,r15,16
10113318:	91bfffcc 	andi	r6,r18,65535
1011331c:	70c7883a 	add	r3,r14,r3
10113320:	298d883a 	add	r6,r5,r6
10113324:	1a8f803a 	cmpltu	r7,r3,r10
10113328:	350b883a 	add	r5,r6,r20
1011332c:	20c7883a 	add	r3,r4,r3
10113330:	3955883a 	add	r10,r7,r5
10113334:	1909803a 	cmpltu	r4,r3,r4
10113338:	6a91883a 	add	r8,r13,r10
1011333c:	780cd43a 	srli	r6,r15,16
10113340:	2219883a 	add	r12,r4,r8
10113344:	2d0b803a 	cmpltu	r5,r5,r20
10113348:	51cf803a 	cmpltu	r7,r10,r7
1011334c:	29ceb03a 	or	r7,r5,r7
10113350:	4351803a 	cmpltu	r8,r8,r13
10113354:	610b803a 	cmpltu	r5,r12,r4
10113358:	4148b03a 	or	r4,r8,r5
1011335c:	398f883a 	add	r7,r7,r6
10113360:	3909883a 	add	r4,r7,r4
10113364:	1810927a 	slli	r8,r3,9
10113368:	2449883a 	add	r4,r4,r17
1011336c:	2008927a 	slli	r4,r4,9
10113370:	6022d5fa 	srli	r17,r12,23
10113374:	1806d5fa 	srli	r3,r3,23
10113378:	4252b03a 	or	r9,r8,r9
1011337c:	600a927a 	slli	r5,r12,9
10113380:	4810c03a 	cmpne	r8,r9,zero
10113384:	2462b03a 	or	r17,r4,r17
10113388:	40c6b03a 	or	r3,r8,r3
1011338c:	8900402c 	andhi	r4,r17,256
10113390:	1950b03a 	or	r8,r3,r5
10113394:	20000726 	beq	r4,zero,101133b4 <__muldf3+0x4dc>
10113398:	4006d07a 	srli	r3,r8,1
1011339c:	880497fa 	slli	r2,r17,31
101133a0:	4200004c 	andi	r8,r8,1
101133a4:	8822d07a 	srli	r17,r17,1
101133a8:	1a10b03a 	or	r8,r3,r8
101133ac:	1210b03a 	or	r8,r2,r8
101133b0:	5805883a 	mov	r2,r11
101133b4:	1140ffc4 	addi	r5,r2,1023
101133b8:	0140440e 	bge	zero,r5,101134cc <__muldf3+0x5f4>
101133bc:	40c001cc 	andi	r3,r8,7
101133c0:	18000726 	beq	r3,zero,101133e0 <__muldf3+0x508>
101133c4:	40c003cc 	andi	r3,r8,15
101133c8:	01000104 	movi	r4,4
101133cc:	19000426 	beq	r3,r4,101133e0 <__muldf3+0x508>
101133d0:	4107883a 	add	r3,r8,r4
101133d4:	1a11803a 	cmpltu	r8,r3,r8
101133d8:	8a23883a 	add	r17,r17,r8
101133dc:	1811883a 	mov	r8,r3
101133e0:	88c0402c 	andhi	r3,r17,256
101133e4:	18000426 	beq	r3,zero,101133f8 <__muldf3+0x520>
101133e8:	11410004 	addi	r5,r2,1024
101133ec:	00bfc034 	movhi	r2,65280
101133f0:	10bfffc4 	addi	r2,r2,-1
101133f4:	88a2703a 	and	r17,r17,r2
101133f8:	0081ff84 	movi	r2,2046
101133fc:	117f6416 	blt	r2,r5,10113190 <_gp+0xffff19bc>
10113400:	8828977a 	slli	r20,r17,29
10113404:	4010d0fa 	srli	r8,r8,3
10113408:	8822927a 	slli	r17,r17,9
1011340c:	2881ffcc 	andi	r2,r5,2047
10113410:	a228b03a 	or	r20,r20,r8
10113414:	880ad33a 	srli	r5,r17,12
10113418:	b02b883a 	mov	r21,r22
1011341c:	003f0d06 	br	10113054 <_gp+0xffff1880>
10113420:	8080022c 	andhi	r2,r16,8
10113424:	10000926 	beq	r2,zero,1011344c <__muldf3+0x574>
10113428:	8880022c 	andhi	r2,r17,8
1011342c:	1000071e 	bne	r2,zero,1011344c <__muldf3+0x574>
10113430:	00800434 	movhi	r2,16
10113434:	89400234 	orhi	r5,r17,8
10113438:	10bfffc4 	addi	r2,r2,-1
1011343c:	b82b883a 	mov	r21,r23
10113440:	288a703a 	and	r5,r5,r2
10113444:	4029883a 	mov	r20,r8
10113448:	003f6806 	br	101131ec <_gp+0xffff1a18>
1011344c:	00800434 	movhi	r2,16
10113450:	81400234 	orhi	r5,r16,8
10113454:	10bfffc4 	addi	r2,r2,-1
10113458:	288a703a 	and	r5,r5,r2
1011345c:	003f6306 	br	101131ec <_gp+0xffff1a18>
10113460:	147ff604 	addi	r17,r2,-40
10113464:	3462983a 	sll	r17,r6,r17
10113468:	0011883a 	mov	r8,zero
1011346c:	003f4406 	br	10113180 <_gp+0xffff19ac>
10113470:	3009883a 	mov	r4,r6
10113474:	d9800215 	stw	r6,8(sp)
10113478:	da400115 	stw	r9,4(sp)
1011347c:	da800015 	stw	r10,0(sp)
10113480:	01140f00 	call	101140f0 <__clzsi2>
10113484:	10800804 	addi	r2,r2,32
10113488:	da800017 	ldw	r10,0(sp)
1011348c:	da400117 	ldw	r9,4(sp)
10113490:	d9800217 	ldw	r6,8(sp)
10113494:	003f3006 	br	10113158 <_gp+0xffff1984>
10113498:	143ff604 	addi	r16,r2,-40
1011349c:	9c20983a 	sll	r16,r19,r16
101134a0:	0029883a 	mov	r20,zero
101134a4:	003f1606 	br	10113100 <_gp+0xffff192c>
101134a8:	d9800215 	stw	r6,8(sp)
101134ac:	d9c00015 	stw	r7,0(sp)
101134b0:	da400115 	stw	r9,4(sp)
101134b4:	01140f00 	call	101140f0 <__clzsi2>
101134b8:	10800804 	addi	r2,r2,32
101134bc:	da400117 	ldw	r9,4(sp)
101134c0:	d9c00017 	ldw	r7,0(sp)
101134c4:	d9800217 	ldw	r6,8(sp)
101134c8:	003f0306 	br	101130d8 <_gp+0xffff1904>
101134cc:	00c00044 	movi	r3,1
101134d0:	1947c83a 	sub	r3,r3,r5
101134d4:	00800e04 	movi	r2,56
101134d8:	10feda16 	blt	r2,r3,10113044 <_gp+0xffff1870>
101134dc:	008007c4 	movi	r2,31
101134e0:	10c01b16 	blt	r2,r3,10113550 <__muldf3+0x678>
101134e4:	00800804 	movi	r2,32
101134e8:	10c5c83a 	sub	r2,r2,r3
101134ec:	888a983a 	sll	r5,r17,r2
101134f0:	40c8d83a 	srl	r4,r8,r3
101134f4:	4084983a 	sll	r2,r8,r2
101134f8:	88e2d83a 	srl	r17,r17,r3
101134fc:	2906b03a 	or	r3,r5,r4
10113500:	1004c03a 	cmpne	r2,r2,zero
10113504:	1886b03a 	or	r3,r3,r2
10113508:	188001cc 	andi	r2,r3,7
1011350c:	10000726 	beq	r2,zero,1011352c <__muldf3+0x654>
10113510:	188003cc 	andi	r2,r3,15
10113514:	01000104 	movi	r4,4
10113518:	11000426 	beq	r2,r4,1011352c <__muldf3+0x654>
1011351c:	1805883a 	mov	r2,r3
10113520:	10c00104 	addi	r3,r2,4
10113524:	1885803a 	cmpltu	r2,r3,r2
10113528:	88a3883a 	add	r17,r17,r2
1011352c:	8880202c 	andhi	r2,r17,128
10113530:	10001c26 	beq	r2,zero,101135a4 <__muldf3+0x6cc>
10113534:	b02b883a 	mov	r21,r22
10113538:	00800044 	movi	r2,1
1011353c:	000b883a 	mov	r5,zero
10113540:	0029883a 	mov	r20,zero
10113544:	003ec306 	br	10113054 <_gp+0xffff1880>
10113548:	5805883a 	mov	r2,r11
1011354c:	003f9906 	br	101133b4 <_gp+0xffff1be0>
10113550:	00bff844 	movi	r2,-31
10113554:	1145c83a 	sub	r2,r2,r5
10113558:	8888d83a 	srl	r4,r17,r2
1011355c:	00800804 	movi	r2,32
10113560:	18801a26 	beq	r3,r2,101135cc <__muldf3+0x6f4>
10113564:	00801004 	movi	r2,64
10113568:	10c5c83a 	sub	r2,r2,r3
1011356c:	8884983a 	sll	r2,r17,r2
10113570:	1204b03a 	or	r2,r2,r8
10113574:	1004c03a 	cmpne	r2,r2,zero
10113578:	2084b03a 	or	r2,r4,r2
1011357c:	144001cc 	andi	r17,r2,7
10113580:	88000d1e 	bne	r17,zero,101135b8 <__muldf3+0x6e0>
10113584:	000b883a 	mov	r5,zero
10113588:	1028d0fa 	srli	r20,r2,3
1011358c:	b02b883a 	mov	r21,r22
10113590:	0005883a 	mov	r2,zero
10113594:	a468b03a 	or	r20,r20,r17
10113598:	003eae06 	br	10113054 <_gp+0xffff1880>
1011359c:	1007883a 	mov	r3,r2
101135a0:	0023883a 	mov	r17,zero
101135a4:	880a927a 	slli	r5,r17,9
101135a8:	1805883a 	mov	r2,r3
101135ac:	8822977a 	slli	r17,r17,29
101135b0:	280ad33a 	srli	r5,r5,12
101135b4:	003ff406 	br	10113588 <_gp+0xffff1db4>
101135b8:	10c003cc 	andi	r3,r2,15
101135bc:	01000104 	movi	r4,4
101135c0:	193ff626 	beq	r3,r4,1011359c <_gp+0xffff1dc8>
101135c4:	0023883a 	mov	r17,zero
101135c8:	003fd506 	br	10113520 <_gp+0xffff1d4c>
101135cc:	0005883a 	mov	r2,zero
101135d0:	003fe706 	br	10113570 <_gp+0xffff1d9c>
101135d4:	00800434 	movhi	r2,16
101135d8:	89400234 	orhi	r5,r17,8
101135dc:	10bfffc4 	addi	r2,r2,-1
101135e0:	b02b883a 	mov	r21,r22
101135e4:	288a703a 	and	r5,r5,r2
101135e8:	4029883a 	mov	r20,r8
101135ec:	003eff06 	br	101131ec <_gp+0xffff1a18>

101135f0 <__subdf3>:
101135f0:	02000434 	movhi	r8,16
101135f4:	423fffc4 	addi	r8,r8,-1
101135f8:	defffb04 	addi	sp,sp,-20
101135fc:	2a14703a 	and	r10,r5,r8
10113600:	3812d53a 	srli	r9,r7,20
10113604:	3a10703a 	and	r8,r7,r8
10113608:	2006d77a 	srli	r3,r4,29
1011360c:	3004d77a 	srli	r2,r6,29
10113610:	dc000015 	stw	r16,0(sp)
10113614:	501490fa 	slli	r10,r10,3
10113618:	2820d53a 	srli	r16,r5,20
1011361c:	401090fa 	slli	r8,r8,3
10113620:	dc800215 	stw	r18,8(sp)
10113624:	dc400115 	stw	r17,4(sp)
10113628:	dfc00415 	stw	ra,16(sp)
1011362c:	202290fa 	slli	r17,r4,3
10113630:	dcc00315 	stw	r19,12(sp)
10113634:	4a41ffcc 	andi	r9,r9,2047
10113638:	0101ffc4 	movi	r4,2047
1011363c:	2824d7fa 	srli	r18,r5,31
10113640:	8401ffcc 	andi	r16,r16,2047
10113644:	50c6b03a 	or	r3,r10,r3
10113648:	380ed7fa 	srli	r7,r7,31
1011364c:	408ab03a 	or	r5,r8,r2
10113650:	300c90fa 	slli	r6,r6,3
10113654:	49009626 	beq	r9,r4,101138b0 <__subdf3+0x2c0>
10113658:	39c0005c 	xori	r7,r7,1
1011365c:	8245c83a 	sub	r2,r16,r9
10113660:	3c807426 	beq	r7,r18,10113834 <__subdf3+0x244>
10113664:	0080af0e 	bge	zero,r2,10113924 <__subdf3+0x334>
10113668:	48002a1e 	bne	r9,zero,10113714 <__subdf3+0x124>
1011366c:	2988b03a 	or	r4,r5,r6
10113670:	20009a1e 	bne	r4,zero,101138dc <__subdf3+0x2ec>
10113674:	888001cc 	andi	r2,r17,7
10113678:	10000726 	beq	r2,zero,10113698 <__subdf3+0xa8>
1011367c:	888003cc 	andi	r2,r17,15
10113680:	01000104 	movi	r4,4
10113684:	11000426 	beq	r2,r4,10113698 <__subdf3+0xa8>
10113688:	890b883a 	add	r5,r17,r4
1011368c:	2c63803a 	cmpltu	r17,r5,r17
10113690:	1c47883a 	add	r3,r3,r17
10113694:	2823883a 	mov	r17,r5
10113698:	1880202c 	andhi	r2,r3,128
1011369c:	10005926 	beq	r2,zero,10113804 <__subdf3+0x214>
101136a0:	84000044 	addi	r16,r16,1
101136a4:	0081ffc4 	movi	r2,2047
101136a8:	8080be26 	beq	r16,r2,101139a4 <__subdf3+0x3b4>
101136ac:	017fe034 	movhi	r5,65408
101136b0:	297fffc4 	addi	r5,r5,-1
101136b4:	1946703a 	and	r3,r3,r5
101136b8:	1804977a 	slli	r2,r3,29
101136bc:	1806927a 	slli	r3,r3,9
101136c0:	8822d0fa 	srli	r17,r17,3
101136c4:	8401ffcc 	andi	r16,r16,2047
101136c8:	180ad33a 	srli	r5,r3,12
101136cc:	9100004c 	andi	r4,r18,1
101136d0:	1444b03a 	or	r2,r2,r17
101136d4:	80c1ffcc 	andi	r3,r16,2047
101136d8:	1820953a 	slli	r16,r3,20
101136dc:	20c03fcc 	andi	r3,r4,255
101136e0:	180897fa 	slli	r4,r3,31
101136e4:	00c00434 	movhi	r3,16
101136e8:	18ffffc4 	addi	r3,r3,-1
101136ec:	28c6703a 	and	r3,r5,r3
101136f0:	1c06b03a 	or	r3,r3,r16
101136f4:	1906b03a 	or	r3,r3,r4
101136f8:	dfc00417 	ldw	ra,16(sp)
101136fc:	dcc00317 	ldw	r19,12(sp)
10113700:	dc800217 	ldw	r18,8(sp)
10113704:	dc400117 	ldw	r17,4(sp)
10113708:	dc000017 	ldw	r16,0(sp)
1011370c:	dec00504 	addi	sp,sp,20
10113710:	f800283a 	ret
10113714:	0101ffc4 	movi	r4,2047
10113718:	813fd626 	beq	r16,r4,10113674 <_gp+0xffff1ea0>
1011371c:	29402034 	orhi	r5,r5,128
10113720:	01000e04 	movi	r4,56
10113724:	2080a316 	blt	r4,r2,101139b4 <__subdf3+0x3c4>
10113728:	010007c4 	movi	r4,31
1011372c:	2080c616 	blt	r4,r2,10113a48 <__subdf3+0x458>
10113730:	01000804 	movi	r4,32
10113734:	2089c83a 	sub	r4,r4,r2
10113738:	2910983a 	sll	r8,r5,r4
1011373c:	308ed83a 	srl	r7,r6,r2
10113740:	3108983a 	sll	r4,r6,r4
10113744:	2884d83a 	srl	r2,r5,r2
10113748:	41ccb03a 	or	r6,r8,r7
1011374c:	2008c03a 	cmpne	r4,r4,zero
10113750:	310cb03a 	or	r6,r6,r4
10113754:	898dc83a 	sub	r6,r17,r6
10113758:	89a3803a 	cmpltu	r17,r17,r6
1011375c:	1887c83a 	sub	r3,r3,r2
10113760:	1c47c83a 	sub	r3,r3,r17
10113764:	3023883a 	mov	r17,r6
10113768:	1880202c 	andhi	r2,r3,128
1011376c:	10002326 	beq	r2,zero,101137fc <__subdf3+0x20c>
10113770:	04c02034 	movhi	r19,128
10113774:	9cffffc4 	addi	r19,r19,-1
10113778:	1ce6703a 	and	r19,r3,r19
1011377c:	98007a26 	beq	r19,zero,10113968 <__subdf3+0x378>
10113780:	9809883a 	mov	r4,r19
10113784:	01140f00 	call	101140f0 <__clzsi2>
10113788:	113ffe04 	addi	r4,r2,-8
1011378c:	00c007c4 	movi	r3,31
10113790:	19007b16 	blt	r3,r4,10113980 <__subdf3+0x390>
10113794:	00800804 	movi	r2,32
10113798:	1105c83a 	sub	r2,r2,r4
1011379c:	8884d83a 	srl	r2,r17,r2
101137a0:	9906983a 	sll	r3,r19,r4
101137a4:	8922983a 	sll	r17,r17,r4
101137a8:	10c4b03a 	or	r2,r2,r3
101137ac:	24007816 	blt	r4,r16,10113990 <__subdf3+0x3a0>
101137b0:	2421c83a 	sub	r16,r4,r16
101137b4:	80c00044 	addi	r3,r16,1
101137b8:	010007c4 	movi	r4,31
101137bc:	20c09516 	blt	r4,r3,10113a14 <__subdf3+0x424>
101137c0:	01400804 	movi	r5,32
101137c4:	28cbc83a 	sub	r5,r5,r3
101137c8:	88c8d83a 	srl	r4,r17,r3
101137cc:	8962983a 	sll	r17,r17,r5
101137d0:	114a983a 	sll	r5,r2,r5
101137d4:	10c6d83a 	srl	r3,r2,r3
101137d8:	8804c03a 	cmpne	r2,r17,zero
101137dc:	290ab03a 	or	r5,r5,r4
101137e0:	28a2b03a 	or	r17,r5,r2
101137e4:	0021883a 	mov	r16,zero
101137e8:	003fa206 	br	10113674 <_gp+0xffff1ea0>
101137ec:	2090b03a 	or	r8,r4,r2
101137f0:	40018e26 	beq	r8,zero,10113e2c <__subdf3+0x83c>
101137f4:	1007883a 	mov	r3,r2
101137f8:	2023883a 	mov	r17,r4
101137fc:	888001cc 	andi	r2,r17,7
10113800:	103f9e1e 	bne	r2,zero,1011367c <_gp+0xffff1ea8>
10113804:	1804977a 	slli	r2,r3,29
10113808:	8822d0fa 	srli	r17,r17,3
1011380c:	1810d0fa 	srli	r8,r3,3
10113810:	9100004c 	andi	r4,r18,1
10113814:	1444b03a 	or	r2,r2,r17
10113818:	00c1ffc4 	movi	r3,2047
1011381c:	80c02826 	beq	r16,r3,101138c0 <__subdf3+0x2d0>
10113820:	01400434 	movhi	r5,16
10113824:	297fffc4 	addi	r5,r5,-1
10113828:	80e0703a 	and	r16,r16,r3
1011382c:	414a703a 	and	r5,r8,r5
10113830:	003fa806 	br	101136d4 <_gp+0xffff1f00>
10113834:	0080630e 	bge	zero,r2,101139c4 <__subdf3+0x3d4>
10113838:	48003026 	beq	r9,zero,101138fc <__subdf3+0x30c>
1011383c:	0101ffc4 	movi	r4,2047
10113840:	813f8c26 	beq	r16,r4,10113674 <_gp+0xffff1ea0>
10113844:	29402034 	orhi	r5,r5,128
10113848:	01000e04 	movi	r4,56
1011384c:	2080a90e 	bge	r4,r2,10113af4 <__subdf3+0x504>
10113850:	298cb03a 	or	r6,r5,r6
10113854:	3012c03a 	cmpne	r9,r6,zero
10113858:	0005883a 	mov	r2,zero
1011385c:	4c53883a 	add	r9,r9,r17
10113860:	4c63803a 	cmpltu	r17,r9,r17
10113864:	10c7883a 	add	r3,r2,r3
10113868:	88c7883a 	add	r3,r17,r3
1011386c:	4823883a 	mov	r17,r9
10113870:	1880202c 	andhi	r2,r3,128
10113874:	1000d026 	beq	r2,zero,10113bb8 <__subdf3+0x5c8>
10113878:	84000044 	addi	r16,r16,1
1011387c:	0081ffc4 	movi	r2,2047
10113880:	8080fe26 	beq	r16,r2,10113c7c <__subdf3+0x68c>
10113884:	00bfe034 	movhi	r2,65408
10113888:	10bfffc4 	addi	r2,r2,-1
1011388c:	1886703a 	and	r3,r3,r2
10113890:	880ad07a 	srli	r5,r17,1
10113894:	180497fa 	slli	r2,r3,31
10113898:	8900004c 	andi	r4,r17,1
1011389c:	2922b03a 	or	r17,r5,r4
101138a0:	1806d07a 	srli	r3,r3,1
101138a4:	1462b03a 	or	r17,r2,r17
101138a8:	3825883a 	mov	r18,r7
101138ac:	003f7106 	br	10113674 <_gp+0xffff1ea0>
101138b0:	2984b03a 	or	r2,r5,r6
101138b4:	103f6826 	beq	r2,zero,10113658 <_gp+0xffff1e84>
101138b8:	39c03fcc 	andi	r7,r7,255
101138bc:	003f6706 	br	1011365c <_gp+0xffff1e88>
101138c0:	4086b03a 	or	r3,r8,r2
101138c4:	18015226 	beq	r3,zero,10113e10 <__subdf3+0x820>
101138c8:	00c00434 	movhi	r3,16
101138cc:	41400234 	orhi	r5,r8,8
101138d0:	18ffffc4 	addi	r3,r3,-1
101138d4:	28ca703a 	and	r5,r5,r3
101138d8:	003f7e06 	br	101136d4 <_gp+0xffff1f00>
101138dc:	10bfffc4 	addi	r2,r2,-1
101138e0:	1000491e 	bne	r2,zero,10113a08 <__subdf3+0x418>
101138e4:	898fc83a 	sub	r7,r17,r6
101138e8:	89e3803a 	cmpltu	r17,r17,r7
101138ec:	1947c83a 	sub	r3,r3,r5
101138f0:	1c47c83a 	sub	r3,r3,r17
101138f4:	3823883a 	mov	r17,r7
101138f8:	003f9b06 	br	10113768 <_gp+0xffff1f94>
101138fc:	2988b03a 	or	r4,r5,r6
10113900:	203f5c26 	beq	r4,zero,10113674 <_gp+0xffff1ea0>
10113904:	10bfffc4 	addi	r2,r2,-1
10113908:	1000931e 	bne	r2,zero,10113b58 <__subdf3+0x568>
1011390c:	898d883a 	add	r6,r17,r6
10113910:	3463803a 	cmpltu	r17,r6,r17
10113914:	1947883a 	add	r3,r3,r5
10113918:	88c7883a 	add	r3,r17,r3
1011391c:	3023883a 	mov	r17,r6
10113920:	003fd306 	br	10113870 <_gp+0xffff209c>
10113924:	1000541e 	bne	r2,zero,10113a78 <__subdf3+0x488>
10113928:	80800044 	addi	r2,r16,1
1011392c:	1081ffcc 	andi	r2,r2,2047
10113930:	01000044 	movi	r4,1
10113934:	2080a20e 	bge	r4,r2,10113bc0 <__subdf3+0x5d0>
10113938:	8989c83a 	sub	r4,r17,r6
1011393c:	8905803a 	cmpltu	r2,r17,r4
10113940:	1967c83a 	sub	r19,r3,r5
10113944:	98a7c83a 	sub	r19,r19,r2
10113948:	9880202c 	andhi	r2,r19,128
1011394c:	10006326 	beq	r2,zero,10113adc <__subdf3+0x4ec>
10113950:	3463c83a 	sub	r17,r6,r17
10113954:	28c7c83a 	sub	r3,r5,r3
10113958:	344d803a 	cmpltu	r6,r6,r17
1011395c:	19a7c83a 	sub	r19,r3,r6
10113960:	3825883a 	mov	r18,r7
10113964:	983f861e 	bne	r19,zero,10113780 <_gp+0xffff1fac>
10113968:	8809883a 	mov	r4,r17
1011396c:	01140f00 	call	101140f0 <__clzsi2>
10113970:	10800804 	addi	r2,r2,32
10113974:	113ffe04 	addi	r4,r2,-8
10113978:	00c007c4 	movi	r3,31
1011397c:	193f850e 	bge	r3,r4,10113794 <_gp+0xffff1fc0>
10113980:	10bff604 	addi	r2,r2,-40
10113984:	8884983a 	sll	r2,r17,r2
10113988:	0023883a 	mov	r17,zero
1011398c:	243f880e 	bge	r4,r16,101137b0 <_gp+0xffff1fdc>
10113990:	00ffe034 	movhi	r3,65408
10113994:	18ffffc4 	addi	r3,r3,-1
10113998:	8121c83a 	sub	r16,r16,r4
1011399c:	10c6703a 	and	r3,r2,r3
101139a0:	003f3406 	br	10113674 <_gp+0xffff1ea0>
101139a4:	9100004c 	andi	r4,r18,1
101139a8:	000b883a 	mov	r5,zero
101139ac:	0005883a 	mov	r2,zero
101139b0:	003f4806 	br	101136d4 <_gp+0xffff1f00>
101139b4:	298cb03a 	or	r6,r5,r6
101139b8:	300cc03a 	cmpne	r6,r6,zero
101139bc:	0005883a 	mov	r2,zero
101139c0:	003f6406 	br	10113754 <_gp+0xffff1f80>
101139c4:	10009a1e 	bne	r2,zero,10113c30 <__subdf3+0x640>
101139c8:	82400044 	addi	r9,r16,1
101139cc:	4881ffcc 	andi	r2,r9,2047
101139d0:	02800044 	movi	r10,1
101139d4:	5080670e 	bge	r10,r2,10113b74 <__subdf3+0x584>
101139d8:	0081ffc4 	movi	r2,2047
101139dc:	4880af26 	beq	r9,r2,10113c9c <__subdf3+0x6ac>
101139e0:	898d883a 	add	r6,r17,r6
101139e4:	1945883a 	add	r2,r3,r5
101139e8:	3447803a 	cmpltu	r3,r6,r17
101139ec:	1887883a 	add	r3,r3,r2
101139f0:	182297fa 	slli	r17,r3,31
101139f4:	300cd07a 	srli	r6,r6,1
101139f8:	1806d07a 	srli	r3,r3,1
101139fc:	4821883a 	mov	r16,r9
10113a00:	89a2b03a 	or	r17,r17,r6
10113a04:	003f1b06 	br	10113674 <_gp+0xffff1ea0>
10113a08:	0101ffc4 	movi	r4,2047
10113a0c:	813f441e 	bne	r16,r4,10113720 <_gp+0xffff1f4c>
10113a10:	003f1806 	br	10113674 <_gp+0xffff1ea0>
10113a14:	843ff844 	addi	r16,r16,-31
10113a18:	01400804 	movi	r5,32
10113a1c:	1408d83a 	srl	r4,r2,r16
10113a20:	19405026 	beq	r3,r5,10113b64 <__subdf3+0x574>
10113a24:	01401004 	movi	r5,64
10113a28:	28c7c83a 	sub	r3,r5,r3
10113a2c:	10c4983a 	sll	r2,r2,r3
10113a30:	88a2b03a 	or	r17,r17,r2
10113a34:	8822c03a 	cmpne	r17,r17,zero
10113a38:	2462b03a 	or	r17,r4,r17
10113a3c:	0007883a 	mov	r3,zero
10113a40:	0021883a 	mov	r16,zero
10113a44:	003f6d06 	br	101137fc <_gp+0xffff2028>
10113a48:	11fff804 	addi	r7,r2,-32
10113a4c:	01000804 	movi	r4,32
10113a50:	29ced83a 	srl	r7,r5,r7
10113a54:	11004526 	beq	r2,r4,10113b6c <__subdf3+0x57c>
10113a58:	01001004 	movi	r4,64
10113a5c:	2089c83a 	sub	r4,r4,r2
10113a60:	2904983a 	sll	r2,r5,r4
10113a64:	118cb03a 	or	r6,r2,r6
10113a68:	300cc03a 	cmpne	r6,r6,zero
10113a6c:	398cb03a 	or	r6,r7,r6
10113a70:	0005883a 	mov	r2,zero
10113a74:	003f3706 	br	10113754 <_gp+0xffff1f80>
10113a78:	80002a26 	beq	r16,zero,10113b24 <__subdf3+0x534>
10113a7c:	0101ffc4 	movi	r4,2047
10113a80:	49006626 	beq	r9,r4,10113c1c <__subdf3+0x62c>
10113a84:	0085c83a 	sub	r2,zero,r2
10113a88:	18c02034 	orhi	r3,r3,128
10113a8c:	01000e04 	movi	r4,56
10113a90:	20807e16 	blt	r4,r2,10113c8c <__subdf3+0x69c>
10113a94:	010007c4 	movi	r4,31
10113a98:	2080e716 	blt	r4,r2,10113e38 <__subdf3+0x848>
10113a9c:	01000804 	movi	r4,32
10113aa0:	2089c83a 	sub	r4,r4,r2
10113aa4:	1914983a 	sll	r10,r3,r4
10113aa8:	8890d83a 	srl	r8,r17,r2
10113aac:	8908983a 	sll	r4,r17,r4
10113ab0:	1884d83a 	srl	r2,r3,r2
10113ab4:	5222b03a 	or	r17,r10,r8
10113ab8:	2006c03a 	cmpne	r3,r4,zero
10113abc:	88e2b03a 	or	r17,r17,r3
10113ac0:	3463c83a 	sub	r17,r6,r17
10113ac4:	2885c83a 	sub	r2,r5,r2
10113ac8:	344d803a 	cmpltu	r6,r6,r17
10113acc:	1187c83a 	sub	r3,r2,r6
10113ad0:	4821883a 	mov	r16,r9
10113ad4:	3825883a 	mov	r18,r7
10113ad8:	003f2306 	br	10113768 <_gp+0xffff1f94>
10113adc:	24d0b03a 	or	r8,r4,r19
10113ae0:	40001b1e 	bne	r8,zero,10113b50 <__subdf3+0x560>
10113ae4:	0005883a 	mov	r2,zero
10113ae8:	0009883a 	mov	r4,zero
10113aec:	0021883a 	mov	r16,zero
10113af0:	003f4906 	br	10113818 <_gp+0xffff2044>
10113af4:	010007c4 	movi	r4,31
10113af8:	20803a16 	blt	r4,r2,10113be4 <__subdf3+0x5f4>
10113afc:	01000804 	movi	r4,32
10113b00:	2089c83a 	sub	r4,r4,r2
10113b04:	2912983a 	sll	r9,r5,r4
10113b08:	3090d83a 	srl	r8,r6,r2
10113b0c:	3108983a 	sll	r4,r6,r4
10113b10:	2884d83a 	srl	r2,r5,r2
10113b14:	4a12b03a 	or	r9,r9,r8
10113b18:	2008c03a 	cmpne	r4,r4,zero
10113b1c:	4912b03a 	or	r9,r9,r4
10113b20:	003f4e06 	br	1011385c <_gp+0xffff2088>
10113b24:	1c48b03a 	or	r4,r3,r17
10113b28:	20003c26 	beq	r4,zero,10113c1c <__subdf3+0x62c>
10113b2c:	0084303a 	nor	r2,zero,r2
10113b30:	1000381e 	bne	r2,zero,10113c14 <__subdf3+0x624>
10113b34:	3463c83a 	sub	r17,r6,r17
10113b38:	28c5c83a 	sub	r2,r5,r3
10113b3c:	344d803a 	cmpltu	r6,r6,r17
10113b40:	1187c83a 	sub	r3,r2,r6
10113b44:	4821883a 	mov	r16,r9
10113b48:	3825883a 	mov	r18,r7
10113b4c:	003f0606 	br	10113768 <_gp+0xffff1f94>
10113b50:	2023883a 	mov	r17,r4
10113b54:	003f0906 	br	1011377c <_gp+0xffff1fa8>
10113b58:	0101ffc4 	movi	r4,2047
10113b5c:	813f3a1e 	bne	r16,r4,10113848 <_gp+0xffff2074>
10113b60:	003ec406 	br	10113674 <_gp+0xffff1ea0>
10113b64:	0005883a 	mov	r2,zero
10113b68:	003fb106 	br	10113a30 <_gp+0xffff225c>
10113b6c:	0005883a 	mov	r2,zero
10113b70:	003fbc06 	br	10113a64 <_gp+0xffff2290>
10113b74:	1c44b03a 	or	r2,r3,r17
10113b78:	80008e1e 	bne	r16,zero,10113db4 <__subdf3+0x7c4>
10113b7c:	1000c826 	beq	r2,zero,10113ea0 <__subdf3+0x8b0>
10113b80:	2984b03a 	or	r2,r5,r6
10113b84:	103ebb26 	beq	r2,zero,10113674 <_gp+0xffff1ea0>
10113b88:	8989883a 	add	r4,r17,r6
10113b8c:	1945883a 	add	r2,r3,r5
10113b90:	2447803a 	cmpltu	r3,r4,r17
10113b94:	1887883a 	add	r3,r3,r2
10113b98:	1880202c 	andhi	r2,r3,128
10113b9c:	2023883a 	mov	r17,r4
10113ba0:	103f1626 	beq	r2,zero,101137fc <_gp+0xffff2028>
10113ba4:	00bfe034 	movhi	r2,65408
10113ba8:	10bfffc4 	addi	r2,r2,-1
10113bac:	5021883a 	mov	r16,r10
10113bb0:	1886703a 	and	r3,r3,r2
10113bb4:	003eaf06 	br	10113674 <_gp+0xffff1ea0>
10113bb8:	3825883a 	mov	r18,r7
10113bbc:	003f0f06 	br	101137fc <_gp+0xffff2028>
10113bc0:	1c44b03a 	or	r2,r3,r17
10113bc4:	8000251e 	bne	r16,zero,10113c5c <__subdf3+0x66c>
10113bc8:	1000661e 	bne	r2,zero,10113d64 <__subdf3+0x774>
10113bcc:	2990b03a 	or	r8,r5,r6
10113bd0:	40009626 	beq	r8,zero,10113e2c <__subdf3+0x83c>
10113bd4:	2807883a 	mov	r3,r5
10113bd8:	3023883a 	mov	r17,r6
10113bdc:	3825883a 	mov	r18,r7
10113be0:	003ea406 	br	10113674 <_gp+0xffff1ea0>
10113be4:	127ff804 	addi	r9,r2,-32
10113be8:	01000804 	movi	r4,32
10113bec:	2a52d83a 	srl	r9,r5,r9
10113bf0:	11008c26 	beq	r2,r4,10113e24 <__subdf3+0x834>
10113bf4:	01001004 	movi	r4,64
10113bf8:	2085c83a 	sub	r2,r4,r2
10113bfc:	2884983a 	sll	r2,r5,r2
10113c00:	118cb03a 	or	r6,r2,r6
10113c04:	300cc03a 	cmpne	r6,r6,zero
10113c08:	4992b03a 	or	r9,r9,r6
10113c0c:	0005883a 	mov	r2,zero
10113c10:	003f1206 	br	1011385c <_gp+0xffff2088>
10113c14:	0101ffc4 	movi	r4,2047
10113c18:	493f9c1e 	bne	r9,r4,10113a8c <_gp+0xffff22b8>
10113c1c:	2807883a 	mov	r3,r5
10113c20:	3023883a 	mov	r17,r6
10113c24:	4821883a 	mov	r16,r9
10113c28:	3825883a 	mov	r18,r7
10113c2c:	003e9106 	br	10113674 <_gp+0xffff1ea0>
10113c30:	80001f1e 	bne	r16,zero,10113cb0 <__subdf3+0x6c0>
10113c34:	1c48b03a 	or	r4,r3,r17
10113c38:	20005a26 	beq	r4,zero,10113da4 <__subdf3+0x7b4>
10113c3c:	0084303a 	nor	r2,zero,r2
10113c40:	1000561e 	bne	r2,zero,10113d9c <__subdf3+0x7ac>
10113c44:	89a3883a 	add	r17,r17,r6
10113c48:	1945883a 	add	r2,r3,r5
10113c4c:	898d803a 	cmpltu	r6,r17,r6
10113c50:	3087883a 	add	r3,r6,r2
10113c54:	4821883a 	mov	r16,r9
10113c58:	003f0506 	br	10113870 <_gp+0xffff209c>
10113c5c:	10002b1e 	bne	r2,zero,10113d0c <__subdf3+0x71c>
10113c60:	2984b03a 	or	r2,r5,r6
10113c64:	10008026 	beq	r2,zero,10113e68 <__subdf3+0x878>
10113c68:	2807883a 	mov	r3,r5
10113c6c:	3023883a 	mov	r17,r6
10113c70:	3825883a 	mov	r18,r7
10113c74:	0401ffc4 	movi	r16,2047
10113c78:	003e7e06 	br	10113674 <_gp+0xffff1ea0>
10113c7c:	3809883a 	mov	r4,r7
10113c80:	0011883a 	mov	r8,zero
10113c84:	0005883a 	mov	r2,zero
10113c88:	003ee306 	br	10113818 <_gp+0xffff2044>
10113c8c:	1c62b03a 	or	r17,r3,r17
10113c90:	8822c03a 	cmpne	r17,r17,zero
10113c94:	0005883a 	mov	r2,zero
10113c98:	003f8906 	br	10113ac0 <_gp+0xffff22ec>
10113c9c:	3809883a 	mov	r4,r7
10113ca0:	4821883a 	mov	r16,r9
10113ca4:	0011883a 	mov	r8,zero
10113ca8:	0005883a 	mov	r2,zero
10113cac:	003eda06 	br	10113818 <_gp+0xffff2044>
10113cb0:	0101ffc4 	movi	r4,2047
10113cb4:	49003b26 	beq	r9,r4,10113da4 <__subdf3+0x7b4>
10113cb8:	0085c83a 	sub	r2,zero,r2
10113cbc:	18c02034 	orhi	r3,r3,128
10113cc0:	01000e04 	movi	r4,56
10113cc4:	20806e16 	blt	r4,r2,10113e80 <__subdf3+0x890>
10113cc8:	010007c4 	movi	r4,31
10113ccc:	20807716 	blt	r4,r2,10113eac <__subdf3+0x8bc>
10113cd0:	01000804 	movi	r4,32
10113cd4:	2089c83a 	sub	r4,r4,r2
10113cd8:	1914983a 	sll	r10,r3,r4
10113cdc:	8890d83a 	srl	r8,r17,r2
10113ce0:	8908983a 	sll	r4,r17,r4
10113ce4:	1884d83a 	srl	r2,r3,r2
10113ce8:	5222b03a 	or	r17,r10,r8
10113cec:	2006c03a 	cmpne	r3,r4,zero
10113cf0:	88e2b03a 	or	r17,r17,r3
10113cf4:	89a3883a 	add	r17,r17,r6
10113cf8:	1145883a 	add	r2,r2,r5
10113cfc:	898d803a 	cmpltu	r6,r17,r6
10113d00:	3087883a 	add	r3,r6,r2
10113d04:	4821883a 	mov	r16,r9
10113d08:	003ed906 	br	10113870 <_gp+0xffff209c>
10113d0c:	2984b03a 	or	r2,r5,r6
10113d10:	10004226 	beq	r2,zero,10113e1c <__subdf3+0x82c>
10113d14:	1808d0fa 	srli	r4,r3,3
10113d18:	8822d0fa 	srli	r17,r17,3
10113d1c:	1806977a 	slli	r3,r3,29
10113d20:	2080022c 	andhi	r2,r4,8
10113d24:	1c62b03a 	or	r17,r3,r17
10113d28:	10000826 	beq	r2,zero,10113d4c <__subdf3+0x75c>
10113d2c:	2812d0fa 	srli	r9,r5,3
10113d30:	4880022c 	andhi	r2,r9,8
10113d34:	1000051e 	bne	r2,zero,10113d4c <__subdf3+0x75c>
10113d38:	300cd0fa 	srli	r6,r6,3
10113d3c:	2804977a 	slli	r2,r5,29
10113d40:	4809883a 	mov	r4,r9
10113d44:	3825883a 	mov	r18,r7
10113d48:	11a2b03a 	or	r17,r2,r6
10113d4c:	8806d77a 	srli	r3,r17,29
10113d50:	200890fa 	slli	r4,r4,3
10113d54:	882290fa 	slli	r17,r17,3
10113d58:	0401ffc4 	movi	r16,2047
10113d5c:	1906b03a 	or	r3,r3,r4
10113d60:	003e4406 	br	10113674 <_gp+0xffff1ea0>
10113d64:	2984b03a 	or	r2,r5,r6
10113d68:	103e4226 	beq	r2,zero,10113674 <_gp+0xffff1ea0>
10113d6c:	8989c83a 	sub	r4,r17,r6
10113d70:	8911803a 	cmpltu	r8,r17,r4
10113d74:	1945c83a 	sub	r2,r3,r5
10113d78:	1205c83a 	sub	r2,r2,r8
10113d7c:	1200202c 	andhi	r8,r2,128
10113d80:	403e9a26 	beq	r8,zero,101137ec <_gp+0xffff2018>
10113d84:	3463c83a 	sub	r17,r6,r17
10113d88:	28c5c83a 	sub	r2,r5,r3
10113d8c:	344d803a 	cmpltu	r6,r6,r17
10113d90:	1187c83a 	sub	r3,r2,r6
10113d94:	3825883a 	mov	r18,r7
10113d98:	003e3606 	br	10113674 <_gp+0xffff1ea0>
10113d9c:	0101ffc4 	movi	r4,2047
10113da0:	493fc71e 	bne	r9,r4,10113cc0 <_gp+0xffff24ec>
10113da4:	2807883a 	mov	r3,r5
10113da8:	3023883a 	mov	r17,r6
10113dac:	4821883a 	mov	r16,r9
10113db0:	003e3006 	br	10113674 <_gp+0xffff1ea0>
10113db4:	10003626 	beq	r2,zero,10113e90 <__subdf3+0x8a0>
10113db8:	2984b03a 	or	r2,r5,r6
10113dbc:	10001726 	beq	r2,zero,10113e1c <__subdf3+0x82c>
10113dc0:	1808d0fa 	srli	r4,r3,3
10113dc4:	8822d0fa 	srli	r17,r17,3
10113dc8:	1806977a 	slli	r3,r3,29
10113dcc:	2080022c 	andhi	r2,r4,8
10113dd0:	1c62b03a 	or	r17,r3,r17
10113dd4:	10000726 	beq	r2,zero,10113df4 <__subdf3+0x804>
10113dd8:	2812d0fa 	srli	r9,r5,3
10113ddc:	4880022c 	andhi	r2,r9,8
10113de0:	1000041e 	bne	r2,zero,10113df4 <__subdf3+0x804>
10113de4:	300cd0fa 	srli	r6,r6,3
10113de8:	2804977a 	slli	r2,r5,29
10113dec:	4809883a 	mov	r4,r9
10113df0:	11a2b03a 	or	r17,r2,r6
10113df4:	8806d77a 	srli	r3,r17,29
10113df8:	200890fa 	slli	r4,r4,3
10113dfc:	882290fa 	slli	r17,r17,3
10113e00:	3825883a 	mov	r18,r7
10113e04:	1906b03a 	or	r3,r3,r4
10113e08:	0401ffc4 	movi	r16,2047
10113e0c:	003e1906 	br	10113674 <_gp+0xffff1ea0>
10113e10:	000b883a 	mov	r5,zero
10113e14:	0005883a 	mov	r2,zero
10113e18:	003e2e06 	br	101136d4 <_gp+0xffff1f00>
10113e1c:	0401ffc4 	movi	r16,2047
10113e20:	003e1406 	br	10113674 <_gp+0xffff1ea0>
10113e24:	0005883a 	mov	r2,zero
10113e28:	003f7506 	br	10113c00 <_gp+0xffff242c>
10113e2c:	0005883a 	mov	r2,zero
10113e30:	0009883a 	mov	r4,zero
10113e34:	003e7806 	br	10113818 <_gp+0xffff2044>
10113e38:	123ff804 	addi	r8,r2,-32
10113e3c:	01000804 	movi	r4,32
10113e40:	1a10d83a 	srl	r8,r3,r8
10113e44:	11002526 	beq	r2,r4,10113edc <__subdf3+0x8ec>
10113e48:	01001004 	movi	r4,64
10113e4c:	2085c83a 	sub	r2,r4,r2
10113e50:	1884983a 	sll	r2,r3,r2
10113e54:	1444b03a 	or	r2,r2,r17
10113e58:	1004c03a 	cmpne	r2,r2,zero
10113e5c:	40a2b03a 	or	r17,r8,r2
10113e60:	0005883a 	mov	r2,zero
10113e64:	003f1606 	br	10113ac0 <_gp+0xffff22ec>
10113e68:	02000434 	movhi	r8,16
10113e6c:	0009883a 	mov	r4,zero
10113e70:	423fffc4 	addi	r8,r8,-1
10113e74:	00bfffc4 	movi	r2,-1
10113e78:	0401ffc4 	movi	r16,2047
10113e7c:	003e6606 	br	10113818 <_gp+0xffff2044>
10113e80:	1c62b03a 	or	r17,r3,r17
10113e84:	8822c03a 	cmpne	r17,r17,zero
10113e88:	0005883a 	mov	r2,zero
10113e8c:	003f9906 	br	10113cf4 <_gp+0xffff2520>
10113e90:	2807883a 	mov	r3,r5
10113e94:	3023883a 	mov	r17,r6
10113e98:	0401ffc4 	movi	r16,2047
10113e9c:	003df506 	br	10113674 <_gp+0xffff1ea0>
10113ea0:	2807883a 	mov	r3,r5
10113ea4:	3023883a 	mov	r17,r6
10113ea8:	003df206 	br	10113674 <_gp+0xffff1ea0>
10113eac:	123ff804 	addi	r8,r2,-32
10113eb0:	01000804 	movi	r4,32
10113eb4:	1a10d83a 	srl	r8,r3,r8
10113eb8:	11000a26 	beq	r2,r4,10113ee4 <__subdf3+0x8f4>
10113ebc:	01001004 	movi	r4,64
10113ec0:	2085c83a 	sub	r2,r4,r2
10113ec4:	1884983a 	sll	r2,r3,r2
10113ec8:	1444b03a 	or	r2,r2,r17
10113ecc:	1004c03a 	cmpne	r2,r2,zero
10113ed0:	40a2b03a 	or	r17,r8,r2
10113ed4:	0005883a 	mov	r2,zero
10113ed8:	003f8606 	br	10113cf4 <_gp+0xffff2520>
10113edc:	0005883a 	mov	r2,zero
10113ee0:	003fdc06 	br	10113e54 <_gp+0xffff2680>
10113ee4:	0005883a 	mov	r2,zero
10113ee8:	003ff706 	br	10113ec8 <_gp+0xffff26f4>

10113eec <__fixdfsi>:
10113eec:	280cd53a 	srli	r6,r5,20
10113ef0:	00c00434 	movhi	r3,16
10113ef4:	18ffffc4 	addi	r3,r3,-1
10113ef8:	3181ffcc 	andi	r6,r6,2047
10113efc:	01c0ff84 	movi	r7,1022
10113f00:	28c6703a 	and	r3,r5,r3
10113f04:	280ad7fa 	srli	r5,r5,31
10113f08:	3980120e 	bge	r7,r6,10113f54 <__fixdfsi+0x68>
10113f0c:	00810744 	movi	r2,1053
10113f10:	11800c16 	blt	r2,r6,10113f44 <__fixdfsi+0x58>
10113f14:	00810cc4 	movi	r2,1075
10113f18:	1185c83a 	sub	r2,r2,r6
10113f1c:	01c007c4 	movi	r7,31
10113f20:	18c00434 	orhi	r3,r3,16
10113f24:	38800d16 	blt	r7,r2,10113f5c <__fixdfsi+0x70>
10113f28:	31befb44 	addi	r6,r6,-1043
10113f2c:	2084d83a 	srl	r2,r4,r2
10113f30:	1986983a 	sll	r3,r3,r6
10113f34:	1884b03a 	or	r2,r3,r2
10113f38:	28000726 	beq	r5,zero,10113f58 <__fixdfsi+0x6c>
10113f3c:	0085c83a 	sub	r2,zero,r2
10113f40:	f800283a 	ret
10113f44:	00a00034 	movhi	r2,32768
10113f48:	10bfffc4 	addi	r2,r2,-1
10113f4c:	2885883a 	add	r2,r5,r2
10113f50:	f800283a 	ret
10113f54:	0005883a 	mov	r2,zero
10113f58:	f800283a 	ret
10113f5c:	008104c4 	movi	r2,1043
10113f60:	1185c83a 	sub	r2,r2,r6
10113f64:	1884d83a 	srl	r2,r3,r2
10113f68:	003ff306 	br	10113f38 <_gp+0xffff2764>

10113f6c <__floatsidf>:
10113f6c:	defffd04 	addi	sp,sp,-12
10113f70:	dfc00215 	stw	ra,8(sp)
10113f74:	dc400115 	stw	r17,4(sp)
10113f78:	dc000015 	stw	r16,0(sp)
10113f7c:	20002b26 	beq	r4,zero,1011402c <__floatsidf+0xc0>
10113f80:	2023883a 	mov	r17,r4
10113f84:	2020d7fa 	srli	r16,r4,31
10113f88:	20002d16 	blt	r4,zero,10114040 <__floatsidf+0xd4>
10113f8c:	8809883a 	mov	r4,r17
10113f90:	01140f00 	call	101140f0 <__clzsi2>
10113f94:	01410784 	movi	r5,1054
10113f98:	288bc83a 	sub	r5,r5,r2
10113f9c:	01010cc4 	movi	r4,1075
10113fa0:	2149c83a 	sub	r4,r4,r5
10113fa4:	00c007c4 	movi	r3,31
10113fa8:	1900160e 	bge	r3,r4,10114004 <__floatsidf+0x98>
10113fac:	00c104c4 	movi	r3,1043
10113fb0:	1947c83a 	sub	r3,r3,r5
10113fb4:	88c6983a 	sll	r3,r17,r3
10113fb8:	00800434 	movhi	r2,16
10113fbc:	10bfffc4 	addi	r2,r2,-1
10113fc0:	1886703a 	and	r3,r3,r2
10113fc4:	2941ffcc 	andi	r5,r5,2047
10113fc8:	800d883a 	mov	r6,r16
10113fcc:	0005883a 	mov	r2,zero
10113fd0:	280a953a 	slli	r5,r5,20
10113fd4:	31803fcc 	andi	r6,r6,255
10113fd8:	01000434 	movhi	r4,16
10113fdc:	300c97fa 	slli	r6,r6,31
10113fe0:	213fffc4 	addi	r4,r4,-1
10113fe4:	1906703a 	and	r3,r3,r4
10113fe8:	1946b03a 	or	r3,r3,r5
10113fec:	1986b03a 	or	r3,r3,r6
10113ff0:	dfc00217 	ldw	ra,8(sp)
10113ff4:	dc400117 	ldw	r17,4(sp)
10113ff8:	dc000017 	ldw	r16,0(sp)
10113ffc:	dec00304 	addi	sp,sp,12
10114000:	f800283a 	ret
10114004:	00c002c4 	movi	r3,11
10114008:	1887c83a 	sub	r3,r3,r2
1011400c:	88c6d83a 	srl	r3,r17,r3
10114010:	8904983a 	sll	r2,r17,r4
10114014:	01000434 	movhi	r4,16
10114018:	213fffc4 	addi	r4,r4,-1
1011401c:	2941ffcc 	andi	r5,r5,2047
10114020:	1906703a 	and	r3,r3,r4
10114024:	800d883a 	mov	r6,r16
10114028:	003fe906 	br	10113fd0 <_gp+0xffff27fc>
1011402c:	000d883a 	mov	r6,zero
10114030:	000b883a 	mov	r5,zero
10114034:	0007883a 	mov	r3,zero
10114038:	0005883a 	mov	r2,zero
1011403c:	003fe406 	br	10113fd0 <_gp+0xffff27fc>
10114040:	0123c83a 	sub	r17,zero,r4
10114044:	003fd106 	br	10113f8c <_gp+0xffff27b8>

10114048 <__floatunsidf>:
10114048:	defffe04 	addi	sp,sp,-8
1011404c:	dc000015 	stw	r16,0(sp)
10114050:	dfc00115 	stw	ra,4(sp)
10114054:	2021883a 	mov	r16,r4
10114058:	20002226 	beq	r4,zero,101140e4 <__floatunsidf+0x9c>
1011405c:	01140f00 	call	101140f0 <__clzsi2>
10114060:	01010784 	movi	r4,1054
10114064:	2089c83a 	sub	r4,r4,r2
10114068:	01810cc4 	movi	r6,1075
1011406c:	310dc83a 	sub	r6,r6,r4
10114070:	00c007c4 	movi	r3,31
10114074:	1980120e 	bge	r3,r6,101140c0 <__floatunsidf+0x78>
10114078:	00c104c4 	movi	r3,1043
1011407c:	1907c83a 	sub	r3,r3,r4
10114080:	80ca983a 	sll	r5,r16,r3
10114084:	00800434 	movhi	r2,16
10114088:	10bfffc4 	addi	r2,r2,-1
1011408c:	2101ffcc 	andi	r4,r4,2047
10114090:	0021883a 	mov	r16,zero
10114094:	288a703a 	and	r5,r5,r2
10114098:	2008953a 	slli	r4,r4,20
1011409c:	00c00434 	movhi	r3,16
101140a0:	18ffffc4 	addi	r3,r3,-1
101140a4:	28c6703a 	and	r3,r5,r3
101140a8:	8005883a 	mov	r2,r16
101140ac:	1906b03a 	or	r3,r3,r4
101140b0:	dfc00117 	ldw	ra,4(sp)
101140b4:	dc000017 	ldw	r16,0(sp)
101140b8:	dec00204 	addi	sp,sp,8
101140bc:	f800283a 	ret
101140c0:	00c002c4 	movi	r3,11
101140c4:	188bc83a 	sub	r5,r3,r2
101140c8:	814ad83a 	srl	r5,r16,r5
101140cc:	00c00434 	movhi	r3,16
101140d0:	18ffffc4 	addi	r3,r3,-1
101140d4:	81a0983a 	sll	r16,r16,r6
101140d8:	2101ffcc 	andi	r4,r4,2047
101140dc:	28ca703a 	and	r5,r5,r3
101140e0:	003fed06 	br	10114098 <_gp+0xffff28c4>
101140e4:	0009883a 	mov	r4,zero
101140e8:	000b883a 	mov	r5,zero
101140ec:	003fea06 	br	10114098 <_gp+0xffff28c4>

101140f0 <__clzsi2>:
101140f0:	00bfffd4 	movui	r2,65535
101140f4:	11000536 	bltu	r2,r4,1011410c <__clzsi2+0x1c>
101140f8:	00803fc4 	movi	r2,255
101140fc:	11000f36 	bltu	r2,r4,1011413c <__clzsi2+0x4c>
10114100:	00800804 	movi	r2,32
10114104:	0007883a 	mov	r3,zero
10114108:	00000506 	br	10114120 <__clzsi2+0x30>
1011410c:	00804034 	movhi	r2,256
10114110:	10bfffc4 	addi	r2,r2,-1
10114114:	11000c2e 	bgeu	r2,r4,10114148 <__clzsi2+0x58>
10114118:	00800204 	movi	r2,8
1011411c:	00c00604 	movi	r3,24
10114120:	20c8d83a 	srl	r4,r4,r3
10114124:	00c40474 	movhi	r3,4113
10114128:	18def004 	addi	r3,r3,31680
1011412c:	1909883a 	add	r4,r3,r4
10114130:	20c00003 	ldbu	r3,0(r4)
10114134:	10c5c83a 	sub	r2,r2,r3
10114138:	f800283a 	ret
1011413c:	00800604 	movi	r2,24
10114140:	00c00204 	movi	r3,8
10114144:	003ff606 	br	10114120 <_gp+0xffff294c>
10114148:	00800404 	movi	r2,16
1011414c:	1007883a 	mov	r3,r2
10114150:	003ff306 	br	10114120 <_gp+0xffff294c>

10114154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10114154:	defffe04 	addi	sp,sp,-8
10114158:	dfc00115 	stw	ra,4(sp)
1011415c:	df000015 	stw	fp,0(sp)
10114160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10114164:	d0a00b17 	ldw	r2,-32724(gp)
10114168:	10000326 	beq	r2,zero,10114178 <alt_get_errno+0x24>
1011416c:	d0a00b17 	ldw	r2,-32724(gp)
10114170:	103ee83a 	callr	r2
10114174:	00000106 	br	1011417c <alt_get_errno+0x28>
10114178:	d0a6fa04 	addi	r2,gp,-25624
}
1011417c:	e037883a 	mov	sp,fp
10114180:	dfc00117 	ldw	ra,4(sp)
10114184:	df000017 	ldw	fp,0(sp)
10114188:	dec00204 	addi	sp,sp,8
1011418c:	f800283a 	ret

10114190 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10114190:	defffb04 	addi	sp,sp,-20
10114194:	dfc00415 	stw	ra,16(sp)
10114198:	df000315 	stw	fp,12(sp)
1011419c:	df000304 	addi	fp,sp,12
101141a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
101141a4:	e0bfff17 	ldw	r2,-4(fp)
101141a8:	10000616 	blt	r2,zero,101141c4 <close+0x34>
101141ac:	e0bfff17 	ldw	r2,-4(fp)
101141b0:	10c00324 	muli	r3,r2,12
101141b4:	008404b4 	movhi	r2,4114
101141b8:	10a17304 	addi	r2,r2,-31284
101141bc:	1885883a 	add	r2,r3,r2
101141c0:	00000106 	br	101141c8 <close+0x38>
101141c4:	0005883a 	mov	r2,zero
101141c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
101141cc:	e0bffd17 	ldw	r2,-12(fp)
101141d0:	10001926 	beq	r2,zero,10114238 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
101141d4:	e0bffd17 	ldw	r2,-12(fp)
101141d8:	10800017 	ldw	r2,0(r2)
101141dc:	10800417 	ldw	r2,16(r2)
101141e0:	10000626 	beq	r2,zero,101141fc <close+0x6c>
101141e4:	e0bffd17 	ldw	r2,-12(fp)
101141e8:	10800017 	ldw	r2,0(r2)
101141ec:	10800417 	ldw	r2,16(r2)
101141f0:	e13ffd17 	ldw	r4,-12(fp)
101141f4:	103ee83a 	callr	r2
101141f8:	00000106 	br	10114200 <close+0x70>
101141fc:	0005883a 	mov	r2,zero
10114200:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10114204:	e13fff17 	ldw	r4,-4(fp)
10114208:	01150c00 	call	101150c0 <alt_release_fd>
    if (rval < 0)
1011420c:	e0bffe17 	ldw	r2,-8(fp)
10114210:	1000070e 	bge	r2,zero,10114230 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10114214:	01141540 	call	10114154 <alt_get_errno>
10114218:	1007883a 	mov	r3,r2
1011421c:	e0bffe17 	ldw	r2,-8(fp)
10114220:	0085c83a 	sub	r2,zero,r2
10114224:	18800015 	stw	r2,0(r3)
      return -1;
10114228:	00bfffc4 	movi	r2,-1
1011422c:	00000706 	br	1011424c <close+0xbc>
    }
    return 0;
10114230:	0005883a 	mov	r2,zero
10114234:	00000506 	br	1011424c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10114238:	01141540 	call	10114154 <alt_get_errno>
1011423c:	1007883a 	mov	r3,r2
10114240:	00801444 	movi	r2,81
10114244:	18800015 	stw	r2,0(r3)
    return -1;
10114248:	00bfffc4 	movi	r2,-1
  }
}
1011424c:	e037883a 	mov	sp,fp
10114250:	dfc00117 	ldw	ra,4(sp)
10114254:	df000017 	ldw	fp,0(sp)
10114258:	dec00204 	addi	sp,sp,8
1011425c:	f800283a 	ret

10114260 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10114260:	defffc04 	addi	sp,sp,-16
10114264:	df000315 	stw	fp,12(sp)
10114268:	df000304 	addi	fp,sp,12
1011426c:	e13ffd15 	stw	r4,-12(fp)
10114270:	e17ffe15 	stw	r5,-8(fp)
10114274:	e1bfff15 	stw	r6,-4(fp)
  return len;
10114278:	e0bfff17 	ldw	r2,-4(fp)
}
1011427c:	e037883a 	mov	sp,fp
10114280:	df000017 	ldw	fp,0(sp)
10114284:	dec00104 	addi	sp,sp,4
10114288:	f800283a 	ret

1011428c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1011428c:	defffd04 	addi	sp,sp,-12
10114290:	df000215 	stw	fp,8(sp)
10114294:	df000204 	addi	fp,sp,8
10114298:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1011429c:	0001883a 	nop
101142a0:	e0bfff17 	ldw	r2,-4(fp)
101142a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
101142a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
101142ac:	10000226 	beq	r2,zero,101142b8 <_exit+0x2c>
    ALT_SIM_FAIL();
101142b0:	002af070 	cmpltui	zero,zero,43969
101142b4:	00000106 	br	101142bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
101142b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
101142bc:	003fff06 	br	101142bc <_gp+0xffff2ae8>

101142c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101142c0:	defffe04 	addi	sp,sp,-8
101142c4:	dfc00115 	stw	ra,4(sp)
101142c8:	df000015 	stw	fp,0(sp)
101142cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101142d0:	d0a00b17 	ldw	r2,-32724(gp)
101142d4:	10000326 	beq	r2,zero,101142e4 <alt_get_errno+0x24>
101142d8:	d0a00b17 	ldw	r2,-32724(gp)
101142dc:	103ee83a 	callr	r2
101142e0:	00000106 	br	101142e8 <alt_get_errno+0x28>
101142e4:	d0a6fa04 	addi	r2,gp,-25624
}
101142e8:	e037883a 	mov	sp,fp
101142ec:	dfc00117 	ldw	ra,4(sp)
101142f0:	df000017 	ldw	fp,0(sp)
101142f4:	dec00204 	addi	sp,sp,8
101142f8:	f800283a 	ret

101142fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
101142fc:	defffb04 	addi	sp,sp,-20
10114300:	dfc00415 	stw	ra,16(sp)
10114304:	df000315 	stw	fp,12(sp)
10114308:	df000304 	addi	fp,sp,12
1011430c:	e13ffe15 	stw	r4,-8(fp)
10114310:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10114314:	e0bffe17 	ldw	r2,-8(fp)
10114318:	10000616 	blt	r2,zero,10114334 <fstat+0x38>
1011431c:	e0bffe17 	ldw	r2,-8(fp)
10114320:	10c00324 	muli	r3,r2,12
10114324:	008404b4 	movhi	r2,4114
10114328:	10a17304 	addi	r2,r2,-31284
1011432c:	1885883a 	add	r2,r3,r2
10114330:	00000106 	br	10114338 <fstat+0x3c>
10114334:	0005883a 	mov	r2,zero
10114338:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1011433c:	e0bffd17 	ldw	r2,-12(fp)
10114340:	10001026 	beq	r2,zero,10114384 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10114344:	e0bffd17 	ldw	r2,-12(fp)
10114348:	10800017 	ldw	r2,0(r2)
1011434c:	10800817 	ldw	r2,32(r2)
10114350:	10000726 	beq	r2,zero,10114370 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
10114354:	e0bffd17 	ldw	r2,-12(fp)
10114358:	10800017 	ldw	r2,0(r2)
1011435c:	10800817 	ldw	r2,32(r2)
10114360:	e17fff17 	ldw	r5,-4(fp)
10114364:	e13ffd17 	ldw	r4,-12(fp)
10114368:	103ee83a 	callr	r2
1011436c:	00000a06 	br	10114398 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10114370:	e0bfff17 	ldw	r2,-4(fp)
10114374:	00c80004 	movi	r3,8192
10114378:	10c00115 	stw	r3,4(r2)
      return 0;
1011437c:	0005883a 	mov	r2,zero
10114380:	00000506 	br	10114398 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10114384:	01142c00 	call	101142c0 <alt_get_errno>
10114388:	1007883a 	mov	r3,r2
1011438c:	00801444 	movi	r2,81
10114390:	18800015 	stw	r2,0(r3)
    return -1;
10114394:	00bfffc4 	movi	r2,-1
  }
}
10114398:	e037883a 	mov	sp,fp
1011439c:	dfc00117 	ldw	ra,4(sp)
101143a0:	df000017 	ldw	fp,0(sp)
101143a4:	dec00204 	addi	sp,sp,8
101143a8:	f800283a 	ret

101143ac <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
101143ac:	deffff04 	addi	sp,sp,-4
101143b0:	df000015 	stw	fp,0(sp)
101143b4:	d839883a 	mov	fp,sp
  return 0;
101143b8:	0005883a 	mov	r2,zero
}
101143bc:	e037883a 	mov	sp,fp
101143c0:	df000017 	ldw	fp,0(sp)
101143c4:	dec00104 	addi	sp,sp,4
101143c8:	f800283a 	ret

101143cc <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
101143cc:	defff404 	addi	sp,sp,-48
101143d0:	dfc00b15 	stw	ra,44(sp)
101143d4:	df000a15 	stw	fp,40(sp)
101143d8:	dd000915 	stw	r20,36(sp)
101143dc:	dcc00815 	stw	r19,32(sp)
101143e0:	dc800715 	stw	r18,28(sp)
101143e4:	dc400615 	stw	r17,24(sp)
101143e8:	dc000515 	stw	r16,20(sp)
101143ec:	df000a04 	addi	fp,sp,40
101143f0:	e13ff915 	stw	r4,-28(fp)
101143f4:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
101143f8:	e0bffa17 	ldw	r2,-24(fp)
101143fc:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10114400:	d0a70917 	ldw	r2,-25564(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
10114404:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10114408:	d0a70817 	ldw	r2,-25568(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
1011440c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
10114410:	e0bff817 	ldw	r2,-32(fp)
10114414:	10005f26 	beq	r2,zero,10114594 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
10114418:	d0a70317 	ldw	r2,-25588(gp)
1011441c:	1029883a 	mov	r20,r2
10114420:	e17ff817 	ldw	r5,-32(fp)
10114424:	e13ff717 	ldw	r4,-36(fp)
10114428:	01031940 	call	10103194 <__udivsi3>
1011442c:	a085883a 	add	r2,r20,r2
10114430:	1007883a 	mov	r3,r2
10114434:	e0bff917 	ldw	r2,-28(fp)
10114438:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
1011443c:	d0a70417 	ldw	r2,-25584(gp)
10114440:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
10114444:	e0bff717 	ldw	r2,-36(fp)
10114448:	1021883a 	mov	r16,r2
1011444c:	0023883a 	mov	r17,zero
10114450:	e17ff817 	ldw	r5,-32(fp)
10114454:	010003f4 	movhi	r4,15
10114458:	21109004 	addi	r4,r4,16960
1011445c:	01031940 	call	10103194 <__udivsi3>
10114460:	1025883a 	mov	r18,r2
10114464:	0027883a 	mov	r19,zero
10114468:	900d883a 	mov	r6,r18
1011446c:	980f883a 	mov	r7,r19
10114470:	8009883a 	mov	r4,r16
10114474:	880b883a 	mov	r5,r17
10114478:	0110fdc0 	call	10110fdc <__muldi3>
1011447c:	1009883a 	mov	r4,r2
10114480:	180b883a 	mov	r5,r3
10114484:	2005883a 	mov	r2,r4
10114488:	2807883a 	mov	r3,r5
1011448c:	018003f4 	movhi	r6,15
10114490:	31909004 	addi	r6,r6,16960
10114494:	000f883a 	mov	r7,zero
10114498:	1009883a 	mov	r4,r2
1011449c:	180b883a 	mov	r5,r3
101144a0:	01115b40 	call	101115b4 <__umoddi3>
101144a4:	1009883a 	mov	r4,r2
101144a8:	180b883a 	mov	r5,r3
101144ac:	2005883a 	mov	r2,r4
101144b0:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
101144b4:	a085883a 	add	r2,r20,r2
101144b8:	1007883a 	mov	r3,r2
101144bc:	e0bff917 	ldw	r2,-28(fp)
101144c0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
101144c4:	00001406 	br	10114518 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
101144c8:	e0bff917 	ldw	r2,-28(fp)
101144cc:	10800017 	ldw	r2,0(r2)
101144d0:	00800516 	blt	zero,r2,101144e8 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
101144d4:	e0bff917 	ldw	r2,-28(fp)
101144d8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
101144dc:	e0bff917 	ldw	r2,-28(fp)
101144e0:	10000115 	stw	zero,4(r2)
          break;
101144e4:	00000f06 	br	10114524 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
101144e8:	e0bff917 	ldw	r2,-28(fp)
101144ec:	10800017 	ldw	r2,0(r2)
101144f0:	10ffffc4 	addi	r3,r2,-1
101144f4:	e0bff917 	ldw	r2,-28(fp)
101144f8:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
101144fc:	e0bff917 	ldw	r2,-28(fp)
10114500:	10c00117 	ldw	r3,4(r2)
10114504:	008003f4 	movhi	r2,15
10114508:	10909004 	addi	r2,r2,16960
1011450c:	1887883a 	add	r3,r3,r2
10114510:	e0bff917 	ldw	r2,-28(fp)
10114514:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
10114518:	e0bff917 	ldw	r2,-28(fp)
1011451c:	10800117 	ldw	r2,4(r2)
10114520:	103fe916 	blt	r2,zero,101144c8 <_gp+0xffff2cf4>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10114524:	00000c06 	br	10114558 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
10114528:	e0bff917 	ldw	r2,-28(fp)
1011452c:	10800017 	ldw	r2,0(r2)
10114530:	10c00044 	addi	r3,r2,1
10114534:	e0bff917 	ldw	r2,-28(fp)
10114538:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
1011453c:	e0bff917 	ldw	r2,-28(fp)
10114540:	10c00117 	ldw	r3,4(r2)
10114544:	00bffc74 	movhi	r2,65521
10114548:	10af7004 	addi	r2,r2,-16960
1011454c:	1887883a 	add	r3,r3,r2
10114550:	e0bff917 	ldw	r2,-28(fp)
10114554:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10114558:	e0bff917 	ldw	r2,-28(fp)
1011455c:	10c00117 	ldw	r3,4(r2)
10114560:	008003f4 	movhi	r2,15
10114564:	10908fc4 	addi	r2,r2,16959
10114568:	10ffef16 	blt	r2,r3,10114528 <_gp+0xffff2d54>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
1011456c:	e0bff617 	ldw	r2,-40(fp)
10114570:	10000626 	beq	r2,zero,1011458c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
10114574:	d0e70117 	ldw	r3,-25596(gp)
10114578:	e0bff617 	ldw	r2,-40(fp)
1011457c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
10114580:	d0e70217 	ldw	r3,-25592(gp)
10114584:	e0bff617 	ldw	r2,-40(fp)
10114588:	10c00115 	stw	r3,4(r2)
    }

    return 0;
1011458c:	0005883a 	mov	r2,zero
10114590:	00000106 	br	10114598 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
10114594:	00bfde84 	movi	r2,-134
}
10114598:	e6fffb04 	addi	sp,fp,-20
1011459c:	dfc00617 	ldw	ra,24(sp)
101145a0:	df000517 	ldw	fp,20(sp)
101145a4:	dd000417 	ldw	r20,16(sp)
101145a8:	dcc00317 	ldw	r19,12(sp)
101145ac:	dc800217 	ldw	r18,8(sp)
101145b0:	dc400117 	ldw	r17,4(sp)
101145b4:	dc000017 	ldw	r16,0(sp)
101145b8:	dec00704 	addi	sp,sp,28
101145bc:	f800283a 	ret

101145c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101145c0:	defffe04 	addi	sp,sp,-8
101145c4:	dfc00115 	stw	ra,4(sp)
101145c8:	df000015 	stw	fp,0(sp)
101145cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101145d0:	d0a00b17 	ldw	r2,-32724(gp)
101145d4:	10000326 	beq	r2,zero,101145e4 <alt_get_errno+0x24>
101145d8:	d0a00b17 	ldw	r2,-32724(gp)
101145dc:	103ee83a 	callr	r2
101145e0:	00000106 	br	101145e8 <alt_get_errno+0x28>
101145e4:	d0a6fa04 	addi	r2,gp,-25624
}
101145e8:	e037883a 	mov	sp,fp
101145ec:	dfc00117 	ldw	ra,4(sp)
101145f0:	df000017 	ldw	fp,0(sp)
101145f4:	dec00204 	addi	sp,sp,8
101145f8:	f800283a 	ret

101145fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
101145fc:	deffed04 	addi	sp,sp,-76
10114600:	dfc01215 	stw	ra,72(sp)
10114604:	df001115 	stw	fp,68(sp)
10114608:	df001104 	addi	fp,sp,68
1011460c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10114610:	e0bfff17 	ldw	r2,-4(fp)
10114614:	10000616 	blt	r2,zero,10114630 <isatty+0x34>
10114618:	e0bfff17 	ldw	r2,-4(fp)
1011461c:	10c00324 	muli	r3,r2,12
10114620:	008404b4 	movhi	r2,4114
10114624:	10a17304 	addi	r2,r2,-31284
10114628:	1885883a 	add	r2,r3,r2
1011462c:	00000106 	br	10114634 <isatty+0x38>
10114630:	0005883a 	mov	r2,zero
10114634:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10114638:	e0bfef17 	ldw	r2,-68(fp)
1011463c:	10000e26 	beq	r2,zero,10114678 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10114640:	e0bfef17 	ldw	r2,-68(fp)
10114644:	10800017 	ldw	r2,0(r2)
10114648:	10800817 	ldw	r2,32(r2)
1011464c:	1000021e 	bne	r2,zero,10114658 <isatty+0x5c>
    {
      return 1;
10114650:	00800044 	movi	r2,1
10114654:	00000d06 	br	1011468c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10114658:	e0bff004 	addi	r2,fp,-64
1011465c:	100b883a 	mov	r5,r2
10114660:	e13fff17 	ldw	r4,-4(fp)
10114664:	01142fc0 	call	101142fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10114668:	e0bff117 	ldw	r2,-60(fp)
1011466c:	10880020 	cmpeqi	r2,r2,8192
10114670:	10803fcc 	andi	r2,r2,255
10114674:	00000506 	br	1011468c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10114678:	01145c00 	call	101145c0 <alt_get_errno>
1011467c:	1007883a 	mov	r3,r2
10114680:	00801444 	movi	r2,81
10114684:	18800015 	stw	r2,0(r3)
    return 0;
10114688:	0005883a 	mov	r2,zero
  }
}
1011468c:	e037883a 	mov	sp,fp
10114690:	dfc00117 	ldw	ra,4(sp)
10114694:	df000017 	ldw	fp,0(sp)
10114698:	dec00204 	addi	sp,sp,8
1011469c:	f800283a 	ret

101146a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101146a0:	defffe04 	addi	sp,sp,-8
101146a4:	dfc00115 	stw	ra,4(sp)
101146a8:	df000015 	stw	fp,0(sp)
101146ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101146b0:	d0a00b17 	ldw	r2,-32724(gp)
101146b4:	10000326 	beq	r2,zero,101146c4 <alt_get_errno+0x24>
101146b8:	d0a00b17 	ldw	r2,-32724(gp)
101146bc:	103ee83a 	callr	r2
101146c0:	00000106 	br	101146c8 <alt_get_errno+0x28>
101146c4:	d0a6fa04 	addi	r2,gp,-25624
}
101146c8:	e037883a 	mov	sp,fp
101146cc:	dfc00117 	ldw	ra,4(sp)
101146d0:	df000017 	ldw	fp,0(sp)
101146d4:	dec00204 	addi	sp,sp,8
101146d8:	f800283a 	ret

101146dc <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
101146dc:	defffb04 	addi	sp,sp,-20
101146e0:	dfc00415 	stw	ra,16(sp)
101146e4:	df000315 	stw	fp,12(sp)
101146e8:	df000304 	addi	fp,sp,12
101146ec:	e13ffe15 	stw	r4,-8(fp)
101146f0:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
101146f4:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
101146f8:	e0bffe17 	ldw	r2,-8(fp)
101146fc:	00802f16 	blt	zero,r2,101147bc <kill+0xe0>
  {
    switch (sig)
10114700:	e0bfff17 	ldw	r2,-4(fp)
10114704:	10800828 	cmpgeui	r2,r2,32
10114708:	1000291e 	bne	r2,zero,101147b0 <kill+0xd4>
1011470c:	e0bfff17 	ldw	r2,-4(fp)
10114710:	100690ba 	slli	r3,r2,2
10114714:	00840474 	movhi	r2,4113
10114718:	1091ca04 	addi	r2,r2,18216
1011471c:	1885883a 	add	r2,r3,r2
10114720:	10800017 	ldw	r2,0(r2)
10114724:	1000683a 	jmp	r2
10114728:	101147d0 	cmplti	zero,r2,17695
1011472c:	101147b0 	cmpltui	zero,r2,17694
10114730:	101147b0 	cmpltui	zero,r2,17694
10114734:	101147a8 	cmpgeui	zero,r2,17694
10114738:	101147a8 	cmpgeui	zero,r2,17694
1011473c:	101147a8 	cmpgeui	zero,r2,17694
10114740:	101147a8 	cmpgeui	zero,r2,17694
10114744:	101147b0 	cmpltui	zero,r2,17694
10114748:	101147a8 	cmpgeui	zero,r2,17694
1011474c:	101147a8 	cmpgeui	zero,r2,17694
10114750:	101147a8 	cmpgeui	zero,r2,17694
10114754:	101147a8 	cmpgeui	zero,r2,17694
10114758:	101147a8 	cmpgeui	zero,r2,17694
1011475c:	101147a8 	cmpgeui	zero,r2,17694
10114760:	101147a8 	cmpgeui	zero,r2,17694
10114764:	101147a8 	cmpgeui	zero,r2,17694
10114768:	101147d0 	cmplti	zero,r2,17695
1011476c:	101147b0 	cmpltui	zero,r2,17694
10114770:	101147b0 	cmpltui	zero,r2,17694
10114774:	101147b0 	cmpltui	zero,r2,17694
10114778:	101147d0 	cmplti	zero,r2,17695
1011477c:	101147b0 	cmpltui	zero,r2,17694
10114780:	101147b0 	cmpltui	zero,r2,17694
10114784:	101147a8 	cmpgeui	zero,r2,17694
10114788:	101147a8 	cmpgeui	zero,r2,17694
1011478c:	101147a8 	cmpgeui	zero,r2,17694
10114790:	101147a8 	cmpgeui	zero,r2,17694
10114794:	101147a8 	cmpgeui	zero,r2,17694
10114798:	101147b0 	cmpltui	zero,r2,17694
1011479c:	101147b0 	cmpltui	zero,r2,17694
101147a0:	101147a8 	cmpgeui	zero,r2,17694
101147a4:	101147a8 	cmpgeui	zero,r2,17694
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
101147a8:	0009883a 	mov	r4,zero
101147ac:	011428c0 	call	1011428c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
101147b0:	00800584 	movi	r2,22
101147b4:	e0bffd15 	stw	r2,-12(fp)
101147b8:	00000606 	br	101147d4 <kill+0xf8>
    }
  }

  else if (pid > 0)
101147bc:	e0bffe17 	ldw	r2,-8(fp)
101147c0:	0080040e 	bge	zero,r2,101147d4 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
101147c4:	008000c4 	movi	r2,3
101147c8:	e0bffd15 	stw	r2,-12(fp)
101147cc:	00000106 	br	101147d4 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
101147d0:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
101147d4:	e0bffd17 	ldw	r2,-12(fp)
101147d8:	10000626 	beq	r2,zero,101147f4 <kill+0x118>
  {
    ALT_ERRNO = status;
101147dc:	01146a00 	call	101146a0 <alt_get_errno>
101147e0:	1007883a 	mov	r3,r2
101147e4:	e0bffd17 	ldw	r2,-12(fp)
101147e8:	18800015 	stw	r2,0(r3)
    return -1;
101147ec:	00bfffc4 	movi	r2,-1
101147f0:	00000106 	br	101147f8 <kill+0x11c>
  }

  return 0;
101147f4:	0005883a 	mov	r2,zero
}
101147f8:	e037883a 	mov	sp,fp
101147fc:	dfc00117 	ldw	ra,4(sp)
10114800:	df000017 	ldw	fp,0(sp)
10114804:	dec00204 	addi	sp,sp,8
10114808:	f800283a 	ret

1011480c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1011480c:	defffc04 	addi	sp,sp,-16
10114810:	df000315 	stw	fp,12(sp)
10114814:	df000304 	addi	fp,sp,12
10114818:	e13ffd15 	stw	r4,-12(fp)
1011481c:	e17ffe15 	stw	r5,-8(fp)
10114820:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10114824:	e0fffe17 	ldw	r3,-8(fp)
10114828:	e0bffd17 	ldw	r2,-12(fp)
1011482c:	18800c26 	beq	r3,r2,10114860 <alt_load_section+0x54>
  {
    while( to != end )
10114830:	00000806 	br	10114854 <alt_load_section+0x48>
    {
      *to++ = *from++;
10114834:	e0bffe17 	ldw	r2,-8(fp)
10114838:	10c00104 	addi	r3,r2,4
1011483c:	e0fffe15 	stw	r3,-8(fp)
10114840:	e0fffd17 	ldw	r3,-12(fp)
10114844:	19000104 	addi	r4,r3,4
10114848:	e13ffd15 	stw	r4,-12(fp)
1011484c:	18c00017 	ldw	r3,0(r3)
10114850:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10114854:	e0fffe17 	ldw	r3,-8(fp)
10114858:	e0bfff17 	ldw	r2,-4(fp)
1011485c:	18bff51e 	bne	r3,r2,10114834 <_gp+0xffff3060>
    {
      *to++ = *from++;
    }
  }
}
10114860:	0001883a 	nop
10114864:	e037883a 	mov	sp,fp
10114868:	df000017 	ldw	fp,0(sp)
1011486c:	dec00104 	addi	sp,sp,4
10114870:	f800283a 	ret

10114874 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10114874:	defffe04 	addi	sp,sp,-8
10114878:	dfc00115 	stw	ra,4(sp)
1011487c:	df000015 	stw	fp,0(sp)
10114880:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10114884:	018404b4 	movhi	r6,4114
10114888:	31a61704 	addi	r6,r6,-26532
1011488c:	01440474 	movhi	r5,4113
10114890:	295f4004 	addi	r5,r5,32000
10114894:	010404b4 	movhi	r4,4114
10114898:	21261704 	addi	r4,r4,-26532
1011489c:	011480c0 	call	1011480c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
101148a0:	01840434 	movhi	r6,4112
101148a4:	31809104 	addi	r6,r6,580
101148a8:	01440434 	movhi	r5,4112
101148ac:	29400804 	addi	r5,r5,32
101148b0:	01040434 	movhi	r4,4112
101148b4:	21000804 	addi	r4,r4,32
101148b8:	011480c0 	call	1011480c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
101148bc:	01840474 	movhi	r6,4113
101148c0:	319f4004 	addi	r6,r6,32000
101148c4:	01440474 	movhi	r5,4113
101148c8:	295d1d04 	addi	r5,r5,29812
101148cc:	01040474 	movhi	r4,4113
101148d0:	211d1d04 	addi	r4,r4,29812
101148d4:	011480c0 	call	1011480c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
101148d8:	011670c0 	call	1011670c <alt_dcache_flush_all>
  alt_icache_flush_all();
101148dc:	0116bb00 	call	10116bb0 <alt_icache_flush_all>
}
101148e0:	0001883a 	nop
101148e4:	e037883a 	mov	sp,fp
101148e8:	dfc00117 	ldw	ra,4(sp)
101148ec:	df000017 	ldw	fp,0(sp)
101148f0:	dec00204 	addi	sp,sp,8
101148f4:	f800283a 	ret

101148f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101148f8:	defffe04 	addi	sp,sp,-8
101148fc:	dfc00115 	stw	ra,4(sp)
10114900:	df000015 	stw	fp,0(sp)
10114904:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10114908:	d0a00b17 	ldw	r2,-32724(gp)
1011490c:	10000326 	beq	r2,zero,1011491c <alt_get_errno+0x24>
10114910:	d0a00b17 	ldw	r2,-32724(gp)
10114914:	103ee83a 	callr	r2
10114918:	00000106 	br	10114920 <alt_get_errno+0x28>
1011491c:	d0a6fa04 	addi	r2,gp,-25624
}
10114920:	e037883a 	mov	sp,fp
10114924:	dfc00117 	ldw	ra,4(sp)
10114928:	df000017 	ldw	fp,0(sp)
1011492c:	dec00204 	addi	sp,sp,8
10114930:	f800283a 	ret

10114934 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10114934:	defff904 	addi	sp,sp,-28
10114938:	dfc00615 	stw	ra,24(sp)
1011493c:	df000515 	stw	fp,20(sp)
10114940:	df000504 	addi	fp,sp,20
10114944:	e13ffd15 	stw	r4,-12(fp)
10114948:	e17ffe15 	stw	r5,-8(fp)
1011494c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10114950:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10114954:	e0bffd17 	ldw	r2,-12(fp)
10114958:	10000616 	blt	r2,zero,10114974 <lseek+0x40>
1011495c:	e0bffd17 	ldw	r2,-12(fp)
10114960:	10c00324 	muli	r3,r2,12
10114964:	008404b4 	movhi	r2,4114
10114968:	10a17304 	addi	r2,r2,-31284
1011496c:	1885883a 	add	r2,r3,r2
10114970:	00000106 	br	10114978 <lseek+0x44>
10114974:	0005883a 	mov	r2,zero
10114978:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1011497c:	e0bffc17 	ldw	r2,-16(fp)
10114980:	10001026 	beq	r2,zero,101149c4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10114984:	e0bffc17 	ldw	r2,-16(fp)
10114988:	10800017 	ldw	r2,0(r2)
1011498c:	10800717 	ldw	r2,28(r2)
10114990:	10000926 	beq	r2,zero,101149b8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10114994:	e0bffc17 	ldw	r2,-16(fp)
10114998:	10800017 	ldw	r2,0(r2)
1011499c:	10800717 	ldw	r2,28(r2)
101149a0:	e1bfff17 	ldw	r6,-4(fp)
101149a4:	e17ffe17 	ldw	r5,-8(fp)
101149a8:	e13ffc17 	ldw	r4,-16(fp)
101149ac:	103ee83a 	callr	r2
101149b0:	e0bffb15 	stw	r2,-20(fp)
101149b4:	00000506 	br	101149cc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
101149b8:	00bfde84 	movi	r2,-134
101149bc:	e0bffb15 	stw	r2,-20(fp)
101149c0:	00000206 	br	101149cc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
101149c4:	00bfebc4 	movi	r2,-81
101149c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
101149cc:	e0bffb17 	ldw	r2,-20(fp)
101149d0:	1000070e 	bge	r2,zero,101149f0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
101149d4:	01148f80 	call	101148f8 <alt_get_errno>
101149d8:	1007883a 	mov	r3,r2
101149dc:	e0bffb17 	ldw	r2,-20(fp)
101149e0:	0085c83a 	sub	r2,zero,r2
101149e4:	18800015 	stw	r2,0(r3)
    rc = -1;
101149e8:	00bfffc4 	movi	r2,-1
101149ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
101149f0:	e0bffb17 	ldw	r2,-20(fp)
}
101149f4:	e037883a 	mov	sp,fp
101149f8:	dfc00117 	ldw	ra,4(sp)
101149fc:	df000017 	ldw	fp,0(sp)
10114a00:	dec00204 	addi	sp,sp,8
10114a04:	f800283a 	ret

10114a08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10114a08:	defffd04 	addi	sp,sp,-12
10114a0c:	dfc00215 	stw	ra,8(sp)
10114a10:	df000115 	stw	fp,4(sp)
10114a14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10114a18:	0009883a 	mov	r4,zero
10114a1c:	01155100 	call	10115510 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10114a20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10114a24:	01155480 	call	10115548 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10114a28:	01840474 	movhi	r6,4113
10114a2c:	319f3304 	addi	r6,r6,31948
10114a30:	01440474 	movhi	r5,4113
10114a34:	295f3304 	addi	r5,r5,31948
10114a38:	01040474 	movhi	r4,4113
10114a3c:	211f3304 	addi	r4,r4,31948
10114a40:	0116f480 	call	10116f48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10114a44:	01168340 	call	10116834 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10114a48:	01040474 	movhi	r4,4113
10114a4c:	211a2504 	addi	r4,r4,26772
10114a50:	01171140 	call	10117114 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10114a54:	d0a70517 	ldw	r2,-25580(gp)
10114a58:	d0e70617 	ldw	r3,-25576(gp)
10114a5c:	d1270717 	ldw	r4,-25572(gp)
10114a60:	200d883a 	mov	r6,r4
10114a64:	180b883a 	mov	r5,r3
10114a68:	1009883a 	mov	r4,r2
10114a6c:	010282c0 	call	1010282c <main>
10114a70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10114a74:	01000044 	movi	r4,1
10114a78:	01141900 	call	10114190 <close>
  exit (result);
10114a7c:	e13fff17 	ldw	r4,-4(fp)
10114a80:	01171280 	call	10117128 <exit>

10114a84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10114a84:	defffe04 	addi	sp,sp,-8
10114a88:	df000115 	stw	fp,4(sp)
10114a8c:	df000104 	addi	fp,sp,4
10114a90:	e13fff15 	stw	r4,-4(fp)
}
10114a94:	0001883a 	nop
10114a98:	e037883a 	mov	sp,fp
10114a9c:	df000017 	ldw	fp,0(sp)
10114aa0:	dec00104 	addi	sp,sp,4
10114aa4:	f800283a 	ret

10114aa8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10114aa8:	defffe04 	addi	sp,sp,-8
10114aac:	df000115 	stw	fp,4(sp)
10114ab0:	df000104 	addi	fp,sp,4
10114ab4:	e13fff15 	stw	r4,-4(fp)
}
10114ab8:	0001883a 	nop
10114abc:	e037883a 	mov	sp,fp
10114ac0:	df000017 	ldw	fp,0(sp)
10114ac4:	dec00104 	addi	sp,sp,4
10114ac8:	f800283a 	ret

10114acc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10114acc:	defffe04 	addi	sp,sp,-8
10114ad0:	dfc00115 	stw	ra,4(sp)
10114ad4:	df000015 	stw	fp,0(sp)
10114ad8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10114adc:	d0a00b17 	ldw	r2,-32724(gp)
10114ae0:	10000326 	beq	r2,zero,10114af0 <alt_get_errno+0x24>
10114ae4:	d0a00b17 	ldw	r2,-32724(gp)
10114ae8:	103ee83a 	callr	r2
10114aec:	00000106 	br	10114af4 <alt_get_errno+0x28>
10114af0:	d0a6fa04 	addi	r2,gp,-25624
}
10114af4:	e037883a 	mov	sp,fp
10114af8:	dfc00117 	ldw	ra,4(sp)
10114afc:	df000017 	ldw	fp,0(sp)
10114b00:	dec00204 	addi	sp,sp,8
10114b04:	f800283a 	ret

10114b08 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10114b08:	defffd04 	addi	sp,sp,-12
10114b0c:	df000215 	stw	fp,8(sp)
10114b10:	df000204 	addi	fp,sp,8
10114b14:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10114b18:	e0bfff17 	ldw	r2,-4(fp)
10114b1c:	10800217 	ldw	r2,8(r2)
10114b20:	10d00034 	orhi	r3,r2,16384
10114b24:	e0bfff17 	ldw	r2,-4(fp)
10114b28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10114b2c:	e03ffe15 	stw	zero,-8(fp)
10114b30:	00001d06 	br	10114ba8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10114b34:	008404b4 	movhi	r2,4114
10114b38:	10a17304 	addi	r2,r2,-31284
10114b3c:	e0fffe17 	ldw	r3,-8(fp)
10114b40:	18c00324 	muli	r3,r3,12
10114b44:	10c5883a 	add	r2,r2,r3
10114b48:	10c00017 	ldw	r3,0(r2)
10114b4c:	e0bfff17 	ldw	r2,-4(fp)
10114b50:	10800017 	ldw	r2,0(r2)
10114b54:	1880111e 	bne	r3,r2,10114b9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10114b58:	008404b4 	movhi	r2,4114
10114b5c:	10a17304 	addi	r2,r2,-31284
10114b60:	e0fffe17 	ldw	r3,-8(fp)
10114b64:	18c00324 	muli	r3,r3,12
10114b68:	10c5883a 	add	r2,r2,r3
10114b6c:	10800204 	addi	r2,r2,8
10114b70:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10114b74:	1000090e 	bge	r2,zero,10114b9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10114b78:	e0bffe17 	ldw	r2,-8(fp)
10114b7c:	10c00324 	muli	r3,r2,12
10114b80:	008404b4 	movhi	r2,4114
10114b84:	10a17304 	addi	r2,r2,-31284
10114b88:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10114b8c:	e0bfff17 	ldw	r2,-4(fp)
10114b90:	18800226 	beq	r3,r2,10114b9c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10114b94:	00bffcc4 	movi	r2,-13
10114b98:	00000806 	br	10114bbc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10114b9c:	e0bffe17 	ldw	r2,-8(fp)
10114ba0:	10800044 	addi	r2,r2,1
10114ba4:	e0bffe15 	stw	r2,-8(fp)
10114ba8:	d0a00a17 	ldw	r2,-32728(gp)
10114bac:	1007883a 	mov	r3,r2
10114bb0:	e0bffe17 	ldw	r2,-8(fp)
10114bb4:	18bfdf2e 	bgeu	r3,r2,10114b34 <_gp+0xffff3360>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10114bb8:	0005883a 	mov	r2,zero
}
10114bbc:	e037883a 	mov	sp,fp
10114bc0:	df000017 	ldw	fp,0(sp)
10114bc4:	dec00104 	addi	sp,sp,4
10114bc8:	f800283a 	ret

10114bcc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10114bcc:	defff604 	addi	sp,sp,-40
10114bd0:	dfc00915 	stw	ra,36(sp)
10114bd4:	df000815 	stw	fp,32(sp)
10114bd8:	df000804 	addi	fp,sp,32
10114bdc:	e13ffd15 	stw	r4,-12(fp)
10114be0:	e17ffe15 	stw	r5,-8(fp)
10114be4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10114be8:	00bfffc4 	movi	r2,-1
10114bec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10114bf0:	00bffb44 	movi	r2,-19
10114bf4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10114bf8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10114bfc:	d1600804 	addi	r5,gp,-32736
10114c00:	e13ffd17 	ldw	r4,-12(fp)
10114c04:	01168f40 	call	101168f4 <alt_find_dev>
10114c08:	e0bff815 	stw	r2,-32(fp)
10114c0c:	e0bff817 	ldw	r2,-32(fp)
10114c10:	1000051e 	bne	r2,zero,10114c28 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10114c14:	e13ffd17 	ldw	r4,-12(fp)
10114c18:	01169840 	call	10116984 <alt_find_file>
10114c1c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10114c20:	00800044 	movi	r2,1
10114c24:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10114c28:	e0bff817 	ldw	r2,-32(fp)
10114c2c:	10002926 	beq	r2,zero,10114cd4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10114c30:	e13ff817 	ldw	r4,-32(fp)
10114c34:	0116b0c0 	call	10116b0c <alt_get_fd>
10114c38:	e0bff915 	stw	r2,-28(fp)
10114c3c:	e0bff917 	ldw	r2,-28(fp)
10114c40:	1000030e 	bge	r2,zero,10114c50 <open+0x84>
    {
      status = index;
10114c44:	e0bff917 	ldw	r2,-28(fp)
10114c48:	e0bffa15 	stw	r2,-24(fp)
10114c4c:	00002306 	br	10114cdc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10114c50:	e0bff917 	ldw	r2,-28(fp)
10114c54:	10c00324 	muli	r3,r2,12
10114c58:	008404b4 	movhi	r2,4114
10114c5c:	10a17304 	addi	r2,r2,-31284
10114c60:	1885883a 	add	r2,r3,r2
10114c64:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10114c68:	e0fffe17 	ldw	r3,-8(fp)
10114c6c:	00900034 	movhi	r2,16384
10114c70:	10bfffc4 	addi	r2,r2,-1
10114c74:	1886703a 	and	r3,r3,r2
10114c78:	e0bffc17 	ldw	r2,-16(fp)
10114c7c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10114c80:	e0bffb17 	ldw	r2,-20(fp)
10114c84:	1000051e 	bne	r2,zero,10114c9c <open+0xd0>
10114c88:	e13ffc17 	ldw	r4,-16(fp)
10114c8c:	0114b080 	call	10114b08 <alt_file_locked>
10114c90:	e0bffa15 	stw	r2,-24(fp)
10114c94:	e0bffa17 	ldw	r2,-24(fp)
10114c98:	10001016 	blt	r2,zero,10114cdc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10114c9c:	e0bff817 	ldw	r2,-32(fp)
10114ca0:	10800317 	ldw	r2,12(r2)
10114ca4:	10000826 	beq	r2,zero,10114cc8 <open+0xfc>
10114ca8:	e0bff817 	ldw	r2,-32(fp)
10114cac:	10800317 	ldw	r2,12(r2)
10114cb0:	e1ffff17 	ldw	r7,-4(fp)
10114cb4:	e1bffe17 	ldw	r6,-8(fp)
10114cb8:	e17ffd17 	ldw	r5,-12(fp)
10114cbc:	e13ffc17 	ldw	r4,-16(fp)
10114cc0:	103ee83a 	callr	r2
10114cc4:	00000106 	br	10114ccc <open+0x100>
10114cc8:	0005883a 	mov	r2,zero
10114ccc:	e0bffa15 	stw	r2,-24(fp)
10114cd0:	00000206 	br	10114cdc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10114cd4:	00bffb44 	movi	r2,-19
10114cd8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10114cdc:	e0bffa17 	ldw	r2,-24(fp)
10114ce0:	1000090e 	bge	r2,zero,10114d08 <open+0x13c>
  {
    alt_release_fd (index);  
10114ce4:	e13ff917 	ldw	r4,-28(fp)
10114ce8:	01150c00 	call	101150c0 <alt_release_fd>
    ALT_ERRNO = -status;
10114cec:	0114acc0 	call	10114acc <alt_get_errno>
10114cf0:	1007883a 	mov	r3,r2
10114cf4:	e0bffa17 	ldw	r2,-24(fp)
10114cf8:	0085c83a 	sub	r2,zero,r2
10114cfc:	18800015 	stw	r2,0(r3)
    return -1;
10114d00:	00bfffc4 	movi	r2,-1
10114d04:	00000106 	br	10114d0c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10114d08:	e0bff917 	ldw	r2,-28(fp)
}
10114d0c:	e037883a 	mov	sp,fp
10114d10:	dfc00117 	ldw	ra,4(sp)
10114d14:	df000017 	ldw	fp,0(sp)
10114d18:	dec00204 	addi	sp,sp,8
10114d1c:	f800283a 	ret

10114d20 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
10114d20:	defff204 	addi	sp,sp,-56
10114d24:	dfc00a15 	stw	ra,40(sp)
10114d28:	df000915 	stw	fp,36(sp)
10114d2c:	df000904 	addi	fp,sp,36
10114d30:	e13fff15 	stw	r4,-4(fp)
10114d34:	e1400215 	stw	r5,8(fp)
10114d38:	e1800315 	stw	r6,12(fp)
10114d3c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
10114d40:	e0800204 	addi	r2,fp,8
10114d44:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
10114d48:	e0bfff17 	ldw	r2,-4(fp)
10114d4c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
10114d50:	00006f06 	br	10114f10 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
10114d54:	e0bff807 	ldb	r2,-32(fp)
10114d58:	10800960 	cmpeqi	r2,r2,37
10114d5c:	1000041e 	bne	r2,zero,10114d70 <alt_printf+0x50>
        {
            alt_putchar(c);
10114d60:	e0bff807 	ldb	r2,-32(fp)
10114d64:	1009883a 	mov	r4,r2
10114d68:	0114f4c0 	call	10114f4c <alt_putchar>
10114d6c:	00006806 	br	10114f10 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
10114d70:	e0bff717 	ldw	r2,-36(fp)
10114d74:	10c00044 	addi	r3,r2,1
10114d78:	e0fff715 	stw	r3,-36(fp)
10114d7c:	10800003 	ldbu	r2,0(r2)
10114d80:	e0bff805 	stb	r2,-32(fp)
10114d84:	e0bff807 	ldb	r2,-32(fp)
10114d88:	10006926 	beq	r2,zero,10114f30 <alt_printf+0x210>
            {
                if (c == '%')
10114d8c:	e0bff807 	ldb	r2,-32(fp)
10114d90:	10800958 	cmpnei	r2,r2,37
10114d94:	1000041e 	bne	r2,zero,10114da8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
10114d98:	e0bff807 	ldb	r2,-32(fp)
10114d9c:	1009883a 	mov	r4,r2
10114da0:	0114f4c0 	call	10114f4c <alt_putchar>
10114da4:	00005a06 	br	10114f10 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
10114da8:	e0bff807 	ldb	r2,-32(fp)
10114dac:	108018d8 	cmpnei	r2,r2,99
10114db0:	1000081e 	bne	r2,zero,10114dd4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
10114db4:	e0bffe17 	ldw	r2,-8(fp)
10114db8:	10c00104 	addi	r3,r2,4
10114dbc:	e0fffe15 	stw	r3,-8(fp)
10114dc0:	10800017 	ldw	r2,0(r2)
10114dc4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
10114dc8:	e13ffd17 	ldw	r4,-12(fp)
10114dcc:	0114f4c0 	call	10114f4c <alt_putchar>
10114dd0:	00004f06 	br	10114f10 <alt_printf+0x1f0>
                }
                else if (c == 'x')
10114dd4:	e0bff807 	ldb	r2,-32(fp)
10114dd8:	10801e18 	cmpnei	r2,r2,120
10114ddc:	1000341e 	bne	r2,zero,10114eb0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
10114de0:	e0bffe17 	ldw	r2,-8(fp)
10114de4:	10c00104 	addi	r3,r2,4
10114de8:	e0fffe15 	stw	r3,-8(fp)
10114dec:	10800017 	ldw	r2,0(r2)
10114df0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
10114df4:	e0bffb17 	ldw	r2,-20(fp)
10114df8:	1000031e 	bne	r2,zero,10114e08 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
10114dfc:	01000c04 	movi	r4,48
10114e00:	0114f4c0 	call	10114f4c <alt_putchar>
                        continue;
10114e04:	00004206 	br	10114f10 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
10114e08:	00800704 	movi	r2,28
10114e0c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
10114e10:	00000306 	br	10114e20 <alt_printf+0x100>
                        digit_shift -= 4;
10114e14:	e0bff917 	ldw	r2,-28(fp)
10114e18:	10bfff04 	addi	r2,r2,-4
10114e1c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
10114e20:	00c003c4 	movi	r3,15
10114e24:	e0bff917 	ldw	r2,-28(fp)
10114e28:	1884983a 	sll	r2,r3,r2
10114e2c:	1007883a 	mov	r3,r2
10114e30:	e0bffb17 	ldw	r2,-20(fp)
10114e34:	1884703a 	and	r2,r3,r2
10114e38:	103ff626 	beq	r2,zero,10114e14 <_gp+0xffff3640>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
10114e3c:	00001906 	br	10114ea4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
10114e40:	00c003c4 	movi	r3,15
10114e44:	e0bff917 	ldw	r2,-28(fp)
10114e48:	1884983a 	sll	r2,r3,r2
10114e4c:	1007883a 	mov	r3,r2
10114e50:	e0bffb17 	ldw	r2,-20(fp)
10114e54:	1886703a 	and	r3,r3,r2
10114e58:	e0bff917 	ldw	r2,-28(fp)
10114e5c:	1884d83a 	srl	r2,r3,r2
10114e60:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
10114e64:	e0bffc17 	ldw	r2,-16(fp)
10114e68:	108002a8 	cmpgeui	r2,r2,10
10114e6c:	1000041e 	bne	r2,zero,10114e80 <alt_printf+0x160>
                            c = '0' + digit;
10114e70:	e0bffc17 	ldw	r2,-16(fp)
10114e74:	10800c04 	addi	r2,r2,48
10114e78:	e0bff805 	stb	r2,-32(fp)
10114e7c:	00000306 	br	10114e8c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
10114e80:	e0bffc17 	ldw	r2,-16(fp)
10114e84:	108015c4 	addi	r2,r2,87
10114e88:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
10114e8c:	e0bff807 	ldb	r2,-32(fp)
10114e90:	1009883a 	mov	r4,r2
10114e94:	0114f4c0 	call	10114f4c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
10114e98:	e0bff917 	ldw	r2,-28(fp)
10114e9c:	10bfff04 	addi	r2,r2,-4
10114ea0:	e0bff915 	stw	r2,-28(fp)
10114ea4:	e0bff917 	ldw	r2,-28(fp)
10114ea8:	103fe50e 	bge	r2,zero,10114e40 <_gp+0xffff366c>
10114eac:	00001806 	br	10114f10 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
10114eb0:	e0bff807 	ldb	r2,-32(fp)
10114eb4:	10801cd8 	cmpnei	r2,r2,115
10114eb8:	1000151e 	bne	r2,zero,10114f10 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
10114ebc:	e0bffe17 	ldw	r2,-8(fp)
10114ec0:	10c00104 	addi	r3,r2,4
10114ec4:	e0fffe15 	stw	r3,-8(fp)
10114ec8:	10800017 	ldw	r2,0(r2)
10114ecc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
10114ed0:	00000906 	br	10114ef8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
10114ed4:	e0bffa17 	ldw	r2,-24(fp)
10114ed8:	10c00044 	addi	r3,r2,1
10114edc:	e0fffa15 	stw	r3,-24(fp)
10114ee0:	10800003 	ldbu	r2,0(r2)
10114ee4:	10803fcc 	andi	r2,r2,255
10114ee8:	1080201c 	xori	r2,r2,128
10114eec:	10bfe004 	addi	r2,r2,-128
10114ef0:	1009883a 	mov	r4,r2
10114ef4:	0114f4c0 	call	10114f4c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
10114ef8:	e0bffa17 	ldw	r2,-24(fp)
10114efc:	10800003 	ldbu	r2,0(r2)
10114f00:	10803fcc 	andi	r2,r2,255
10114f04:	1080201c 	xori	r2,r2,128
10114f08:	10bfe004 	addi	r2,r2,-128
10114f0c:	103ff11e 	bne	r2,zero,10114ed4 <_gp+0xffff3700>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
10114f10:	e0bff717 	ldw	r2,-36(fp)
10114f14:	10c00044 	addi	r3,r2,1
10114f18:	e0fff715 	stw	r3,-36(fp)
10114f1c:	10800003 	ldbu	r2,0(r2)
10114f20:	e0bff805 	stb	r2,-32(fp)
10114f24:	e0bff807 	ldb	r2,-32(fp)
10114f28:	103f8a1e 	bne	r2,zero,10114d54 <_gp+0xffff3580>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
10114f2c:	00000106 	br	10114f34 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
10114f30:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
10114f34:	0001883a 	nop
10114f38:	e037883a 	mov	sp,fp
10114f3c:	dfc00117 	ldw	ra,4(sp)
10114f40:	df000017 	ldw	fp,0(sp)
10114f44:	dec00504 	addi	sp,sp,20
10114f48:	f800283a 	ret

10114f4c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
10114f4c:	defffd04 	addi	sp,sp,-12
10114f50:	dfc00215 	stw	ra,8(sp)
10114f54:	df000115 	stw	fp,4(sp)
10114f58:	df000104 	addi	fp,sp,4
10114f5c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
10114f60:	d0a00117 	ldw	r2,-32764(gp)
10114f64:	10800217 	ldw	r2,8(r2)
10114f68:	100b883a 	mov	r5,r2
10114f6c:	e13fff17 	ldw	r4,-4(fp)
10114f70:	010d49c0 	call	1010d49c <putc>
#endif
#endif
}
10114f74:	e037883a 	mov	sp,fp
10114f78:	dfc00117 	ldw	ra,4(sp)
10114f7c:	df000017 	ldw	fp,0(sp)
10114f80:	dec00204 	addi	sp,sp,8
10114f84:	f800283a 	ret

10114f88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10114f88:	defffe04 	addi	sp,sp,-8
10114f8c:	dfc00115 	stw	ra,4(sp)
10114f90:	df000015 	stw	fp,0(sp)
10114f94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10114f98:	d0a00b17 	ldw	r2,-32724(gp)
10114f9c:	10000326 	beq	r2,zero,10114fac <alt_get_errno+0x24>
10114fa0:	d0a00b17 	ldw	r2,-32724(gp)
10114fa4:	103ee83a 	callr	r2
10114fa8:	00000106 	br	10114fb0 <alt_get_errno+0x28>
10114fac:	d0a6fa04 	addi	r2,gp,-25624
}
10114fb0:	e037883a 	mov	sp,fp
10114fb4:	dfc00117 	ldw	ra,4(sp)
10114fb8:	df000017 	ldw	fp,0(sp)
10114fbc:	dec00204 	addi	sp,sp,8
10114fc0:	f800283a 	ret

10114fc4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10114fc4:	defff904 	addi	sp,sp,-28
10114fc8:	dfc00615 	stw	ra,24(sp)
10114fcc:	df000515 	stw	fp,20(sp)
10114fd0:	df000504 	addi	fp,sp,20
10114fd4:	e13ffd15 	stw	r4,-12(fp)
10114fd8:	e17ffe15 	stw	r5,-8(fp)
10114fdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10114fe0:	e0bffd17 	ldw	r2,-12(fp)
10114fe4:	10000616 	blt	r2,zero,10115000 <read+0x3c>
10114fe8:	e0bffd17 	ldw	r2,-12(fp)
10114fec:	10c00324 	muli	r3,r2,12
10114ff0:	008404b4 	movhi	r2,4114
10114ff4:	10a17304 	addi	r2,r2,-31284
10114ff8:	1885883a 	add	r2,r3,r2
10114ffc:	00000106 	br	10115004 <read+0x40>
10115000:	0005883a 	mov	r2,zero
10115004:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10115008:	e0bffb17 	ldw	r2,-20(fp)
1011500c:	10002226 	beq	r2,zero,10115098 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10115010:	e0bffb17 	ldw	r2,-20(fp)
10115014:	10800217 	ldw	r2,8(r2)
10115018:	108000cc 	andi	r2,r2,3
1011501c:	10800060 	cmpeqi	r2,r2,1
10115020:	1000181e 	bne	r2,zero,10115084 <read+0xc0>
        (fd->dev->read))
10115024:	e0bffb17 	ldw	r2,-20(fp)
10115028:	10800017 	ldw	r2,0(r2)
1011502c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10115030:	10001426 	beq	r2,zero,10115084 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10115034:	e0bffb17 	ldw	r2,-20(fp)
10115038:	10800017 	ldw	r2,0(r2)
1011503c:	10800517 	ldw	r2,20(r2)
10115040:	e0ffff17 	ldw	r3,-4(fp)
10115044:	180d883a 	mov	r6,r3
10115048:	e17ffe17 	ldw	r5,-8(fp)
1011504c:	e13ffb17 	ldw	r4,-20(fp)
10115050:	103ee83a 	callr	r2
10115054:	e0bffc15 	stw	r2,-16(fp)
10115058:	e0bffc17 	ldw	r2,-16(fp)
1011505c:	1000070e 	bge	r2,zero,1011507c <read+0xb8>
        {
          ALT_ERRNO = -rval;
10115060:	0114f880 	call	10114f88 <alt_get_errno>
10115064:	1007883a 	mov	r3,r2
10115068:	e0bffc17 	ldw	r2,-16(fp)
1011506c:	0085c83a 	sub	r2,zero,r2
10115070:	18800015 	stw	r2,0(r3)
          return -1;
10115074:	00bfffc4 	movi	r2,-1
10115078:	00000c06 	br	101150ac <read+0xe8>
        }
        return rval;
1011507c:	e0bffc17 	ldw	r2,-16(fp)
10115080:	00000a06 	br	101150ac <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10115084:	0114f880 	call	10114f88 <alt_get_errno>
10115088:	1007883a 	mov	r3,r2
1011508c:	00800344 	movi	r2,13
10115090:	18800015 	stw	r2,0(r3)
10115094:	00000406 	br	101150a8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10115098:	0114f880 	call	10114f88 <alt_get_errno>
1011509c:	1007883a 	mov	r3,r2
101150a0:	00801444 	movi	r2,81
101150a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
101150a8:	00bfffc4 	movi	r2,-1
}
101150ac:	e037883a 	mov	sp,fp
101150b0:	dfc00117 	ldw	ra,4(sp)
101150b4:	df000017 	ldw	fp,0(sp)
101150b8:	dec00204 	addi	sp,sp,8
101150bc:	f800283a 	ret

101150c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
101150c0:	defffe04 	addi	sp,sp,-8
101150c4:	df000115 	stw	fp,4(sp)
101150c8:	df000104 	addi	fp,sp,4
101150cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
101150d0:	e0bfff17 	ldw	r2,-4(fp)
101150d4:	108000d0 	cmplti	r2,r2,3
101150d8:	10000d1e 	bne	r2,zero,10115110 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
101150dc:	008404b4 	movhi	r2,4114
101150e0:	10a17304 	addi	r2,r2,-31284
101150e4:	e0ffff17 	ldw	r3,-4(fp)
101150e8:	18c00324 	muli	r3,r3,12
101150ec:	10c5883a 	add	r2,r2,r3
101150f0:	10800204 	addi	r2,r2,8
101150f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
101150f8:	008404b4 	movhi	r2,4114
101150fc:	10a17304 	addi	r2,r2,-31284
10115100:	e0ffff17 	ldw	r3,-4(fp)
10115104:	18c00324 	muli	r3,r3,12
10115108:	10c5883a 	add	r2,r2,r3
1011510c:	10000015 	stw	zero,0(r2)
  }
}
10115110:	0001883a 	nop
10115114:	e037883a 	mov	sp,fp
10115118:	df000017 	ldw	fp,0(sp)
1011511c:	dec00104 	addi	sp,sp,4
10115120:	f800283a 	ret

10115124 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10115124:	defff904 	addi	sp,sp,-28
10115128:	df000615 	stw	fp,24(sp)
1011512c:	df000604 	addi	fp,sp,24
10115130:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10115134:	0005303a 	rdctl	r2,status
10115138:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1011513c:	e0fffe17 	ldw	r3,-8(fp)
10115140:	00bfff84 	movi	r2,-2
10115144:	1884703a 	and	r2,r3,r2
10115148:	1001703a 	wrctl	status,r2
  
  return context;
1011514c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10115150:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10115154:	d0a00c17 	ldw	r2,-32720(gp)
10115158:	10c000c4 	addi	r3,r2,3
1011515c:	00bfff04 	movi	r2,-4
10115160:	1884703a 	and	r2,r3,r2
10115164:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10115168:	d0e00c17 	ldw	r3,-32720(gp)
1011516c:	e0bfff17 	ldw	r2,-4(fp)
10115170:	1887883a 	add	r3,r3,r2
10115174:	008404b4 	movhi	r2,4114
10115178:	10800004 	addi	r2,r2,0
1011517c:	10c0062e 	bgeu	r2,r3,10115198 <sbrk+0x74>
10115180:	e0bffb17 	ldw	r2,-20(fp)
10115184:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10115188:	e0bffa17 	ldw	r2,-24(fp)
1011518c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10115190:	00bfffc4 	movi	r2,-1
10115194:	00000b06 	br	101151c4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10115198:	d0a00c17 	ldw	r2,-32720(gp)
1011519c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
101151a0:	d0e00c17 	ldw	r3,-32720(gp)
101151a4:	e0bfff17 	ldw	r2,-4(fp)
101151a8:	1885883a 	add	r2,r3,r2
101151ac:	d0a00c15 	stw	r2,-32720(gp)
101151b0:	e0bffb17 	ldw	r2,-20(fp)
101151b4:	e0bffc15 	stw	r2,-16(fp)
101151b8:	e0bffc17 	ldw	r2,-16(fp)
101151bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
101151c0:	e0bffd17 	ldw	r2,-12(fp)
} 
101151c4:	e037883a 	mov	sp,fp
101151c8:	df000017 	ldw	fp,0(sp)
101151cc:	dec00104 	addi	sp,sp,4
101151d0:	f800283a 	ret

101151d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
101151d4:	defffa04 	addi	sp,sp,-24
101151d8:	df000515 	stw	fp,20(sp)
101151dc:	df000504 	addi	fp,sp,20
101151e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101151e4:	0005303a 	rdctl	r2,status
101151e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101151ec:	e0fffc17 	ldw	r3,-16(fp)
101151f0:	00bfff84 	movi	r2,-2
101151f4:	1884703a 	and	r2,r3,r2
101151f8:	1001703a 	wrctl	status,r2
  
  return context;
101151fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10115200:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10115204:	e0bfff17 	ldw	r2,-4(fp)
10115208:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1011520c:	e0bffd17 	ldw	r2,-12(fp)
10115210:	10800017 	ldw	r2,0(r2)
10115214:	e0fffd17 	ldw	r3,-12(fp)
10115218:	18c00117 	ldw	r3,4(r3)
1011521c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10115220:	e0bffd17 	ldw	r2,-12(fp)
10115224:	10800117 	ldw	r2,4(r2)
10115228:	e0fffd17 	ldw	r3,-12(fp)
1011522c:	18c00017 	ldw	r3,0(r3)
10115230:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10115234:	e0bffd17 	ldw	r2,-12(fp)
10115238:	e0fffd17 	ldw	r3,-12(fp)
1011523c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10115240:	e0bffd17 	ldw	r2,-12(fp)
10115244:	e0fffd17 	ldw	r3,-12(fp)
10115248:	10c00015 	stw	r3,0(r2)
1011524c:	e0bffb17 	ldw	r2,-20(fp)
10115250:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10115254:	e0bffe17 	ldw	r2,-8(fp)
10115258:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1011525c:	0001883a 	nop
10115260:	e037883a 	mov	sp,fp
10115264:	df000017 	ldw	fp,0(sp)
10115268:	dec00104 	addi	sp,sp,4
1011526c:	f800283a 	ret

10115270 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10115270:	defffb04 	addi	sp,sp,-20
10115274:	dfc00415 	stw	ra,16(sp)
10115278:	df000315 	stw	fp,12(sp)
1011527c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10115280:	d0a00d17 	ldw	r2,-32716(gp)
10115284:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10115288:	d0a70917 	ldw	r2,-25564(gp)
1011528c:	10800044 	addi	r2,r2,1
10115290:	d0a70915 	stw	r2,-25564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10115294:	00002e06 	br	10115350 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10115298:	e0bffd17 	ldw	r2,-12(fp)
1011529c:	10800017 	ldw	r2,0(r2)
101152a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
101152a4:	e0bffd17 	ldw	r2,-12(fp)
101152a8:	10800403 	ldbu	r2,16(r2)
101152ac:	10803fcc 	andi	r2,r2,255
101152b0:	10000426 	beq	r2,zero,101152c4 <alt_tick+0x54>
101152b4:	d0a70917 	ldw	r2,-25564(gp)
101152b8:	1000021e 	bne	r2,zero,101152c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
101152bc:	e0bffd17 	ldw	r2,-12(fp)
101152c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
101152c4:	e0bffd17 	ldw	r2,-12(fp)
101152c8:	10800217 	ldw	r2,8(r2)
101152cc:	d0e70917 	ldw	r3,-25564(gp)
101152d0:	18801d36 	bltu	r3,r2,10115348 <alt_tick+0xd8>
101152d4:	e0bffd17 	ldw	r2,-12(fp)
101152d8:	10800403 	ldbu	r2,16(r2)
101152dc:	10803fcc 	andi	r2,r2,255
101152e0:	1000191e 	bne	r2,zero,10115348 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
101152e4:	e0bffd17 	ldw	r2,-12(fp)
101152e8:	10800317 	ldw	r2,12(r2)
101152ec:	e0fffd17 	ldw	r3,-12(fp)
101152f0:	18c00517 	ldw	r3,20(r3)
101152f4:	1809883a 	mov	r4,r3
101152f8:	103ee83a 	callr	r2
101152fc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10115300:	e0bfff17 	ldw	r2,-4(fp)
10115304:	1000031e 	bne	r2,zero,10115314 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10115308:	e13ffd17 	ldw	r4,-12(fp)
1011530c:	01151d40 	call	101151d4 <alt_alarm_stop>
10115310:	00000d06 	br	10115348 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10115314:	e0bffd17 	ldw	r2,-12(fp)
10115318:	10c00217 	ldw	r3,8(r2)
1011531c:	e0bfff17 	ldw	r2,-4(fp)
10115320:	1887883a 	add	r3,r3,r2
10115324:	e0bffd17 	ldw	r2,-12(fp)
10115328:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1011532c:	e0bffd17 	ldw	r2,-12(fp)
10115330:	10c00217 	ldw	r3,8(r2)
10115334:	d0a70917 	ldw	r2,-25564(gp)
10115338:	1880032e 	bgeu	r3,r2,10115348 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1011533c:	e0bffd17 	ldw	r2,-12(fp)
10115340:	00c00044 	movi	r3,1
10115344:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10115348:	e0bffe17 	ldw	r2,-8(fp)
1011534c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10115350:	e0fffd17 	ldw	r3,-12(fp)
10115354:	d0a00d04 	addi	r2,gp,-32716
10115358:	18bfcf1e 	bne	r3,r2,10115298 <_gp+0xffff3ac4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1011535c:	0001883a 	nop
}
10115360:	0001883a 	nop
10115364:	e037883a 	mov	sp,fp
10115368:	dfc00117 	ldw	ra,4(sp)
1011536c:	df000017 	ldw	fp,0(sp)
10115370:	dec00204 	addi	sp,sp,8
10115374:	f800283a 	ret

10115378 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10115378:	defffd04 	addi	sp,sp,-12
1011537c:	dfc00215 	stw	ra,8(sp)
10115380:	df000115 	stw	fp,4(sp)
10115384:	df000104 	addi	fp,sp,4
10115388:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1011538c:	e13fff17 	ldw	r4,-4(fp)
10115390:	01165b40 	call	101165b4 <alt_busy_sleep>
}
10115394:	e037883a 	mov	sp,fp
10115398:	dfc00117 	ldw	ra,4(sp)
1011539c:	df000017 	ldw	fp,0(sp)
101153a0:	dec00204 	addi	sp,sp,8
101153a4:	f800283a 	ret

101153a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101153a8:	defffe04 	addi	sp,sp,-8
101153ac:	dfc00115 	stw	ra,4(sp)
101153b0:	df000015 	stw	fp,0(sp)
101153b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101153b8:	d0a00b17 	ldw	r2,-32724(gp)
101153bc:	10000326 	beq	r2,zero,101153cc <alt_get_errno+0x24>
101153c0:	d0a00b17 	ldw	r2,-32724(gp)
101153c4:	103ee83a 	callr	r2
101153c8:	00000106 	br	101153d0 <alt_get_errno+0x28>
101153cc:	d0a6fa04 	addi	r2,gp,-25624
}
101153d0:	e037883a 	mov	sp,fp
101153d4:	dfc00117 	ldw	ra,4(sp)
101153d8:	df000017 	ldw	fp,0(sp)
101153dc:	dec00204 	addi	sp,sp,8
101153e0:	f800283a 	ret

101153e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
101153e4:	defff904 	addi	sp,sp,-28
101153e8:	dfc00615 	stw	ra,24(sp)
101153ec:	df000515 	stw	fp,20(sp)
101153f0:	df000504 	addi	fp,sp,20
101153f4:	e13ffd15 	stw	r4,-12(fp)
101153f8:	e17ffe15 	stw	r5,-8(fp)
101153fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10115400:	e0bffd17 	ldw	r2,-12(fp)
10115404:	10000616 	blt	r2,zero,10115420 <write+0x3c>
10115408:	e0bffd17 	ldw	r2,-12(fp)
1011540c:	10c00324 	muli	r3,r2,12
10115410:	008404b4 	movhi	r2,4114
10115414:	10a17304 	addi	r2,r2,-31284
10115418:	1885883a 	add	r2,r3,r2
1011541c:	00000106 	br	10115424 <write+0x40>
10115420:	0005883a 	mov	r2,zero
10115424:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10115428:	e0bffb17 	ldw	r2,-20(fp)
1011542c:	10002126 	beq	r2,zero,101154b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10115430:	e0bffb17 	ldw	r2,-20(fp)
10115434:	10800217 	ldw	r2,8(r2)
10115438:	108000cc 	andi	r2,r2,3
1011543c:	10001826 	beq	r2,zero,101154a0 <write+0xbc>
10115440:	e0bffb17 	ldw	r2,-20(fp)
10115444:	10800017 	ldw	r2,0(r2)
10115448:	10800617 	ldw	r2,24(r2)
1011544c:	10001426 	beq	r2,zero,101154a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10115450:	e0bffb17 	ldw	r2,-20(fp)
10115454:	10800017 	ldw	r2,0(r2)
10115458:	10800617 	ldw	r2,24(r2)
1011545c:	e0ffff17 	ldw	r3,-4(fp)
10115460:	180d883a 	mov	r6,r3
10115464:	e17ffe17 	ldw	r5,-8(fp)
10115468:	e13ffb17 	ldw	r4,-20(fp)
1011546c:	103ee83a 	callr	r2
10115470:	e0bffc15 	stw	r2,-16(fp)
10115474:	e0bffc17 	ldw	r2,-16(fp)
10115478:	1000070e 	bge	r2,zero,10115498 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1011547c:	01153a80 	call	101153a8 <alt_get_errno>
10115480:	1007883a 	mov	r3,r2
10115484:	e0bffc17 	ldw	r2,-16(fp)
10115488:	0085c83a 	sub	r2,zero,r2
1011548c:	18800015 	stw	r2,0(r3)
        return -1;
10115490:	00bfffc4 	movi	r2,-1
10115494:	00000c06 	br	101154c8 <write+0xe4>
      }
      return rval;
10115498:	e0bffc17 	ldw	r2,-16(fp)
1011549c:	00000a06 	br	101154c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
101154a0:	01153a80 	call	101153a8 <alt_get_errno>
101154a4:	1007883a 	mov	r3,r2
101154a8:	00800344 	movi	r2,13
101154ac:	18800015 	stw	r2,0(r3)
101154b0:	00000406 	br	101154c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
101154b4:	01153a80 	call	101153a8 <alt_get_errno>
101154b8:	1007883a 	mov	r3,r2
101154bc:	00801444 	movi	r2,81
101154c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
101154c4:	00bfffc4 	movi	r2,-1
}
101154c8:	e037883a 	mov	sp,fp
101154cc:	dfc00117 	ldw	ra,4(sp)
101154d0:	df000017 	ldw	fp,0(sp)
101154d4:	dec00204 	addi	sp,sp,8
101154d8:	f800283a 	ret

101154dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
101154dc:	defffd04 	addi	sp,sp,-12
101154e0:	dfc00215 	stw	ra,8(sp)
101154e4:	df000115 	stw	fp,4(sp)
101154e8:	df000104 	addi	fp,sp,4
101154ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
101154f0:	d1600804 	addi	r5,gp,-32736
101154f4:	e13fff17 	ldw	r4,-4(fp)
101154f8:	01167900 	call	10116790 <alt_dev_llist_insert>
}
101154fc:	e037883a 	mov	sp,fp
10115500:	dfc00117 	ldw	ra,4(sp)
10115504:	df000017 	ldw	fp,0(sp)
10115508:	dec00204 	addi	sp,sp,8
1011550c:	f800283a 	ret

10115510 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10115510:	defffd04 	addi	sp,sp,-12
10115514:	dfc00215 	stw	ra,8(sp)
10115518:	df000115 	stw	fp,4(sp)
1011551c:	df000104 	addi	fp,sp,4
10115520:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10115524:	0116fc40 	call	10116fc4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10115528:	00800044 	movi	r2,1
1011552c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10115530:	0001883a 	nop
10115534:	e037883a 	mov	sp,fp
10115538:	dfc00117 	ldw	ra,4(sp)
1011553c:	df000017 	ldw	fp,0(sp)
10115540:	dec00204 	addi	sp,sp,8
10115544:	f800283a 	ret

10115548 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10115548:	defffe04 	addi	sp,sp,-8
1011554c:	dfc00115 	stw	ra,4(sp)
10115550:	df000015 	stw	fp,0(sp)
10115554:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10115558:	01800044 	movi	r6,1
1011555c:	000b883a 	mov	r5,zero
10115560:	010404b4 	movhi	r4,4114
10115564:	2121dd04 	addi	r4,r4,-30860
10115568:	01157000 	call	10115700 <altera_avalon_jtag_uart_init>
1011556c:	010404b4 	movhi	r4,4114
10115570:	2121d304 	addi	r4,r4,-30900
10115574:	01154dc0 	call	101154dc <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
10115578:	010404b4 	movhi	r4,4114
1011557c:	2125eb04 	addi	r4,r4,-26708
10115580:	0116a8c0 	call	10116a8c <alt_fs_reg>
}
10115584:	0001883a 	nop
10115588:	e037883a 	mov	sp,fp
1011558c:	dfc00117 	ldw	ra,4(sp)
10115590:	df000017 	ldw	fp,0(sp)
10115594:	dec00204 	addi	sp,sp,8
10115598:	f800283a 	ret

1011559c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1011559c:	defffa04 	addi	sp,sp,-24
101155a0:	dfc00515 	stw	ra,20(sp)
101155a4:	df000415 	stw	fp,16(sp)
101155a8:	df000404 	addi	fp,sp,16
101155ac:	e13ffd15 	stw	r4,-12(fp)
101155b0:	e17ffe15 	stw	r5,-8(fp)
101155b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
101155b8:	e0bffd17 	ldw	r2,-12(fp)
101155bc:	10800017 	ldw	r2,0(r2)
101155c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
101155c4:	e0bffc17 	ldw	r2,-16(fp)
101155c8:	10c00a04 	addi	r3,r2,40
101155cc:	e0bffd17 	ldw	r2,-12(fp)
101155d0:	10800217 	ldw	r2,8(r2)
101155d4:	100f883a 	mov	r7,r2
101155d8:	e1bfff17 	ldw	r6,-4(fp)
101155dc:	e17ffe17 	ldw	r5,-8(fp)
101155e0:	1809883a 	mov	r4,r3
101155e4:	0115bc40 	call	10115bc4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
101155e8:	e037883a 	mov	sp,fp
101155ec:	dfc00117 	ldw	ra,4(sp)
101155f0:	df000017 	ldw	fp,0(sp)
101155f4:	dec00204 	addi	sp,sp,8
101155f8:	f800283a 	ret

101155fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
101155fc:	defffa04 	addi	sp,sp,-24
10115600:	dfc00515 	stw	ra,20(sp)
10115604:	df000415 	stw	fp,16(sp)
10115608:	df000404 	addi	fp,sp,16
1011560c:	e13ffd15 	stw	r4,-12(fp)
10115610:	e17ffe15 	stw	r5,-8(fp)
10115614:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10115618:	e0bffd17 	ldw	r2,-12(fp)
1011561c:	10800017 	ldw	r2,0(r2)
10115620:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10115624:	e0bffc17 	ldw	r2,-16(fp)
10115628:	10c00a04 	addi	r3,r2,40
1011562c:	e0bffd17 	ldw	r2,-12(fp)
10115630:	10800217 	ldw	r2,8(r2)
10115634:	100f883a 	mov	r7,r2
10115638:	e1bfff17 	ldw	r6,-4(fp)
1011563c:	e17ffe17 	ldw	r5,-8(fp)
10115640:	1809883a 	mov	r4,r3
10115644:	0115de00 	call	10115de0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10115648:	e037883a 	mov	sp,fp
1011564c:	dfc00117 	ldw	ra,4(sp)
10115650:	df000017 	ldw	fp,0(sp)
10115654:	dec00204 	addi	sp,sp,8
10115658:	f800283a 	ret

1011565c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1011565c:	defffc04 	addi	sp,sp,-16
10115660:	dfc00315 	stw	ra,12(sp)
10115664:	df000215 	stw	fp,8(sp)
10115668:	df000204 	addi	fp,sp,8
1011566c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10115670:	e0bfff17 	ldw	r2,-4(fp)
10115674:	10800017 	ldw	r2,0(r2)
10115678:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1011567c:	e0bffe17 	ldw	r2,-8(fp)
10115680:	10c00a04 	addi	r3,r2,40
10115684:	e0bfff17 	ldw	r2,-4(fp)
10115688:	10800217 	ldw	r2,8(r2)
1011568c:	100b883a 	mov	r5,r2
10115690:	1809883a 	mov	r4,r3
10115694:	0115a6c0 	call	10115a6c <altera_avalon_jtag_uart_close>
}
10115698:	e037883a 	mov	sp,fp
1011569c:	dfc00117 	ldw	ra,4(sp)
101156a0:	df000017 	ldw	fp,0(sp)
101156a4:	dec00204 	addi	sp,sp,8
101156a8:	f800283a 	ret

101156ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
101156ac:	defffa04 	addi	sp,sp,-24
101156b0:	dfc00515 	stw	ra,20(sp)
101156b4:	df000415 	stw	fp,16(sp)
101156b8:	df000404 	addi	fp,sp,16
101156bc:	e13ffd15 	stw	r4,-12(fp)
101156c0:	e17ffe15 	stw	r5,-8(fp)
101156c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
101156c8:	e0bffd17 	ldw	r2,-12(fp)
101156cc:	10800017 	ldw	r2,0(r2)
101156d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
101156d4:	e0bffc17 	ldw	r2,-16(fp)
101156d8:	10800a04 	addi	r2,r2,40
101156dc:	e1bfff17 	ldw	r6,-4(fp)
101156e0:	e17ffe17 	ldw	r5,-8(fp)
101156e4:	1009883a 	mov	r4,r2
101156e8:	0115ad40 	call	10115ad4 <altera_avalon_jtag_uart_ioctl>
}
101156ec:	e037883a 	mov	sp,fp
101156f0:	dfc00117 	ldw	ra,4(sp)
101156f4:	df000017 	ldw	fp,0(sp)
101156f8:	dec00204 	addi	sp,sp,8
101156fc:	f800283a 	ret

10115700 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10115700:	defffa04 	addi	sp,sp,-24
10115704:	dfc00515 	stw	ra,20(sp)
10115708:	df000415 	stw	fp,16(sp)
1011570c:	df000404 	addi	fp,sp,16
10115710:	e13ffd15 	stw	r4,-12(fp)
10115714:	e17ffe15 	stw	r5,-8(fp)
10115718:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1011571c:	e0bffd17 	ldw	r2,-12(fp)
10115720:	00c00044 	movi	r3,1
10115724:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10115728:	e0bffd17 	ldw	r2,-12(fp)
1011572c:	10800017 	ldw	r2,0(r2)
10115730:	10800104 	addi	r2,r2,4
10115734:	1007883a 	mov	r3,r2
10115738:	e0bffd17 	ldw	r2,-12(fp)
1011573c:	10800817 	ldw	r2,32(r2)
10115740:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10115744:	e0bffe17 	ldw	r2,-8(fp)
10115748:	e0ffff17 	ldw	r3,-4(fp)
1011574c:	d8000015 	stw	zero,0(sp)
10115750:	e1fffd17 	ldw	r7,-12(fp)
10115754:	01840474 	movhi	r6,4113
10115758:	3195f004 	addi	r6,r6,22464
1011575c:	180b883a 	mov	r5,r3
10115760:	1009883a 	mov	r4,r2
10115764:	0116be40 	call	10116be4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10115768:	e0bffd17 	ldw	r2,-12(fp)
1011576c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10115770:	e0bffd17 	ldw	r2,-12(fp)
10115774:	10800204 	addi	r2,r2,8
10115778:	d0e70817 	ldw	r3,-25568(gp)
1011577c:	e1fffd17 	ldw	r7,-12(fp)
10115780:	01840474 	movhi	r6,4113
10115784:	31967304 	addi	r6,r6,22988
10115788:	180b883a 	mov	r5,r3
1011578c:	1009883a 	mov	r4,r2
10115790:	01164880 	call	10116488 <alt_alarm_start>
10115794:	1000040e 	bge	r2,zero,101157a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10115798:	e0fffd17 	ldw	r3,-12(fp)
1011579c:	00a00034 	movhi	r2,32768
101157a0:	10bfffc4 	addi	r2,r2,-1
101157a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
101157a8:	0001883a 	nop
101157ac:	e037883a 	mov	sp,fp
101157b0:	dfc00117 	ldw	ra,4(sp)
101157b4:	df000017 	ldw	fp,0(sp)
101157b8:	dec00204 	addi	sp,sp,8
101157bc:	f800283a 	ret

101157c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
101157c0:	defff804 	addi	sp,sp,-32
101157c4:	df000715 	stw	fp,28(sp)
101157c8:	df000704 	addi	fp,sp,28
101157cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
101157d0:	e0bfff17 	ldw	r2,-4(fp)
101157d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
101157d8:	e0bffb17 	ldw	r2,-20(fp)
101157dc:	10800017 	ldw	r2,0(r2)
101157e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101157e4:	e0bffc17 	ldw	r2,-16(fp)
101157e8:	10800104 	addi	r2,r2,4
101157ec:	10800037 	ldwio	r2,0(r2)
101157f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
101157f4:	e0bffd17 	ldw	r2,-12(fp)
101157f8:	1080c00c 	andi	r2,r2,768
101157fc:	10006d26 	beq	r2,zero,101159b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10115800:	e0bffd17 	ldw	r2,-12(fp)
10115804:	1080400c 	andi	r2,r2,256
10115808:	10003526 	beq	r2,zero,101158e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1011580c:	00800074 	movhi	r2,1
10115810:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10115814:	e0bffb17 	ldw	r2,-20(fp)
10115818:	10800a17 	ldw	r2,40(r2)
1011581c:	10800044 	addi	r2,r2,1
10115820:	1081ffcc 	andi	r2,r2,2047
10115824:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10115828:	e0bffb17 	ldw	r2,-20(fp)
1011582c:	10c00b17 	ldw	r3,44(r2)
10115830:	e0bffe17 	ldw	r2,-8(fp)
10115834:	18801526 	beq	r3,r2,1011588c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10115838:	e0bffc17 	ldw	r2,-16(fp)
1011583c:	10800037 	ldwio	r2,0(r2)
10115840:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10115844:	e0bff917 	ldw	r2,-28(fp)
10115848:	10a0000c 	andi	r2,r2,32768
1011584c:	10001126 	beq	r2,zero,10115894 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10115850:	e0bffb17 	ldw	r2,-20(fp)
10115854:	10800a17 	ldw	r2,40(r2)
10115858:	e0fff917 	ldw	r3,-28(fp)
1011585c:	1809883a 	mov	r4,r3
10115860:	e0fffb17 	ldw	r3,-20(fp)
10115864:	1885883a 	add	r2,r3,r2
10115868:	10800e04 	addi	r2,r2,56
1011586c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10115870:	e0bffb17 	ldw	r2,-20(fp)
10115874:	10800a17 	ldw	r2,40(r2)
10115878:	10800044 	addi	r2,r2,1
1011587c:	10c1ffcc 	andi	r3,r2,2047
10115880:	e0bffb17 	ldw	r2,-20(fp)
10115884:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10115888:	003fe206 	br	10115814 <_gp+0xffff4040>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1011588c:	0001883a 	nop
10115890:	00000106 	br	10115898 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10115894:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10115898:	e0bff917 	ldw	r2,-28(fp)
1011589c:	10bfffec 	andhi	r2,r2,65535
101158a0:	10000f26 	beq	r2,zero,101158e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
101158a4:	e0bffb17 	ldw	r2,-20(fp)
101158a8:	10c00817 	ldw	r3,32(r2)
101158ac:	00bfff84 	movi	r2,-2
101158b0:	1886703a 	and	r3,r3,r2
101158b4:	e0bffb17 	ldw	r2,-20(fp)
101158b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
101158bc:	e0bffc17 	ldw	r2,-16(fp)
101158c0:	10800104 	addi	r2,r2,4
101158c4:	1007883a 	mov	r3,r2
101158c8:	e0bffb17 	ldw	r2,-20(fp)
101158cc:	10800817 	ldw	r2,32(r2)
101158d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101158d4:	e0bffc17 	ldw	r2,-16(fp)
101158d8:	10800104 	addi	r2,r2,4
101158dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
101158e0:	e0bffd17 	ldw	r2,-12(fp)
101158e4:	1080800c 	andi	r2,r2,512
101158e8:	103fbe26 	beq	r2,zero,101157e4 <_gp+0xffff4010>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
101158ec:	e0bffd17 	ldw	r2,-12(fp)
101158f0:	1004d43a 	srli	r2,r2,16
101158f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
101158f8:	00001406 	br	1011594c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
101158fc:	e0bffc17 	ldw	r2,-16(fp)
10115900:	e0fffb17 	ldw	r3,-20(fp)
10115904:	18c00d17 	ldw	r3,52(r3)
10115908:	e13ffb17 	ldw	r4,-20(fp)
1011590c:	20c7883a 	add	r3,r4,r3
10115910:	18c20e04 	addi	r3,r3,2104
10115914:	18c00003 	ldbu	r3,0(r3)
10115918:	18c03fcc 	andi	r3,r3,255
1011591c:	18c0201c 	xori	r3,r3,128
10115920:	18ffe004 	addi	r3,r3,-128
10115924:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10115928:	e0bffb17 	ldw	r2,-20(fp)
1011592c:	10800d17 	ldw	r2,52(r2)
10115930:	10800044 	addi	r2,r2,1
10115934:	10c1ffcc 	andi	r3,r2,2047
10115938:	e0bffb17 	ldw	r2,-20(fp)
1011593c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10115940:	e0bffa17 	ldw	r2,-24(fp)
10115944:	10bfffc4 	addi	r2,r2,-1
10115948:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1011594c:	e0bffa17 	ldw	r2,-24(fp)
10115950:	10000526 	beq	r2,zero,10115968 <altera_avalon_jtag_uart_irq+0x1a8>
10115954:	e0bffb17 	ldw	r2,-20(fp)
10115958:	10c00d17 	ldw	r3,52(r2)
1011595c:	e0bffb17 	ldw	r2,-20(fp)
10115960:	10800c17 	ldw	r2,48(r2)
10115964:	18bfe51e 	bne	r3,r2,101158fc <_gp+0xffff4128>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10115968:	e0bffa17 	ldw	r2,-24(fp)
1011596c:	103f9d26 	beq	r2,zero,101157e4 <_gp+0xffff4010>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10115970:	e0bffb17 	ldw	r2,-20(fp)
10115974:	10c00817 	ldw	r3,32(r2)
10115978:	00bfff44 	movi	r2,-3
1011597c:	1886703a 	and	r3,r3,r2
10115980:	e0bffb17 	ldw	r2,-20(fp)
10115984:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10115988:	e0bffb17 	ldw	r2,-20(fp)
1011598c:	10800017 	ldw	r2,0(r2)
10115990:	10800104 	addi	r2,r2,4
10115994:	1007883a 	mov	r3,r2
10115998:	e0bffb17 	ldw	r2,-20(fp)
1011599c:	10800817 	ldw	r2,32(r2)
101159a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101159a4:	e0bffc17 	ldw	r2,-16(fp)
101159a8:	10800104 	addi	r2,r2,4
101159ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
101159b0:	003f8c06 	br	101157e4 <_gp+0xffff4010>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
101159b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
101159b8:	0001883a 	nop
101159bc:	e037883a 	mov	sp,fp
101159c0:	df000017 	ldw	fp,0(sp)
101159c4:	dec00104 	addi	sp,sp,4
101159c8:	f800283a 	ret

101159cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
101159cc:	defff804 	addi	sp,sp,-32
101159d0:	df000715 	stw	fp,28(sp)
101159d4:	df000704 	addi	fp,sp,28
101159d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
101159dc:	e0bffb17 	ldw	r2,-20(fp)
101159e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
101159e4:	e0bff917 	ldw	r2,-28(fp)
101159e8:	10800017 	ldw	r2,0(r2)
101159ec:	10800104 	addi	r2,r2,4
101159f0:	10800037 	ldwio	r2,0(r2)
101159f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
101159f8:	e0bffa17 	ldw	r2,-24(fp)
101159fc:	1081000c 	andi	r2,r2,1024
10115a00:	10000b26 	beq	r2,zero,10115a30 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10115a04:	e0bff917 	ldw	r2,-28(fp)
10115a08:	10800017 	ldw	r2,0(r2)
10115a0c:	10800104 	addi	r2,r2,4
10115a10:	1007883a 	mov	r3,r2
10115a14:	e0bff917 	ldw	r2,-28(fp)
10115a18:	10800817 	ldw	r2,32(r2)
10115a1c:	10810014 	ori	r2,r2,1024
10115a20:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10115a24:	e0bff917 	ldw	r2,-28(fp)
10115a28:	10000915 	stw	zero,36(r2)
10115a2c:	00000a06 	br	10115a58 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10115a30:	e0bff917 	ldw	r2,-28(fp)
10115a34:	10c00917 	ldw	r3,36(r2)
10115a38:	00a00034 	movhi	r2,32768
10115a3c:	10bfff04 	addi	r2,r2,-4
10115a40:	10c00536 	bltu	r2,r3,10115a58 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10115a44:	e0bff917 	ldw	r2,-28(fp)
10115a48:	10800917 	ldw	r2,36(r2)
10115a4c:	10c00044 	addi	r3,r2,1
10115a50:	e0bff917 	ldw	r2,-28(fp)
10115a54:	10c00915 	stw	r3,36(r2)
10115a58:	d0a70817 	ldw	r2,-25568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10115a5c:	e037883a 	mov	sp,fp
10115a60:	df000017 	ldw	fp,0(sp)
10115a64:	dec00104 	addi	sp,sp,4
10115a68:	f800283a 	ret

10115a6c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10115a6c:	defffd04 	addi	sp,sp,-12
10115a70:	df000215 	stw	fp,8(sp)
10115a74:	df000204 	addi	fp,sp,8
10115a78:	e13ffe15 	stw	r4,-8(fp)
10115a7c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10115a80:	00000506 	br	10115a98 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10115a84:	e0bfff17 	ldw	r2,-4(fp)
10115a88:	1090000c 	andi	r2,r2,16384
10115a8c:	10000226 	beq	r2,zero,10115a98 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10115a90:	00bffd44 	movi	r2,-11
10115a94:	00000b06 	br	10115ac4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10115a98:	e0bffe17 	ldw	r2,-8(fp)
10115a9c:	10c00d17 	ldw	r3,52(r2)
10115aa0:	e0bffe17 	ldw	r2,-8(fp)
10115aa4:	10800c17 	ldw	r2,48(r2)
10115aa8:	18800526 	beq	r3,r2,10115ac0 <altera_avalon_jtag_uart_close+0x54>
10115aac:	e0bffe17 	ldw	r2,-8(fp)
10115ab0:	10c00917 	ldw	r3,36(r2)
10115ab4:	e0bffe17 	ldw	r2,-8(fp)
10115ab8:	10800117 	ldw	r2,4(r2)
10115abc:	18bff136 	bltu	r3,r2,10115a84 <_gp+0xffff42b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10115ac0:	0005883a 	mov	r2,zero
}
10115ac4:	e037883a 	mov	sp,fp
10115ac8:	df000017 	ldw	fp,0(sp)
10115acc:	dec00104 	addi	sp,sp,4
10115ad0:	f800283a 	ret

10115ad4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10115ad4:	defffa04 	addi	sp,sp,-24
10115ad8:	df000515 	stw	fp,20(sp)
10115adc:	df000504 	addi	fp,sp,20
10115ae0:	e13ffd15 	stw	r4,-12(fp)
10115ae4:	e17ffe15 	stw	r5,-8(fp)
10115ae8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10115aec:	00bff9c4 	movi	r2,-25
10115af0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10115af4:	e0bffe17 	ldw	r2,-8(fp)
10115af8:	10da8060 	cmpeqi	r3,r2,27137
10115afc:	1800031e 	bne	r3,zero,10115b0c <altera_avalon_jtag_uart_ioctl+0x38>
10115b00:	109a80a0 	cmpeqi	r2,r2,27138
10115b04:	1000181e 	bne	r2,zero,10115b68 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10115b08:	00002906 	br	10115bb0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10115b0c:	e0bffd17 	ldw	r2,-12(fp)
10115b10:	10c00117 	ldw	r3,4(r2)
10115b14:	00a00034 	movhi	r2,32768
10115b18:	10bfffc4 	addi	r2,r2,-1
10115b1c:	18802126 	beq	r3,r2,10115ba4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10115b20:	e0bfff17 	ldw	r2,-4(fp)
10115b24:	10800017 	ldw	r2,0(r2)
10115b28:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10115b2c:	e0bffc17 	ldw	r2,-16(fp)
10115b30:	10800090 	cmplti	r2,r2,2
10115b34:	1000061e 	bne	r2,zero,10115b50 <altera_avalon_jtag_uart_ioctl+0x7c>
10115b38:	e0fffc17 	ldw	r3,-16(fp)
10115b3c:	00a00034 	movhi	r2,32768
10115b40:	10bfffc4 	addi	r2,r2,-1
10115b44:	18800226 	beq	r3,r2,10115b50 <altera_avalon_jtag_uart_ioctl+0x7c>
10115b48:	e0bffc17 	ldw	r2,-16(fp)
10115b4c:	00000206 	br	10115b58 <altera_avalon_jtag_uart_ioctl+0x84>
10115b50:	00a00034 	movhi	r2,32768
10115b54:	10bfff84 	addi	r2,r2,-2
10115b58:	e0fffd17 	ldw	r3,-12(fp)
10115b5c:	18800115 	stw	r2,4(r3)
      rc = 0;
10115b60:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10115b64:	00000f06 	br	10115ba4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10115b68:	e0bffd17 	ldw	r2,-12(fp)
10115b6c:	10c00117 	ldw	r3,4(r2)
10115b70:	00a00034 	movhi	r2,32768
10115b74:	10bfffc4 	addi	r2,r2,-1
10115b78:	18800c26 	beq	r3,r2,10115bac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10115b7c:	e0bffd17 	ldw	r2,-12(fp)
10115b80:	10c00917 	ldw	r3,36(r2)
10115b84:	e0bffd17 	ldw	r2,-12(fp)
10115b88:	10800117 	ldw	r2,4(r2)
10115b8c:	1885803a 	cmpltu	r2,r3,r2
10115b90:	10c03fcc 	andi	r3,r2,255
10115b94:	e0bfff17 	ldw	r2,-4(fp)
10115b98:	10c00015 	stw	r3,0(r2)
      rc = 0;
10115b9c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10115ba0:	00000206 	br	10115bac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10115ba4:	0001883a 	nop
10115ba8:	00000106 	br	10115bb0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10115bac:	0001883a 	nop

  default:
    break;
  }

  return rc;
10115bb0:	e0bffb17 	ldw	r2,-20(fp)
}
10115bb4:	e037883a 	mov	sp,fp
10115bb8:	df000017 	ldw	fp,0(sp)
10115bbc:	dec00104 	addi	sp,sp,4
10115bc0:	f800283a 	ret

10115bc4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10115bc4:	defff304 	addi	sp,sp,-52
10115bc8:	dfc00c15 	stw	ra,48(sp)
10115bcc:	df000b15 	stw	fp,44(sp)
10115bd0:	df000b04 	addi	fp,sp,44
10115bd4:	e13ffc15 	stw	r4,-16(fp)
10115bd8:	e17ffd15 	stw	r5,-12(fp)
10115bdc:	e1bffe15 	stw	r6,-8(fp)
10115be0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10115be4:	e0bffd17 	ldw	r2,-12(fp)
10115be8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10115bec:	00004706 	br	10115d0c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10115bf0:	e0bffc17 	ldw	r2,-16(fp)
10115bf4:	10800a17 	ldw	r2,40(r2)
10115bf8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10115bfc:	e0bffc17 	ldw	r2,-16(fp)
10115c00:	10800b17 	ldw	r2,44(r2)
10115c04:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10115c08:	e0fff717 	ldw	r3,-36(fp)
10115c0c:	e0bff817 	ldw	r2,-32(fp)
10115c10:	18800536 	bltu	r3,r2,10115c28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10115c14:	e0fff717 	ldw	r3,-36(fp)
10115c18:	e0bff817 	ldw	r2,-32(fp)
10115c1c:	1885c83a 	sub	r2,r3,r2
10115c20:	e0bff615 	stw	r2,-40(fp)
10115c24:	00000406 	br	10115c38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10115c28:	00c20004 	movi	r3,2048
10115c2c:	e0bff817 	ldw	r2,-32(fp)
10115c30:	1885c83a 	sub	r2,r3,r2
10115c34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10115c38:	e0bff617 	ldw	r2,-40(fp)
10115c3c:	10001e26 	beq	r2,zero,10115cb8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10115c40:	e0fffe17 	ldw	r3,-8(fp)
10115c44:	e0bff617 	ldw	r2,-40(fp)
10115c48:	1880022e 	bgeu	r3,r2,10115c54 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10115c4c:	e0bffe17 	ldw	r2,-8(fp)
10115c50:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10115c54:	e0bffc17 	ldw	r2,-16(fp)
10115c58:	10c00e04 	addi	r3,r2,56
10115c5c:	e0bff817 	ldw	r2,-32(fp)
10115c60:	1885883a 	add	r2,r3,r2
10115c64:	e1bff617 	ldw	r6,-40(fp)
10115c68:	100b883a 	mov	r5,r2
10115c6c:	e13ff517 	ldw	r4,-44(fp)
10115c70:	010c15c0 	call	1010c15c <memcpy>
      ptr   += n;
10115c74:	e0fff517 	ldw	r3,-44(fp)
10115c78:	e0bff617 	ldw	r2,-40(fp)
10115c7c:	1885883a 	add	r2,r3,r2
10115c80:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10115c84:	e0fffe17 	ldw	r3,-8(fp)
10115c88:	e0bff617 	ldw	r2,-40(fp)
10115c8c:	1885c83a 	sub	r2,r3,r2
10115c90:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10115c94:	e0fff817 	ldw	r3,-32(fp)
10115c98:	e0bff617 	ldw	r2,-40(fp)
10115c9c:	1885883a 	add	r2,r3,r2
10115ca0:	10c1ffcc 	andi	r3,r2,2047
10115ca4:	e0bffc17 	ldw	r2,-16(fp)
10115ca8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10115cac:	e0bffe17 	ldw	r2,-8(fp)
10115cb0:	00bfcf16 	blt	zero,r2,10115bf0 <_gp+0xffff441c>
10115cb4:	00000106 	br	10115cbc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10115cb8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10115cbc:	e0fff517 	ldw	r3,-44(fp)
10115cc0:	e0bffd17 	ldw	r2,-12(fp)
10115cc4:	1880141e 	bne	r3,r2,10115d18 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10115cc8:	e0bfff17 	ldw	r2,-4(fp)
10115ccc:	1090000c 	andi	r2,r2,16384
10115cd0:	1000131e 	bne	r2,zero,10115d20 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10115cd4:	0001883a 	nop
10115cd8:	e0bffc17 	ldw	r2,-16(fp)
10115cdc:	10c00a17 	ldw	r3,40(r2)
10115ce0:	e0bff717 	ldw	r2,-36(fp)
10115ce4:	1880051e 	bne	r3,r2,10115cfc <altera_avalon_jtag_uart_read+0x138>
10115ce8:	e0bffc17 	ldw	r2,-16(fp)
10115cec:	10c00917 	ldw	r3,36(r2)
10115cf0:	e0bffc17 	ldw	r2,-16(fp)
10115cf4:	10800117 	ldw	r2,4(r2)
10115cf8:	18bff736 	bltu	r3,r2,10115cd8 <_gp+0xffff4504>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10115cfc:	e0bffc17 	ldw	r2,-16(fp)
10115d00:	10c00a17 	ldw	r3,40(r2)
10115d04:	e0bff717 	ldw	r2,-36(fp)
10115d08:	18800726 	beq	r3,r2,10115d28 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10115d0c:	e0bffe17 	ldw	r2,-8(fp)
10115d10:	00bfb716 	blt	zero,r2,10115bf0 <_gp+0xffff441c>
10115d14:	00000506 	br	10115d2c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10115d18:	0001883a 	nop
10115d1c:	00000306 	br	10115d2c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10115d20:	0001883a 	nop
10115d24:	00000106 	br	10115d2c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10115d28:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10115d2c:	e0fff517 	ldw	r3,-44(fp)
10115d30:	e0bffd17 	ldw	r2,-12(fp)
10115d34:	18801826 	beq	r3,r2,10115d98 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10115d38:	0005303a 	rdctl	r2,status
10115d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10115d40:	e0fffb17 	ldw	r3,-20(fp)
10115d44:	00bfff84 	movi	r2,-2
10115d48:	1884703a 	and	r2,r3,r2
10115d4c:	1001703a 	wrctl	status,r2
  
  return context;
10115d50:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10115d54:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10115d58:	e0bffc17 	ldw	r2,-16(fp)
10115d5c:	10800817 	ldw	r2,32(r2)
10115d60:	10c00054 	ori	r3,r2,1
10115d64:	e0bffc17 	ldw	r2,-16(fp)
10115d68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10115d6c:	e0bffc17 	ldw	r2,-16(fp)
10115d70:	10800017 	ldw	r2,0(r2)
10115d74:	10800104 	addi	r2,r2,4
10115d78:	1007883a 	mov	r3,r2
10115d7c:	e0bffc17 	ldw	r2,-16(fp)
10115d80:	10800817 	ldw	r2,32(r2)
10115d84:	18800035 	stwio	r2,0(r3)
10115d88:	e0bffa17 	ldw	r2,-24(fp)
10115d8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10115d90:	e0bff917 	ldw	r2,-28(fp)
10115d94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10115d98:	e0fff517 	ldw	r3,-44(fp)
10115d9c:	e0bffd17 	ldw	r2,-12(fp)
10115da0:	18800426 	beq	r3,r2,10115db4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10115da4:	e0fff517 	ldw	r3,-44(fp)
10115da8:	e0bffd17 	ldw	r2,-12(fp)
10115dac:	1885c83a 	sub	r2,r3,r2
10115db0:	00000606 	br	10115dcc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10115db4:	e0bfff17 	ldw	r2,-4(fp)
10115db8:	1090000c 	andi	r2,r2,16384
10115dbc:	10000226 	beq	r2,zero,10115dc8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10115dc0:	00bffd44 	movi	r2,-11
10115dc4:	00000106 	br	10115dcc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10115dc8:	00bffec4 	movi	r2,-5
}
10115dcc:	e037883a 	mov	sp,fp
10115dd0:	dfc00117 	ldw	ra,4(sp)
10115dd4:	df000017 	ldw	fp,0(sp)
10115dd8:	dec00204 	addi	sp,sp,8
10115ddc:	f800283a 	ret

10115de0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10115de0:	defff304 	addi	sp,sp,-52
10115de4:	dfc00c15 	stw	ra,48(sp)
10115de8:	df000b15 	stw	fp,44(sp)
10115dec:	df000b04 	addi	fp,sp,44
10115df0:	e13ffc15 	stw	r4,-16(fp)
10115df4:	e17ffd15 	stw	r5,-12(fp)
10115df8:	e1bffe15 	stw	r6,-8(fp)
10115dfc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10115e00:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10115e04:	e0bffd17 	ldw	r2,-12(fp)
10115e08:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10115e0c:	00003706 	br	10115eec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10115e10:	e0bffc17 	ldw	r2,-16(fp)
10115e14:	10800c17 	ldw	r2,48(r2)
10115e18:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10115e1c:	e0bffc17 	ldw	r2,-16(fp)
10115e20:	10800d17 	ldw	r2,52(r2)
10115e24:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10115e28:	e0fff917 	ldw	r3,-28(fp)
10115e2c:	e0bff517 	ldw	r2,-44(fp)
10115e30:	1880062e 	bgeu	r3,r2,10115e4c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10115e34:	e0fff517 	ldw	r3,-44(fp)
10115e38:	e0bff917 	ldw	r2,-28(fp)
10115e3c:	1885c83a 	sub	r2,r3,r2
10115e40:	10bfffc4 	addi	r2,r2,-1
10115e44:	e0bff615 	stw	r2,-40(fp)
10115e48:	00000b06 	br	10115e78 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10115e4c:	e0bff517 	ldw	r2,-44(fp)
10115e50:	10000526 	beq	r2,zero,10115e68 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10115e54:	00c20004 	movi	r3,2048
10115e58:	e0bff917 	ldw	r2,-28(fp)
10115e5c:	1885c83a 	sub	r2,r3,r2
10115e60:	e0bff615 	stw	r2,-40(fp)
10115e64:	00000406 	br	10115e78 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10115e68:	00c1ffc4 	movi	r3,2047
10115e6c:	e0bff917 	ldw	r2,-28(fp)
10115e70:	1885c83a 	sub	r2,r3,r2
10115e74:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10115e78:	e0bff617 	ldw	r2,-40(fp)
10115e7c:	10001e26 	beq	r2,zero,10115ef8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10115e80:	e0fffe17 	ldw	r3,-8(fp)
10115e84:	e0bff617 	ldw	r2,-40(fp)
10115e88:	1880022e 	bgeu	r3,r2,10115e94 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10115e8c:	e0bffe17 	ldw	r2,-8(fp)
10115e90:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10115e94:	e0bffc17 	ldw	r2,-16(fp)
10115e98:	10c20e04 	addi	r3,r2,2104
10115e9c:	e0bff917 	ldw	r2,-28(fp)
10115ea0:	1885883a 	add	r2,r3,r2
10115ea4:	e1bff617 	ldw	r6,-40(fp)
10115ea8:	e17ffd17 	ldw	r5,-12(fp)
10115eac:	1009883a 	mov	r4,r2
10115eb0:	010c15c0 	call	1010c15c <memcpy>
      ptr   += n;
10115eb4:	e0fffd17 	ldw	r3,-12(fp)
10115eb8:	e0bff617 	ldw	r2,-40(fp)
10115ebc:	1885883a 	add	r2,r3,r2
10115ec0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10115ec4:	e0fffe17 	ldw	r3,-8(fp)
10115ec8:	e0bff617 	ldw	r2,-40(fp)
10115ecc:	1885c83a 	sub	r2,r3,r2
10115ed0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10115ed4:	e0fff917 	ldw	r3,-28(fp)
10115ed8:	e0bff617 	ldw	r2,-40(fp)
10115edc:	1885883a 	add	r2,r3,r2
10115ee0:	10c1ffcc 	andi	r3,r2,2047
10115ee4:	e0bffc17 	ldw	r2,-16(fp)
10115ee8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10115eec:	e0bffe17 	ldw	r2,-8(fp)
10115ef0:	00bfc716 	blt	zero,r2,10115e10 <_gp+0xffff463c>
10115ef4:	00000106 	br	10115efc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10115ef8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10115efc:	0005303a 	rdctl	r2,status
10115f00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10115f04:	e0fffb17 	ldw	r3,-20(fp)
10115f08:	00bfff84 	movi	r2,-2
10115f0c:	1884703a 	and	r2,r3,r2
10115f10:	1001703a 	wrctl	status,r2
  
  return context;
10115f14:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10115f18:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10115f1c:	e0bffc17 	ldw	r2,-16(fp)
10115f20:	10800817 	ldw	r2,32(r2)
10115f24:	10c00094 	ori	r3,r2,2
10115f28:	e0bffc17 	ldw	r2,-16(fp)
10115f2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10115f30:	e0bffc17 	ldw	r2,-16(fp)
10115f34:	10800017 	ldw	r2,0(r2)
10115f38:	10800104 	addi	r2,r2,4
10115f3c:	1007883a 	mov	r3,r2
10115f40:	e0bffc17 	ldw	r2,-16(fp)
10115f44:	10800817 	ldw	r2,32(r2)
10115f48:	18800035 	stwio	r2,0(r3)
10115f4c:	e0bffa17 	ldw	r2,-24(fp)
10115f50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10115f54:	e0bff817 	ldw	r2,-32(fp)
10115f58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10115f5c:	e0bffe17 	ldw	r2,-8(fp)
10115f60:	0080100e 	bge	zero,r2,10115fa4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10115f64:	e0bfff17 	ldw	r2,-4(fp)
10115f68:	1090000c 	andi	r2,r2,16384
10115f6c:	1000101e 	bne	r2,zero,10115fb0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10115f70:	0001883a 	nop
10115f74:	e0bffc17 	ldw	r2,-16(fp)
10115f78:	10c00d17 	ldw	r3,52(r2)
10115f7c:	e0bff517 	ldw	r2,-44(fp)
10115f80:	1880051e 	bne	r3,r2,10115f98 <altera_avalon_jtag_uart_write+0x1b8>
10115f84:	e0bffc17 	ldw	r2,-16(fp)
10115f88:	10c00917 	ldw	r3,36(r2)
10115f8c:	e0bffc17 	ldw	r2,-16(fp)
10115f90:	10800117 	ldw	r2,4(r2)
10115f94:	18bff736 	bltu	r3,r2,10115f74 <_gp+0xffff47a0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10115f98:	e0bffc17 	ldw	r2,-16(fp)
10115f9c:	10800917 	ldw	r2,36(r2)
10115fa0:	1000051e 	bne	r2,zero,10115fb8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10115fa4:	e0bffe17 	ldw	r2,-8(fp)
10115fa8:	00bfd016 	blt	zero,r2,10115eec <_gp+0xffff4718>
10115fac:	00000306 	br	10115fbc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10115fb0:	0001883a 	nop
10115fb4:	00000106 	br	10115fbc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10115fb8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10115fbc:	e0fffd17 	ldw	r3,-12(fp)
10115fc0:	e0bff717 	ldw	r2,-36(fp)
10115fc4:	18800426 	beq	r3,r2,10115fd8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10115fc8:	e0fffd17 	ldw	r3,-12(fp)
10115fcc:	e0bff717 	ldw	r2,-36(fp)
10115fd0:	1885c83a 	sub	r2,r3,r2
10115fd4:	00000606 	br	10115ff0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10115fd8:	e0bfff17 	ldw	r2,-4(fp)
10115fdc:	1090000c 	andi	r2,r2,16384
10115fe0:	10000226 	beq	r2,zero,10115fec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10115fe4:	00bffd44 	movi	r2,-11
10115fe8:	00000106 	br	10115ff0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10115fec:	00bffec4 	movi	r2,-5
}
10115ff0:	e037883a 	mov	sp,fp
10115ff4:	dfc00117 	ldw	ra,4(sp)
10115ff8:	df000017 	ldw	fp,0(sp)
10115ffc:	dec00204 	addi	sp,sp,8
10116000:	f800283a 	ret

10116004 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10116004:	defff404 	addi	sp,sp,-48
10116008:	df000b15 	stw	fp,44(sp)
1011600c:	df000b04 	addi	fp,sp,44
10116010:	e13ffc15 	stw	r4,-16(fp)
10116014:	e17ffd15 	stw	r5,-12(fp)
10116018:	e1bffe15 	stw	r6,-8(fp)
1011601c:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10116020:	e0bffc17 	ldw	r2,-16(fp)
10116024:	10800017 	ldw	r2,0(r2)
10116028:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1011602c:	e0bff517 	ldw	r2,-44(fp)
10116030:	10800217 	ldw	r2,8(r2)
10116034:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10116038:	e0bff617 	ldw	r2,-40(fp)
1011603c:	10bfffc4 	addi	r2,r2,-1
10116040:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
10116044:	e0bffb17 	ldw	r2,-20(fp)
10116048:	10800044 	addi	r2,r2,1
1011604c:	e0bffb15 	stw	r2,-20(fp)
10116050:	e0bffb17 	ldw	r2,-20(fp)
10116054:	10800003 	ldbu	r2,0(r2)
10116058:	10803fcc 	andi	r2,r2,255
1011605c:	1080201c 	xori	r2,r2,128
10116060:	10bfe004 	addi	r2,r2,-128
10116064:	103ff71e 	bne	r2,zero,10116044 <_gp+0xffff4870>
    ;

  return ptr - string;
10116068:	e0fffb17 	ldw	r3,-20(fp)
1011606c:	e0bff617 	ldw	r2,-40(fp)
10116070:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10116074:	10800044 	addi	r2,r2,1
10116078:	1007883a 	mov	r3,r2
1011607c:	e0bffd17 	ldw	r2,-12(fp)
10116080:	10c5883a 	add	r2,r2,r3
10116084:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10116088:	d0a00f04 	addi	r2,gp,-32708
1011608c:	1007883a 	mov	r3,r2
  r4 = (int)name;
10116090:	e0bffd17 	ldw	r2,-12(fp)
10116094:	1009883a 	mov	r4,r2
  r5 = flags;
10116098:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1011609c:	e1bfff17 	ldw	r6,-4(fp)
101160a0:	e0bffd17 	ldw	r2,-12(fp)
101160a4:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
101160a8:	e0bff917 	ldw	r2,-28(fp)
101160ac:	10bfffc4 	addi	r2,r2,-1
101160b0:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
101160b4:	e0bffa17 	ldw	r2,-24(fp)
101160b8:	10800044 	addi	r2,r2,1
101160bc:	e0bffa15 	stw	r2,-24(fp)
101160c0:	e0bffa17 	ldw	r2,-24(fp)
101160c4:	10800003 	ldbu	r2,0(r2)
101160c8:	10803fcc 	andi	r2,r2,255
101160cc:	1080201c 	xori	r2,r2,128
101160d0:	10bfe004 	addi	r2,r2,-128
101160d4:	103ff71e 	bne	r2,zero,101160b4 <_gp+0xffff48e0>
    ;

  return ptr - string;
101160d8:	e1fffa17 	ldw	r7,-24(fp)
101160dc:	e0bff917 	ldw	r2,-28(fp)
101160e0:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
101160e4:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
101160e8:	003da07a 	break	1

  handle = (void *)r2;
101160ec:	e0bff715 	stw	r2,-36(fp)
  error = r3;
101160f0:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
101160f4:	e0bff817 	ldw	r2,-32(fp)
101160f8:	1000031e 	bne	r2,zero,10116108 <alt_hostfs_open+0x104>
    fd->priv = handle;
101160fc:	e0bffc17 	ldw	r2,-16(fp)
10116100:	e0fff717 	ldw	r3,-36(fp)
10116104:	10c00115 	stw	r3,4(r2)

  return -error;
10116108:	e0bff817 	ldw	r2,-32(fp)
1011610c:	0085c83a 	sub	r2,zero,r2
}
10116110:	e037883a 	mov	sp,fp
10116114:	df000017 	ldw	fp,0(sp)
10116118:	dec00104 	addi	sp,sp,4
1011611c:	f800283a 	ret

10116120 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10116120:	defffd04 	addi	sp,sp,-12
10116124:	df000215 	stw	fp,8(sp)
10116128:	df000204 	addi	fp,sp,8
1011612c:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10116130:	d0a01204 	addi	r2,gp,-32696
10116134:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10116138:	e0bfff17 	ldw	r2,-4(fp)
1011613c:	10800117 	ldw	r2,4(r2)
10116140:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10116144:	003da07a 	break	1

  error = r3;
10116148:	e0fffe15 	stw	r3,-8(fp)

  return -error;
1011614c:	e0bffe17 	ldw	r2,-8(fp)
10116150:	0085c83a 	sub	r2,zero,r2
}
10116154:	e037883a 	mov	sp,fp
10116158:	df000017 	ldw	fp,0(sp)
1011615c:	dec00104 	addi	sp,sp,4
10116160:	f800283a 	ret

10116164 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10116164:	defffa04 	addi	sp,sp,-24
10116168:	df000515 	stw	fp,20(sp)
1011616c:	df000504 	addi	fp,sp,20
10116170:	e13ffd15 	stw	r4,-12(fp)
10116174:	e17ffe15 	stw	r5,-8(fp)
10116178:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
1011617c:	d0a01504 	addi	r2,gp,-32684
10116180:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10116184:	e0bffd17 	ldw	r2,-12(fp)
10116188:	10800117 	ldw	r2,4(r2)
1011618c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10116190:	e0bffe17 	ldw	r2,-8(fp)
10116194:	100b883a 	mov	r5,r2
  r6 = len;
10116198:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1011619c:	003da07a 	break	1

  rc = r2;
101161a0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
101161a4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
101161a8:	e0bffc17 	ldw	r2,-16(fp)
101161ac:	10000326 	beq	r2,zero,101161bc <alt_hostfs_read+0x58>
101161b0:	e0bffc17 	ldw	r2,-16(fp)
101161b4:	0085c83a 	sub	r2,zero,r2
101161b8:	00000106 	br	101161c0 <alt_hostfs_read+0x5c>
101161bc:	e0bffb17 	ldw	r2,-20(fp)
}
101161c0:	e037883a 	mov	sp,fp
101161c4:	df000017 	ldw	fp,0(sp)
101161c8:	dec00104 	addi	sp,sp,4
101161cc:	f800283a 	ret

101161d0 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
101161d0:	defffa04 	addi	sp,sp,-24
101161d4:	df000515 	stw	fp,20(sp)
101161d8:	df000504 	addi	fp,sp,20
101161dc:	e13ffd15 	stw	r4,-12(fp)
101161e0:	e17ffe15 	stw	r5,-8(fp)
101161e4:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
101161e8:	d0a01804 	addi	r2,gp,-32672
101161ec:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101161f0:	e0bffd17 	ldw	r2,-12(fp)
101161f4:	10800117 	ldw	r2,4(r2)
101161f8:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
101161fc:	e0bffe17 	ldw	r2,-8(fp)
10116200:	100b883a 	mov	r5,r2
  r6 = len;
10116204:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10116208:	003da07a 	break	1

  rc = r2;
1011620c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10116210:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10116214:	e0bffc17 	ldw	r2,-16(fp)
10116218:	10000326 	beq	r2,zero,10116228 <alt_hostfs_write+0x58>
1011621c:	e0bffc17 	ldw	r2,-16(fp)
10116220:	0085c83a 	sub	r2,zero,r2
10116224:	00000106 	br	1011622c <alt_hostfs_write+0x5c>
10116228:	e0bffb17 	ldw	r2,-20(fp)
}
1011622c:	e037883a 	mov	sp,fp
10116230:	df000017 	ldw	fp,0(sp)
10116234:	dec00104 	addi	sp,sp,4
10116238:	f800283a 	ret

1011623c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
1011623c:	defffa04 	addi	sp,sp,-24
10116240:	df000515 	stw	fp,20(sp)
10116244:	df000504 	addi	fp,sp,20
10116248:	e13ffd15 	stw	r4,-12(fp)
1011624c:	e17ffe15 	stw	r5,-8(fp)
10116250:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10116254:	d0a01b04 	addi	r2,gp,-32660
10116258:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1011625c:	e0bffd17 	ldw	r2,-12(fp)
10116260:	10800117 	ldw	r2,4(r2)
10116264:	1009883a 	mov	r4,r2
  r5 = ptr;
10116268:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
1011626c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10116270:	003da07a 	break	1

  rc = r2;
10116274:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10116278:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1011627c:	e0bffc17 	ldw	r2,-16(fp)
10116280:	10000326 	beq	r2,zero,10116290 <alt_hostfs_seek+0x54>
10116284:	e0bffc17 	ldw	r2,-16(fp)
10116288:	0085c83a 	sub	r2,zero,r2
1011628c:	00000106 	br	10116294 <alt_hostfs_seek+0x58>
10116290:	e0bffb17 	ldw	r2,-20(fp)
}
10116294:	e037883a 	mov	sp,fp
10116298:	df000017 	ldw	fp,0(sp)
1011629c:	dec00104 	addi	sp,sp,4
101162a0:	f800283a 	ret

101162a4 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
101162a4:	deffe904 	addi	sp,sp,-92
101162a8:	df001615 	stw	fp,88(sp)
101162ac:	df001604 	addi	fp,sp,88
101162b0:	e13ffe15 	stw	r4,-8(fp)
101162b4:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
101162b8:	d0a01e04 	addi	r2,gp,-32648
101162bc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101162c0:	e0bffe17 	ldw	r2,-8(fp)
101162c4:	10800117 	ldw	r2,4(r2)
101162c8:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
101162cc:	e0bfee04 	addi	r2,fp,-72
101162d0:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
101162d4:	003da07a 	break	1

  rc = r2;
101162d8:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
101162dc:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
101162e0:	e0bfec17 	ldw	r2,-80(fp)
101162e4:	1000621e 	bne	r2,zero,10116470 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
101162e8:	e0bfee04 	addi	r2,fp,-72
101162ec:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
101162f0:	e0bfea17 	ldw	r2,-88(fp)
101162f4:	10801004 	addi	r2,r2,64
101162f8:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
101162fc:	00001606 	br	10116358 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10116300:	e0bfea17 	ldw	r2,-88(fp)
10116304:	10800017 	ldw	r2,0(r2)
10116308:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1011630c:	e0bfea17 	ldw	r2,-88(fp)
10116310:	10800017 	ldw	r2,0(r2)
10116314:	10803fec 	andhi	r2,r2,255
10116318:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1011631c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10116320:	e0bfea17 	ldw	r2,-88(fp)
10116324:	10800017 	ldw	r2,0(r2)
10116328:	10bfc00c 	andi	r2,r2,65280
1011632c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10116330:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10116334:	e0bfea17 	ldw	r2,-88(fp)
10116338:	10800017 	ldw	r2,0(r2)
1011633c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10116340:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10116344:	e0bfea17 	ldw	r2,-88(fp)
10116348:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
1011634c:	e0bfea17 	ldw	r2,-88(fp)
10116350:	10800104 	addi	r2,r2,4
10116354:	e0bfea15 	stw	r2,-88(fp)
10116358:	e0ffea17 	ldw	r3,-88(fp)
1011635c:	e0bfed17 	ldw	r2,-76(fp)
10116360:	18bfe736 	bltu	r3,r2,10116300 <_gp+0xffff4b2c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10116364:	e0bfff17 	ldw	r2,-4(fp)
10116368:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
1011636c:	e0bfea17 	ldw	r2,-88(fp)
10116370:	10800f04 	addi	r2,r2,60
10116374:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10116378:	00000506 	br	10116390 <alt_hostfs_fstat+0xec>
      *ptr = 0;
1011637c:	e0bfea17 	ldw	r2,-88(fp)
10116380:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
10116384:	e0bfea17 	ldw	r2,-88(fp)
10116388:	10800104 	addi	r2,r2,4
1011638c:	e0bfea15 	stw	r2,-88(fp)
10116390:	e0ffea17 	ldw	r3,-88(fp)
10116394:	e0bfed17 	ldw	r2,-76(fp)
10116398:	18bff836 	bltu	r3,r2,1011637c <_gp+0xffff4ba8>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1011639c:	e0bfee17 	ldw	r2,-72(fp)
101163a0:	1007883a 	mov	r3,r2
101163a4:	e0bfff17 	ldw	r2,-4(fp)
101163a8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
101163ac:	e0bfef17 	ldw	r2,-68(fp)
101163b0:	1007883a 	mov	r3,r2
101163b4:	e0bfff17 	ldw	r2,-4(fp)
101163b8:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
101163bc:	e0fff017 	ldw	r3,-64(fp)
101163c0:	e0bfff17 	ldw	r2,-4(fp)
101163c4:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
101163c8:	e0bff117 	ldw	r2,-60(fp)
101163cc:	1007883a 	mov	r3,r2
101163d0:	e0bfff17 	ldw	r2,-4(fp)
101163d4:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
101163d8:	e0bff217 	ldw	r2,-56(fp)
101163dc:	1007883a 	mov	r3,r2
101163e0:	e0bfff17 	ldw	r2,-4(fp)
101163e4:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
101163e8:	e0bff317 	ldw	r2,-52(fp)
101163ec:	1007883a 	mov	r3,r2
101163f0:	e0bfff17 	ldw	r2,-4(fp)
101163f4:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
101163f8:	e0bff417 	ldw	r2,-48(fp)
101163fc:	1007883a 	mov	r3,r2
10116400:	e0bfff17 	ldw	r2,-4(fp)
10116404:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10116408:	e0bff617 	ldw	r2,-40(fp)
1011640c:	1007883a 	mov	r3,r2
10116410:	e0bfff17 	ldw	r2,-4(fp)
10116414:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10116418:	e0bffb17 	ldw	r2,-20(fp)
1011641c:	1007883a 	mov	r3,r2
10116420:	e0bfff17 	ldw	r2,-4(fp)
10116424:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10116428:	e0bffc17 	ldw	r2,-16(fp)
1011642c:	1007883a 	mov	r3,r2
10116430:	e0bfff17 	ldw	r2,-4(fp)
10116434:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10116438:	e0bffd17 	ldw	r2,-12(fp)
1011643c:	1007883a 	mov	r3,r2
10116440:	e0bfff17 	ldw	r2,-4(fp)
10116444:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10116448:	e0bff817 	ldw	r2,-32(fp)
1011644c:	1007883a 	mov	r3,r2
10116450:	e0bfff17 	ldw	r2,-4(fp)
10116454:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10116458:	e0bffa17 	ldw	r2,-24(fp)
1011645c:	1007883a 	mov	r3,r2
10116460:	e0bfff17 	ldw	r2,-4(fp)
10116464:	10c00c15 	stw	r3,48(r2)

    return rc;
10116468:	e0bfeb17 	ldw	r2,-84(fp)
1011646c:	00000206 	br	10116478 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10116470:	e0bfec17 	ldw	r2,-80(fp)
10116474:	0085c83a 	sub	r2,zero,r2
}
10116478:	e037883a 	mov	sp,fp
1011647c:	df000017 	ldw	fp,0(sp)
10116480:	dec00104 	addi	sp,sp,4
10116484:	f800283a 	ret

10116488 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10116488:	defff504 	addi	sp,sp,-44
1011648c:	df000a15 	stw	fp,40(sp)
10116490:	df000a04 	addi	fp,sp,40
10116494:	e13ffc15 	stw	r4,-16(fp)
10116498:	e17ffd15 	stw	r5,-12(fp)
1011649c:	e1bffe15 	stw	r6,-8(fp)
101164a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
101164a4:	e03ff615 	stw	zero,-40(fp)
101164a8:	d0a70817 	ldw	r2,-25568(gp)
  
  if (alt_ticks_per_second ())
101164ac:	10003c26 	beq	r2,zero,101165a0 <alt_alarm_start+0x118>
  {
    if (alarm)
101164b0:	e0bffc17 	ldw	r2,-16(fp)
101164b4:	10003826 	beq	r2,zero,10116598 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
101164b8:	e0bffc17 	ldw	r2,-16(fp)
101164bc:	e0fffe17 	ldw	r3,-8(fp)
101164c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
101164c4:	e0bffc17 	ldw	r2,-16(fp)
101164c8:	e0ffff17 	ldw	r3,-4(fp)
101164cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101164d0:	0005303a 	rdctl	r2,status
101164d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101164d8:	e0fff917 	ldw	r3,-28(fp)
101164dc:	00bfff84 	movi	r2,-2
101164e0:	1884703a 	and	r2,r3,r2
101164e4:	1001703a 	wrctl	status,r2
  
  return context;
101164e8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
101164ec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
101164f0:	d0a70917 	ldw	r2,-25564(gp)
      
      current_nticks = alt_nticks();
101164f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
101164f8:	e0fffd17 	ldw	r3,-12(fp)
101164fc:	e0bff617 	ldw	r2,-40(fp)
10116500:	1885883a 	add	r2,r3,r2
10116504:	10c00044 	addi	r3,r2,1
10116508:	e0bffc17 	ldw	r2,-16(fp)
1011650c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10116510:	e0bffc17 	ldw	r2,-16(fp)
10116514:	10c00217 	ldw	r3,8(r2)
10116518:	e0bff617 	ldw	r2,-40(fp)
1011651c:	1880042e 	bgeu	r3,r2,10116530 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10116520:	e0bffc17 	ldw	r2,-16(fp)
10116524:	00c00044 	movi	r3,1
10116528:	10c00405 	stb	r3,16(r2)
1011652c:	00000206 	br	10116538 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10116530:	e0bffc17 	ldw	r2,-16(fp)
10116534:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10116538:	e0bffc17 	ldw	r2,-16(fp)
1011653c:	d0e00d04 	addi	r3,gp,-32716
10116540:	e0fffa15 	stw	r3,-24(fp)
10116544:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10116548:	e0bffb17 	ldw	r2,-20(fp)
1011654c:	e0fffa17 	ldw	r3,-24(fp)
10116550:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10116554:	e0bffa17 	ldw	r2,-24(fp)
10116558:	10c00017 	ldw	r3,0(r2)
1011655c:	e0bffb17 	ldw	r2,-20(fp)
10116560:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10116564:	e0bffa17 	ldw	r2,-24(fp)
10116568:	10800017 	ldw	r2,0(r2)
1011656c:	e0fffb17 	ldw	r3,-20(fp)
10116570:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10116574:	e0bffa17 	ldw	r2,-24(fp)
10116578:	e0fffb17 	ldw	r3,-20(fp)
1011657c:	10c00015 	stw	r3,0(r2)
10116580:	e0bff817 	ldw	r2,-32(fp)
10116584:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10116588:	e0bff717 	ldw	r2,-36(fp)
1011658c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10116590:	0005883a 	mov	r2,zero
10116594:	00000306 	br	101165a4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10116598:	00bffa84 	movi	r2,-22
1011659c:	00000106 	br	101165a4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
101165a0:	00bfde84 	movi	r2,-134
  }
}
101165a4:	e037883a 	mov	sp,fp
101165a8:	df000017 	ldw	fp,0(sp)
101165ac:	dec00104 	addi	sp,sp,4
101165b0:	f800283a 	ret

101165b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
101165b4:	defffa04 	addi	sp,sp,-24
101165b8:	dfc00515 	stw	ra,20(sp)
101165bc:	df000415 	stw	fp,16(sp)
101165c0:	df000404 	addi	fp,sp,16
101165c4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
101165c8:	008000c4 	movi	r2,3
101165cc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
101165d0:	e0fffd17 	ldw	r3,-12(fp)
101165d4:	008003f4 	movhi	r2,15
101165d8:	10909004 	addi	r2,r2,16960
101165dc:	1885383a 	mul	r2,r3,r2
101165e0:	100b883a 	mov	r5,r2
101165e4:	0100bef4 	movhi	r4,763
101165e8:	213c2004 	addi	r4,r4,-3968
101165ec:	01031940 	call	10103194 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
101165f0:	100b883a 	mov	r5,r2
101165f4:	01200034 	movhi	r4,32768
101165f8:	213fffc4 	addi	r4,r4,-1
101165fc:	01031940 	call	10103194 <__udivsi3>
10116600:	100b883a 	mov	r5,r2
10116604:	e13fff17 	ldw	r4,-4(fp)
10116608:	01031940 	call	10103194 <__udivsi3>
1011660c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10116610:	e0bffe17 	ldw	r2,-8(fp)
10116614:	10002a26 	beq	r2,zero,101166c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10116618:	e03ffc15 	stw	zero,-16(fp)
1011661c:	00001706 	br	1011667c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10116620:	00a00034 	movhi	r2,32768
10116624:	10bfffc4 	addi	r2,r2,-1
10116628:	10bfffc4 	addi	r2,r2,-1
1011662c:	103ffe1e 	bne	r2,zero,10116628 <_gp+0xffff4e54>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10116630:	e0fffd17 	ldw	r3,-12(fp)
10116634:	008003f4 	movhi	r2,15
10116638:	10909004 	addi	r2,r2,16960
1011663c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10116640:	100b883a 	mov	r5,r2
10116644:	0100bef4 	movhi	r4,763
10116648:	213c2004 	addi	r4,r4,-3968
1011664c:	01031940 	call	10103194 <__udivsi3>
10116650:	100b883a 	mov	r5,r2
10116654:	01200034 	movhi	r4,32768
10116658:	213fffc4 	addi	r4,r4,-1
1011665c:	01031940 	call	10103194 <__udivsi3>
10116660:	1007883a 	mov	r3,r2
10116664:	e0bfff17 	ldw	r2,-4(fp)
10116668:	10c5c83a 	sub	r2,r2,r3
1011666c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10116670:	e0bffc17 	ldw	r2,-16(fp)
10116674:	10800044 	addi	r2,r2,1
10116678:	e0bffc15 	stw	r2,-16(fp)
1011667c:	e0fffc17 	ldw	r3,-16(fp)
10116680:	e0bffe17 	ldw	r2,-8(fp)
10116684:	18bfe616 	blt	r3,r2,10116620 <_gp+0xffff4e4c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10116688:	e0fffd17 	ldw	r3,-12(fp)
1011668c:	008003f4 	movhi	r2,15
10116690:	10909004 	addi	r2,r2,16960
10116694:	1885383a 	mul	r2,r3,r2
10116698:	100b883a 	mov	r5,r2
1011669c:	0100bef4 	movhi	r4,763
101166a0:	213c2004 	addi	r4,r4,-3968
101166a4:	01031940 	call	10103194 <__udivsi3>
101166a8:	1007883a 	mov	r3,r2
101166ac:	e0bfff17 	ldw	r2,-4(fp)
101166b0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
101166b4:	10bfffc4 	addi	r2,r2,-1
101166b8:	103ffe1e 	bne	r2,zero,101166b4 <_gp+0xffff4ee0>
101166bc:	00000d06 	br	101166f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
101166c0:	e0fffd17 	ldw	r3,-12(fp)
101166c4:	008003f4 	movhi	r2,15
101166c8:	10909004 	addi	r2,r2,16960
101166cc:	1885383a 	mul	r2,r3,r2
101166d0:	100b883a 	mov	r5,r2
101166d4:	0100bef4 	movhi	r4,763
101166d8:	213c2004 	addi	r4,r4,-3968
101166dc:	01031940 	call	10103194 <__udivsi3>
101166e0:	1007883a 	mov	r3,r2
101166e4:	e0bfff17 	ldw	r2,-4(fp)
101166e8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
101166ec:	10bfffc4 	addi	r2,r2,-1
101166f0:	00bffe16 	blt	zero,r2,101166ec <_gp+0xffff4f18>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
101166f4:	0005883a 	mov	r2,zero
}
101166f8:	e037883a 	mov	sp,fp
101166fc:	dfc00117 	ldw	ra,4(sp)
10116700:	df000017 	ldw	fp,0(sp)
10116704:	dec00204 	addi	sp,sp,8
10116708:	f800283a 	ret

1011670c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1011670c:	defffe04 	addi	sp,sp,-8
10116710:	df000115 	stw	fp,4(sp)
10116714:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10116718:	e03fff15 	stw	zero,-4(fp)
1011671c:	00000506 	br	10116734 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10116720:	e0bfff17 	ldw	r2,-4(fp)
10116724:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10116728:	e0bfff17 	ldw	r2,-4(fp)
1011672c:	10800804 	addi	r2,r2,32
10116730:	e0bfff15 	stw	r2,-4(fp)
10116734:	e0bfff17 	ldw	r2,-4(fp)
10116738:	10820030 	cmpltui	r2,r2,2048
1011673c:	103ff81e 	bne	r2,zero,10116720 <_gp+0xffff4f4c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10116740:	0001883a 	nop
10116744:	e037883a 	mov	sp,fp
10116748:	df000017 	ldw	fp,0(sp)
1011674c:	dec00104 	addi	sp,sp,4
10116750:	f800283a 	ret

10116754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10116754:	defffe04 	addi	sp,sp,-8
10116758:	dfc00115 	stw	ra,4(sp)
1011675c:	df000015 	stw	fp,0(sp)
10116760:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10116764:	d0a00b17 	ldw	r2,-32724(gp)
10116768:	10000326 	beq	r2,zero,10116778 <alt_get_errno+0x24>
1011676c:	d0a00b17 	ldw	r2,-32724(gp)
10116770:	103ee83a 	callr	r2
10116774:	00000106 	br	1011677c <alt_get_errno+0x28>
10116778:	d0a6fa04 	addi	r2,gp,-25624
}
1011677c:	e037883a 	mov	sp,fp
10116780:	dfc00117 	ldw	ra,4(sp)
10116784:	df000017 	ldw	fp,0(sp)
10116788:	dec00204 	addi	sp,sp,8
1011678c:	f800283a 	ret

10116790 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10116790:	defffa04 	addi	sp,sp,-24
10116794:	dfc00515 	stw	ra,20(sp)
10116798:	df000415 	stw	fp,16(sp)
1011679c:	df000404 	addi	fp,sp,16
101167a0:	e13ffe15 	stw	r4,-8(fp)
101167a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
101167a8:	e0bffe17 	ldw	r2,-8(fp)
101167ac:	10000326 	beq	r2,zero,101167bc <alt_dev_llist_insert+0x2c>
101167b0:	e0bffe17 	ldw	r2,-8(fp)
101167b4:	10800217 	ldw	r2,8(r2)
101167b8:	1000061e 	bne	r2,zero,101167d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
101167bc:	01167540 	call	10116754 <alt_get_errno>
101167c0:	1007883a 	mov	r3,r2
101167c4:	00800584 	movi	r2,22
101167c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
101167cc:	00bffa84 	movi	r2,-22
101167d0:	00001306 	br	10116820 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
101167d4:	e0bffe17 	ldw	r2,-8(fp)
101167d8:	e0ffff17 	ldw	r3,-4(fp)
101167dc:	e0fffc15 	stw	r3,-16(fp)
101167e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101167e4:	e0bffd17 	ldw	r2,-12(fp)
101167e8:	e0fffc17 	ldw	r3,-16(fp)
101167ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101167f0:	e0bffc17 	ldw	r2,-16(fp)
101167f4:	10c00017 	ldw	r3,0(r2)
101167f8:	e0bffd17 	ldw	r2,-12(fp)
101167fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10116800:	e0bffc17 	ldw	r2,-16(fp)
10116804:	10800017 	ldw	r2,0(r2)
10116808:	e0fffd17 	ldw	r3,-12(fp)
1011680c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10116810:	e0bffc17 	ldw	r2,-16(fp)
10116814:	e0fffd17 	ldw	r3,-12(fp)
10116818:	10c00015 	stw	r3,0(r2)

  return 0;  
1011681c:	0005883a 	mov	r2,zero
}
10116820:	e037883a 	mov	sp,fp
10116824:	dfc00117 	ldw	ra,4(sp)
10116828:	df000017 	ldw	fp,0(sp)
1011682c:	dec00204 	addi	sp,sp,8
10116830:	f800283a 	ret

10116834 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10116834:	defffd04 	addi	sp,sp,-12
10116838:	dfc00215 	stw	ra,8(sp)
1011683c:	df000115 	stw	fp,4(sp)
10116840:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10116844:	00840474 	movhi	r2,4113
10116848:	109d1c04 	addi	r2,r2,29808
1011684c:	e0bfff15 	stw	r2,-4(fp)
10116850:	00000606 	br	1011686c <_do_ctors+0x38>
        (*ctor) (); 
10116854:	e0bfff17 	ldw	r2,-4(fp)
10116858:	10800017 	ldw	r2,0(r2)
1011685c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10116860:	e0bfff17 	ldw	r2,-4(fp)
10116864:	10bfff04 	addi	r2,r2,-4
10116868:	e0bfff15 	stw	r2,-4(fp)
1011686c:	e0ffff17 	ldw	r3,-4(fp)
10116870:	00840474 	movhi	r2,4113
10116874:	109d1d04 	addi	r2,r2,29812
10116878:	18bff62e 	bgeu	r3,r2,10116854 <_gp+0xffff5080>
        (*ctor) (); 
}
1011687c:	0001883a 	nop
10116880:	e037883a 	mov	sp,fp
10116884:	dfc00117 	ldw	ra,4(sp)
10116888:	df000017 	ldw	fp,0(sp)
1011688c:	dec00204 	addi	sp,sp,8
10116890:	f800283a 	ret

10116894 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10116894:	defffd04 	addi	sp,sp,-12
10116898:	dfc00215 	stw	ra,8(sp)
1011689c:	df000115 	stw	fp,4(sp)
101168a0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101168a4:	00840474 	movhi	r2,4113
101168a8:	109d1c04 	addi	r2,r2,29808
101168ac:	e0bfff15 	stw	r2,-4(fp)
101168b0:	00000606 	br	101168cc <_do_dtors+0x38>
        (*dtor) (); 
101168b4:	e0bfff17 	ldw	r2,-4(fp)
101168b8:	10800017 	ldw	r2,0(r2)
101168bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101168c0:	e0bfff17 	ldw	r2,-4(fp)
101168c4:	10bfff04 	addi	r2,r2,-4
101168c8:	e0bfff15 	stw	r2,-4(fp)
101168cc:	e0ffff17 	ldw	r3,-4(fp)
101168d0:	00840474 	movhi	r2,4113
101168d4:	109d1d04 	addi	r2,r2,29812
101168d8:	18bff62e 	bgeu	r3,r2,101168b4 <_gp+0xffff50e0>
        (*dtor) (); 
}
101168dc:	0001883a 	nop
101168e0:	e037883a 	mov	sp,fp
101168e4:	dfc00117 	ldw	ra,4(sp)
101168e8:	df000017 	ldw	fp,0(sp)
101168ec:	dec00204 	addi	sp,sp,8
101168f0:	f800283a 	ret

101168f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
101168f4:	defffa04 	addi	sp,sp,-24
101168f8:	dfc00515 	stw	ra,20(sp)
101168fc:	df000415 	stw	fp,16(sp)
10116900:	df000404 	addi	fp,sp,16
10116904:	e13ffe15 	stw	r4,-8(fp)
10116908:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1011690c:	e0bfff17 	ldw	r2,-4(fp)
10116910:	10800017 	ldw	r2,0(r2)
10116914:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10116918:	e13ffe17 	ldw	r4,-8(fp)
1011691c:	01058d40 	call	101058d4 <strlen>
10116920:	10800044 	addi	r2,r2,1
10116924:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10116928:	00000d06 	br	10116960 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1011692c:	e0bffc17 	ldw	r2,-16(fp)
10116930:	10800217 	ldw	r2,8(r2)
10116934:	e0fffd17 	ldw	r3,-12(fp)
10116938:	180d883a 	mov	r6,r3
1011693c:	e17ffe17 	ldw	r5,-8(fp)
10116940:	1009883a 	mov	r4,r2
10116944:	01171600 	call	10117160 <memcmp>
10116948:	1000021e 	bne	r2,zero,10116954 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1011694c:	e0bffc17 	ldw	r2,-16(fp)
10116950:	00000706 	br	10116970 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10116954:	e0bffc17 	ldw	r2,-16(fp)
10116958:	10800017 	ldw	r2,0(r2)
1011695c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10116960:	e0fffc17 	ldw	r3,-16(fp)
10116964:	e0bfff17 	ldw	r2,-4(fp)
10116968:	18bff01e 	bne	r3,r2,1011692c <_gp+0xffff5158>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1011696c:	0005883a 	mov	r2,zero
}
10116970:	e037883a 	mov	sp,fp
10116974:	dfc00117 	ldw	ra,4(sp)
10116978:	df000017 	ldw	fp,0(sp)
1011697c:	dec00204 	addi	sp,sp,8
10116980:	f800283a 	ret

10116984 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10116984:	defffb04 	addi	sp,sp,-20
10116988:	dfc00415 	stw	ra,16(sp)
1011698c:	df000315 	stw	fp,12(sp)
10116990:	df000304 	addi	fp,sp,12
10116994:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10116998:	d0a00617 	ldw	r2,-32744(gp)
1011699c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101169a0:	00003106 	br	10116a68 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
101169a4:	e0bffd17 	ldw	r2,-12(fp)
101169a8:	10800217 	ldw	r2,8(r2)
101169ac:	1009883a 	mov	r4,r2
101169b0:	01058d40 	call	101058d4 <strlen>
101169b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
101169b8:	e0bffd17 	ldw	r2,-12(fp)
101169bc:	10c00217 	ldw	r3,8(r2)
101169c0:	e0bffe17 	ldw	r2,-8(fp)
101169c4:	10bfffc4 	addi	r2,r2,-1
101169c8:	1885883a 	add	r2,r3,r2
101169cc:	10800003 	ldbu	r2,0(r2)
101169d0:	10803fcc 	andi	r2,r2,255
101169d4:	1080201c 	xori	r2,r2,128
101169d8:	10bfe004 	addi	r2,r2,-128
101169dc:	10800bd8 	cmpnei	r2,r2,47
101169e0:	1000031e 	bne	r2,zero,101169f0 <alt_find_file+0x6c>
    {
      len -= 1;
101169e4:	e0bffe17 	ldw	r2,-8(fp)
101169e8:	10bfffc4 	addi	r2,r2,-1
101169ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
101169f0:	e0bffe17 	ldw	r2,-8(fp)
101169f4:	e0ffff17 	ldw	r3,-4(fp)
101169f8:	1885883a 	add	r2,r3,r2
101169fc:	10800003 	ldbu	r2,0(r2)
10116a00:	10803fcc 	andi	r2,r2,255
10116a04:	1080201c 	xori	r2,r2,128
10116a08:	10bfe004 	addi	r2,r2,-128
10116a0c:	10800be0 	cmpeqi	r2,r2,47
10116a10:	1000081e 	bne	r2,zero,10116a34 <alt_find_file+0xb0>
10116a14:	e0bffe17 	ldw	r2,-8(fp)
10116a18:	e0ffff17 	ldw	r3,-4(fp)
10116a1c:	1885883a 	add	r2,r3,r2
10116a20:	10800003 	ldbu	r2,0(r2)
10116a24:	10803fcc 	andi	r2,r2,255
10116a28:	1080201c 	xori	r2,r2,128
10116a2c:	10bfe004 	addi	r2,r2,-128
10116a30:	10000a1e 	bne	r2,zero,10116a5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10116a34:	e0bffd17 	ldw	r2,-12(fp)
10116a38:	10800217 	ldw	r2,8(r2)
10116a3c:	e0fffe17 	ldw	r3,-8(fp)
10116a40:	180d883a 	mov	r6,r3
10116a44:	e17fff17 	ldw	r5,-4(fp)
10116a48:	1009883a 	mov	r4,r2
10116a4c:	01171600 	call	10117160 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10116a50:	1000021e 	bne	r2,zero,10116a5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10116a54:	e0bffd17 	ldw	r2,-12(fp)
10116a58:	00000706 	br	10116a78 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10116a5c:	e0bffd17 	ldw	r2,-12(fp)
10116a60:	10800017 	ldw	r2,0(r2)
10116a64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10116a68:	e0fffd17 	ldw	r3,-12(fp)
10116a6c:	d0a00604 	addi	r2,gp,-32744
10116a70:	18bfcc1e 	bne	r3,r2,101169a4 <_gp+0xffff51d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10116a74:	0005883a 	mov	r2,zero
}
10116a78:	e037883a 	mov	sp,fp
10116a7c:	dfc00117 	ldw	ra,4(sp)
10116a80:	df000017 	ldw	fp,0(sp)
10116a84:	dec00204 	addi	sp,sp,8
10116a88:	f800283a 	ret

10116a8c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10116a8c:	defffc04 	addi	sp,sp,-16
10116a90:	df000315 	stw	fp,12(sp)
10116a94:	df000304 	addi	fp,sp,12
10116a98:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10116a9c:	e0bfff17 	ldw	r2,-4(fp)
10116aa0:	10800217 	ldw	r2,8(r2)
10116aa4:	1000021e 	bne	r2,zero,10116ab0 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10116aa8:	00bffb44 	movi	r2,-19
10116aac:	00001306 	br	10116afc <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10116ab0:	e0bfff17 	ldw	r2,-4(fp)
10116ab4:	d0e00604 	addi	r3,gp,-32744
10116ab8:	e0fffd15 	stw	r3,-12(fp)
10116abc:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10116ac0:	e0bffe17 	ldw	r2,-8(fp)
10116ac4:	e0fffd17 	ldw	r3,-12(fp)
10116ac8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10116acc:	e0bffd17 	ldw	r2,-12(fp)
10116ad0:	10c00017 	ldw	r3,0(r2)
10116ad4:	e0bffe17 	ldw	r2,-8(fp)
10116ad8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10116adc:	e0bffd17 	ldw	r2,-12(fp)
10116ae0:	10800017 	ldw	r2,0(r2)
10116ae4:	e0fffe17 	ldw	r3,-8(fp)
10116ae8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10116aec:	e0bffd17 	ldw	r2,-12(fp)
10116af0:	e0fffe17 	ldw	r3,-8(fp)
10116af4:	10c00015 	stw	r3,0(r2)

  return 0;
10116af8:	0005883a 	mov	r2,zero
} 
10116afc:	e037883a 	mov	sp,fp
10116b00:	df000017 	ldw	fp,0(sp)
10116b04:	dec00104 	addi	sp,sp,4
10116b08:	f800283a 	ret

10116b0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10116b0c:	defffc04 	addi	sp,sp,-16
10116b10:	df000315 	stw	fp,12(sp)
10116b14:	df000304 	addi	fp,sp,12
10116b18:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10116b1c:	00bffa04 	movi	r2,-24
10116b20:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10116b24:	e03ffd15 	stw	zero,-12(fp)
10116b28:	00001906 	br	10116b90 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10116b2c:	008404b4 	movhi	r2,4114
10116b30:	10a17304 	addi	r2,r2,-31284
10116b34:	e0fffd17 	ldw	r3,-12(fp)
10116b38:	18c00324 	muli	r3,r3,12
10116b3c:	10c5883a 	add	r2,r2,r3
10116b40:	10800017 	ldw	r2,0(r2)
10116b44:	10000f1e 	bne	r2,zero,10116b84 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10116b48:	008404b4 	movhi	r2,4114
10116b4c:	10a17304 	addi	r2,r2,-31284
10116b50:	e0fffd17 	ldw	r3,-12(fp)
10116b54:	18c00324 	muli	r3,r3,12
10116b58:	10c5883a 	add	r2,r2,r3
10116b5c:	e0ffff17 	ldw	r3,-4(fp)
10116b60:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10116b64:	d0e00a17 	ldw	r3,-32728(gp)
10116b68:	e0bffd17 	ldw	r2,-12(fp)
10116b6c:	1880020e 	bge	r3,r2,10116b78 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10116b70:	e0bffd17 	ldw	r2,-12(fp)
10116b74:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10116b78:	e0bffd17 	ldw	r2,-12(fp)
10116b7c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10116b80:	00000606 	br	10116b9c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10116b84:	e0bffd17 	ldw	r2,-12(fp)
10116b88:	10800044 	addi	r2,r2,1
10116b8c:	e0bffd15 	stw	r2,-12(fp)
10116b90:	e0bffd17 	ldw	r2,-12(fp)
10116b94:	10800810 	cmplti	r2,r2,32
10116b98:	103fe41e 	bne	r2,zero,10116b2c <_gp+0xffff5358>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10116b9c:	e0bffe17 	ldw	r2,-8(fp)
}
10116ba0:	e037883a 	mov	sp,fp
10116ba4:	df000017 	ldw	fp,0(sp)
10116ba8:	dec00104 	addi	sp,sp,4
10116bac:	f800283a 	ret

10116bb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10116bb0:	defffe04 	addi	sp,sp,-8
10116bb4:	dfc00115 	stw	ra,4(sp)
10116bb8:	df000015 	stw	fp,0(sp)
10116bbc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10116bc0:	01440004 	movi	r5,4096
10116bc4:	0009883a 	mov	r4,zero
10116bc8:	0116fe80 	call	10116fe8 <alt_icache_flush>
#endif
}
10116bcc:	0001883a 	nop
10116bd0:	e037883a 	mov	sp,fp
10116bd4:	dfc00117 	ldw	ra,4(sp)
10116bd8:	df000017 	ldw	fp,0(sp)
10116bdc:	dec00204 	addi	sp,sp,8
10116be0:	f800283a 	ret

10116be4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10116be4:	defff904 	addi	sp,sp,-28
10116be8:	dfc00615 	stw	ra,24(sp)
10116bec:	df000515 	stw	fp,20(sp)
10116bf0:	df000504 	addi	fp,sp,20
10116bf4:	e13ffc15 	stw	r4,-16(fp)
10116bf8:	e17ffd15 	stw	r5,-12(fp)
10116bfc:	e1bffe15 	stw	r6,-8(fp)
10116c00:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10116c04:	e0800217 	ldw	r2,8(fp)
10116c08:	d8800015 	stw	r2,0(sp)
10116c0c:	e1ffff17 	ldw	r7,-4(fp)
10116c10:	e1bffe17 	ldw	r6,-8(fp)
10116c14:	e17ffd17 	ldw	r5,-12(fp)
10116c18:	e13ffc17 	ldw	r4,-16(fp)
10116c1c:	0116d940 	call	10116d94 <alt_iic_isr_register>
}  
10116c20:	e037883a 	mov	sp,fp
10116c24:	dfc00117 	ldw	ra,4(sp)
10116c28:	df000017 	ldw	fp,0(sp)
10116c2c:	dec00204 	addi	sp,sp,8
10116c30:	f800283a 	ret

10116c34 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10116c34:	defff904 	addi	sp,sp,-28
10116c38:	df000615 	stw	fp,24(sp)
10116c3c:	df000604 	addi	fp,sp,24
10116c40:	e13ffe15 	stw	r4,-8(fp)
10116c44:	e17fff15 	stw	r5,-4(fp)
10116c48:	e0bfff17 	ldw	r2,-4(fp)
10116c4c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10116c50:	0005303a 	rdctl	r2,status
10116c54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10116c58:	e0fffb17 	ldw	r3,-20(fp)
10116c5c:	00bfff84 	movi	r2,-2
10116c60:	1884703a 	and	r2,r3,r2
10116c64:	1001703a 	wrctl	status,r2
  
  return context;
10116c68:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10116c6c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10116c70:	00c00044 	movi	r3,1
10116c74:	e0bffa17 	ldw	r2,-24(fp)
10116c78:	1884983a 	sll	r2,r3,r2
10116c7c:	1007883a 	mov	r3,r2
10116c80:	d0a70a17 	ldw	r2,-25560(gp)
10116c84:	1884b03a 	or	r2,r3,r2
10116c88:	d0a70a15 	stw	r2,-25560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10116c8c:	d0a70a17 	ldw	r2,-25560(gp)
10116c90:	100170fa 	wrctl	ienable,r2
10116c94:	e0bffc17 	ldw	r2,-16(fp)
10116c98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10116c9c:	e0bffd17 	ldw	r2,-12(fp)
10116ca0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10116ca4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10116ca8:	0001883a 	nop
}
10116cac:	e037883a 	mov	sp,fp
10116cb0:	df000017 	ldw	fp,0(sp)
10116cb4:	dec00104 	addi	sp,sp,4
10116cb8:	f800283a 	ret

10116cbc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10116cbc:	defff904 	addi	sp,sp,-28
10116cc0:	df000615 	stw	fp,24(sp)
10116cc4:	df000604 	addi	fp,sp,24
10116cc8:	e13ffe15 	stw	r4,-8(fp)
10116ccc:	e17fff15 	stw	r5,-4(fp)
10116cd0:	e0bfff17 	ldw	r2,-4(fp)
10116cd4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10116cd8:	0005303a 	rdctl	r2,status
10116cdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10116ce0:	e0fffb17 	ldw	r3,-20(fp)
10116ce4:	00bfff84 	movi	r2,-2
10116ce8:	1884703a 	and	r2,r3,r2
10116cec:	1001703a 	wrctl	status,r2
  
  return context;
10116cf0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10116cf4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10116cf8:	00c00044 	movi	r3,1
10116cfc:	e0bffa17 	ldw	r2,-24(fp)
10116d00:	1884983a 	sll	r2,r3,r2
10116d04:	0084303a 	nor	r2,zero,r2
10116d08:	1007883a 	mov	r3,r2
10116d0c:	d0a70a17 	ldw	r2,-25560(gp)
10116d10:	1884703a 	and	r2,r3,r2
10116d14:	d0a70a15 	stw	r2,-25560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10116d18:	d0a70a17 	ldw	r2,-25560(gp)
10116d1c:	100170fa 	wrctl	ienable,r2
10116d20:	e0bffc17 	ldw	r2,-16(fp)
10116d24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10116d28:	e0bffd17 	ldw	r2,-12(fp)
10116d2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10116d30:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10116d34:	0001883a 	nop
}
10116d38:	e037883a 	mov	sp,fp
10116d3c:	df000017 	ldw	fp,0(sp)
10116d40:	dec00104 	addi	sp,sp,4
10116d44:	f800283a 	ret

10116d48 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10116d48:	defffc04 	addi	sp,sp,-16
10116d4c:	df000315 	stw	fp,12(sp)
10116d50:	df000304 	addi	fp,sp,12
10116d54:	e13ffe15 	stw	r4,-8(fp)
10116d58:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10116d5c:	000530fa 	rdctl	r2,ienable
10116d60:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10116d64:	00c00044 	movi	r3,1
10116d68:	e0bfff17 	ldw	r2,-4(fp)
10116d6c:	1884983a 	sll	r2,r3,r2
10116d70:	1007883a 	mov	r3,r2
10116d74:	e0bffd17 	ldw	r2,-12(fp)
10116d78:	1884703a 	and	r2,r3,r2
10116d7c:	1004c03a 	cmpne	r2,r2,zero
10116d80:	10803fcc 	andi	r2,r2,255
}
10116d84:	e037883a 	mov	sp,fp
10116d88:	df000017 	ldw	fp,0(sp)
10116d8c:	dec00104 	addi	sp,sp,4
10116d90:	f800283a 	ret

10116d94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10116d94:	defff504 	addi	sp,sp,-44
10116d98:	dfc00a15 	stw	ra,40(sp)
10116d9c:	df000915 	stw	fp,36(sp)
10116da0:	df000904 	addi	fp,sp,36
10116da4:	e13ffc15 	stw	r4,-16(fp)
10116da8:	e17ffd15 	stw	r5,-12(fp)
10116dac:	e1bffe15 	stw	r6,-8(fp)
10116db0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10116db4:	00bffa84 	movi	r2,-22
10116db8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10116dbc:	e0bffd17 	ldw	r2,-12(fp)
10116dc0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10116dc4:	e0bff817 	ldw	r2,-32(fp)
10116dc8:	10800808 	cmpgei	r2,r2,32
10116dcc:	1000271e 	bne	r2,zero,10116e6c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10116dd0:	0005303a 	rdctl	r2,status
10116dd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10116dd8:	e0fffb17 	ldw	r3,-20(fp)
10116ddc:	00bfff84 	movi	r2,-2
10116de0:	1884703a 	and	r2,r3,r2
10116de4:	1001703a 	wrctl	status,r2
  
  return context;
10116de8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10116dec:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10116df0:	008404b4 	movhi	r2,4114
10116df4:	10ad0f04 	addi	r2,r2,-19396
10116df8:	e0fff817 	ldw	r3,-32(fp)
10116dfc:	180690fa 	slli	r3,r3,3
10116e00:	10c5883a 	add	r2,r2,r3
10116e04:	e0fffe17 	ldw	r3,-8(fp)
10116e08:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10116e0c:	008404b4 	movhi	r2,4114
10116e10:	10ad0f04 	addi	r2,r2,-19396
10116e14:	e0fff817 	ldw	r3,-32(fp)
10116e18:	180690fa 	slli	r3,r3,3
10116e1c:	10c5883a 	add	r2,r2,r3
10116e20:	10800104 	addi	r2,r2,4
10116e24:	e0ffff17 	ldw	r3,-4(fp)
10116e28:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10116e2c:	e0bffe17 	ldw	r2,-8(fp)
10116e30:	10000526 	beq	r2,zero,10116e48 <alt_iic_isr_register+0xb4>
10116e34:	e0bff817 	ldw	r2,-32(fp)
10116e38:	100b883a 	mov	r5,r2
10116e3c:	e13ffc17 	ldw	r4,-16(fp)
10116e40:	0116c340 	call	10116c34 <alt_ic_irq_enable>
10116e44:	00000406 	br	10116e58 <alt_iic_isr_register+0xc4>
10116e48:	e0bff817 	ldw	r2,-32(fp)
10116e4c:	100b883a 	mov	r5,r2
10116e50:	e13ffc17 	ldw	r4,-16(fp)
10116e54:	0116cbc0 	call	10116cbc <alt_ic_irq_disable>
10116e58:	e0bff715 	stw	r2,-36(fp)
10116e5c:	e0bffa17 	ldw	r2,-24(fp)
10116e60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10116e64:	e0bff917 	ldw	r2,-28(fp)
10116e68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10116e6c:	e0bff717 	ldw	r2,-36(fp)
}
10116e70:	e037883a 	mov	sp,fp
10116e74:	dfc00117 	ldw	ra,4(sp)
10116e78:	df000017 	ldw	fp,0(sp)
10116e7c:	dec00204 	addi	sp,sp,8
10116e80:	f800283a 	ret

10116e84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10116e84:	defff904 	addi	sp,sp,-28
10116e88:	dfc00615 	stw	ra,24(sp)
10116e8c:	df000515 	stw	fp,20(sp)
10116e90:	df000504 	addi	fp,sp,20
10116e94:	e13ffc15 	stw	r4,-16(fp)
10116e98:	e17ffd15 	stw	r5,-12(fp)
10116e9c:	e1bffe15 	stw	r6,-8(fp)
10116ea0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10116ea4:	e1bfff17 	ldw	r6,-4(fp)
10116ea8:	e17ffe17 	ldw	r5,-8(fp)
10116eac:	e13ffd17 	ldw	r4,-12(fp)
10116eb0:	0114bcc0 	call	10114bcc <open>
10116eb4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10116eb8:	e0bffb17 	ldw	r2,-20(fp)
10116ebc:	10001c16 	blt	r2,zero,10116f30 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10116ec0:	008404b4 	movhi	r2,4114
10116ec4:	10a17304 	addi	r2,r2,-31284
10116ec8:	e0fffb17 	ldw	r3,-20(fp)
10116ecc:	18c00324 	muli	r3,r3,12
10116ed0:	10c5883a 	add	r2,r2,r3
10116ed4:	10c00017 	ldw	r3,0(r2)
10116ed8:	e0bffc17 	ldw	r2,-16(fp)
10116edc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10116ee0:	008404b4 	movhi	r2,4114
10116ee4:	10a17304 	addi	r2,r2,-31284
10116ee8:	e0fffb17 	ldw	r3,-20(fp)
10116eec:	18c00324 	muli	r3,r3,12
10116ef0:	10c5883a 	add	r2,r2,r3
10116ef4:	10800104 	addi	r2,r2,4
10116ef8:	10c00017 	ldw	r3,0(r2)
10116efc:	e0bffc17 	ldw	r2,-16(fp)
10116f00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10116f04:	008404b4 	movhi	r2,4114
10116f08:	10a17304 	addi	r2,r2,-31284
10116f0c:	e0fffb17 	ldw	r3,-20(fp)
10116f10:	18c00324 	muli	r3,r3,12
10116f14:	10c5883a 	add	r2,r2,r3
10116f18:	10800204 	addi	r2,r2,8
10116f1c:	10c00017 	ldw	r3,0(r2)
10116f20:	e0bffc17 	ldw	r2,-16(fp)
10116f24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10116f28:	e13ffb17 	ldw	r4,-20(fp)
10116f2c:	01150c00 	call	101150c0 <alt_release_fd>
  }
} 
10116f30:	0001883a 	nop
10116f34:	e037883a 	mov	sp,fp
10116f38:	dfc00117 	ldw	ra,4(sp)
10116f3c:	df000017 	ldw	fp,0(sp)
10116f40:	dec00204 	addi	sp,sp,8
10116f44:	f800283a 	ret

10116f48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10116f48:	defffb04 	addi	sp,sp,-20
10116f4c:	dfc00415 	stw	ra,16(sp)
10116f50:	df000315 	stw	fp,12(sp)
10116f54:	df000304 	addi	fp,sp,12
10116f58:	e13ffd15 	stw	r4,-12(fp)
10116f5c:	e17ffe15 	stw	r5,-8(fp)
10116f60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10116f64:	01c07fc4 	movi	r7,511
10116f68:	01800044 	movi	r6,1
10116f6c:	e17ffd17 	ldw	r5,-12(fp)
10116f70:	010404b4 	movhi	r4,4114
10116f74:	21217604 	addi	r4,r4,-31272
10116f78:	0116e840 	call	10116e84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10116f7c:	01c07fc4 	movi	r7,511
10116f80:	000d883a 	mov	r6,zero
10116f84:	e17ffe17 	ldw	r5,-8(fp)
10116f88:	010404b4 	movhi	r4,4114
10116f8c:	21217304 	addi	r4,r4,-31284
10116f90:	0116e840 	call	10116e84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10116f94:	01c07fc4 	movi	r7,511
10116f98:	01800044 	movi	r6,1
10116f9c:	e17fff17 	ldw	r5,-4(fp)
10116fa0:	010404b4 	movhi	r4,4114
10116fa4:	21217904 	addi	r4,r4,-31260
10116fa8:	0116e840 	call	10116e84 <alt_open_fd>
}  
10116fac:	0001883a 	nop
10116fb0:	e037883a 	mov	sp,fp
10116fb4:	dfc00117 	ldw	ra,4(sp)
10116fb8:	df000017 	ldw	fp,0(sp)
10116fbc:	dec00204 	addi	sp,sp,8
10116fc0:	f800283a 	ret

10116fc4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10116fc4:	deffff04 	addi	sp,sp,-4
10116fc8:	df000015 	stw	fp,0(sp)
10116fcc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10116fd0:	000170fa 	wrctl	ienable,zero
}
10116fd4:	0001883a 	nop
10116fd8:	e037883a 	mov	sp,fp
10116fdc:	df000017 	ldw	fp,0(sp)
10116fe0:	dec00104 	addi	sp,sp,4
10116fe4:	f800283a 	ret

10116fe8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10116fe8:	defffb04 	addi	sp,sp,-20
10116fec:	df000415 	stw	fp,16(sp)
10116ff0:	df000404 	addi	fp,sp,16
10116ff4:	e13ffe15 	stw	r4,-8(fp)
10116ff8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10116ffc:	e0bfff17 	ldw	r2,-4(fp)
10117000:	10840070 	cmpltui	r2,r2,4097
10117004:	1000021e 	bne	r2,zero,10117010 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10117008:	00840004 	movi	r2,4096
1011700c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10117010:	e0fffe17 	ldw	r3,-8(fp)
10117014:	e0bfff17 	ldw	r2,-4(fp)
10117018:	1885883a 	add	r2,r3,r2
1011701c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10117020:	e0bffe17 	ldw	r2,-8(fp)
10117024:	e0bffc15 	stw	r2,-16(fp)
10117028:	00000506 	br	10117040 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1011702c:	e0bffc17 	ldw	r2,-16(fp)
10117030:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10117034:	e0bffc17 	ldw	r2,-16(fp)
10117038:	10800804 	addi	r2,r2,32
1011703c:	e0bffc15 	stw	r2,-16(fp)
10117040:	e0fffc17 	ldw	r3,-16(fp)
10117044:	e0bffd17 	ldw	r2,-12(fp)
10117048:	18bff836 	bltu	r3,r2,1011702c <_gp+0xffff5858>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
1011704c:	e0bffe17 	ldw	r2,-8(fp)
10117050:	108007cc 	andi	r2,r2,31
10117054:	10000226 	beq	r2,zero,10117060 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10117058:	e0bffc17 	ldw	r2,-16(fp)
1011705c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10117060:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10117064:	0001883a 	nop
10117068:	e037883a 	mov	sp,fp
1011706c:	df000017 	ldw	fp,0(sp)
10117070:	dec00104 	addi	sp,sp,4
10117074:	f800283a 	ret

10117078 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10117078:	defffe04 	addi	sp,sp,-8
1011707c:	df000115 	stw	fp,4(sp)
10117080:	df000104 	addi	fp,sp,4
10117084:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10117088:	e0bfff17 	ldw	r2,-4(fp)
1011708c:	10bffe84 	addi	r2,r2,-6
10117090:	10c00428 	cmpgeui	r3,r2,16
10117094:	18001a1e 	bne	r3,zero,10117100 <alt_exception_cause_generated_bad_addr+0x88>
10117098:	100690ba 	slli	r3,r2,2
1011709c:	00840474 	movhi	r2,4113
101170a0:	109c2c04 	addi	r2,r2,28848
101170a4:	1885883a 	add	r2,r3,r2
101170a8:	10800017 	ldw	r2,0(r2)
101170ac:	1000683a 	jmp	r2
101170b0:	101170f0 	cmpltui	zero,r2,17859
101170b4:	101170f0 	cmpltui	zero,r2,17859
101170b8:	10117100 	call	11011710 <_gp+0xeeff3c>
101170bc:	10117100 	call	11011710 <_gp+0xeeff3c>
101170c0:	10117100 	call	11011710 <_gp+0xeeff3c>
101170c4:	101170f0 	cmpltui	zero,r2,17859
101170c8:	101170f8 	rdprs	zero,r2,17859
101170cc:	10117100 	call	11011710 <_gp+0xeeff3c>
101170d0:	101170f0 	cmpltui	zero,r2,17859
101170d4:	101170f0 	cmpltui	zero,r2,17859
101170d8:	10117100 	call	11011710 <_gp+0xeeff3c>
101170dc:	101170f0 	cmpltui	zero,r2,17859
101170e0:	101170f8 	rdprs	zero,r2,17859
101170e4:	10117100 	call	11011710 <_gp+0xeeff3c>
101170e8:	10117100 	call	11011710 <_gp+0xeeff3c>
101170ec:	101170f0 	cmpltui	zero,r2,17859
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
101170f0:	00800044 	movi	r2,1
101170f4:	00000306 	br	10117104 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
101170f8:	0005883a 	mov	r2,zero
101170fc:	00000106 	br	10117104 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10117100:	0005883a 	mov	r2,zero
  }
}
10117104:	e037883a 	mov	sp,fp
10117108:	df000017 	ldw	fp,0(sp)
1011710c:	dec00104 	addi	sp,sp,4
10117110:	f800283a 	ret

10117114 <atexit>:
10117114:	200b883a 	mov	r5,r4
10117118:	000f883a 	mov	r7,zero
1011711c:	000d883a 	mov	r6,zero
10117120:	0009883a 	mov	r4,zero
10117124:	01171dc1 	jmpi	101171dc <__register_exitproc>

10117128 <exit>:
10117128:	defffe04 	addi	sp,sp,-8
1011712c:	000b883a 	mov	r5,zero
10117130:	dc000015 	stw	r16,0(sp)
10117134:	dfc00115 	stw	ra,4(sp)
10117138:	2021883a 	mov	r16,r4
1011713c:	01172f40 	call	101172f4 <__call_exitprocs>
10117140:	008404b4 	movhi	r2,4114
10117144:	10a5f504 	addi	r2,r2,-26668
10117148:	11000017 	ldw	r4,0(r2)
1011714c:	20800f17 	ldw	r2,60(r4)
10117150:	10000126 	beq	r2,zero,10117158 <exit+0x30>
10117154:	103ee83a 	callr	r2
10117158:	8009883a 	mov	r4,r16
1011715c:	011428c0 	call	1011428c <_exit>

10117160 <memcmp>:
10117160:	01c000c4 	movi	r7,3
10117164:	3980192e 	bgeu	r7,r6,101171cc <memcmp+0x6c>
10117168:	2144b03a 	or	r2,r4,r5
1011716c:	11c4703a 	and	r2,r2,r7
10117170:	10000f26 	beq	r2,zero,101171b0 <memcmp+0x50>
10117174:	20800003 	ldbu	r2,0(r4)
10117178:	28c00003 	ldbu	r3,0(r5)
1011717c:	10c0151e 	bne	r2,r3,101171d4 <memcmp+0x74>
10117180:	31bfff84 	addi	r6,r6,-2
10117184:	01ffffc4 	movi	r7,-1
10117188:	00000406 	br	1011719c <memcmp+0x3c>
1011718c:	20800003 	ldbu	r2,0(r4)
10117190:	28c00003 	ldbu	r3,0(r5)
10117194:	31bfffc4 	addi	r6,r6,-1
10117198:	10c00e1e 	bne	r2,r3,101171d4 <memcmp+0x74>
1011719c:	21000044 	addi	r4,r4,1
101171a0:	29400044 	addi	r5,r5,1
101171a4:	31fff91e 	bne	r6,r7,1011718c <_gp+0xffff59b8>
101171a8:	0005883a 	mov	r2,zero
101171ac:	f800283a 	ret
101171b0:	20c00017 	ldw	r3,0(r4)
101171b4:	28800017 	ldw	r2,0(r5)
101171b8:	18bfee1e 	bne	r3,r2,10117174 <_gp+0xffff59a0>
101171bc:	31bfff04 	addi	r6,r6,-4
101171c0:	21000104 	addi	r4,r4,4
101171c4:	29400104 	addi	r5,r5,4
101171c8:	39bff936 	bltu	r7,r6,101171b0 <_gp+0xffff59dc>
101171cc:	303fe91e 	bne	r6,zero,10117174 <_gp+0xffff59a0>
101171d0:	003ff506 	br	101171a8 <_gp+0xffff59d4>
101171d4:	10c5c83a 	sub	r2,r2,r3
101171d8:	f800283a 	ret

101171dc <__register_exitproc>:
101171dc:	defffa04 	addi	sp,sp,-24
101171e0:	dc000315 	stw	r16,12(sp)
101171e4:	040404b4 	movhi	r16,4114
101171e8:	8425f504 	addi	r16,r16,-26668
101171ec:	80c00017 	ldw	r3,0(r16)
101171f0:	dc400415 	stw	r17,16(sp)
101171f4:	dfc00515 	stw	ra,20(sp)
101171f8:	18805217 	ldw	r2,328(r3)
101171fc:	2023883a 	mov	r17,r4
10117200:	10003726 	beq	r2,zero,101172e0 <__register_exitproc+0x104>
10117204:	10c00117 	ldw	r3,4(r2)
10117208:	010007c4 	movi	r4,31
1011720c:	20c00e16 	blt	r4,r3,10117248 <__register_exitproc+0x6c>
10117210:	1a000044 	addi	r8,r3,1
10117214:	8800221e 	bne	r17,zero,101172a0 <__register_exitproc+0xc4>
10117218:	18c00084 	addi	r3,r3,2
1011721c:	18c7883a 	add	r3,r3,r3
10117220:	18c7883a 	add	r3,r3,r3
10117224:	12000115 	stw	r8,4(r2)
10117228:	10c7883a 	add	r3,r2,r3
1011722c:	19400015 	stw	r5,0(r3)
10117230:	0005883a 	mov	r2,zero
10117234:	dfc00517 	ldw	ra,20(sp)
10117238:	dc400417 	ldw	r17,16(sp)
1011723c:	dc000317 	ldw	r16,12(sp)
10117240:	dec00604 	addi	sp,sp,24
10117244:	f800283a 	ret
10117248:	00800034 	movhi	r2,0
1011724c:	10800004 	addi	r2,r2,0
10117250:	10002626 	beq	r2,zero,101172ec <__register_exitproc+0x110>
10117254:	01006404 	movi	r4,400
10117258:	d9400015 	stw	r5,0(sp)
1011725c:	d9800115 	stw	r6,4(sp)
10117260:	d9c00215 	stw	r7,8(sp)
10117264:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10117268:	d9400017 	ldw	r5,0(sp)
1011726c:	d9800117 	ldw	r6,4(sp)
10117270:	d9c00217 	ldw	r7,8(sp)
10117274:	10001d26 	beq	r2,zero,101172ec <__register_exitproc+0x110>
10117278:	81000017 	ldw	r4,0(r16)
1011727c:	10000115 	stw	zero,4(r2)
10117280:	02000044 	movi	r8,1
10117284:	22405217 	ldw	r9,328(r4)
10117288:	0007883a 	mov	r3,zero
1011728c:	12400015 	stw	r9,0(r2)
10117290:	20805215 	stw	r2,328(r4)
10117294:	10006215 	stw	zero,392(r2)
10117298:	10006315 	stw	zero,396(r2)
1011729c:	883fde26 	beq	r17,zero,10117218 <_gp+0xffff5a44>
101172a0:	18c9883a 	add	r4,r3,r3
101172a4:	2109883a 	add	r4,r4,r4
101172a8:	1109883a 	add	r4,r2,r4
101172ac:	21802215 	stw	r6,136(r4)
101172b0:	01800044 	movi	r6,1
101172b4:	12406217 	ldw	r9,392(r2)
101172b8:	30cc983a 	sll	r6,r6,r3
101172bc:	4992b03a 	or	r9,r9,r6
101172c0:	12406215 	stw	r9,392(r2)
101172c4:	21c04215 	stw	r7,264(r4)
101172c8:	01000084 	movi	r4,2
101172cc:	893fd21e 	bne	r17,r4,10117218 <_gp+0xffff5a44>
101172d0:	11006317 	ldw	r4,396(r2)
101172d4:	218cb03a 	or	r6,r4,r6
101172d8:	11806315 	stw	r6,396(r2)
101172dc:	003fce06 	br	10117218 <_gp+0xffff5a44>
101172e0:	18805304 	addi	r2,r3,332
101172e4:	18805215 	stw	r2,328(r3)
101172e8:	003fc606 	br	10117204 <_gp+0xffff5a30>
101172ec:	00bfffc4 	movi	r2,-1
101172f0:	003fd006 	br	10117234 <_gp+0xffff5a60>

101172f4 <__call_exitprocs>:
101172f4:	defff504 	addi	sp,sp,-44
101172f8:	df000915 	stw	fp,36(sp)
101172fc:	dd400615 	stw	r21,24(sp)
10117300:	dc800315 	stw	r18,12(sp)
10117304:	dfc00a15 	stw	ra,40(sp)
10117308:	ddc00815 	stw	r23,32(sp)
1011730c:	dd800715 	stw	r22,28(sp)
10117310:	dd000515 	stw	r20,20(sp)
10117314:	dcc00415 	stw	r19,16(sp)
10117318:	dc400215 	stw	r17,8(sp)
1011731c:	dc000115 	stw	r16,4(sp)
10117320:	d9000015 	stw	r4,0(sp)
10117324:	2839883a 	mov	fp,r5
10117328:	04800044 	movi	r18,1
1011732c:	057fffc4 	movi	r21,-1
10117330:	008404b4 	movhi	r2,4114
10117334:	10a5f504 	addi	r2,r2,-26668
10117338:	12000017 	ldw	r8,0(r2)
1011733c:	45005217 	ldw	r20,328(r8)
10117340:	44c05204 	addi	r19,r8,328
10117344:	a0001c26 	beq	r20,zero,101173b8 <__call_exitprocs+0xc4>
10117348:	a0800117 	ldw	r2,4(r20)
1011734c:	15ffffc4 	addi	r23,r2,-1
10117350:	b8000d16 	blt	r23,zero,10117388 <__call_exitprocs+0x94>
10117354:	14000044 	addi	r16,r2,1
10117358:	8421883a 	add	r16,r16,r16
1011735c:	8421883a 	add	r16,r16,r16
10117360:	84402004 	addi	r17,r16,128
10117364:	a463883a 	add	r17,r20,r17
10117368:	a421883a 	add	r16,r20,r16
1011736c:	e0001e26 	beq	fp,zero,101173e8 <__call_exitprocs+0xf4>
10117370:	80804017 	ldw	r2,256(r16)
10117374:	e0801c26 	beq	fp,r2,101173e8 <__call_exitprocs+0xf4>
10117378:	bdffffc4 	addi	r23,r23,-1
1011737c:	843fff04 	addi	r16,r16,-4
10117380:	8c7fff04 	addi	r17,r17,-4
10117384:	bd7ff91e 	bne	r23,r21,1011736c <_gp+0xffff5b98>
10117388:	00800034 	movhi	r2,0
1011738c:	10800004 	addi	r2,r2,0
10117390:	10000926 	beq	r2,zero,101173b8 <__call_exitprocs+0xc4>
10117394:	a0800117 	ldw	r2,4(r20)
10117398:	1000301e 	bne	r2,zero,1011745c <__call_exitprocs+0x168>
1011739c:	a0800017 	ldw	r2,0(r20)
101173a0:	10003226 	beq	r2,zero,1011746c <__call_exitprocs+0x178>
101173a4:	a009883a 	mov	r4,r20
101173a8:	98800015 	stw	r2,0(r19)
101173ac:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101173b0:	9d000017 	ldw	r20,0(r19)
101173b4:	a03fe41e 	bne	r20,zero,10117348 <_gp+0xffff5b74>
101173b8:	dfc00a17 	ldw	ra,40(sp)
101173bc:	df000917 	ldw	fp,36(sp)
101173c0:	ddc00817 	ldw	r23,32(sp)
101173c4:	dd800717 	ldw	r22,28(sp)
101173c8:	dd400617 	ldw	r21,24(sp)
101173cc:	dd000517 	ldw	r20,20(sp)
101173d0:	dcc00417 	ldw	r19,16(sp)
101173d4:	dc800317 	ldw	r18,12(sp)
101173d8:	dc400217 	ldw	r17,8(sp)
101173dc:	dc000117 	ldw	r16,4(sp)
101173e0:	dec00b04 	addi	sp,sp,44
101173e4:	f800283a 	ret
101173e8:	a0800117 	ldw	r2,4(r20)
101173ec:	80c00017 	ldw	r3,0(r16)
101173f0:	10bfffc4 	addi	r2,r2,-1
101173f4:	15c01426 	beq	r2,r23,10117448 <__call_exitprocs+0x154>
101173f8:	80000015 	stw	zero,0(r16)
101173fc:	183fde26 	beq	r3,zero,10117378 <_gp+0xffff5ba4>
10117400:	95c8983a 	sll	r4,r18,r23
10117404:	a0806217 	ldw	r2,392(r20)
10117408:	a5800117 	ldw	r22,4(r20)
1011740c:	2084703a 	and	r2,r4,r2
10117410:	10000b26 	beq	r2,zero,10117440 <__call_exitprocs+0x14c>
10117414:	a0806317 	ldw	r2,396(r20)
10117418:	2088703a 	and	r4,r4,r2
1011741c:	20000c1e 	bne	r4,zero,10117450 <__call_exitprocs+0x15c>
10117420:	89400017 	ldw	r5,0(r17)
10117424:	d9000017 	ldw	r4,0(sp)
10117428:	183ee83a 	callr	r3
1011742c:	a0800117 	ldw	r2,4(r20)
10117430:	15bfbf1e 	bne	r2,r22,10117330 <_gp+0xffff5b5c>
10117434:	98800017 	ldw	r2,0(r19)
10117438:	153fcf26 	beq	r2,r20,10117378 <_gp+0xffff5ba4>
1011743c:	003fbc06 	br	10117330 <_gp+0xffff5b5c>
10117440:	183ee83a 	callr	r3
10117444:	003ff906 	br	1011742c <_gp+0xffff5c58>
10117448:	a5c00115 	stw	r23,4(r20)
1011744c:	003feb06 	br	101173fc <_gp+0xffff5c28>
10117450:	89000017 	ldw	r4,0(r17)
10117454:	183ee83a 	callr	r3
10117458:	003ff406 	br	1011742c <_gp+0xffff5c58>
1011745c:	a0800017 	ldw	r2,0(r20)
10117460:	a027883a 	mov	r19,r20
10117464:	1029883a 	mov	r20,r2
10117468:	003fb606 	br	10117344 <_gp+0xffff5b70>
1011746c:	0005883a 	mov	r2,zero
10117470:	003ffb06 	br	10117460 <_gp+0xffff5c8c>
